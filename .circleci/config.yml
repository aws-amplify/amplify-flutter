version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/android:api-28
    working_directory: ~/amplify-flutter

  macos-executor:
    macos:
      xcode: 12.2.0
    working_directory: ~/amplify-flutter

commands:
  install_flutter:
    description: Install Flutter and set up paths.
    parameters:
      flutter_branch:
        description: Flutter branch or version tag.
        type: string
        default: stable
    steps:
      - run:
          name: Set up Flutter
          command: |
            echo 'export FLUTTER_HOME=${HOME}/sdks/flutter' >> $BASH_ENV
            echo 'export FLUTTER_BRANCH=<< parameters.flutter_branch >>' >> $BASH_ENV
            echo 'export FLUTTER_ROOT=${FLUTTER_HOME}' >> $BASH_ENV
            echo 'export PATH=${PATH}:${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin:${HOME}/.pub-cache/bin:${FLUTTER_HOME}/.pub-cache/bin' >> $BASH_ENV
            source $BASH_ENV
            git clone --branch ${FLUTTER_BRANCH} https://github.com/flutter/flutter.git ${FLUTTER_HOME}
            (yes || true) | flutter doctor --android-licenses && flutter doctor
            flutter precache

  install_melos:
    steps:
      - run:
          name: Install and set up melos
          command: |
            pub global activate melos 0.4.5
            melos bootstrap

jobs:
  format_analyze:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - install_melos
      - run: melos run format
      - run:
          name: Validate formatting
          command: ./.circleci/validate_formatting.sh
      - run: melos run analyze

  unit_test_flutter:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - install_melos
      - run:
          name: Install junitreport for JUnit XML reports
          command: flutter pub global activate junitreport
      - run:
          name: Run Flutter Unit Tests
          command: melos run test:unit:flutter
      - run:
          name: Upload flutter test coverage
          command: melos run upload:coverage:flutter
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/test-results/.*-flutter-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unit_test_ios:
    executor: macos-executor
    steps:
      - install_flutter
      - checkout
      - install_melos
      - run:
          name: Pre-start iOS simulator
          # xcrun instruments returns non zero, but successfully starts the simulator
          command: xcrun instruments -w "iPhone 11 (14.2) [" || true
      - run:
          name: Build example iOS apps
          command: |
            melos run build:examples:ios
      - run:
          name: Run iOS Unit Tests
          command: melos run test:unit:ios
      - run:
          name: Upload iOS test coverage
          command: melos run upload:coverage:ios
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/ios/test-results/.*-xcodebuild-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unit_test_android:
    executor: docker-executor
    environment:
      _JAVA_OPTIONS: -XX:MaxRAMPercentage=80.0
      GRADLE_OPTS: -Xmx1536m -Xms768m -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.daemon=false
    steps:
      - install_flutter
      - checkout
      - install_melos
      - run:
          name: Build example APKs
          command: |
            melos run build:examples:android
          no_output_timeout: 20m
      - run:
          name: Run Android Unit Tests
          command: melos run test:unit:android
      - run:
          name: Upload android test coverage
          command: melos run upload:coverage:android
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/build/.*/test-results/.*\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

releasable_branches: &releasable_branches
  branches:
    only:
      - release
      - master

workflows:
  test_deploy:
    jobs:
      - unit_test_flutter
      - unit_test_android
      - unit_test_ios
