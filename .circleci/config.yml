version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/android:api-28
    working_directory: ~/amplify-flutter

  macos-executor:
    macos:
      xcode: 11.6.0
    working_directory: ~/amplify-flutter

  publish-executor:
    docker:
      - image: circleci/ruby:2.6.6
    working_directory: ~/amplify-flutter

commands:
  install_flutter:
    description:
      Install Flutter and set up paths.
    parameters:
      flutter_branch:
        description: Flutter branch or version tag.
        type: string
        default: stable
    steps:
      - run:
          name: Set up Flutter
          command: |
            echo 'export FLUTTER_HOME=${HOME}/sdks/flutter' >> $BASH_ENV
            echo 'export FLUTTER_BRANCH=<< parameters.flutter_branch >>' >> $BASH_ENV
            echo 'export FLUTTER_ROOT=${FLUTTER_HOME}' >> $BASH_ENV
            echo 'export PATH=${PATH}:${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin:${HOME}/.pub-cache/bin:${FLUTTER_HOME}/.pub-cache/bin' >> $BASH_ENV
            source $BASH_ENV
            git clone --branch ${FLUTTER_BRANCH} https://github.com/flutter/flutter.git ${FLUTTER_HOME}
            (yes || true) | flutter doctor --android-licenses && flutter doctor

  write_oauth_tokens:
    description:
      Write OAuth tokens to ~/.pub-cache/credentials.json
    steps:
      - run:
          name: Write Google OAuth Token
          command: |
            mkdir -p ~/.pub-cache
            cat \<<EOF > ~/.pub-cache/credentials.json
            {
              "accessToken":"$OAUTH_ACCESS_TOKEN",
              "refreshToken":"$OAUTH_REFRESH_TOKEN",
              "tokenEndpoint":"https://accounts.google.com/o/oauth2/token",
              "scopes": [ "openid", "https://www.googleapis.com/auth/userinfo.email" ],
              "expiration": $OAUTH_EXPIRATION
            }
            EOF

jobs:
  unit_test_flutter:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - run:
          name: Install junitreport for JUnit XML reports
          command: flutter pub global activate junitreport
      - run:
          name: Run Flutter Unit Tests
          command: ./.circleci/test_all_plugins.sh flutter-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/test-results/.*-flutter-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unit_test_ios:
    executor: macos-executor
    steps:
      - install_flutter:
          flutter_branch: 1.17.5
      - checkout
      - run:
          name: Pre-start iOS simulator
          # xcrun instruments returns non zero, but successfully starts the simulator
          command: xcrun instruments -w "iPhone 11 (13.6) [" || true
      - run:
          name: Run iOS Unit Tests
          command: ./.circleci/test_all_plugins.sh ios-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/ios/test-results/.*-xcodebuild-test\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  unit_test_android:
    executor: docker-executor
    steps:
      - install_flutter
      - checkout
      - run:
          name: Run Android Unit Tests
          command: ./.circleci/test_all_plugins.sh android-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex "\./packages/.*/example/build/.*/test-results/.*\.xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

  publish_unstable:
    executor: publish-executor
    steps:
      - install_flutter
      - checkout
      - write_oauth_tokens
      - run: gem install bundler
      - run: bundle install
      - run: bundle exec fastlane unstable

  push_to_release:
    executor: docker-executor
    steps:
      - checkout
      - run: git checkout release && git merge master
      - run: git push origin release

  publish_stable:
    executor: publish-executor
    steps:
      - install_flutter
      - checkout
      - write_oauth_tokens
      - run: gem install bundler
      - run: bundle install
      - run: bundle exec fastlane stable

releasable_branches: &releasable_branches
  branches:
    only:
      - release
      - master

workflows:
  test_deploy:
    jobs:
      - unit_test_flutter
      - unit_test_android
      - request_publish_unstable:
          type: approval
          requires:
            - unit_test_flutter
            - unit_test_android
          filters:
            branches:
              only:
                - master
      - publish_unstable:
          requires:
            - request_publish_unstable
      - request_publish_stable:
          type: approval
          requires:
            - publish_unstable
      - push_to_release:
          requires:
            - request_publish_stable
      - publish_stable:
          requires:
            - unit_test_flutter
            - unit_test_android
          filters:
            branches:
              only:
                - release
