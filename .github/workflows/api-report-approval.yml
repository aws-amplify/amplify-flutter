name: API Report Approval

on:
  pull_request:
    branches:
      - main
    paths:
      - 'packages/aft/api_reports/*.api.json'

jobs:
  label-api-changes:
    name: Label API Changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for API changes
        id: check-api-changes
        run: |
          # Check for changes in API JSON files
          API_JSON_CHANGES=$(git diff --name-only origin/main...HEAD | grep -E 'packages/aft/api_reports/.*\.api\.json' || true)
          
          if [[ -n "$API_JSON_CHANGES" ]]; then
            echo "API_CHANGES_DETECTED=true" >> $GITHUB_ENV
            echo "API changes detected in the following files:"
            echo "$API_JSON_CHANGES"
          else
            echo "API_CHANGES_DETECTED=false" >> $GITHUB_ENV
            echo "No API changes detected."
          fi

      - name: Add API changes label
        if: env.API_CHANGES_DETECTED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['api-changes']
            })
            
      - name: Comment on PR
        if: env.API_CHANGES_DETECTED == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if we already commented about API changes
            const commentMarker = '⚠️ This PR contains API changes';
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Look for an existing comment with our marker
            const apiChangeComment = comments.find(comment => 
              comment.body.includes(commentMarker) && 
              comment.user.login === 'github-actions[bot]'
            );
            
            // Only create a comment if we haven't already
            if (!apiChangeComment) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '⚠️ This PR contains API changes and requires careful review. Please ensure these changes are intentional and backward compatible where possible.'
              });
            } else {
              console.log('API changes comment already exists, skipping comment creation');
            }