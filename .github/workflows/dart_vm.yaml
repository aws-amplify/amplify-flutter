name: Dart (VM)
on:
  workflow_call:
    inputs:
      package-name:
        description: The name of the package being tested
        required: true
        type: string
      working-directory:
        description: The working directory relative to the repo root
        required: true
        type: string

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      # Allows other matrix items to run if one fails
      fail-fast: false
      matrix:
        sdk:
          # Minimum supported Dart version
          - "3.0.1"
          - stable
          - beta
    steps:
      - name: Cache Pub dependencies
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # 3.3.1
        with:
          path: |
            ~/.pub-cache/hosted
            ~/.pub-cache/git
          key: os:ubuntu-latest;sdk:${{ matrix.sdk }};packages:${{ inputs.working-directory }}
          restore-keys: |
            os:ubuntu-latest;sdk:${{ matrix.sdk }};packages:${{ inputs.working-directory }}
            os:ubuntu-latest;sdk:${{ matrix.sdk }}
            os:ubuntu-latest

      - name: Git Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # 3.5.3

      - name: Git Submodules
        run: git submodule update --init

      # Some Dart packages require Flutter to be available, for example `amplify_core`
      # requires it for its `doc` package. Running this before "Setup Dart" means that
      # the `dart` executable in PATH will always be the one setup by "Setup Dart".
      #
      # TODO(dnys1): Create mapping of Flutter->Dart versions so we can just use Dart
      # vended by Flutter.
      - name: Setup Flutter
        uses: subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa # 2.10.0
        with:
          cache: true
          channel: stable

      - name: Setup Dart
        uses: dart-lang/setup-dart@deafe40ee7284c48e67c783c88eed8c8b52b19ca # main
        with:
          sdk: ${{ matrix.sdk }}

      - name: Dart Version
        run: dart --version

      - name: Setup aft
        shell: bash # Run in bash regardless of platform
        run: dart pub global activate -spath packages/aft

      - name: Bootstrap
        id: bootstrap
        timeout-minutes: 20
        run: aft bootstrap --fail-fast --include=${{ inputs.package-name }} --verbose

      - name: Check Formatting
        if: "always() && steps.bootstrap.conclusion == 'success' && matrix.sdk == 'stable'"
        run: dart format --set-exit-if-changed .
        working-directory: ${{ inputs.working-directory }}

      - name: Check for Tests
        id: testCheck
        if: "always() && steps.bootstrap.conclusion == 'success'"
        shell: bash # Run in bash regardless of platform
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -d test ]; then
            echo "hasTests=true" >> $GITHUB_OUTPUT
          else
            echo "hasTests=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Package
        if: "always() && steps.bootstrap.conclusion == 'success'"
        shell: bash # Run in bash regardless of platform
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -e tool/setup.sh ]; then
            ./tool/setup.sh
          fi

      - name: Analyze
        if: "always() && steps.bootstrap.conclusion == 'success'"
        run: dart analyze --fatal-infos --fatal-warnings .
        working-directory: ${{ inputs.working-directory }}

      - name: Run Tests (stable)
        if: "always() && steps.bootstrap.conclusion == 'success' && steps.testCheck.outputs.hasTests == 'true' && matrix.sdk == 'stable'"
        run: dart test
        working-directory: ${{ inputs.working-directory }}

        # Non-stable test runs do not need to verify `build` tags since the generated code in the repo is updated using `build_runner` on `stable`.
      - name: Run Tests (non-stable)
        if: "always() && steps.bootstrap.conclusion == 'success' && steps.testCheck.outputs.hasTests == 'true' && matrix.sdk != 'stable'"
        run: dart test --exclude-tags=build
        working-directory: ${{ inputs.working-directory }}
