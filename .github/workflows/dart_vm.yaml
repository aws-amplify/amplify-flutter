name: Dart (VM)
on:
  workflow_call:
    inputs:
      package-name:
        description: The name of the package being tested
        required: true
        type: string
      working-directory:
        description: The working directory relative to the repo root
        required: true
        type: string

jobs:
  test-dart-vm:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      # Allows other matrix items to run if one fails
      fail-fast: false
      matrix:
        sdk:
          # Minimum supported Dart version
          - "3.8.0"
          - stable
          - beta
        # Skips 'beta' tests on PRs
        exclude:
          - sdk: ${{ (github.event_name == 'pull_request') && 'beta' || 'NONE' }}
    steps:
      - name: Cache Pub dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # 4.2.3
        with:
          path: |
            ~/.pub-cache/hosted
            ~/.pub-cache/git
          key: os:ubuntu-latest;sdk:${{ matrix.sdk }};packages:${{ inputs.working-directory }}
          restore-keys: |
            os:ubuntu-latest;sdk:${{ matrix.sdk }};packages:${{ inputs.working-directory }}
            os:ubuntu-latest;sdk:${{ matrix.sdk }}
            os:ubuntu-latest

      - name: Git Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # 4.0.0

      - name: Git Submodules
        run: git submodule update --init

      # Some Dart packages require Flutter to be available, for example `amplify_core`
      # requires it for its `doc` package. Running this before "Setup Dart" means that
      # the `dart` executable in PATH will always be the one setup by "Setup Dart".
      #
      # TODO(dnys1): Create mapping of Flutter->Dart versions so we can just use Dart
      # vended by Flutter.
      - name: Setup Flutter
        uses: subosito/flutter-action@fd55f4c5af5b953cc57a2be44cb082c8f6635e8e # 2.21.0
        with:
          cache: true
          channel: stable

      - name: Setup Dart
        uses: dart-lang/setup-dart@fe21d53e1e27c70b5c8e8273d4bcc0d23c071577 # main
        with:
          sdk: ${{ matrix.sdk }}

      - name: Dart Version
        run: dart --version

      - name: Setup aft
        shell: bash # Run in bash regardless of platform
        run: dart pub global activate -spath packages/aft

      - name: Bootstrap
        id: bootstrap
        timeout-minutes: 20
        run: aft bootstrap --fail-fast --include=${{ inputs.package-name }} --verbose

      - name: Check Formatting
        if: "always() && steps.bootstrap.conclusion == 'success' && matrix.sdk == 'stable'"
        run: dart format --set-exit-if-changed .
        working-directory: ${{ inputs.working-directory }}

      - name: Check for Tests
        id: testCheck
        if: "always() && steps.bootstrap.conclusion == 'success'"
        shell: bash # Run in bash regardless of platform
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -d test ]; then
            echo "hasTests=true" >> $GITHUB_OUTPUT
          else
            echo "hasTests=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Package
        if: "always() && steps.bootstrap.conclusion == 'success'"
        shell: bash # Run in bash regardless of platform
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -e tool/setup.sh ]; then
            ./tool/setup.sh
          fi

      - name: Analyze
        if: "always() && steps.bootstrap.conclusion == 'success'"
        run: dart analyze --fatal-infos --fatal-warnings .
        working-directory: ${{ inputs.working-directory }}

      - name: Run Tests (stable)
        if: "always() && steps.bootstrap.conclusion == 'success' && steps.testCheck.outputs.hasTests == 'true' && matrix.sdk == 'stable'"
        run: dart test
        working-directory: ${{ inputs.working-directory }}

        # Non-stable test runs do not need to verify `build` tags since the generated code in the repo is updated using `build_runner` on `stable`.
      - name: Run Tests (non-stable)
        if: "always() && steps.bootstrap.conclusion == 'success' && steps.testCheck.outputs.hasTests == 'true' && matrix.sdk != 'stable'"
        run: dart test --exclude-tags=build
        working-directory: ${{ inputs.working-directory }}

      - name: Log success/failure
        if: always()
        uses: ./.github/composite_actions/log_cw_metric_wrapper
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

          job-status: ${{ job.status }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

          test-type: unit
          working-directory: ${{ inputs.working-directory }}

          framework: dart
          flutter-dart-channel: ${{ matrix.sdk }}
          dart-compiler: vm
