# Native Test runs code on non-Linux platforms
name: Dart (Native)
on:
  workflow_call:
    inputs:
      package-name:
        description: The name of the package being tested
        required: true
        type: string
      working-directory:
        description: The working directory relative to the repo root
        required: true
        type: string

jobs:
  native_test:
    name: Native Test
    timeout-minutes: 60
    strategy:
      # Allows other matrix items to run if one fails
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Cache Pub dependencies
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # 3.3.1
        with:
          path: |
            ~/.pub-cache/hosted
            ~/.pub-cache/git
          key: os:${{ matrix.os }};sdk:stable;packages:${{ inputs.working-directory }}
          restore-keys: |
            os:${{ matrix.os }};sdk:stable;packages:${{ inputs.working-directory }}
            os:${{ matrix.os }};sdk:stable
            os:${{ matrix.os }}

      # Needed on Windows
      - name: Enable Long Git Paths
        run: git config --system core.longpaths true

      - name: Git Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # 3.6.0

      - name: Git Submodules
        run: git submodule update --init

      - name: Setup Dart
        uses: dart-lang/setup-dart@deafe40ee7284c48e67c783c88eed8c8b52b19ca # main
        with:
          sdk: stable

      - name: Setup aft
        shell: bash # Run in bash regardless of platform
        run: dart pub global activate -spath packages/aft

      # This is needed to support running tests which depend on db_common.
      - name: Install SQLite
        if: runner.os == 'Windows'
        run: |
          # Should match `packages/common/amplify_db_common/windows/CMakeLists.txt`
          $uri = "https://www.sqlite.org/2022/sqlite-dll-win64-x64-3400000.zip"
          $outFile = "sqlite.zip"
          $out = ".\sqlite"
          Invoke-WebRequest -Uri $uri -OutFile $outFile
          Expand-Archive -LiteralPath $outFile -DestinationPath $out
          $absoluteOut = Resolve-Path -Path $out
          Add-Content $env:GITHUB_PATH $absoluteOut
          Get-Content $env:GITHUB_PATH

      - name: Bootstrap
        id: bootstrap
        timeout-minutes: 20
        run: aft bootstrap --fail-fast --include=${{ inputs.package-name }} --verbose

      - name: Setup Package
        if: "always() && steps.bootstrap.conclusion == 'success'"
        shell: bash # Run in bash regardless of platform
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -e tool/setup.sh ]; then
            ./tool/setup.sh
          fi

      - name: Run Tests
        if: "always() && steps.bootstrap.conclusion == 'success'"
        run: dart test --exclude-tags=build
        working-directory: ${{ inputs.working-directory }}
