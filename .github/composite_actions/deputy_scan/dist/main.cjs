// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.2.0-171.0.dev.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is the priority the
//    library should be loaded with as specified in the code via the
//    load-priority annotation (0: normal, 1: high).
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        A.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          A.throwLateFieldADI(name);
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$argv$x(receiver) {
      return J.getInterceptor$x(receiver).get$argv(receiver);
    },
    get$argv0$x(receiver) {
      return J.getInterceptor$x(receiver).get$argv0(receiver);
    },
    get$end$z(receiver) {
      return J.getInterceptor$z(receiver).get$end(receiver);
    },
    get$env$x(receiver) {
      return J.getInterceptor$x(receiver).get$env(receiver);
    },
    get$execArgv$x(receiver) {
      return J.getInterceptor$x(receiver).get$execArgv(receiver);
    },
    get$execPath$x(receiver) {
      return J.getInterceptor$x(receiver).get$execPath(receiver);
    },
    get$exitCode$z(receiver) {
      return J.getInterceptor$z(receiver).get$exitCode(receiver);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$last$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$message$z(receiver) {
      return J.getInterceptor$z(receiver).get$message(receiver);
    },
    get$parent$x(receiver) {
      return J.getInterceptor$x(receiver).get$parent(receiver);
    },
    get$pid$z(receiver) {
      return J.getInterceptor$z(receiver).get$pid(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$sep$x(receiver) {
      return J.getInterceptor$x(receiver).get$sep(receiver);
    },
    get$single$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$single(receiver);
    },
    get$type$z(receiver) {
      return J.getInterceptor$z(receiver).get$type(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    allMatches$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).allMatches$2(receiver, a0, a1);
    },
    cancel$0$z(receiver) {
      return J.getInterceptor$z(receiver).cancel$0(receiver);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    closeSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).closeSync$1(receiver, a0);
    },
    codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    cpus$0$x(receiver) {
      return J.getInterceptor$x(receiver).cpus$0(receiver);
    },
    cwd$0$x(receiver) {
      return J.getInterceptor$x(receiver).cwd$0(receiver);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    existsSync$0$z(receiver) {
      return J.getInterceptor$z(receiver).existsSync$0(receiver);
    },
    fillRange$3$ax(receiver, a0, a1, a2) {
      return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    floor$0$n(receiver) {
      return J.getInterceptor$n(receiver).floor$0(receiver);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    hostname$0$x(receiver) {
      return J.getInterceptor$x(receiver).hostname$0(receiver);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    lstat$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).lstat$2(receiver, a0, a1);
    },
    lstatSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).lstatSync$1(receiver, a0);
    },
    map$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).map$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    mkdtempSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).mkdtempSync$1(receiver, a0);
    },
    noSuchMethod$1$(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    openSync$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).openSync$2(receiver, a0, a1);
    },
    padRight$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).padRight$1(receiver, a0);
    },
    platform$0$x(receiver) {
      return J.getInterceptor$x(receiver).platform$0(receiver);
    },
    readFileSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).readFileSync$1(receiver, a0);
    },
    readdirSync$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).readdirSync$1(receiver, a0);
    },
    release$0$x(receiver) {
      return J.getInterceptor$x(receiver).release$0(receiver);
    },
    removeRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).removeRange$2(receiver, a0, a1);
    },
    resolve$1$x(receiver, a0) {
      return J.getInterceptor$x(receiver).resolve$1(receiver, a0);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    startsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    sublist$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    then$1$1$z(receiver, a0, $T1) {
      return J.getInterceptor$z(receiver).then$1$1(receiver, a0, $T1);
    },
    then$1$2$onError$z(receiver, a0, a1, $T1) {
      return J.getInterceptor$z(receiver).then$1$2$onError(receiver, a0, a1, $T1);
    },
    tmpdir$0$x(receiver) {
      return J.getInterceptor$x(receiver).tmpdir$0(receiver);
    },
    toISOString$0$x(receiver) {
      return J.getInterceptor$x(receiver).toISOString$0(receiver);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toRadixString$1$n(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    writeFileSync$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).writeFileSync$2(receiver, a0, a1);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    _BytesBuilder: function _BytesBuilder(t0) {
      this.__internal$_length = 0;
      this._chunks = t0;
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    CastQueue: function CastQueue(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._hasSkipped = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterable: function NonNullsIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    NonNullsIterator: function NonNullsIterator(t0, t1) {
      this._source = t0;
      this.__internal$_current = null;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this._name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, values, map,
        keys = A.List_List$from(other.get$keys(other), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          $V._as(other.$index(0, k));
          index0 = index + 1;
          object[k] = index;
        }
        values = A.List_List$from(other.get$values(other), true, $V);
        map = new A.ConstantStringMap(object, values, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = B.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
      var value,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      if (isNaN(value) || value < -864e13 || value > 864e13)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      B.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
        namedArguments.forEach$1(0, new A.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new A.JSInvocationMirror(B.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction($function, positionalArguments, namedArguments) {
      var t1, argumentCount, jsStub;
      if (Array.isArray(positionalArguments))
        t1 = namedArguments == null || namedArguments.__js_helper$_length === 0;
      else
        t1 = false;
      if (t1) {
        argumentCount = positionalArguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1(positionalArguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2(positionalArguments[0], positionalArguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3(positionalArguments[0], positionalArguments[1], positionalArguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5(positionalArguments[0], positionalArguments[1], positionalArguments[2], positionalArguments[3], positionalArguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, positionalArguments);
      }
      return A.Primitives__generalApplyFunction($function, positionalArguments, namedArguments);
    },
    Primitives__generalApplyFunction($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, maxArguments, missingDefaults, keys, _i, defaultValue, used, key;
      if (positionalArguments != null)
        $arguments = Array.isArray(positionalArguments) ? positionalArguments : A.List_List$of(positionalArguments, true, type$.dynamic);
      else
        $arguments = [];
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction == "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (Array.isArray(defaultValues)) {
        if (namedArguments != null && namedArguments.__js_helper$_length !== 0)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        maxArguments = requiredParameterCount + defaultValues.length;
        if (argumentCount > maxArguments)
          return A.Primitives_functionNoSuchMethod($function, $arguments, null);
        if (argumentCount < maxArguments) {
          missingDefaults = defaultValues.slice(argumentCount - requiredParameterCount);
          if ($arguments === positionalArguments)
            $arguments = A.List_List$of($arguments, true, type$.dynamic);
          B.JSArray_methods.addAll$1($arguments, missingDefaults);
        }
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if ($arguments === positionalArguments)
          $arguments = A.List_List$of($arguments, true, type$.dynamic);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            defaultValue = defaultValues[A._asString(keys[_i])];
            if (B.C__Required === defaultValue)
              return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
            B.JSArray_methods.add$1($arguments, defaultValue);
          }
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
            key = A._asString(keys[_i]);
            if (namedArguments.containsKey$1(key)) {
              ++used;
              B.JSArray_methods.add$1($arguments, namedArguments.$index(0, key));
            } else {
              defaultValue = defaultValues[key];
              if (B.C__Required === defaultValue)
                return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
              B.JSArray_methods.add$1($arguments, defaultValue);
            }
          }
          if (used !== namedArguments.__js_helper$_length)
            return A.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_, null);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(key);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(new A._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else
        $constructor = function tear_off(a, b) {
          this.$initialize(a, b);
        };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1;
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A._CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    LinkedHashMapKeyIterator$(_map, _modifications, $E) {
      var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
      t1._cell = _map._first;
      return t1;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else {
        t1 = J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex));
        return !t1.get$isEmpty(t1);
      }
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE(receiver, regexp, replacement, startIndex) {
      var match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, match._match.index, match.get$end(match), replacement);
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current();
        t2 = t2 + receiver.substring(startIndex, match.get$start(match)) + replacement;
        startIndex = match.get$end(match);
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      if (typeof pattern == "string") {
        index = receiver.indexOf(pattern, startIndex);
        if (index < 0)
          return receiver;
        return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
      }
      if (pattern instanceof A.JSSyntaxRegExp)
        return startIndex === 0 ? receiver.replace(pattern._nativeRegExp, A.escapeReplacement(replacement)) : A.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      t1 = J.allMatches$2$s(pattern, receiver, startIndex);
      matches = t1.get$iterator(t1);
      if (!matches.moveNext$0())
        return receiver;
      match = matches.get$current();
      return B.JSString_methods.replaceRange$3(receiver, match.get$start(match), match.get$end(match), replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    _Record_2_isBreaking: function _Record_2_isBreaking(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _Required: function _Required() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    JsIdentityLinkedHashMap: function JsIdentityLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has not been initialized."), new Error());
    },
    throwLateFieldADI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + string$.x27_has_), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1.__late_helper$_value = t1;
    },
    _InitializedCell$named(_name, _initializer) {
      var t1 = new A._InitializedCell(_name, _initializer);
      return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    _InitializedCell: function _InitializedCell(t0, t1) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
      this._initializer = t1;
    },
    _ensureNativeList(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        B.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      var t1 = new Uint8Array(buffer, offsetInBytes, $length);
      return t1;
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__getIsSubtypeCache(rti) {
      var probe = rti._isSubtypeCache;
      if (probe != null)
        return probe;
      return rti._isSubtypeCache = new Map();
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var t1,
        signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        t1 = closure.$signature();
        return t1;
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = A._createRuntimeType(rti) : t1;
    },
    _createRuntimeType(rti) {
      var starErasedRti, t1,
        s = rti._canonicalRecipe,
        starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      t1 = starErasedRti._cachedRuntimeType;
      return t1 == null ? starErasedRti._cachedRuntimeType = A._createRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, unstarredKind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (t1 === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      unstarred = t1 === 6 ? testRti._primary : testRti;
      unstarredKind = unstarred._kind;
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11) {
        predicate = A.createRecordTypePredicate(unstarred._primary, unstarred._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null))));
    },
    checkTypeBound(type, bound, variable, methodName) {
      if (A.isSubtype(init.typeUniverse, type, bound))
        return type;
      throw A.wrapException(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, null) + "' of type variable '" + variable + "' in '" + methodName + "'."));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this,
        unstarred = testRti._kind === 6 ? testRti._primary : testRti;
      return unstarred._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, unstarred)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = A._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 12:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var optionalPositional, named, requiredPositional, returnType, parameters, _null = null,
        t1 = parser.u,
        head = stack.pop();
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            named = _null;
            break;
          case -2:
            named = stack.pop();
            optionalPositional = _null;
            break;
          default:
            stack.push(head);
            named = _null;
            optionalPositional = named;
            break;
        }
      else {
        stack.push(head);
        named = _null;
        optionalPositional = named;
      }
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = A.Rti__getIsSubtypeCache(s),
        probe = sCache.get(t);
      if (probe != null)
        return probe;
      result = A._isSubtype(universe, s, null, t, null);
      sCache.set(t, result);
      return result;
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      t2 = sKind === 11;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._unsoundIsSubtypeCache = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(0, thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B._StringStackTrace_3uE;
    },
    Future_Future$sync(computation, $T) {
      var result, error, stackTrace, future, replacement, t1, exception;
      try {
        result = computation.call$0();
        if ($T._eval$1("Future<0>")._is(result))
          return result;
        else {
          t1 = A._Future$value(result, $T);
          return t1;
        }
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1 = $.Zone__current;
        future = new A._Future(t1, $T._eval$1("_Future<0>"));
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null)
          future._asyncCompleteError$2(replacement.error, replacement.stackTrace);
        else
          future._asyncCompleteError$2(error, stackTrace);
        return future;
      }
    },
    Future___value_tearOff(value, $T) {
      return A.Future_Future$value($T._eval$1("0/?")._as(value), $T);
    },
    Future_Future$value(value, $T) {
      var t1 = value == null ? $T._as(value) : value,
        t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t2._asyncComplete$1(t1);
      return t2;
    },
    Future_Future$error(error, stackTrace, $T) {
      var t1, replacement;
      A.checkNotNullable(error, "error", type$.Object);
      t1 = $.Zone__current;
      if (t1 !== B.C__RootZone) {
        replacement = t1.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
      }
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_wait(futures, $T) {
      var error, stackTrace, handleError, future, pos, e, st, t1, t2, exception, _box_0 = {}, cleanUp = null,
        eagerError = false,
        _future = new A._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      error = A._Cell$named("error");
      stackTrace = A._Cell$named("stackTrace");
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future, error, stackTrace);
      try {
        for (t1 = J.get$iterator$ax(futures), t2 = type$.Null; t1.moveNext$0();) {
          future = t1.get$current();
          pos = _box_0.remaining;
          J.then$1$2$onError$z(future, new A.Future_wait_closure(_box_0, pos, _future, cleanUp, eagerError, error, stackTrace, $T), handleError, t2);
          ++_box_0.remaining;
        }
        t1 = _box_0.remaining;
        if (t1 === 0) {
          t1 = _future;
          t1._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = A.List_List$filled(t1, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        st = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || A.boolConversionCheck(eagerError))
          return A.Future_Future$error(e, st, $T._eval$1("List<0>"));
        else {
          error.__late_helper$_value = e;
          stackTrace.__late_helper$_value = st;
        }
      }
      return _future;
    },
    Future_any(futures, $T) {
      var t1, t2, _i,
        completer = new A._SyncCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_SyncCompleter<0>")),
        onValue = new A.Future_any_onValue(completer, $T),
        onError = new A.Future_any_onError(completer);
      for (t1 = futures.length, t2 = type$.void, _i = 0; _i < futures.length; futures.length === t1 || (0, A.throwConcurrentModificationError)(futures), ++_i)
        futures[_i].then$1$2$onError(0, onValue, onError, t2);
      return completer.future;
    },
    FutureExtensions_ignore(_this, $T) {
      if ($T._eval$1("_Future<0>")._is(_this))
        _this._state |= 1;
      else
        _this.then$1$2$onError(0, A.async__FutureExtensions__ignore$closure(), A.async__FutureExtensions__ignore$closure(), type$.void);
    },
    FutureExtensions__ignore(_, __) {
    },
    _Future$value(value, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFutureSync(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if ((t2 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__chainCoreFutureAsync(source, target) {
      var t2, t3, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if ((t3 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(t1);
        _box_0.source._prependListeners$1(listeners);
        return;
      }
      if ((t3 & 16) === 0 && target._resultOrListeners == null) {
        target._cloneResult$1(t1);
        return;
      }
      target._state ^= 2;
      target._zone.scheduleMicrotask$1(new A._Future__chainCoreFutureAsync_closure(_box_0, target));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t1 = t5._zone;
            t1 = !(t1 === zone || t1.get$errorZone() === zone.get$errorZone());
          } else
            t1 = false;
          if (t1) {
            t1 = _box_1.source;
            asyncError = t2._as(t1._resultOrListeners);
            t1._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = _box_0.listener.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFutureSync(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.dynamic_Function_Object._is(errorHandler))
        return zone.registerUnaryCallback$2$1(errorHandler, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var t1, _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      if (B.C__RootZone === currentZone.get$_scheduleMicrotask().zone)
        t1 = B.C__RootZone.get$errorZone() === currentZone.get$errorZone();
      else
        t1 = false;
      if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, type$.void));
        return;
      }
      t1 = $.Zone__current;
      t1.scheduleMicrotask$1(t1.bindCallbackGuarded$1(callback));
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? new A._SyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_SyncStreamController<0>")) : new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    StreamController_StreamController$broadcast(sync, $T) {
      var _null = null;
      return sync ? new A._SyncBroadcastStreamController(_null, _null, $T._eval$1("_SyncBroadcastStreamController<0>")) : new A._AsyncBroadcastStreamController(_null, _null, $T._eval$1("_AsyncBroadcastStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(e, s);
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      return new A._ControllerSubscription(_controller, A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T), A._BufferingStreamSubscription__registerErrorHandler(t1, onError), A._BufferingStreamSubscription__registerDoneHandler(t1, onDone), t1, t2, $T._eval$1("_ControllerSubscription<0>"));
    },
    _AddStreamState$(controller, source, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = $T._eval$1("~(0)")._as(controller.get$_async$_add()),
        t3 = controller.get$_addError();
      return new A._AddStreamState(new A._Future(t1, type$._Future_dynamic), source.listen$4$cancelOnError$onDone$onError(0, t2, false, controller.get$_close(), t3), $T._eval$1("_AddStreamState<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return zone.registerUnaryCallback$2$1(t1, type$.void, $T);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return zone.registerUnaryCallback$2$1(handleError, type$.dynamic, type$.Object);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _BufferingStreamSubscription__registerDoneHandler(zone, handleDone) {
      var t1 = handleDone == null ? A.async___nullDoneHandler$closure() : handleDone;
      return zone.registerCallback$1$1(t1, type$.void);
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      $.Zone__current.handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler() {
    },
    _DoneStreamSubscription$(onDone, $T) {
      var t1 = $.Zone__current,
        t2 = new A._DoneStreamSubscription(t1, $T._eval$1("_DoneStreamSubscription<0>"));
      A.scheduleMicrotask(t2.get$_onMicrotask());
      if (onDone != null)
        t2.set$_onDone(t1.registerCallback$1$1(onDone, type$.void));
      return t2;
    },
    _runUserCode(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        replacement = $.Zone__current.errorCallback$2(e, s);
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(0),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure(subscription, future) {
      return new A._cancelAndErrorClosure_closure(subscription, future);
    },
    _rootHandleUncaughtError($self, $parent, zone, error, stackTrace) {
      A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("0()")._as(f);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      type$.nullable_Zone._as($self);
      type$.nullable_ZoneDelegate._as($parent);
      type$.Zone._as(zone);
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRegisterCallback($self, $parent, zone, f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    _rootRegisterUnaryCallback($self, $parent, zone, f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    _rootRegisterBinaryCallback($self, $parent, zone, f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    _rootErrorCallback($self, $parent, zone, error, stackTrace) {
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      var t1, t2;
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone) {
        t1 = B.C__RootZone.get$errorZone();
        t2 = zone.get$errorZone();
        f = t1 !== t2 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, type$.void);
      }
      A._scheduleAsyncCallback(f);
    },
    _rootCreateTimer($self, $parent, zone, duration, callback) {
      type$.Duration._as(duration);
      type$.void_Function._as(callback);
      return A.Timer__createTimer(duration, B.C__RootZone !== zone ? zone.bindCallback$1$1(callback, type$.void) : callback);
    },
    _rootCreatePeriodicTimer($self, $parent, zone, duration, callback) {
      var milliseconds;
      type$.Duration._as(duration);
      type$.void_Function_Timer._as(callback);
      if (B.C__RootZone !== zone)
        callback = zone.bindUnaryCallback$2$1(callback, type$.void, type$.Timer);
      milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _rootPrint($self, $parent, zone, line) {
      A.printString(A._asString(line));
    },
    _printToZone(line) {
      $.Zone__current.print$1(line);
    },
    _rootFork($self, $parent, zone, specification, zoneValues) {
      var valueMap, t1, registerCallback, registerUnaryCallback, registerBinaryCallback, errorCallback, handleUncaughtError;
      type$.nullable_ZoneSpecification._as(specification);
      type$.nullable_Map_of_nullable_Object_and_nullable_Object._as(zoneValues);
      $.printToZone = A.async___printToZone$closure();
      if (specification == null)
        specification = B._ZoneSpecification_ALf;
      if (zoneValues == null)
        valueMap = zone.get$_async$_map();
      else {
        t1 = type$.nullable_Object;
        valueMap = A.HashMap_HashMap$from(zoneValues, t1, t1);
      }
      t1 = new A._CustomZone(zone.get$_async$_run(), zone.get$_runUnary(), zone.get$_runBinary(), zone.get$_async$_registerCallback(), zone.get$_async$_registerUnaryCallback(), zone.get$_async$_registerBinaryCallback(), zone.get$_async$_errorCallback(), zone.get$_scheduleMicrotask(), zone.get$_createTimer(), zone.get$_createPeriodicTimer(), zone.get$_print(), zone.get$_fork(), zone.get$_async$_handleUncaughtError(), zone, valueMap);
      registerCallback = specification.registerCallback;
      if (registerCallback != null)
        t1.set$_async$_registerCallback(new A._ZoneFunction(t1, registerCallback, type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function));
      registerUnaryCallback = specification.registerUnaryCallback;
      if (registerUnaryCallback != null)
        t1.set$_async$_registerUnaryCallback(new A._ZoneFunction(t1, registerUnaryCallback, type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B));
      registerBinaryCallback = specification.registerBinaryCallback;
      if (registerBinaryCallback != null)
        t1.set$_async$_registerBinaryCallback(new A._ZoneFunction(t1, registerBinaryCallback, type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C));
      errorCallback = specification.errorCallback;
      if (errorCallback != null)
        t1.set$_async$_errorCallback(new A._ZoneFunction(t1, errorCallback, type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace));
      handleUncaughtError = specification.handleUncaughtError;
      if (handleUncaughtError != null)
        t1.set$_async$_handleUncaughtError(new A._ZoneFunction(t1, handleUncaughtError, type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace));
      return t1;
    },
    runZoned(body, zoneSpecification, zoneValues, $R) {
      A.checkNotNullable(body, "body", $R._eval$1("0()"));
      return A._runZoned(body, zoneValues, zoneSpecification, $R);
    },
    _runZoned(body, zoneValues, specification, $R) {
      return $.Zone__current.fork$2$specification$zoneValues(specification, zoneValues).run$1$1(body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _SyncBroadcastStreamController__sendError_closure: function _SyncBroadcastStreamController__sendError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _SyncBroadcastStreamController__sendDone_closure: function _SyncBroadcastStreamController__sendDone_closure(t0) {
      this.$this = t0;
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
      _.error = t4;
      _.stackTrace = t5;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _.error = t5;
      _.stackTrace = t6;
      _.T = t7;
    },
    Future_any_onValue: function Future_any_onValue(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    Future_any_onError: function Future_any_onError(t0) {
      this.completer = t0;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__chainCoreFutureAsync_closure: function _Future__chainCoreFutureAsync_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_fold_closure: function Stream_fold_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    Stream_fold_closure0: function Stream_fold_closure0(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.combine = t2;
      _.subscription = t3;
      _.result = t4;
      _.S = t5;
    },
    Stream_fold__closure: function Stream_fold__closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.combine = t1;
      _.element = t2;
      _.S = t3;
    },
    Stream_fold__closure0: function Stream_fold__closure0(t0, t1) {
      this._box_0 = t0;
      this.S = t1;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamView: function StreamView() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _AddStreamState: function _AddStreamState(t0, t1, t2) {
      this.addStreamFuture = t0;
      this.addSubscription = t1;
      this.$ti = t2;
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2, t3) {
      var _ = this;
      _.varData = t0;
      _.addStreamFuture = t1;
      _.addSubscription = t2;
      _.$ti = t3;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1) {
      var _ = this;
      _._state = 1;
      _._zone = t0;
      _._onDone = null;
      _.$ti = t1;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _EmptyStream: function _EmptyStream(t0) {
      this.$ti = t0;
    },
    _cancelAndError_closure: function _cancelAndError_closure(t0, t1, t2) {
      this.future = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _cancelAndErrorClosure_closure: function _cancelAndErrorClosure_closure(t0, t1) {
      this.subscription = t0;
      this.future = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._stream = t0;
      _._subscription = null;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _MapStream: function _MapStream(t0, t1, t2) {
      this._transform = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _EventSinkWrapper: function _EventSinkWrapper(t0, t1) {
      this._async$_sink = t0;
      this.$ti = t1;
    },
    _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.___SinkTransformerStreamSubscription__transformerSink_A = $;
      _._subscription = null;
      _._onData = t0;
      _._onError = t1;
      _._onDone = t2;
      _._zone = t3;
      _._state = t4;
      _._pending = _._cancelFuture = null;
      _.$ti = t5;
    },
    _BoundSinkStream: function _BoundSinkStream(t0, t1, t2) {
      this._sinkMapper = t0;
      this._stream = t1;
      this.$ti = t2;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14) {
      var _ = this;
      _._async$_run = t0;
      _._runUnary = t1;
      _._runBinary = t2;
      _._async$_registerCallback = t3;
      _._async$_registerUnaryCallback = t4;
      _._async$_registerBinaryCallback = t5;
      _._async$_errorCallback = t6;
      _._scheduleMicrotask = t7;
      _._createTimer = t8;
      _._createPeriodicTimer = t9;
      _._print = t10;
      _._fork = t11;
      _._async$_handleUncaughtError = t12;
      _._delegateCache = null;
      _.parent = t13;
      _._async$_map = t14;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    HashMap_HashMap(equals, hashCode, isValidKey, $K, $V) {
      if (isValidKey == null)
        if (hashCode == null) {
          if (equals == null)
            return new A._HashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_HashMap<1,2>"));
          hashCode = A.collection___defaultHashCode$closure();
        } else {
          if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
            return new A._IdentityHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("_IdentityHashMap<1,2>"));
          if (equals == null)
            equals = A.collection___defaultEquals$closure();
        }
      else {
        if (hashCode == null)
          hashCode = A.collection___defaultHashCode$closure();
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    _CustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new A._CustomHashMap_closure($K);
      return new A._CustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_CustomHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap(equals, hashCode, $K, $V) {
      if (hashCode == null) {
        if (equals == null)
          return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
        hashCode = A.collection___defaultHashCode$closure();
      } else {
        if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
          return new A.JsIdentityLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsIdentityLinkedHashMap<1,2>"));
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      return new A._LinkedCustomHashMap(_equals, _hashCode, new A._LinkedCustomHashMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    HashMap_HashMap$from(other, $K, $V) {
      var result = A.HashMap_HashMap(null, null, null, $K, $V);
      other.forEach$1(0, new A.HashMap_HashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1, _i,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    ListBase__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListQueue$($E) {
      return new A.ListQueue(A.List_List$filled(A.ListQueue__calculateCapacity(null), null, false, $E._eval$1("0?")), $E._eval$1("ListQueue<0>"));
    },
    ListQueue__calculateCapacity(initialCapacity) {
      return 8;
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _CustomHashMap: function _CustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t3;
    },
    _CustomHashMap_closure: function _CustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_keys = t0;
      _._map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    ListQueue: function ListQueue(t0, t1) {
      var _ = this;
      _._collection$_table = t0;
      _._modificationCount = _._collection$_tail = _._collection$_head = 0;
      _.$ti = t1;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._collection$_end = t1;
      _._modificationCount = t2;
      _._collection$_position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null, null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
          return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, t3, i, byteOr, byte, outputIndex0, t4, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = alphabet.length, t3 = output.length, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 18 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t3))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits >>> 12 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t3))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 6 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t3))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t3))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = bits >>> 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits << 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = bits >>> 10 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits >>> 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            t1 = bits << 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = alphabet.charCodeAt(t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + J.toRadixString$1$n(t1.$index(bytes, i), 16), null));
    },
    _Base64Decoder_decodeChunk(input, start, end, output, outIndex, state) {
      var t1, t2, t3, i, charOr, char, t4, code, outIndex0, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character",
        bits = B.JSInt_methods._shrOtherPositive$1(state, 2),
        count = state & 3,
        inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = input.length, t2 = inverseAlphabet.length, t3 = output.length, i = start, charOr = 0; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        char = input.charCodeAt(i);
        charOr |= char;
        t4 = char & 127;
        if (!(t4 < t2))
          return A.ioore(inverseAlphabet, t4);
        code = inverseAlphabet[t4];
        if (code >= 0) {
          bits = (bits << 6 | code) & 16777215;
          count = count + 1 & 3;
          if (count === 0) {
            outIndex0 = outIndex + 1;
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 16 & 255;
            outIndex = outIndex0 + 1;
            if (!(outIndex0 < t3))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 8 & 255;
            outIndex0 = outIndex + 1;
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits & 255;
            outIndex = outIndex0;
            bits = 0;
          }
          continue;
        } else if (code === -1 && count > 1) {
          if (charOr > 127)
            break;
          if (count === 3) {
            if ((bits & 3) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            outIndex0 = outIndex + 1;
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 10;
            if (!(outIndex0 < t3))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 2;
          } else {
            if ((bits & 15) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 4;
          }
          expectedPadding = (3 - count) * 3;
          if (char === 37)
            expectedPadding += 2;
          return A._Base64Decoder__checkPadding(input, i + 1, end, -expectedPadding - 1);
        }
        throw A.wrapException(A.FormatException$(_s17_, input, i));
      }
      if (charOr >= 0 && charOr <= 127)
        return (bits << 2 | count) >>> 0;
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        if (input.charCodeAt(i) > 127)
          break;
      }
      throw A.wrapException(A.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer(input, start, end, state) {
      var paddingStart = A._Base64Decoder__trimPaddingChars(input, start, end),
        $length = (state & 3) + (paddingStart - start),
        bufferLength = B.JSInt_methods._shrOtherPositive$1($length, 2) * 3,
        remainderLength = $length & 3;
      if (remainderLength !== 0 && paddingStart < end)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return new Uint8Array(bufferLength);
      return $.$get$_Base64Decoder__emptyBuffer();
    },
    _Base64Decoder__trimPaddingChars(input, start, end) {
      var char,
        t1 = input.length,
        newEnd = end,
        index = newEnd,
        padding = 0;
      while (true) {
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          if (!(index >= 0 && index < t1))
            return A.ioore(input, index);
          char = input.charCodeAt(index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if ((char | 32) === 100) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding(input, start, end, state) {
      var expectedPadding, t1, char;
      if (start === end)
        return state;
      expectedPadding = -state - 1;
      for (t1 = input.length; expectedPadding > 0;) {
        if (!(start < t1))
          return A.ioore(input, start);
        char = input.charCodeAt(start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            ++start;
            if (start === end)
              break;
            if (!(start < t1))
              return A.ioore(input, start);
            char = input.charCodeAt(start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          if (!(start < t1))
            return A.ioore(input, start);
          char = input.charCodeAt(start);
        }
        if ((char | 32) !== 100)
          break;
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start !== end)
        throw A.wrapException(A.FormatException$("Invalid padding character", input, start));
      return -expectedPadding - 1;
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    JsonUtf8Encoder__utf8Encode(string) {
      var t1, i;
      if (string == null)
        return null;
      t1 = string.length;
      if (t1 === 0)
        return new Uint8Array(0);
      $label0$0: {
        for (i = 0; i < t1; ++i)
          if (string.charCodeAt(i) >= 128)
            break $label0$0;
        return new A.CodeUnits(string);
      }
      return B.C_Utf8Encoder.convert$1(string);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      return new A._JsonStringStringifier(_sink, [], A.convert___defaultToEncodable$closure());
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer("");
      A._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonStringStringifier_printOn(object, output, toEncodable, indent) {
      var stringifier;
      if (indent == null)
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      else
        stringifier = new A._JsonStringStringifierPretty(indent, 0, output, [], A.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
    },
    _JsonUtf8Stringifier$(toEncodable, bufferSize, addChunk) {
      var t1 = new Uint8Array(bufferSize);
      return new A._JsonUtf8Stringifier(bufferSize, addChunk, t1, [], A.convert___defaultToEncodable$closure());
    },
    _JsonUtf8Stringifier_stringify(object, indent, toEncodable, bufferSize, addChunk) {
      var t1, stringifier;
      if (indent != null) {
        t1 = new Uint8Array(bufferSize);
        stringifier = new A._JsonUtf8StringifierPretty(indent, 0, bufferSize, addChunk, t1, [], A.convert___defaultToEncodable$closure());
      } else
        stringifier = A._JsonUtf8Stringifier$(toEncodable, bufferSize, addChunk);
      stringifier.writeObject$1(object);
      t1 = stringifier.index;
      if (t1 > 0)
        stringifier.addChunk.call$3(stringifier.buffer, 0, t1);
      stringifier.buffer = new Uint8Array(0);
      stringifier.index = 0;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 4294967040) >>> 0 !== 0)
          b = 255;
        if (!(i < $length))
          return A.ioore(bytes, i);
        bytes[i] = b;
      }
      return bytes;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    _JsonDecoderSink: function _JsonDecoderSink(t0, t1, t2) {
      this._reviver = t0;
      this._sink = t1;
      this._stringSink = t2;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetEncoderSink: function _UnicodeSubsetEncoderSink(t0, t1) {
      this._sink = t0;
      this._subsetMask = t1;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    _ErrorHandlingAsciiDecoderSink: function _ErrorHandlingAsciiDecoderSink(t0) {
      this._utf8Sink = t0;
    },
    _SimpleAsciiDecoderSink: function _SimpleAsciiDecoderSink(t0) {
      this._sink = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _BufferCachingBase64Encoder: function _BufferCachingBase64Encoder(t0) {
      this.bufferCache = null;
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _AsciiBase64EncoderSink: function _AsciiBase64EncoderSink(t0, t1) {
      this._sink = t0;
      this._encoder = t1;
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink(t0, t1) {
      this._sink = t0;
      this._encoder = t1;
    },
    Base64Decoder: function Base64Decoder() {
    },
    _Base64Decoder: function _Base64Decoder() {
      this._convert$_state = 0;
    },
    _Base64DecoderSink: function _Base64DecoderSink(t0, t1) {
      this._sink = t0;
      this._decoder = t1;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    _ByteAdapterSink: function _ByteAdapterSink(t0) {
      this._sink = t0;
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    _ConverterStreamEventSink: function _ConverterStreamEventSink(t0, t1, t2) {
      this._eventSink = t0;
      this._chunkedSink = t1;
      this.$ti = t2;
    },
    Codec: function Codec() {
    },
    _FusedCodec: function _FusedCodec(t0, t1, t2) {
      this._convert$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    Converter: function Converter() {
    },
    Converter_bind_closure: function Converter_bind_closure(t0) {
      this.$this = t0;
    },
    Encoding: function Encoding() {
    },
    Encoding_decodeStream_closure: function Encoding_decodeStream_closure() {
    },
    Encoding_decodeStream_closure0: function Encoding_decodeStream_closure0() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    _JsonEncoderSink: function _JsonEncoderSink(t0, t1, t2) {
      var _ = this;
      _._indent = t0;
      _._toEncodable = t1;
      _._sink = t2;
      _._isDone = false;
    },
    _JsonUtf8EncoderSink: function _JsonUtf8EncoderSink(t0, t1, t2, t3) {
      var _ = this;
      _._sink = t0;
      _._indent = t1;
      _._toEncodable = t2;
      _._bufferSize = t3;
      _._isDone = false;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonPrettyPrintMixin_writeMap_closure: function _JsonPrettyPrintMixin_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty(t0, t1, t2, t3, t4) {
      var _ = this;
      _._indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _._sink = t2;
      _._seen = t3;
      _._toEncodable = t4;
    },
    _JsonUtf8Stringifier: function _JsonUtf8Stringifier(t0, t1, t2, t3, t4) {
      var _ = this;
      _.bufferSize = t0;
      _.addChunk = t1;
      _.buffer = t2;
      _.index = 0;
      _._seen = t3;
      _._toEncodable = t4;
    },
    _JsonUtf8StringifierPretty: function _JsonUtf8StringifierPretty(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.indent = t0;
      _._JsonPrettyPrintMixin__indentLevel = t1;
      _.bufferSize = t2;
      _.addChunk = t3;
      _.buffer = t4;
      _.index = 0;
      _._seen = t5;
      _._toEncodable = t6;
    },
    LineSplitter: function LineSplitter() {
    },
    LineSplitter_bind_closure: function LineSplitter_bind_closure() {
    },
    _LineSplitterSink: function _LineSplitterSink() {
    },
    _LineSplitterEventSink: function _LineSplitterEventSink(t0, t1) {
      var _ = this;
      _._eventSink = t0;
      _._sink = t1;
      _._multiCarry = _._carry = null;
      _._skipLeadingLF = false;
    },
    StringConversionSink: function StringConversionSink() {
    },
    _ClosableStringSink: function _ClosableStringSink(t0, t1) {
      this._callback = t0;
      this._sink = t1;
    },
    _StringConversionSinkAsStringSinkAdapter: function _StringConversionSinkAsStringSinkAdapter(t0, t1) {
      this._buffer = t0;
      this._chunkedSink = t1;
    },
    _StringSinkConversionSink: function _StringSinkConversionSink() {
    },
    _StringAdapterSink: function _StringAdapterSink(t0) {
      this._sink = t0;
    },
    _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter(t0, t1, t2) {
      this._decoder = t0;
      this._sink = t1;
      this._stringSink = t2;
    },
    _Utf8ConversionSink: function _Utf8ConversionSink(t0, t1, t2) {
      this._decoder = t0;
      this._chunkedSink = t1;
      this._buffer = t2;
    },
    Utf8Codec: function Utf8Codec(t0) {
      this._allowMalformed = t0;
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._buffer = t0;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink(t0, t1) {
      var _ = this;
      _._sink = t0;
      _._bufferIndex = _._carry = 0;
      _._buffer = t1;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin: function __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin() {
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSink: function __Utf8EncoderSink__Utf8Encoder_StringConversionSink() {
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch;
      if (source === "")
        return null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      if (decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (hexMatch != null)
        return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
      return null;
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0 || false, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods.$shr(digit, carryBitShift);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl((digit & bitMask) >>> 0, bitShift);
      }
      if (!(digitShift >= 0 && digitShift < t2))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i, t2,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.length, i = digitsShift; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t2 = resultUsed - 1;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(resultDigits, t2);
      if (resultDigits[t2] === 0)
        resultUsed = t2;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods.$shr(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.length, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods.$shr(digit, bitShift);
      }
      if (!(last >= 0 && last < t2))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = B.JSInt_methods._shrOtherPositive$1(carry, 16);
      }
      if (!(used >= 0 && used < t3))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, c, i0, t3, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t3 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t3 + accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    _symbolMapToStringMap(map) {
      var result = new A.JsLinkedHashMap(type$.JsLinkedHashMap_String_dynamic);
      map.forEach$1(0, new A._symbolMapToStringMap_closure(result));
      return result;
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    Function_apply($function, positionalArguments, namedArguments) {
      return A.Primitives_applyFunction($function, positionalArguments, namedArguments == null ? null : A._symbolMapToStringMap(namedArguments));
    },
    Expando$($name, $T) {
      return new A.Expando(new WeakMap(), $name, $T._eval$1("Expando<0>"));
    },
    Expando__checkType(object) {
      if (A._isBool(object) || typeof object == "number" || typeof object == "string" || object instanceof A._Record)
        A.Expando__badExpandoKey(object);
    },
    Expando__badExpandoKey(object) {
      throw A.wrapException(A.ArgumentError$value(object, "object", "Expandos are not allowed on strings, numbers, bools, records or null"));
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc) {
      var t1;
      if (Math.abs(millisecondsSinceEpoch) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + millisecondsSinceEpoch, null));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new A.DateTime(millisecondsSinceEpoch, isUtc);
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
      return A.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode(charCode) {
      return A.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return A.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source, caseSensitive, multiLine) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false, false, false));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, invocation) {
      return new A.NoSuchMethodError(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments());
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.Utf8Codec_false) {
        t1 = $.$get$_Uri__needsNoEncoding();
        t1 = t1._nativeRegExp.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = B.C_Utf8Encoder.convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128) {
          t3 = byte >>> 4;
          if (!(t3 < 8))
            return A.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      var stackTrace, exception;
      if ($.$get$_hasErrorStackProperty())
        return A.getTraceFromException(new Error());
      try {
        throw A.wrapException("");
      } catch (exception) {
        stackTrace = A.getTraceFromException(exception);
        return stackTrace;
      }
    },
    DateTime_parse(formattedString) {
      var t1, t2, t3, years, month, day, hour, minute, second, milliAndMicroseconds, millisecond, tzSign, sign, hourDifference, isUtc, value, _null = null,
        match = $.$get$DateTime__parseFormat().firstMatch$1(formattedString);
      if (match != null) {
        t1 = new A.DateTime_parse_parseIntOrZero();
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t3 = t2[1];
        t3.toString;
        years = A.int_parse(t3, _null);
        if (2 >= t2.length)
          return A.ioore(t2, 2);
        t3 = t2[2];
        t3.toString;
        month = A.int_parse(t3, _null);
        if (3 >= t2.length)
          return A.ioore(t2, 3);
        t3 = t2[3];
        t3.toString;
        day = A.int_parse(t3, _null);
        if (4 >= t2.length)
          return A.ioore(t2, 4);
        hour = t1.call$1(t2[4]);
        if (5 >= t2.length)
          return A.ioore(t2, 5);
        minute = t1.call$1(t2[5]);
        if (6 >= t2.length)
          return A.ioore(t2, 6);
        second = t1.call$1(t2[6]);
        if (7 >= t2.length)
          return A.ioore(t2, 7);
        milliAndMicroseconds = new A.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
        millisecond = B.JSInt_methods._tdivFast$1(milliAndMicroseconds, 1000);
        t3 = t2.length;
        if (8 >= t3)
          return A.ioore(t2, 8);
        if (t2[8] != null) {
          if (9 >= t3)
            return A.ioore(t2, 9);
          tzSign = t2[9];
          if (tzSign != null) {
            sign = tzSign === "-" ? -1 : 1;
            if (10 >= t3)
              return A.ioore(t2, 10);
            t3 = t2[10];
            t3.toString;
            hourDifference = A.int_parse(t3, _null);
            if (11 >= t2.length)
              return A.ioore(t2, 11);
            minute -= sign * (t1.call$1(t2[11]) + 60 * hourDifference);
          }
          isUtc = true;
        } else
          isUtc = false;
        value = A.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond + B.JSNumber_methods.round$0(milliAndMicroseconds % 1000 / 1000), isUtc);
        if (value == null)
          throw A.wrapException(A.FormatException$("Time out of range", formattedString, _null));
        return A.DateTime$_withValue(value, isUtc);
      } else
        throw A.wrapException(A.FormatException$("Invalid date format", formattedString, _null));
    },
    DateTime$_withValue(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + _value, null));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return new A.DateTime(_value, isUtc);
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name, message) {
      return new A.RangeError(null, null, true, value, $name, message == null ? "Value not in range" : message);
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name == null ? "index" : $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Map_castFrom(source, $K, $V, K2, V2) {
      return new A.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1(K2)._bind$1(V2)._eval$1("CastMap<1,2,3,4>"));
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    print(object) {
      var toZone = $.printToZone;
      if (toZone == null)
        A.printString(object);
      else
        toZone.call$1(object);
    },
    Uri_Uri$dataFromString($content) {
      var t1, _null = null,
        buffer = new A.StringBuffer(""),
        indices = A._setArrayType([-1], type$.JSArray_int);
      A.UriData__writeUri(_null, _null, _null, buffer, indices);
      B.JSArray_methods.add$1(indices, buffer._contents.length);
      buffer._contents += ",";
      A.UriData__uriEncodeBytes(B.List_oFp, B.C_AsciiCodec.encode$1($content), buffer);
      t1 = buffer._contents;
      return new A.UriData(t1.charCodeAt(0) == 0 ? t1 : t1, indices, _null).get$uri();
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        if (4 >= end)
          return A.ioore(uri, 4);
        delta = ((uri.charCodeAt(4) ^ 58) * 3 | uri.charCodeAt(0) ^ 100 | uri.charCodeAt(1) ^ 97 | uri.charCodeAt(2) ^ 116 | uri.charCodeAt(3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      B.JSArray_methods.$indexSet(indices, 1, -1);
      B.JSArray_methods.$indexSet(indices, 2, -1);
      B.JSArray_methods.$indexSet(indices, 7, -1);
      B.JSArray_methods.$indexSet(indices, 3, 0);
      B.JSArray_methods.$indexSet(indices, 4, 0);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > 0)
                t2 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t2 = true;
              if (t2) {
                scheme = _null;
                isSimple = false;
              } else {
                if (schemeEnd === 4)
                  if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                    if (hostStart <= 0) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= 0;
                      t1 = delta - 0;
                      queryStart += t1;
                      fragmentStart += t1;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                    if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = "http";
                  } else
                    scheme = _null;
                else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                  if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "https";
                } else
                  scheme = _null;
                isSimple = true;
              }
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.Utf8Codec_false, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host),
        t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, port, queryParameters, scheme, userInfo) {
      var query, fragment, isFile, t1, hasAuthority, t2;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(userInfo, 0, userInfo == null ? 0 : userInfo.length);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(null, 0, 0, queryParameters);
      fragment = A._Uri__makeFragment(null, 0, 0);
      port = A._Uri__makePort(port, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__Uri$file(path, windows) {
      return (windows == null ? $.$get$_Uri__isWindowsCached() : windows) ? A._Uri__makeWindowsFileUrl(path, false) : A._Uri__makeFileUri(path, false);
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (J.contains$1$asx(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = A.SubListIterable$(segments, firstSegment, null, A._arrayInstanceType(segments)._precomputed1), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (B.JSString_methods.contains$1(t3, A.RegExp_RegExp('["*/:<>?\\\\|]', true, false)))
          if (argumentError)
            throw A.wrapException(A.ArgumentError$("Illegal character in path", null));
          else
            throw A.wrapException(A.UnsupportedError$("Illegal character in path: " + t3));
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (argumentError)
        throw A.wrapException(A.ArgumentError$(_s21_ + A.String_String$fromCharCode(charCode), null));
      else
        throw A.wrapException(A.UnsupportedError$(_s21_ + A.String_String$fromCharCode(charCode)));
    },
    _Uri__makeFileUri(path, slashTerminated) {
      var _null = null,
        segments = A._setArrayType(path.split("/"), type$.JSArray_String);
      if (slashTerminated && segments.length !== 0 && J.get$length$asx(B.JSArray_methods.get$last(segments)) !== 0)
        B.JSArray_methods.add$1(segments, "");
      if (B.JSString_methods.startsWith$1(path, "/"))
        return A._Uri__Uri(_null, _null, segments, _null, _null, "file", _null);
      else
        return A._Uri__Uri(_null, _null, segments, _null, _null, _null, _null);
    },
    _Uri__makeWindowsFileUrl(path, slashTerminated) {
      var t1, pathSegments, pathStart, hostPart, _s1_ = "\\", _null = null, _s4_ = "file";
      if (B.JSString_methods.startsWith$1(path, "\\\\?\\"))
        if (B.JSString_methods.startsWith$2(path, "UNC\\", 4))
          path = B.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = B.JSString_methods.substring$1(path, 4);
          t1 = path.length;
          if (t1 >= 3) {
            if (1 >= t1)
              return A.ioore(path, 1);
            if (path.charCodeAt(1) === 58) {
              if (2 >= t1)
                return A.ioore(path, 2);
              t1 = path.charCodeAt(2) !== 92;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1)
            throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with \\\\?\\ prefix must be absolute"));
        }
      else
        path = A.stringReplaceAllUnchecked(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && path.charCodeAt(1) === 58) {
        if (0 >= t1)
          return A.ioore(path, 0);
        A._Uri__checkWindowsDriveLetter(path.charCodeAt(0), true);
        if (t1 !== 2) {
          if (2 >= t1)
            return A.ioore(path, 2);
          t1 = path.charCodeAt(2) !== 92;
        } else
          t1 = true;
        if (t1)
          throw A.wrapException(A.ArgumentError$value(path, "path", "Windows paths with drive letter must be absolute"));
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        if (slashTerminated && J.get$length$asx(B.JSArray_methods.get$last(pathSegments)) !== 0)
          B.JSArray_methods.add$1(pathSegments, "");
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return A._Uri__Uri(_null, _null, pathSegments, _null, _null, _s4_, _null);
      }
      if (B.JSString_methods.startsWith$1(path, _s1_))
        if (B.JSString_methods.startsWith$2(path, _s1_, 1)) {
          pathStart = B.JSString_methods.indexOf$2(path, _s1_, 2);
          t1 = pathStart < 0;
          hostPart = t1 ? B.JSString_methods.substring$1(path, 2) : B.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = A._setArrayType((t1 ? "" : B.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), type$.JSArray_String);
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          if (slashTerminated && J.get$length$asx(B.JSArray_methods.get$last(pathSegments)) !== 0)
            B.JSArray_methods.add$1(pathSegments, "");
          return A._Uri__Uri(hostPart, _null, pathSegments, _null, _null, _s4_, _null);
        } else {
          pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
          if (slashTerminated && J.get$length$asx(B.JSArray_methods.get$last(pathSegments)) !== 0)
            B.JSArray_methods.add$1(pathSegments, "");
          A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return A._Uri__Uri(_null, _null, pathSegments, _null, _null, _s4_, _null);
        }
      else {
        pathSegments = A._setArrayType(path.split(_s1_), type$.JSArray_String);
        A._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        if (slashTerminated && pathSegments.length !== 0 && J.get$length$asx(B.JSArray_methods.get$last(pathSegments)) !== 0)
          B.JSArray_methods.add$1(pathSegments, "");
        return A._Uri__Uri(_null, _null, pathSegments, _null, _null, _null, _null);
      }
    },
    _Uri__computeQueryParametersAll(query) {
      var queryParameterLists;
      if (query.length === 0)
        return B.Map_empty4;
      queryParameterLists = A._Uri__splitQueryStringAll(query);
      queryParameterLists.updateAll$1(A.core___toUnmodifiableStringList$closure());
      return A.ConstantMap_ConstantMap$from(queryParameterLists, type$.String, type$.List_String);
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      t1 = host.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t1 = start + 1;
        index = A._Uri__checkZoneID(host, t1, t2);
        if (index < t2) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t2, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t1, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(host, i);
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, t3, tail, sourceLength, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t3 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t3 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_M1A, t2);
            t2 = (B.List_M1A[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              t2 = index + 1;
              if (!(t2 < t1))
                return A.ioore(host, t2);
              tail = host.charCodeAt(t2);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            slice = B.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t2._contents += slice;
            t2._contents += A._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, t3, sourceLength, tail;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          t3 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t2) {
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t3 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_ejq, t2);
            t2 = (B.List_ejq[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t2 = char >>> 4;
              if (!(t2 < 8))
                return A.ioore(B.List_YmH, t2);
              t2 = (B.List_YmH[t2] & 1 << (char & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              A._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                t2 = index + 1;
                if (!(t2 < t1))
                  return A.ioore(host, t2);
                tail = host.charCodeAt(t2);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              slice = B.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new A.StringBuffer("");
                t2 = buffer;
              } else
                t2 = buffer;
              t2._contents += slice;
              t2._contents += A._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit, t2;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (!(start < t1))
        return A.ioore(scheme, start);
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (codeUnit < 128) {
          t2 = codeUnit >>> 4;
          if (!(t2 < 8))
            return A.ioore(B.List_MMm, t2);
          t2 = (B.List_MMm[t2] & 1 << (codeUnit & 15)) !== 0;
        } else
          t2 = false;
        if (!t2)
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_OL3, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        t1 = A._arrayInstanceType(pathSegments);
        result = new A.MappedListIterable(pathSegments, t1._eval$1("String(1)")._as(new A._Uri__makePath_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_XRg, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      var result, t1 = {};
      if (query != null) {
        if (queryParameters != null)
          throw A.wrapException(A.ArgumentError$("Both query and queryParameters specified", null));
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_oFp, true, false);
      }
      if (queryParameters == null)
        return null;
      result = new A.StringBuffer("");
      t1.separator = "";
      queryParameters.forEach$1(0, new A._Uri__makeQuery_closure(new A._Uri__makeQuery_writeParameter(t1, result)));
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_oFp, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(value, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_M1A, t1);
        t1 = (B.List_M1A[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, flag, encodedBytes, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        t1 = char >>> 4;
        if (!(t1 < 16))
          return A.ioore(_s16_, t1);
        codeUnits[1] = _s16_.charCodeAt(t1);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = byte >>> 4;
          if (!(t3 < 16))
            return A.ioore(_s16_, t3);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = _s16_.charCodeAt(t3);
          t3 = index + 2;
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1, t2, index, sectionStart, buffer, char, t3, replacement, sourceLength, tail, t4, _null = null;
      for (t1 = !escapeDelimiters, t2 = component.length, index = start, sectionStart = index, buffer = _null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127) {
          t3 = char >>> 4;
          if (!(t3 < 8))
            return A.ioore(charTable, t3);
          t3 = (charTable[t3] & 1 << (char & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          ++index;
        else {
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash) {
            replacement = "/";
            sourceLength = 1;
          } else {
            if (t1)
              if (char <= 93) {
                t3 = char >>> 4;
                if (!(t3 < 8))
                  return A.ioore(B.List_YmH, t3);
                t3 = (B.List_YmH[t3] & 1 << (char & 15)) !== 0;
              } else
                t3 = false;
            else
              t3 = false;
            if (t3) {
              A._Uri__fail(component, index, "Invalid character");
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t3 = index + 1;
                if (t3 < end) {
                  if (!(t3 < t2))
                    return A.ioore(component, t3);
                  tail = component.charCodeAt(t3);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = A._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t4 = t3._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t3._contents = t4 + A.S(replacement);
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += B.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          B.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && B.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            B.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          B.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_MMm, t2);
            t2 = (B.List_MMm[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = segments.length;
      if (t1 > 0 && J.get$length$asx(segments[0]) === 2 && J.codeUnitAt$1$s(segments[0], 1) === 58) {
        if (0 >= t1)
          return A.ioore(segments, 0);
        A._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(segments[0], 0), false);
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        A._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "" + "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host(uri);
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = A.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1 === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__createList() {
      return A._setArrayType([], type$.JSArray_String);
    },
    _Uri__splitQueryStringAll(query) {
      var t1, i, start, equalsIndex, char,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_String),
        parsePair = new A._Uri__splitQueryStringAll_parsePair(query, B.Utf8Codec_false, result);
      for (t1 = query.length, i = 0, start = 0, equalsIndex = -1; i < t1;) {
        char = query.charCodeAt(i);
        if (char === 61) {
          if (equalsIndex < 0)
            equalsIndex = i;
        } else if (char === 38) {
          parsePair.call$3(start, equalsIndex, i);
          start = i + 1;
          equalsIndex = -1;
        }
        ++i;
      }
      parsePair.call$3(start, equalsIndex, i);
      return result;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var t1, byte, i, t2, charCode;
      for (t1 = s.length, byte = 0, i = 0; i < 2; ++i) {
        t2 = pos + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(s, t2);
        charCode = s.charCodeAt(t2);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = text.length,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        if (!(i >= 0 && i < t1))
          return A.ioore(text, i);
        codeUnit = text.charCodeAt(i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = plusToSpace && codeUnit === 43;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (B.Utf8Codec_false !== encoding)
          t1 = false;
        else
          t1 = true;
        if (t1)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      } else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          if (!(i >= 0 && i < t1))
            return A.ioore(text, i);
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (plusToSpace && codeUnit === 43)
            B.JSArray_methods.add$1(bytes, 32);
          else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__writeUri(mimeType, charsetName, parameters, buffer, indices) {
      var slashIndex, t1;
      if (true)
        buffer._contents = buffer._contents;
      else {
        slashIndex = A.UriData__validateMimeType("");
        if (slashIndex < 0)
          throw A.wrapException(A.ArgumentError$value("", "mimeType", "Invalid MIME type"));
        t1 = buffer._contents += A._Uri__uriEncode(B.List_yzX, B.JSString_methods.substring$2("", 0, slashIndex), B.Utf8Codec_false, false);
        buffer._contents = t1 + "/";
        buffer._contents += A._Uri__uriEncode(B.List_yzX, B.JSString_methods.substring$1("", slashIndex + 1), B.Utf8Codec_false, false);
      }
    },
    UriData__validateMimeType(mimeType) {
      var t1, slashIndex, i;
      for (t1 = mimeType.length, slashIndex = -1, i = 0; i < t1; ++i) {
        if (mimeType.charCodeAt(i) !== 47)
          continue;
        if (slashIndex < 0) {
          slashIndex = i;
          continue;
        }
        return -1;
      }
      return slashIndex;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_oFp, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes(canonicalTable, bytes, buffer) {
      var t1, byteOr, i, byte, t2,
        _s16_ = "0123456789ABCDEF";
      for (t1 = bytes.length, byteOr = 0, i = 0; i < t1; ++i) {
        byte = bytes[i];
        byteOr |= byte;
        if (byte < 128) {
          t2 = byte >>> 4;
          if (!(t2 < 8))
            return A.ioore(canonicalTable, t2);
          t2 = (canonicalTable[t2] & 1 << (byte & 15)) !== 0;
        } else
          t2 = false;
        if (t2)
          buffer._contents += A.Primitives_stringFromCharCode(byte);
        else {
          buffer._contents += A.Primitives_stringFromCharCode(37);
          t2 = byte >>> 4;
          if (!(t2 < 16))
            return A.ioore(_s16_, t2);
          buffer._contents += A.Primitives_stringFromCharCode(_s16_.charCodeAt(t2));
          buffer._contents += A.Primitives_stringFromCharCode(_s16_.charCodeAt(byte & 15));
        }
      }
      if ((byteOr & 4294967040) !== 0)
        for (i = 0; i < t1; ++i) {
          byte = bytes[i];
          if (byte > 255)
            throw A.wrapException(A.ArgumentError$value(byte, "non-byte value", null));
        }
    },
    _createTables() {
      var _i, t2, t3, t4, t5,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "\\", _s1_3 = "?", _s1_4 = "#", _s2_ = "/\\",
        t1 = type$.Uint8List,
        tables = J.JSArray_JSArray$allocateGrowable(22, t1);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t2 = new A._createTables_build(tables);
      t3 = new A._createTables_setChars();
      t4 = new A._createTables_setRange();
      t5 = t1._as(t2.call$2(0, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_, 14);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 3);
      t3.call$3(t5, _s1_2, 227);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(14, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_, 15);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s2_, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(15, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, "%", 225);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 9);
      t3.call$3(t5, _s1_2, 233);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(1, 225));
      t3.call$3(t5, _s77_, 1);
      t3.call$3(t5, _s1_0, 34);
      t3.call$3(t5, _s1_1, 10);
      t3.call$3(t5, _s1_2, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(2, 235));
      t3.call$3(t5, _s77_, 139);
      t3.call$3(t5, _s1_1, 131);
      t3.call$3(t5, _s1_2, 131);
      t3.call$3(t5, _s1_, 146);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(3, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 68);
      t3.call$3(t5, _s1_2, 68);
      t3.call$3(t5, _s1_, 18);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(4, 229));
      t3.call$3(t5, _s77_, 5);
      t4.call$3(t5, "AZ", 229);
      t3.call$3(t5, _s1_0, 102);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, "[", 232);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 138);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(5, 229));
      t3.call$3(t5, _s77_, 5);
      t4.call$3(t5, "AZ", 229);
      t3.call$3(t5, _s1_0, 102);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 138);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(6, 231));
      t4.call$3(t5, "19", 7);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 138);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(7, 231));
      t4.call$3(t5, "09", 7);
      t3.call$3(t5, "@", 68);
      t3.call$3(t5, _s1_1, 138);
      t3.call$3(t5, _s1_2, 138);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t3.call$3(t1._as(t2.call$2(8, 8)), "]", 5);
      t5 = t1._as(t2.call$2(9, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 16);
      t3.call$3(t5, _s2_, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(16, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 17);
      t3.call$3(t5, _s2_, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(17, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 9);
      t3.call$3(t5, _s1_2, 233);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(10, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 18);
      t3.call$3(t5, _s1_1, 10);
      t3.call$3(t5, _s1_2, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(18, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_, 19);
      t3.call$3(t5, _s2_, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(19, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s2_, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(11, 235));
      t3.call$3(t5, _s77_, 11);
      t3.call$3(t5, _s1_1, 10);
      t3.call$3(t5, _s1_2, 234);
      t3.call$3(t5, _s1_3, 172);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(12, 236));
      t3.call$3(t5, _s77_, 12);
      t3.call$3(t5, _s1_3, 12);
      t3.call$3(t5, _s1_4, 205);
      t5 = t1._as(t2.call$2(13, 237));
      t3.call$3(t5, _s77_, 13);
      t3.call$3(t5, _s1_3, 13);
      t4.call$3(t1._as(t2.call$2(20, 245)), "az", 21);
      t2 = t1._as(t2.call$2(21, 245));
      t4.call$3(t2, "az", 21);
      t4.call$3(t2, "09", 21);
      t3.call$3(t2, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var t1, i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (t1 = uri.length, i = start; i < end; ++i) {
        if (!(state >= 0 && state < tables.length))
          return A.ioore(tables, state);
        table = tables[state];
        if (!(i < t1))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _toUnmodifiableStringList(key, list) {
      A._asString(key);
      return A.List_List$unmodifiable(type$.List_String._as(list), type$.String);
    },
    _skipPackageNameChars(source, start, end) {
      var t1, i, dots, char;
      for (t1 = source.length, i = start, dots = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, t2, result, i, t3, stringChar, delta, lowerChar;
      for (t1 = prefix.length, t2 = string.length, result = 0, i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 < t2))
          return A.ioore(string, t3);
        stringChar = string.charCodeAt(t3);
        delta = prefix.charCodeAt(i) ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _symbolMapToStringMap_closure: function _symbolMapToStringMap_closure(t0) {
      this.result = t0;
    },
    _WeakReferenceWrapper: function _WeakReferenceWrapper(t0, t1) {
      this._weakRef = t0;
      this.$ti = t1;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    DateTime_parse_parseIntOrZero: function DateTime_parse_parseIntOrZero() {
    },
    DateTime_parse_parseMilliAndMicroseconds: function DateTime_parse_parseMilliAndMicroseconds() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParametersAll_FI = _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    _Uri__makeQuery_writeParameter: function _Uri__makeQuery_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQuery_closure: function _Uri__makeQuery_closure(t0) {
      this.writeParameter = t0;
    },
    _Uri__splitQueryStringAll_parsePair: function _Uri__splitQueryStringAll_parsePair(t0, t1, t2) {
      this.query = t0;
      this.encoding = t1;
      this.result = t2;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_queryParametersAll_FI = _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando(t0, t1, t2) {
      this._jsWeakMap = t0;
      this.name = t1;
      this.$ti = t2;
    },
    _Platform__numberOfProcessors() {
      throw A.wrapException(A.UnsupportedError$("Platform._numberOfProcessors"));
    },
    _Platform__pathSeparator() {
      throw A.wrapException(A.UnsupportedError$("Platform._pathSeparator"));
    },
    _Platform__operatingSystem() {
      throw A.wrapException(A.UnsupportedError$("Platform._operatingSystem"));
    },
    _Platform__operatingSystemVersion() {
      throw A.wrapException(A.UnsupportedError$("Platform._operatingSystemVersion"));
    },
    _Platform__localHostname() {
      throw A.wrapException(A.UnsupportedError$("Platform._localHostname"));
    },
    _Platform__executable() {
      throw A.wrapException(A.UnsupportedError$("Platform._executable"));
    },
    _Platform__resolvedExecutable() {
      throw A.wrapException(A.UnsupportedError$("Platform._resolvedExecutable"));
    },
    _Platform__executableArguments() {
      throw A.wrapException(A.UnsupportedError$("Platform._executableArguments"));
    },
    _Platform__packageConfig() {
      throw A.wrapException(A.UnsupportedError$("Platform._packageConfig"));
    },
    _Platform__environment() {
      throw A.wrapException(A.UnsupportedError$("Platform._environment"));
    },
    _Platform__version() {
      throw A.wrapException(A.UnsupportedError$("Platform._version"));
    },
    _Platform__localeName() {
      throw A.wrapException(A.UnsupportedError$("Platform._localeName"));
    },
    _Platform__script() {
      throw A.wrapException(A.UnsupportedError$("Platform._script"));
    },
    _StdIOUtils__getStdioInputStream(fd) {
      throw A.wrapException(A.UnsupportedError$("StdIOUtils._getStdioInputStream"));
    },
    _StdIOUtils__getStdioOutputStream(fd) {
      throw A.wrapException(A.UnsupportedError$("StdIOUtils._getStdioOutputStream"));
    },
    IOOverrides_current() {
      var t1 = $.Zone__current.$index(0, $.$get$_ioOverridesToken());
      if (t1 == null)
        t1 = null;
      return type$.nullable_IOOverrides._as(t1);
    },
    Platform_localeName0() {
      return A._Platform_localeName();
    },
    Platform_executable() {
      return $.$get$_Platform_executable();
    },
    Platform_resolvedExecutable() {
      return $.$get$_Platform_resolvedExecutable();
    },
    Platform_script() {
      return A._Platform_script();
    },
    Platform_executableArguments() {
      return A._Platform_executableArguments();
    },
    _Platform_localeName() {
      var result = A._Platform__localeName();
      return result;
    },
    _Platform_numberOfProcessors() {
      return A._Platform__numberOfProcessors();
    },
    _Platform_pathSeparator() {
      return A._Platform__pathSeparator();
    },
    _Platform_operatingSystem() {
      return A._Platform__operatingSystem();
    },
    _Platform_script() {
      return A._Platform__script();
    },
    _Platform_operatingSystemVersion() {
      A._Platform__operatingSystemVersion();
      var t1 = $._Platform__cachedOSVersion;
      t1.toString;
      return t1;
    },
    _Platform_localHostname() {
      A._Platform__localHostname();
    },
    _Platform_executableArguments() {
      return A._Platform__executableArguments();
    },
    _Platform_environment() {
      var t1 = $._Platform__environmentCache;
      if (t1 == null)
        A._Platform__environment();
      t1.toString;
      type$.Map_String_String._as(t1);
      return t1;
    },
    _Platform_version() {
      return A._Platform__version();
    },
    ProcessException$(executable, $arguments, message, errorCode) {
      return new A.ProcessException(executable, $arguments, message, errorCode);
    },
    stdin() {
      A.IOOverrides_current();
      var t1 = $.$get$_stdin();
      return t1;
    },
    stdout() {
      A.IOOverrides_current();
      var t1 = $.$get$_stdout();
      return t1;
    },
    FileSystemEntityType: function FileSystemEntityType(t0) {
      this._type = t0;
    },
    _StreamSinkImpl: function _StreamSinkImpl() {
    },
    _StreamSinkImpl__controller_closure: function _StreamSinkImpl__controller_closure(t0) {
      this.$this = t0;
    },
    _StreamSinkImpl__controller_closure0: function _StreamSinkImpl__controller_closure0(t0) {
      this.$this = t0;
    },
    _IOSinkImpl: function _IOSinkImpl(t0, t1, t2) {
      var _ = this;
      _._encoding = t0;
      _._target = t1;
      _._doneCompleter = t2;
      _._controllerCompleter = _._controllerInstance = null;
      _._hasError = _._isBound = _._isClosed = false;
    },
    ProcessStartMode: function ProcessStartMode(t0) {
      this._mode = t0;
    },
    ProcessResult: function ProcessResult(t0, t1, t2, t3) {
      var _ = this;
      _.exitCode = t0;
      _.stdout = t1;
      _.stderr = t2;
      _.pid = t3;
    },
    ProcessException: function ProcessException(t0, t1, t2, t3) {
      var _ = this;
      _.executable = t0;
      _.$arguments = t1;
      _.message = t2;
      _.errorCode = t3;
    },
    _convertDartFunctionFast(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(A._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast(callback, $arguments) {
      type$.List_dynamic._as($arguments);
      return A.Function_apply(type$.Function._as(callback), $arguments, null);
    },
    allowInterop(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return $F._as(A._convertDartFunctionFast(f));
    },
    _noJsifyRequired(o) {
      return o == null || A._isBool(o) || typeof o == "number" || typeof o == "string" || type$.Int8List._is(o) || type$.Uint8List._is(o) || type$.Uint8ClampedList._is(o) || type$.Int16List._is(o) || type$.Uint16List._is(o) || type$.Int32List._is(o) || type$.Uint32List._is(o) || type$.Float32List._is(o) || type$.Float64List._is(o) || type$.ByteBuffer._is(o) || type$.ByteData._is(o);
    },
    jsify(object) {
      if (A._noJsifyRequired(object))
        return object;
      return new A.jsify__convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(object);
    },
    callMethod(o, method, args, $T) {
      return $T._as(o[method].apply(o, args));
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    jsify__convert: function jsify__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    max(a, b, $T) {
      A.checkTypeBound($T, type$.num, "T", "max");
      return Math.max($T._as(a), $T._as(b));
    },
    pow(x, exponent) {
      return Math.pow(x, exponent);
    },
    Random_Random(seed) {
      var t1;
      if (seed == null)
        t1 = B.C__JSRandom;
      else {
        t1 = new A._Random();
        t1._Random$1(seed);
      }
      return t1;
    },
    _JSRandom: function _JSRandom() {
    },
    _Random: function _Random() {
      this._hi = this._lo = 0;
    },
    wrapMain(mainFn) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$wrapMain = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A.Chain_capture(new A.wrapMain_closure(mainFn), new A.wrapMain_closure0(), type$.Future_Never), $async$wrapMain);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$wrapMain, $async$completer);
    },
    wrapMain_closure: function wrapMain_closure(t0) {
      this.mainFn = t0;
    },
    wrapMain__closure0: function wrapMain__closure0() {
    },
    wrapMain_closure0: function wrapMain_closure0() {
    },
    wrapMain__closure: function wrapMain__closure() {
    },
    ActionContext: function ActionContext(t0, t1) {
      this._successTearDowns = t0;
      this._errorTearDowns = t1;
    },
    ActionResult: function ActionResult(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    NodeLoggerPlugin: function NodeLoggerPlugin() {
    },
    ChildProcess_execSync(_this, command, args, echoOutput, environment, includeParentEnvironment, runInShell, workingDirectory) {
      var t1, t2, t3, t4, stdout, e, t5, _0_0, message, exception;
      try {
        t1 = A._setArrayType([command], type$.JSArray_String);
        J.addAll$1$ax(t1, args);
        t1 = J.join$1$ax(t1, " ");
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_String);
        t3 = environment;
        if (t3 != null)
          J.addAll$1$ax(t2, t3);
        t3 = self;
        J.addAll$1$ax(t2, A.Process_get_env(type$.JSObject._as(t3.process)));
        t2 = type$.JSObject._as(A.jsify(t2));
        t4 = [null];
        J.add$1$ax(t4, null);
        J.add$1$ax(t4, null);
        stdout = A.callMethod(_this, "execSync", [t1, {cwd: workingDirectory, env: t2, stdio: t4, shell: null, encoding: "buffer"}], type$.nullable_Uint8List);
        t1 = stdout;
        if (t1 == null)
          t1 = null;
        if (t1 == null)
          t1 = new Uint8Array(0);
        t2 = new Uint8Array(0);
        return new A.ProcessResult(0, t1, t2, -1);
      } catch (exception) {
        e = A.unwrapException(exception);
        t5 = null;
        _0_0 = e;
        $label0$0: {
          if (type$.JSObject._is(_0_0)) {
            t5 = A._asString(e.message);
            break $label0$0;
          }
          t5 = J.toString$0$(e);
          break $label0$0;
        }
        message = t5;
        throw A.wrapException(A.ProcessException$(command, args, message, 0));
      }
    },
    ChildProcess_spawn(_this, command, args, environment, includeParentEnvironment, mode, runInShell, stdin, workingDirectory) {
      var t1, t2, t3, t4, t5;
      $label0$0: {
        if (B.ProcessStartMode_0 === mode) {
          t1 = "pipe";
          break $label0$0;
        }
        if (B.ProcessStartMode_2 === mode) {
          t1 = "ignore";
          break $label0$0;
        }
        if (B.ProcessStartMode_3 === mode) {
          t1 = "pipe";
          break $label0$0;
        }
        if (B.ProcessStartMode_1 === mode) {
          t1 = "inherit";
          break $label0$0;
        }
        t1 = A.unreachable();
      }
      t2 = A._arrayInstanceType(args);
      t3 = t2._eval$1("MappedListIterable<1,String>");
      t3 = A.List_List$of(new A.MappedListIterable(args, t2._eval$1("String(1)")._as(new A.ChildProcess_spawn_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = type$.String;
      t2 = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      t4 = self;
      t2.addAll$1(0, A.Process_get_env(type$.JSObject._as(t4.process)));
      t4 = type$.JSObject;
      t2 = t4._as(A.jsify(t2));
      t5 = mode === B.ProcessStartMode_2 || mode === B.ProcessStartMode_3;
      t1 = A._setArrayType([stdin == null ? t1 : stdin, t1, t1], type$.JSArray_Object);
      return A.callMethod(_this, "spawn", [command, t3, {cwd: workingDirectory, env: t2, stdio: t1, detached: t5, shell: "/bin/sh"}], t4);
    },
    NodeReadableStream_get_stream(_this) {
      var _null = null,
        controller = A.StreamController_StreamController(_null, _null, _null, _null, true, type$.List_int),
        t1 = new A.NodeReadableStream_get_stream_onData(controller);
      controller.set$onListen(new A.NodeReadableStream_get_stream_closure(_this, t1, new A.NodeReadableStream_get_stream_onDone(controller), new A.NodeReadableStream_get_stream_onError(controller)));
      controller.set$onCancel(new A.NodeReadableStream_get_stream_closure0(_this, t1));
      return new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>"));
    },
    EventEmitter_once(_this, eventName, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      _this.once(eventName, A.allowInterop(new A.EventEmitter_once_closure(new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>")), $T), type$.Function));
      return t1;
    },
    ChildProcess_spawn_closure: function ChildProcess_spawn_closure() {
    },
    NodeReadableStream_get_stream_onData: function NodeReadableStream_get_stream_onData(t0) {
      this.controller = t0;
    },
    NodeReadableStream_get_stream_onError: function NodeReadableStream_get_stream_onError(t0) {
      this.controller = t0;
    },
    NodeReadableStream_get_stream_onDone: function NodeReadableStream_get_stream_onDone(t0) {
      this.controller = t0;
    },
    NodeReadableStream_get_stream_closure: function NodeReadableStream_get_stream_closure(t0, t1, t2, t3) {
      var _ = this;
      _._this = t0;
      _.onData = t1;
      _.onDone = t2;
      _.onError = t3;
    },
    NodeReadableStream_get_stream_closure0: function NodeReadableStream_get_stream_closure0(t0, t1) {
      this._this = t0;
      this.onData = t1;
    },
    EventEmitter_once_closure: function EventEmitter_once_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    NodePlatform: function NodePlatform() {
    },
    processManager_closure: function processManager_closure() {
    },
    NodeProcessManager: function NodeProcessManager(t0) {
      this._activeProcesses = t0;
    },
    NodeProcessManager_run_closure: function NodeProcessManager_run_closure(t0, t1) {
      this.echoOutput = t0;
      this.stdout = t1;
    },
    NodeProcessManager_run_closure0: function NodeProcessManager_run_closure0(t0, t1) {
      this.echoOutput = t0;
      this.stderr = t1;
    },
    NodeProcess: function NodeProcess(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.executable = t0;
      _.$arguments = t1;
      _._jsProcess = t2;
      _._stdin = t3;
      _._stdinSink = _._stdinSub = null;
      _._stdout = t4;
      _._stderr = t5;
    },
    NodeProcess__init_closure: function NodeProcess__init_closure(t0) {
      this._box_0 = t0;
    },
    NodeProcess__init_closure0: function NodeProcess__init_closure0(t0) {
      this.$this = t0;
    },
    unreachable() {
      return A.throwExpression(new A._UnreachableError());
    },
    _UnreachableError: function _UnreachableError() {
    },
    AftComponent___fromJson_tearOff(json) {
      return A._$AftComponentFromJson(type$.Map_of_String_and_nullable_Object._as(json));
    },
    PackageInfo___fromJson_tearOff(json) {
      return A._$PackageInfoFromJson(type$.Map_of_String_and_nullable_Object._as(json));
    },
    PackageInfo_fromDirectory(dir) {
      var pubspec, example, docs,
        pubspecInfo = A.DirectoryX_get_pubspec(dir);
      if (pubspecInfo == null)
        return null;
      pubspec = pubspecInfo.pubspec;
      example = A.PackageInfo_fromDirectory(dir.childDirectory$1("example"));
      docs = A.PackageInfo_fromDirectory(dir.childDirectory$1("doc/"));
      return new A.PackageInfo(pubspec.name, dir.get$path(dir), pubspecInfo, A.PubspecX_get_flavor(pubspec), example, docs);
    },
    PubspecInfo$(pubspec, pubspecMap, pubspecYaml, uri) {
      return new A.PubspecInfo(pubspec, uri, pubspecYaml, pubspecMap);
    },
    DirectoryX_get_pubspec(_this) {
      var t1, yaml, exception,
        pubspecFile = _this.childFile$1("pubspec.yaml");
      if (!J.existsSync$0$z(pubspecFile))
        return null;
      try {
        t1 = pubspecFile;
        yaml = t1.readAsStringSync$0();
        t1 = A.PubspecInfo$(A.Pubspec_Pubspec$parse(yaml, t1.get$uri()), type$.YamlMap._as(A.loadYamlNode(yaml, t1.get$uri())), yaml, t1.get$uri());
        return t1;
      } catch (exception) {
        return null;
      }
    },
    _$AftComponentFromJson(json) {
      return A.$checkedCreate("AftComponent", json, new A._$AftComponentFromJson_closure(json), B.Map_empty0, type$.AftComponent);
    },
    _$AftComponentToJson(instance) {
      var t2, t3, t4, t5,
        t1 = instance.summary;
      t1 = t1 == null ? null : A._$PackageInfoToJson(t1);
      t2 = J.map$1$1$ax(instance.packages, new A._$AftComponentToJson_closure(), type$.Map_of_String_and_nullable_Object);
      t2 = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("ListIterable.E"));
      t3 = type$.String;
      t4 = instance.packageGraph.map$2$1(0, new A._$AftComponentToJson_closure0(), t3, type$.List_Map_of_String_and_nullable_Object);
      t5 = B.Map_gv0sl.$index(0, instance.propagate);
      t5.toString;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", instance.name, "summary", t1, "packages", t2, "packageGraph", t4, "propagate", t5], t3, type$.dynamic);
    },
    _$PackageInfoFromJson(json) {
      return A.$checkedCreate("PackageInfo", json, new A._$PackageInfoFromJson_closure(json), B.Map_empty0, type$.PackageInfo);
    },
    _$PackageInfoToJson(instance) {
      var t3, t4,
        t1 = A._$PubspecInfoToJson(instance.pubspecInfo),
        t2 = B.Map_QS6eY.$index(0, instance.flavor);
      t2.toString;
      t3 = instance.example;
      t3 = t3 == null ? null : A._$PackageInfoToJson(t3);
      t4 = instance.docs;
      t4 = t4 == null ? null : A._$PackageInfoToJson(t4);
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", instance.name, "path", instance.path, "pubspecInfo", t1, "flavor", t2, "example", t3, "docs", t4], type$.String, type$.dynamic);
    },
    _$PubspecInfoFromJson(json) {
      return A.$checkedCreate("PubspecInfo", json, new A._$PubspecInfoFromJson_closure(json), B.Map_empty0, type$.PubspecInfo);
    },
    _$PubspecInfoToJson(instance) {
      var t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["pubspec", A._extension_1_toJson(instance.pubspec), "uri", instance.uri.toString$0(0), "pubspecYaml", instance.pubspecYaml, "pubspecMap", instance.pubspecMap.cast$2$0(0, t1, type$.nullable_Object)], t1, type$.dynamic);
    },
    AftConfig: function AftConfig() {
    },
    AftComponent: function AftComponent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.summary = t1;
      _.packages = t2;
      _.packageGraph = t3;
      _.propagate = t4;
    },
    PackageInfo: function PackageInfo(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.name = t0;
      _.path = t1;
      _.pubspecInfo = t2;
      _.flavor = t3;
      _.example = t4;
      _.docs = t5;
    },
    PubspecInfo: function PubspecInfo(t0, t1, t2, t3) {
      var _ = this;
      _.pubspec = t0;
      _.uri = t1;
      _.pubspecYaml = t2;
      _.pubspecMap = t3;
      _.__PubspecInfo_pubspecYamlEditor_FI = $;
    },
    _$AftConfigSerializer: function _$AftConfigSerializer() {
    },
    _$AftConfig: function _$AftConfig(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.rootDirectory = t0;
      _.workingDirectory = t1;
      _.allPackages = t2;
      _.dependencies = t3;
      _.environment = t4;
      _.platforms = t5;
      _.ignore = t6;
      _.components = t7;
      _.scripts = t8;
    },
    AftConfigBuilder: function AftConfigBuilder() {
      var _ = this;
      _._scripts = _._components = _._ignore = _._platforms = _._environment = _._dependencies = _._allPackages = _._workingDirectory = _._rootDirectory = _._config$_$v = null;
    },
    _$AftComponentFromJson_closure: function _$AftComponentFromJson_closure(t0) {
      this.json = t0;
    },
    _$AftComponentFromJson__closure: function _$AftComponentFromJson__closure() {
    },
    _$AftComponentFromJson__closure0: function _$AftComponentFromJson__closure0() {
    },
    _$AftComponentFromJson__closure1: function _$AftComponentFromJson__closure1() {
    },
    _$AftComponentFromJson___closure0: function _$AftComponentFromJson___closure0() {
    },
    _$AftComponentFromJson__closure2: function _$AftComponentFromJson__closure2() {
    },
    _$AftComponentFromJson___closure: function _$AftComponentFromJson___closure() {
    },
    _$AftComponentFromJson____closure: function _$AftComponentFromJson____closure() {
    },
    _$AftComponentFromJson__closure3: function _$AftComponentFromJson__closure3() {
    },
    _$AftComponentToJson_closure: function _$AftComponentToJson_closure() {
    },
    _$AftComponentToJson_closure0: function _$AftComponentToJson_closure0() {
    },
    _$AftComponentToJson__closure: function _$AftComponentToJson__closure() {
    },
    _$PackageInfoFromJson_closure: function _$PackageInfoFromJson_closure(t0) {
      this.json = t0;
    },
    _$PackageInfoFromJson__closure: function _$PackageInfoFromJson__closure() {
    },
    _$PackageInfoFromJson__closure0: function _$PackageInfoFromJson__closure0() {
    },
    _$PackageInfoFromJson__closure1: function _$PackageInfoFromJson__closure1() {
    },
    _$PackageInfoFromJson__closure2: function _$PackageInfoFromJson__closure2() {
    },
    _$PackageInfoFromJson__closure3: function _$PackageInfoFromJson__closure3() {
    },
    _$PackageInfoFromJson__closure4: function _$PackageInfoFromJson__closure4() {
    },
    _$PubspecInfoFromJson_closure: function _$PubspecInfoFromJson_closure(t0) {
      this.json = t0;
    },
    _$PubspecInfoFromJson__closure: function _$PubspecInfoFromJson__closure() {
    },
    _$PubspecInfoFromJson__closure0: function _$PubspecInfoFromJson__closure0() {
    },
    _$PubspecInfoFromJson__closure1: function _$PubspecInfoFromJson__closure1() {
    },
    _$PubspecInfoFromJson__closure2: function _$PubspecInfoFromJson__closure2() {
    },
    _AftComponent_Object_AWSSerializable: function _AftComponent_Object_AWSSerializable() {
    },
    _AftComponent_Object_AWSSerializable_AWSDebuggable: function _AftComponent_Object_AWSSerializable_AWSDebuggable() {
    },
    _AftConfig_Object_AWSSerializable: function _AftConfig_Object_AWSSerializable() {
    },
    _AftConfig_Object_AWSSerializable_AWSDebuggable: function _AftConfig_Object_AWSSerializable_AWSDebuggable() {
    },
    _PackageInfo_Object_AWSEquatable: function _PackageInfo_Object_AWSEquatable() {
    },
    _PackageInfo_Object_AWSEquatable_AWSSerializable: function _PackageInfo_Object_AWSEquatable_AWSSerializable() {
    },
    _PackageInfo_Object_AWSEquatable_AWSSerializable_AWSDebuggable: function _PackageInfo_Object_AWSEquatable_AWSSerializable_AWSDebuggable() {
    },
    _PubspecInfo_Object_AWSSerializable: function _PubspecInfo_Object_AWSSerializable() {
    },
    _PubspecInfo_Object_AWSSerializable_AWSDebuggable: function _PubspecInfo_Object_AWSSerializable_AWSDebuggable() {
    },
    AftConfigLoader: function AftConfigLoader(t0) {
      this.workingDirectory = t0;
      this._loadedConfig = null;
    },
    AftConfigLoader__processPubspecs_mergePubspec: function AftConfigLoader__processPubspecs_mergePubspec(t0, t1) {
      this.aftConfig = t0;
      this.rawComponents = t1;
    },
    AftConfigLoader__processPubspecs_mergePubspec_closure: function AftConfigLoader__processPubspecs_mergePubspec_closure() {
    },
    AftConfigLoader__processPubspecs_mergePubspec__closure: function AftConfigLoader__processPubspecs_mergePubspec__closure(t0) {
      this._0_0 = t0;
    },
    AftConfigLoader__processPubspecs_mergePubspec_closure0: function AftConfigLoader__processPubspecs_mergePubspec_closure0() {
    },
    AftConfigLoader__processPubspecs_closure: function AftConfigLoader__processPubspecs_closure(t0) {
      this.repoPackages = t0;
    },
    AftConfigLoader__processPubspecs__closure: function AftConfigLoader__processPubspecs__closure(t0, t1) {
      this.repoPackages = t0;
      this.component = t1;
    },
    AftConfigLoader__processPubspecs__closure0: function AftConfigLoader__processPubspecs__closure0(t0) {
      this.packages = t0;
    },
    AftConfigLoader__processPubspecs___closure: function AftConfigLoader__processPubspecs___closure(t0) {
      this.packageName = t0;
    },
    PackageSelector___fromJson_tearOff(json) {
      return A.PackageSelector_PackageSelector$fromJson(json);
    },
    PackageSelector_PackageSelector$fromJson(json) {
      var t1, include, exclude, and, or, t2, _null = null;
      if (typeof json == "string") {
        switch (json) {
          case "all":
            return B.C__AllPackageSelector;
          case "":
          case "dev":
            return B.C__DevelopmentPackageSelector;
          case "example":
            return B.C__ExamplePackageSelector;
          case "test":
            return B.C__TestPackageSelector;
          case "root":
            return B.C__RootPackageSelector;
          case "current":
            return B.C__CurrentPackageSelector;
          case "dart":
            return B.C__DartPackageSelector;
          case "flutter":
            return B.C__FlutterPackageSelector;
        }
        return new A._PackageOrComponentSelector(json);
      }
      if (type$.List_dynamic._is(json)) {
        t1 = J.map$1$1$ax(json, A.package_selector_PackageSelector___fromJson_tearOff$closure(), type$.PackageSelector);
        return new A._OrPackageSelector(A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E")));
      }
      if (type$.Map_dynamic_dynamic._is(json)) {
        include = json.$index(0, "include");
        exclude = json.$index(0, "exclude");
        t1 = type$.nullable_List_nullable_Object;
        and = t1._as(json.$index(0, "and"));
        or = t1._as(json.$index(0, "or"));
        t1 = include == null;
        if (!t1 || exclude != null) {
          if (and != null || or != null)
            throw A.wrapException(A.ArgumentError$("include/exclude cannot be used with and/or", _null));
          t1 = t1 ? _null : A.PackageSelector_PackageSelector$fromJson(include);
          t2 = exclude == null ? _null : A.PackageSelector_PackageSelector$fromJson(exclude);
          return new A._PackageSelector(t1 == null ? B.C__AllPackageSelector : t1, t2);
        }
        if (and != null) {
          if (!t1 || exclude != null || or != null)
            throw A.wrapException(A.ArgumentError$("and cannot be used with include/exclude/or", _null));
          t1 = J.map$1$1$ax(and, A.package_selector_PackageSelector___fromJson_tearOff$closure(), type$.PackageSelector);
          return new A._AndPackageSelector(A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E")));
        }
        if (or != null) {
          if (!t1 || exclude != null || false)
            throw A.wrapException(A.ArgumentError$("and cannot be used with include/exclude/and", _null));
          t1 = J.map$1$1$ax(or, A.package_selector_PackageSelector___fromJson_tearOff$closure(), type$.PackageSelector);
          return new A._OrPackageSelector(A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E")));
        }
      }
      throw A.wrapException(A.ArgumentError$("Invalid package selector. Expected a String, List, or Map with keys: [include/exclude, and, or].", _null));
    },
    PackageSelector: function PackageSelector() {
    },
    _PackageSelector: function _PackageSelector(t0, t1) {
      this._include = t0;
      this._exclude = t1;
    },
    _PackageOrComponentSelector: function _PackageOrComponentSelector(t0) {
      this.selector = t0;
    },
    _AllPackageSelector: function _AllPackageSelector() {
    },
    _DevelopmentPackageSelector: function _DevelopmentPackageSelector() {
    },
    _ExamplePackageSelector: function _ExamplePackageSelector() {
    },
    _TestPackageSelector: function _TestPackageSelector() {
    },
    _DartPackageSelector: function _DartPackageSelector() {
    },
    _FlutterPackageSelector: function _FlutterPackageSelector() {
    },
    _RootPackageSelector: function _RootPackageSelector() {
    },
    _CurrentPackageSelector: function _CurrentPackageSelector() {
    },
    _OrPackageSelector: function _OrPackageSelector(t0) {
      this.selectors = t0;
    },
    _OrPackageSelector_toJson_closure: function _OrPackageSelector_toJson_closure() {
    },
    _AndPackageSelector: function _AndPackageSelector(t0) {
      this.selectors = t0;
    },
    _AndPackageSelector_toJson_closure: function _AndPackageSelector_toJson_closure() {
    },
    PackageSelectorConverter: function PackageSelectorConverter() {
    },
    _PackageSelector_Object_AWSSerializable: function _PackageSelector_Object_AWSSerializable() {
    },
    AftScript___fromJson_tearOff(json) {
      return A._$AftScriptFromJson(type$.Map_of_String_and_nullable_Object._as(json));
    },
    _extension_0_toJson(_this) {
      var details, t3, t4,
        t1 = type$.String,
        t2 = type$.nullable_Object,
        dependencyJson = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      if (_this instanceof A.HostedDependency) {
        dependencyJson = A.LinkedHashMap_LinkedHashMap$_literal(["version", _this.version.toString$0(0)], t1, t2);
        details = _this.hosted;
        if (details != null && details.url != null)
          dependencyJson.$indexSet(0, "hosted", details.url.toString$0(0));
      } else if (_this instanceof A.SdkDependency)
        dependencyJson = A.LinkedHashMap_LinkedHashMap$_literal(["version", _this.version.toString$0(0), "sdk", _this.sdk], t1, t2);
      else if (_this instanceof A.GitDependency) {
        t3 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_String);
        t3.$indexSet(0, "url", _this.url.toString$0(0));
        t4 = _this.ref;
        if (t4 != null)
          t3.$indexSet(0, "ref", t4);
        t4 = _this.path;
        if (t4 != null)
          t3.$indexSet(0, "path", t4);
        dependencyJson = A.LinkedHashMap_LinkedHashMap$_literal(["git", t3], t1, t2);
      } else if (_this instanceof A.PathDependency)
        dependencyJson = A.LinkedHashMap_LinkedHashMap$_literal(["path", _this.path], t1, t2);
      return dependencyJson;
    },
    _extension_1_toJson(_this) {
      var t3,
        t1 = type$.String,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.nullable_Object);
      t2.$indexSet(0, "name", _this.name);
      t3 = _this.version;
      if (t3 != null)
        t2.$indexSet(0, "version", t3._version$_text);
      t3 = _this.publishTo;
      if (t3 != null)
        t2.$indexSet(0, "publishTo", t3);
      t2.$indexSet(0, "environment", _this.environment.map$2$1(0, new A._extension_1_toJson_closure(), t1, type$.nullable_String));
      t3 = _this.homepage;
      if (t3 != null)
        t2.$indexSet(0, "homepage", t3);
      t3 = _this.repository;
      if (t3 != null)
        t2.$indexSet(0, "repository", t3.toString$0(0));
      t3 = _this.issueTracker;
      if (t3 != null)
        t2.$indexSet(0, "issueTracker", t3.toString$0(0));
      t3 = _this.description;
      if (t3 != null)
        t2.$indexSet(0, "description", t3);
      t3 = type$.Map_of_String_and_nullable_Object;
      t2.$indexSet(0, "dependencies", _this.dependencies.map$2$1(0, new A._extension_1_toJson_closure0(), t1, t3));
      t2.$indexSet(0, "dependencyOverrides", _this.dependencyOverrides.map$2$1(0, new A._extension_1_toJson_closure1(), t1, t3));
      t2.$indexSet(0, "devDependencies", _this.devDependencies.map$2$1(0, new A._extension_1_toJson_closure2(), t1, t3));
      t1 = _this.flutter;
      if (t1 != null)
        t2.$indexSet(0, "flutter", t1);
      return t2;
    },
    _$RawPubspecConfigFromJson(json) {
      return A.$checkedCreate("RawPubspecConfig", json, new A._$RawPubspecConfigFromJson_closure(), B.Map_empty0, type$.RawPubspecConfig);
    },
    _$RawAftConfigFromJson(json) {
      return A.$checkedCreate("RawAftConfig", json, new A._$RawAftConfigFromJson_closure(json), B.Map_empty0, type$.RawAftConfig);
    },
    _$RawAftConfigToJson(instance) {
      var t2, t3, t4, t5, t6,
        t1 = instance.platforms;
      t1 = t1 == null ? null : type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$platformEnvironmentSerializer(), t1, type$.PlatformEnvironment));
      t2 = type$.Map_of_String_and_nullable_Object;
      t3 = J.map$1$1$ax(instance.components, new A._$RawAftConfigToJson_closure(), t2);
      t3 = A.List_List$of(t3, true, A._instanceType(t3)._eval$1("ListIterable.E"));
      t4 = type$.String;
      t5 = instance.scripts.map$2$1(0, new A._$RawAftConfigToJson_closure0(), t4, t2);
      t6 = instance.github;
      t2 = t6 == null ? null : t2._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$gitHubPackageConfigSerializer(), t6, type$.GitHubPackageConfig));
      return A.LinkedHashMap_LinkedHashMap$_literal(["platforms", t1, "ignore", instance.ignore, "components", t3, "scripts", t5, "github", t2], t4, type$.dynamic);
    },
    _$RawAftComponentFromJson(json) {
      return A.$checkedCreate("RawAftComponent", json, new A._$RawAftComponentFromJson_closure(json), B.Map_empty0, type$.RawAftComponent);
    },
    _$RawAftComponentToJson(instance) {
      var t1 = B.Map_gv0sl.$index(0, instance.propagate);
      t1.toString;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", instance.name, "summary", instance.summary, "packages", instance.packages, "propagate", t1], type$.String, type$.dynamic);
    },
    _$AftScriptFromJson(json) {
      return A.$checkedCreate("AftScript", json, new A._$AftScriptFromJson_closure(json), B.Map_bHizW, type$.AftScript);
    },
    _$AftScriptToJson(instance) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["run", instance.run, "description", instance.description, "from", instance.from.toJson$0(), "fail-fast", instance.failFast], type$.String, type$.dynamic);
    },
    RawPubspecConfig: function RawPubspecConfig(t0, t1, t2) {
      this.dependencies = t0;
      this.environment = t1;
      this.aft = t2;
    },
    RawAftConfig: function RawAftConfig(t0, t1, t2, t3, t4) {
      var _ = this;
      _.platforms = t0;
      _.ignore = t1;
      _.components = t2;
      _.scripts = t3;
      _.github = t4;
    },
    Environment: function Environment() {
    },
    PlatformEnvironment: function PlatformEnvironment() {
    },
    AndroidEnvironment: function AndroidEnvironment() {
    },
    IosEnvironment: function IosEnvironment() {
    },
    MacOSEnvironment: function MacOSEnvironment() {
    },
    GitHubPackageConfig: function GitHubPackageConfig() {
    },
    VersionPropagation: function VersionPropagation(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RawAftComponent: function RawAftComponent(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.summary = t1;
      _.packages = t2;
      _.propagate = t3;
    },
    AftScript: function AftScript(t0, t1, t2, t3) {
      var _ = this;
      _.run = t0;
      _.description = t1;
      _.from = t2;
      _.failFast = t3;
    },
    _extension_1_toJson_closure: function _extension_1_toJson_closure() {
    },
    _extension_1_toJson_closure0: function _extension_1_toJson_closure0() {
    },
    _extension_1_toJson_closure1: function _extension_1_toJson_closure1() {
    },
    _extension_1_toJson_closure2: function _extension_1_toJson_closure2() {
    },
    _$EnvironmentSerializer: function _$EnvironmentSerializer() {
    },
    _$PlatformEnvironmentSerializer: function _$PlatformEnvironmentSerializer() {
    },
    _$AndroidEnvironmentSerializer: function _$AndroidEnvironmentSerializer() {
    },
    _$IosEnvironmentSerializer: function _$IosEnvironmentSerializer() {
    },
    _$MacOSEnvironmentSerializer: function _$MacOSEnvironmentSerializer() {
    },
    _$GitHubPackageConfigSerializer: function _$GitHubPackageConfigSerializer() {
    },
    _$Environment: function _$Environment(t0, t1) {
      this.sdk = t0;
      this.flutter = t1;
    },
    EnvironmentBuilder: function EnvironmentBuilder() {
      this._flutter = this._sdk = this._raw_config$_$v = null;
    },
    _$PlatformEnvironment: function _$PlatformEnvironment(t0, t1, t2) {
      this.android = t0;
      this.ios = t1;
      this.macOS = t2;
    },
    PlatformEnvironmentBuilder: function PlatformEnvironmentBuilder() {
      var _ = this;
      _._macOS = _._ios = _._android = _._raw_config$_$v = null;
    },
    _$AndroidEnvironment: function _$AndroidEnvironment(t0) {
      this.minSdkVersion = t0;
    },
    AndroidEnvironmentBuilder: function AndroidEnvironmentBuilder() {
      this._minSdkVersion = this._raw_config$_$v = null;
    },
    _$IosEnvironment: function _$IosEnvironment(t0) {
      this.minOSVersion = t0;
    },
    IosEnvironmentBuilder: function IosEnvironmentBuilder() {
      this._minOSVersion = this._raw_config$_$v = null;
    },
    _$MacOSEnvironment: function _$MacOSEnvironment(t0) {
      this.minOSVersion = t0;
    },
    MacOSEnvironmentBuilder: function MacOSEnvironmentBuilder() {
      this._minOSVersion = this._raw_config$_$v = null;
    },
    _$GitHubPackageConfig: function _$GitHubPackageConfig(t0) {
      this.custom = t0;
    },
    GitHubPackageConfigBuilder: function GitHubPackageConfigBuilder() {
      this._custom = this._raw_config$_$v = null;
    },
    _$RawPubspecConfigFromJson_closure: function _$RawPubspecConfigFromJson_closure() {
    },
    _$RawPubspecConfigFromJson__closure: function _$RawPubspecConfigFromJson__closure() {
    },
    _$RawPubspecConfigFromJson__closure0: function _$RawPubspecConfigFromJson__closure0() {
    },
    _$RawPubspecConfigFromJson__closure1: function _$RawPubspecConfigFromJson__closure1() {
    },
    _$RawAftConfigFromJson_closure: function _$RawAftConfigFromJson_closure(t0) {
      this.json = t0;
    },
    _$RawAftConfigFromJson__closure: function _$RawAftConfigFromJson__closure() {
    },
    _$RawAftConfigFromJson__closure0: function _$RawAftConfigFromJson__closure0() {
    },
    _$RawAftConfigFromJson___closure1: function _$RawAftConfigFromJson___closure1() {
    },
    _$RawAftConfigFromJson__closure1: function _$RawAftConfigFromJson__closure1() {
    },
    _$RawAftConfigFromJson___closure0: function _$RawAftConfigFromJson___closure0() {
    },
    _$RawAftConfigFromJson__closure2: function _$RawAftConfigFromJson__closure2() {
    },
    _$RawAftConfigFromJson___closure: function _$RawAftConfigFromJson___closure() {
    },
    _$RawAftConfigFromJson__closure3: function _$RawAftConfigFromJson__closure3() {
    },
    _$RawAftConfigToJson_closure: function _$RawAftConfigToJson_closure() {
    },
    _$RawAftConfigToJson_closure0: function _$RawAftConfigToJson_closure0() {
    },
    _$RawAftComponentFromJson_closure: function _$RawAftComponentFromJson_closure(t0) {
      this.json = t0;
    },
    _$RawAftComponentFromJson__closure: function _$RawAftComponentFromJson__closure() {
    },
    _$RawAftComponentFromJson__closure0: function _$RawAftComponentFromJson__closure0() {
    },
    _$RawAftComponentFromJson__closure1: function _$RawAftComponentFromJson__closure1() {
    },
    _$RawAftComponentFromJson___closure: function _$RawAftComponentFromJson___closure() {
    },
    _$RawAftComponentFromJson__closure2: function _$RawAftComponentFromJson__closure2() {
    },
    _$AftScriptFromJson_closure: function _$AftScriptFromJson_closure(t0) {
      this.json = t0;
    },
    _$AftScriptFromJson__closure: function _$AftScriptFromJson__closure() {
    },
    _$AftScriptFromJson__closure0: function _$AftScriptFromJson__closure0() {
    },
    _$AftScriptFromJson__closure1: function _$AftScriptFromJson__closure1() {
    },
    _$AftScriptFromJson__closure2: function _$AftScriptFromJson__closure2() {
    },
    _AftScript_Object_AWSSerializable: function _AftScript_Object_AWSSerializable() {
    },
    _AftScript_Object_AWSSerializable_AWSDebuggable: function _AftScript_Object_AWSSerializable_AWSDebuggable() {
    },
    _AndroidEnvironment_Object_AWSSerializable: function _AndroidEnvironment_Object_AWSSerializable() {
    },
    _AndroidEnvironment_Object_AWSSerializable_AWSDebuggable: function _AndroidEnvironment_Object_AWSSerializable_AWSDebuggable() {
    },
    _Environment_Object_AWSSerializable: function _Environment_Object_AWSSerializable() {
    },
    _Environment_Object_AWSSerializable_AWSDebuggable: function _Environment_Object_AWSSerializable_AWSDebuggable() {
    },
    _GitHubPackageConfig_Object_AWSSerializable: function _GitHubPackageConfig_Object_AWSSerializable() {
    },
    _GitHubPackageConfig_Object_AWSSerializable_AWSDebuggable: function _GitHubPackageConfig_Object_AWSSerializable_AWSDebuggable() {
    },
    _IosEnvironment_Object_AWSSerializable: function _IosEnvironment_Object_AWSSerializable() {
    },
    _IosEnvironment_Object_AWSSerializable_AWSDebuggable: function _IosEnvironment_Object_AWSSerializable_AWSDebuggable() {
    },
    _MacOSEnvironment_Object_AWSSerializable: function _MacOSEnvironment_Object_AWSSerializable() {
    },
    _MacOSEnvironment_Object_AWSSerializable_AWSDebuggable: function _MacOSEnvironment_Object_AWSSerializable_AWSDebuggable() {
    },
    _RawAftComponent_Object_AWSSerializable: function _RawAftComponent_Object_AWSSerializable() {
    },
    _RawAftComponent_Object_AWSSerializable_AWSDebuggable: function _RawAftComponent_Object_AWSSerializable_AWSDebuggable() {
    },
    _RawAftConfig_Object_AWSSerializable: function _RawAftConfig_Object_AWSSerializable() {
    },
    _RawAftConfig_Object_AWSSerializable_AWSDebuggable: function _RawAftConfig_Object_AWSSerializable_AWSDebuggable() {
    },
    JsonSerializer: function JsonSerializer(t0, t1) {
      this.fromJson = t0;
      this.$ti = t1;
    },
    VersionConstraintSerializer: function VersionConstraintSerializer(t0) {
      this.$ti = t0;
    },
    _$aftSerializers_closure: function _$aftSerializers_closure() {
    },
    _$aftSerializers_closure0: function _$aftSerializers_closure0() {
    },
    _$aftSerializers_closure1: function _$aftSerializers_closure1() {
    },
    _$aftSerializers_closure2: function _$aftSerializers_closure2() {
    },
    _$aftSerializers_closure3: function _$aftSerializers_closure3() {
    },
    Deputy_create(fileSystem, logger, platform, processManager) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Deputy),
        $async$returnValue, t1, repo;
      var $async$Deputy_create = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = J.cwd$0$x(self.process);
              $async$goto = 3;
              return A._asyncAwait(A.Repo_open(new A.AftConfigLoader(new A.Directory(t1)).load$0(0), fileSystem, platform, processManager), $async$Deputy_create);
            case 3:
              // returning from await.
              repo = $async$result;
              A.AWSHttpClientImpl$();
              t1 = A.AWSLogger_AWSLogger(A.AWSLogger_AWSLogger("AWS")._logger.get$fullName() + ".PubVersionResolver");
              $async$returnValue = new A.Deputy(repo, new A.PubVersionResolver(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_PubVersionInfo), t1));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Deputy_create, $async$completer);
    },
    Deputy: function Deputy(t0, t1) {
      this.repo = t0;
      this.versionResolver = t1;
    },
    Deputy__listDependencyGroups_closure: function Deputy__listDependencyGroups_closure(t0, t1) {
      this.$this = t0;
      this.groups = t1;
    },
    Deputy__listDependencyGroups__closure: function Deputy__listDependencyGroups__closure(t0) {
      this.$this = t0;
    },
    Deputy__listDependencyGroups__closure0: function Deputy__listDependencyGroups__closure0(t0) {
      this._0_0 = t0;
    },
    Deputy__listDependencyGroups_closure0: function Deputy__listDependencyGroups_closure0() {
    },
    Group: function Group() {
    },
    _$_serializers_closure: function _$_serializers_closure() {
    },
    _$GroupSerializer: function _$GroupSerializer() {
    },
    _$Group: function _$Group(t0, t1, t2, t3) {
      var _ = this;
      _.packageName = t0;
      _.latestVersion = t1;
      _.globalConstraint = t2;
      _.dependentPackages = t3;
    },
    GroupBuilder: function GroupBuilder() {
      var _ = this;
      _._dependentPackages = _._globalConstraint = _._latestVersion = _._packageName = _._$v = null;
    },
    _Group_Object_AWSSerializable: function _Group_Object_AWSSerializable() {
    },
    GitDir_fromExisting(gitDirRoot, processManager) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.GitDir),
        $async$returnValue, commonDirRaw, path, t1, gitDirRaw, t2, t3, gitDir, $async$temp1, $async$temp2;
      var $async$GitDir_fromExisting = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              path = A.absolute(gitDirRoot);
              t1 = type$.JSArray_String;
              $async$temp1 = B.JSString_methods;
              $async$temp2 = A;
              $async$goto = 3;
              return A._asyncAwait(A.RunGit_runGit(processManager, A._setArrayType(["rev-parse", "--git-dir"], t1), path, true), $async$GitDir_fromExisting);
            case 3:
              // returning from await.
              gitDirRaw = $async$temp1.trim$0($async$temp2._asString($async$result.stdout));
              t2 = $.$get$context();
              t3 = t2.style;
              gitDir = t3.rootLength$1(gitDirRaw) > 0 ? gitDirRaw : t2.canonicalize$1(A.join(path, gitDirRaw));
              if (t2._isWithinOrEquals$2(path, t2.dirname$1(0, gitDir)) === B._PathRelation_equal) {
                $async$returnValue = new A.GitDir(path, processManager);
                // goto return
                $async$goto = 1;
                break;
              }
              $async$temp1 = B.JSString_methods;
              $async$temp2 = A;
              $async$goto = 4;
              return A._asyncAwait(A.RunGit_runGit(processManager, A._setArrayType(["rev-parse", "--git-common-dir"], t1), path, true), $async$GitDir_fromExisting);
            case 4:
              // returning from await.
              commonDirRaw = $async$temp1.trim$0($async$temp2._asString($async$result.stdout));
              t2 = t2._isWithinOrEquals$2(gitDir, t3.rootLength$1(commonDirRaw) > 0 ? commonDirRaw : t2.canonicalize$1(A.join(path, commonDirRaw))) === B._PathRelation_equal;
              $async$temp1 = B.JSString_methods;
              $async$temp2 = A;
              $async$goto = 5;
              return A._asyncAwait(A.RunGit_runGit(processManager, A._setArrayType(["rev-parse", "--show-prefix"], t1), path, true), $async$GitDir_fromExisting);
            case 5:
              // returning from await.
              if ($async$temp1.trim$0($async$temp2._asString($async$result.stdout)).length !== 0 || t2)
                throw A.wrapException(A.ArgumentError$('The provided value "' + gitDirRoot + '" is not the root of a git directory or worktree', null));
              $async$returnValue = new A.GitDir(path, processManager);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$GitDir_fromExisting, $async$completer);
    },
    GitDir: function GitDir(t0, t1) {
      this.path = t0;
      this.processManager = t1;
    },
    RunGit_runGit(_this, $arguments, processWorkingDir, throwOnError) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ProcessResult),
        $async$returnValue, result, t1;
      var $async$RunGit_runGit = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._setArrayType(["git"], type$.JSArray_String);
              B.JSArray_methods.addAll$1(t1, $arguments);
              $async$goto = 3;
              return A._asyncAwait(_this.run$3$runInShell$workingDirectory(t1, true, processWorkingDir), $async$RunGit_runGit);
            case 3:
              // returning from await.
              result = $async$result;
              A.RunGit__throwIfProcessFailed(_this, result, "git", $arguments);
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$RunGit_runGit, $async$completer);
    },
    RunGit__throwIfProcessFailed(_this, pr, process, args) {
      var t2, t3, t4, message,
        t1 = pr.exitCode;
      if (t1 !== 0) {
        t2 = type$.String;
        t3 = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        t3.$indexSet(0, "Standard out", B.JSString_methods.trim$0(J.toString$0$(pr.stdout)));
        t3.$indexSet(0, "Standard error", B.JSString_methods.trim$0(J.toString$0$(pr.stderr)));
        t3.removeWhere$1(0, new A.RunGit__throwIfProcessFailed_closure());
        t4 = t3.__js_helper$_length;
        if (t4 === 0)
          message = "Unknown error";
        else if (t4 === 1) {
          t2 = t3.get$values(t3);
          message = t2._f.call$1(J.get$single$ax(t2.__internal$_iterable));
        } else
          message = t3.get$entries(t3).map$1$1(0, new A.RunGit__throwIfProcessFailed_closure0(), t2).join$1(0, "\n");
        throw A.wrapException(A.ProcessException$(process, args, message, t1));
      }
    },
    RunGit__throwIfProcessFailed_closure: function RunGit__throwIfProcessFailed_closure() {
    },
    RunGit__throwIfProcessFailed_closure0: function RunGit__throwIfProcessFailed_closure0() {
    },
    PubspecX_get_flavor(_this) {
      var t1 = _this.dependencies;
      t1 = t1.get$keys(t1);
      if (t1.contains$1(t1, "flutter"))
        return B.PackageFlavor_0_flutter;
      return B.PackageFlavor_1_dart;
    },
    PackageFlavor: function PackageFlavor(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    PubVersionInfo: function PubVersionInfo(t0) {
      this.allVersions = t0;
    },
    PubVersionInfo_latestVersion_closure: function PubVersionInfo_latestVersion_closure() {
    },
    PubVersionInfo_latestPrerelease_closure: function PubVersionInfo_latestPrerelease_closure() {
    },
    DependencyType: function DependencyType(t0, t1, t2) {
      this.key = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    Repo_open(aftConfig, fileSystem, platform, processManager) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Repo),
        $async$returnValue, gitDir;
      var $async$Repo_open = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.GitDir_fromExisting(aftConfig.rootDirectory.toFilePath$0(), processManager), $async$Repo_open);
            case 3:
              // returning from await.
              gitDir = $async$result;
              A.AWSLogger_AWSLogger(A.AWSLogger_AWSLogger("AWS")._logger.get$fullName() + ".Repo");
              $async$returnValue = new A.Repo(aftConfig, fileSystem, gitDir, A.LinkedHashMap_LinkedHashMap$_empty(type$.Record_2_String_and_String, type$.GitChanges), A.LinkedHashMap_LinkedHashMap$_empty(type$.PackageInfo, type$.ChangelogUpdate));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Repo_open, $async$completer);
    },
    Repo: function Repo(t0, t1, t2, t3, t4) {
      var _ = this;
      _.aftConfig = t0;
      _.fileSystem = t1;
      _.__Repo_rootDir_FI = $;
      _.git = t2;
      _.__Repo_rootPubspecEditor_FI = _.__Repo_rootPubspec_FI = $;
      _._changesCache = t3;
      _.changelogUpdates = t4;
    },
    Repo_getPackageGraph_closure: function Repo_getPackageGraph_closure(t0) {
      this.$this = t0;
    },
    dfs(graph, visit, $Node) {
      graph._map.forEach$1(0, graph.$ti._eval$1("~(1,2)")._as(new A.dfs_search(A.LinkedHashSet_LinkedHashSet$_empty($Node), visit, graph, $Node)));
    },
    dfs_search: function dfs_search(t0, t1, t2, t3) {
      var _ = this;
      _.visited = t0;
      _.visit = t1;
      _.graph = t2;
      _.Node = t3;
    },
    VersionResolver: function VersionResolver() {
    },
    VersionResolver_updateFor_closure: function VersionResolver_updateFor_closure(t0) {
      this._0_0 = t0;
    },
    VersionResolver_updateFor_closure0: function VersionResolver_updateFor_closure0(t0) {
      this._1_0 = t0;
    },
    VersionResolver_updateFor_closure1: function VersionResolver_updateFor_closure1(t0) {
      this._1_1 = t0;
    },
    VersionResolver_updateFor_closure2: function VersionResolver_updateFor_closure2(t0) {
      this._1_0 = t0;
    },
    VersionResolver_updateFor_closure3: function VersionResolver_updateFor_closure3(t0) {
      this._1_4 = t0;
    },
    VersionResolver_updateFor_closure4: function VersionResolver_updateFor_closure4(t0) {
      this._1_4 = t0;
    },
    VersionResolver_updateFor_closure5: function VersionResolver_updateFor_closure5(t0) {
      this._1_1 = t0;
    },
    VersionResolver_updateFor_closure6: function VersionResolver_updateFor_closure6(t0) {
      this._1_1 = t0;
    },
    PubVersionResolver: function PubVersionResolver(t0, t1) {
      this._cache = t0;
      this.logger = t1;
    },
    PubVersionResolver_latestVersion_closure: function PubVersionResolver_latestVersion_closure() {
    },
    _VersionWindow: function _VersionWindow(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    AsyncMemoizer: function AsyncMemoizer(t0, t1) {
      this._async_memoizer$_completer = t0;
      this.$ti = t1;
    },
    collectBytes(source) {
      return A._collectBytes(source, new A.collectBytes_closure(), type$.Future_Uint8List);
    },
    _collectBytes(source, result, $T) {
      var bytes = new A._BytesBuilder(A._setArrayType([], type$.JSArray_Uint8List)),
        t1 = new A._Future($.Zone__current, type$._Future_Uint8List),
        completer = new A._SyncCompleter(t1, type$._SyncCompleter_Uint8List);
      return result.call$2(source.listen$4$cancelOnError$onDone$onError(0, bytes.get$add(bytes), true, new A._collectBytes_closure(completer, bytes), completer.get$completeError()), t1);
    },
    collectBytes_closure: function collectBytes_closure() {
    },
    _collectBytes_closure: function _collectBytes_closure(t0, t1) {
      this.completer = t0;
      this.bytes = t1;
    },
    CancelableCompleter$(onCancel, $T) {
      var t1 = $.Zone__current;
      return new A.CancelableCompleter(new A._AsyncCompleter(new A._Future(t1, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>")), new A._AsyncCompleter(new A._Future(t1, type$._Future_void), type$._AsyncCompleter_void), onCancel, $T._eval$1("CancelableCompleter<0>"));
    },
    CancelableOperation: function CancelableOperation(t0, t1) {
      this._cancelable_operation$_completer = t0;
      this.$ti = t1;
    },
    CancelableOperation_valueOrCancellation_closure: function CancelableOperation_valueOrCancellation_closure(t0, t1) {
      this.completer = t0;
      this.cancellationValue = t1;
    },
    CancelableOperation_then_closure: function CancelableOperation_then_closure(t0, t1, t2) {
      this.$this = t0;
      this.onValue = t1;
      this.R = t2;
    },
    CancelableOperation_then_closure0: function CancelableOperation_then_closure0(t0, t1) {
      this.onError = t0;
      this.R = t1;
    },
    CancelableOperation_thenOperation_closure0: function CancelableOperation_thenOperation_closure0(t0, t1, t2) {
      this.$this = t0;
      this.completer = t1;
      this.onValue = t2;
    },
    CancelableOperation_thenOperation_closure: function CancelableOperation_thenOperation_closure(t0, t1) {
      this.completer = t0;
      this.onError = t1;
    },
    CancelableOperation_thenOperation_closure1: function CancelableOperation_thenOperation_closure1(t0, t1) {
      this.completer = t0;
      this.onCancel = t1;
    },
    CancelableCompleter: function CancelableCompleter(t0, t1, t2, t3) {
      var _ = this;
      _._inner = t0;
      _._cancelCompleter = t1;
      _._cancelable_operation$_onCancel = t2;
      _._mayComplete = true;
      _.__CancelableCompleter_operation_FI = $;
      _.$ti = t3;
    },
    CancelableCompleter_complete_closure: function CancelableCompleter_complete_closure(t0) {
      this.$this = t0;
    },
    CancelableCompleter_complete_closure0: function CancelableCompleter_complete_closure0(t0) {
      this.$this = t0;
    },
    DelegatingStreamSubscription: function DelegatingStreamSubscription() {
    },
    FutureGroup: function FutureGroup(t0, t1, t2) {
      var _ = this;
      _._future_group$_pending = 0;
      _._closed = false;
      _._completer = t0;
      _._future_group$_values = t1;
      _.$ti = t2;
    },
    FutureGroup_add_closure: function FutureGroup_add_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    FutureGroup_add_closure0: function FutureGroup_add_closure0(t0) {
      this.$this = t0;
    },
    ErrorResult: function ErrorResult(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    ValueResult: function ValueResult(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    StreamQueue: function StreamQueue(t0, t1, t2, t3) {
      var _ = this;
      _._stream_queue$_source = t0;
      _._stream_queue$_subscription = null;
      _._stream_queue$_isClosed = _._stream_queue$_isDone = false;
      _._eventsReceived = 0;
      _._eventQueue = t1;
      _._requestQueue = t2;
      _.$ti = t3;
    },
    StreamQueue__ensureListening_closure: function StreamQueue__ensureListening_closure(t0) {
      this.$this = t0;
    },
    StreamQueue__ensureListening_closure1: function StreamQueue__ensureListening_closure1(t0) {
      this.$this = t0;
    },
    StreamQueue__ensureListening_closure0: function StreamQueue__ensureListening_closure0(t0) {
      this.$this = t0;
    },
    _NextRequest: function _NextRequest(t0, t1) {
      this._stream_queue$_completer = t0;
      this.$ti = t1;
    },
    _CancelRequest: function _CancelRequest(t0, t1, t2) {
      this._stream_queue$_completer = t0;
      this._streamQueue = t1;
      this.$ti = t2;
    },
    _HasNextRequest: function _HasNextRequest(t0, t1) {
      this._stream_queue$_completer = t0;
      this.$ti = t1;
    },
    StreamSplitter: function StreamSplitter(t0, t1, t2, t3, t4) {
      var _ = this;
      _._stream_splitter$_stream = t0;
      _._stream_splitter$_subscription = null;
      _._stream_splitter$_buffer = t1;
      _._controllers = t2;
      _._closeGroup = t3;
      _._stream_splitter$_isDone = false;
      _.$ti = t4;
    },
    StreamSplitter_split_closure: function StreamSplitter_split_closure(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    StreamSplitter__onPause_closure: function StreamSplitter__onPause_closure(t0) {
      this.$this = t0;
    },
    SubscriptionStream: function SubscriptionStream(t0, t1) {
      this._subscription_stream$_source = t0;
      this.$ti = t1;
    },
    _CancelOnErrorSubscriptionWrapper: function _CancelOnErrorSubscriptionWrapper(t0, t1) {
      this._stream_subscription$_source = t0;
      this.$ti = t1;
    },
    _CancelOnErrorSubscriptionWrapper_onError_closure: function _CancelOnErrorSubscriptionWrapper_onError_closure(t0, t1) {
      this.$this = t0;
      this.handleError = t1;
    },
    _CancelOnErrorSubscriptionWrapper_onError__closure: function _CancelOnErrorSubscriptionWrapper_onError__closure(t0, t1, t2) {
      this.handleError = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    CaseInsensitiveMap$(base, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(A.comparators__equalsIgnoreAsciiCase$closure(), A.comparators__hashIgnoreAsciiCase$closure(), type$.String, $V);
      t1.addAll$1(0, base);
      return new A.CaseInsensitiveMap(t1, $V._eval$1("CaseInsensitiveMap<0>"));
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1) {
      this._base = t0;
      this.$ti = t1;
    },
    AWSHttpException_AWSHttpException(request, underlyingException) {
      if (underlyingException instanceof A.AWSHttpException)
        return underlyingException;
      return new A.AWSHttpException(request.method, request.get$uri(), underlyingException);
    },
    AWSHttpException: function AWSHttpException(t0, t1, t2) {
      this.method = t0;
      this.uri = t1;
      this.underlyingException = t2;
    },
    CancellationException: function CancellationException(t0) {
      this.operationId = t0;
    },
    AlpnProtocol: function AlpnProtocol(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SupportedProtocols: function SupportedProtocols(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    AWSHttpClient: function AWSHttpClient() {
    },
    AWSHttpClient_onBadCertificate_closure: function AWSHttpClient_onBadCertificate_closure() {
    },
    AWSHttpClientImpl$() {
      return new A.AWSHttpClientImpl(A._setArrayType([], type$.JSArray_WeakReference_Cancelable), new A.AWSHttpClient_onBadCertificate_closure());
    },
    AWSHttpClientImpl: function AWSHttpClientImpl(t0, t1) {
      this._openConnections = t0;
      this.onBadCertificate = t1;
    },
    AWSHttpClientImpl__send_closure: function AWSHttpClientImpl__send_closure(t0, t1) {
      this._box_0 = t0;
      this.logger = t1;
    },
    AWSHttpClientImpl__send_closure0: function AWSHttpClientImpl__send_closure0(t0) {
      this.abortController = t0;
    },
    AWSHttpClientImpl__send_closure1: function AWSHttpClientImpl__send_closure1(t0, t1) {
      this._box_0 = t0;
      this.requestProgressController = t1;
    },
    AWSHttpClientImpl__send_closure2: function AWSHttpClientImpl__send_closure2(t0, t1, t2) {
      this.cancelTrigger = t0;
      this.logger = t1;
      this.requestProgressController = t2;
    },
    AWSHttpClientImpl__send_closure3: function AWSHttpClientImpl__send_closure3(t0, t1) {
      this.logger = t0;
      this.cancelTrigger = t1;
    },
    AWSHttpClientImpl__send_closure4: function AWSHttpClientImpl__send_closure4(t0, t1) {
      this.bodyController = t0;
      this.responseProgressController = t1;
    },
    AWSHttpClientImpl__send_closure5: function AWSHttpClientImpl__send_closure5(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cancelTrigger = t1;
      _.logger = t2;
      _.responseProgressController = t3;
    },
    AWSHttpClientImpl_send_wrappedOnCancel: function AWSHttpClientImpl_send_wrappedOnCancel(t0, t1, t2, t3, t4) {
      var _ = this;
      _.cancelTrigger = t0;
      _.abortController = t1;
      _.requestProgressController = t2;
      _.responseProgressController = t3;
      _.onCancel = t4;
    },
    AWSHttpClientImpl_send_closure: function AWSHttpClientImpl_send_closure(t0, t1) {
      this.completer = t0;
      this.request = t1;
    },
    AWSHttpMethod: function AWSHttpMethod(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    AWSHttpOperation$(operation, onCancel, requestProgress, responseProgress, ResponseType) {
      var positionalArgs, namedArgs, t1, rng, t2, rnds,
        _s14_ = "positionalArgs",
        _s9_ = "namedArgs",
        options = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      B.C_Uuid._initV4$0();
      positionalArgs = options.$index(0, _s14_) != null ? options.$index(0, _s14_) : [];
      namedArgs = options.$index(0, _s9_) != null ? type$.Map_Symbol_dynamic._as(options.$index(0, _s9_)) : B.Map_empty;
      t1 = type$.List_int;
      if (options.$index(0, "rng") != null)
        rng = t1._as(A.Function_apply(type$.Function._as(options.$index(0, "rng")), type$.nullable_List_dynamic._as(positionalArgs), namedArgs));
      else {
        t2 = B.C_Uuid.get$_uuid$_state().$index(0, "globalRNG");
        t2.toString;
        rng = t1._as(type$.dynamic_Function._as(t2).call$0());
      }
      rnds = options.$index(0, "random") != null ? t1._as(options.$index(0, "random")) : rng;
      t1 = J.getInterceptor$asx(rnds);
      t2 = t1.$index(rnds, 6);
      if (typeof t2 !== "number")
        return t2.$and();
      t1.$indexSet(rnds, 6, t2 & 15 | 64);
      t2 = t1.$index(rnds, 8);
      if (typeof t2 !== "number")
        return t2.$and();
      t1.$indexSet(rnds, 8, t2 & 63 | 128);
      if (t1.get$length(rnds) - 0 < 16) {
        t2 = t1.get$length(rnds);
        A.throwExpression(A.RangeError$("buffer too small: need 16: length=" + t2));
      }
      t2 = $.$get$Uuid__byteToHex();
      return new A.AWSHttpOperation(requestProgress, responseProgress, B.JSArray_methods.$index(t2, t1.$index(rnds, 0)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 1)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 2)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 3)) + "-" + B.JSArray_methods.$index(t2, t1.$index(rnds, 4)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 5)) + "-" + B.JSArray_methods.$index(t2, t1.$index(rnds, 6)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 7)) + "-" + B.JSArray_methods.$index(t2, t1.$index(rnds, 8)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 9)) + "-" + B.JSArray_methods.$index(t2, t1.$index(rnds, 10)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 11)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 12)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 13)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 14)) + B.JSArray_methods.$index(t2, t1.$index(rnds, 15)), onCancel, operation, new A.AsyncMemoizer(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._AsyncCompleter_void), type$.AsyncMemoizer_void), ResponseType._eval$1("AWSHttpOperation<0>"));
    },
    AWSHttpOperation: function AWSHttpOperation(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.requestProgress = t0;
      _.responseProgress = t1;
      _.id = t2;
      _._aws_operation$_onCancel = t3;
      _.operation = t4;
      _._cancelMemo = t5;
      _.$ti = t6;
    },
    _AWSHttpOperation_AWSOperation_AWSProgressOperation: function _AWSHttpOperation_AWSOperation_AWSProgressOperation() {
    },
    AWSBaseHttpRequest: function AWSBaseHttpRequest() {
    },
    AWSBaseHttpRequest_send_closeClient: function AWSBaseHttpRequest_send_closeClient(t0, t1) {
      this.client = t0;
      this.useClient = t1;
    },
    AWSBaseHttpRequest_send_closure: function AWSBaseHttpRequest_send_closure(t0) {
      this.closeClient = t0;
    },
    AWSBaseHttpRequest_send_closure0: function AWSBaseHttpRequest_send_closure0(t0) {
      this.closeClient = t0;
    },
    AWSBaseHttpRequest_send_closure1: function AWSBaseHttpRequest_send_closure1(t0, t1) {
      this.closeClient = t0;
      this.onCancel = t1;
    },
    AWSHttpRequest: function AWSHttpRequest(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.bodyBytes = t0;
      _.method = t1;
      _.scheme = t2;
      _.host = t3;
      _.port = t4;
      _.path = t5;
      _._queryParameters = t6;
      _.headers = t7;
      _.__AWSBaseHttpRequest_uri_FI = $;
      _.followRedirects = t8;
      _.maxRedirects = t9;
    },
    AWSBaseHttpResponse: function AWSBaseHttpResponse() {
    },
    AWSStreamedHttpResponse: function AWSStreamedHttpResponse(t0, t1) {
      var _ = this;
      _._splitter = null;
      _._aws_http_response$_body = t0;
      _.debugNumSplits = 0;
      _.statusCode = t1;
    },
    JSEnum: function JSEnum() {
    },
    PropsResponse_get_headers(_this) {
      var t1 = type$.String,
        headers = A.CaseInsensitiveMap$(A.LinkedHashMap_LinkedHashMap$_empty(t1, t1), t1);
      type$.JavaScriptObject._as(_this.headers).forEach(A.allowInterop(new A.PropsResponse_get_headers_closure(headers), type$.Function));
      return headers;
    },
    RequestCache: function RequestCache(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RequestCredentials: function RequestCredentials(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RequestRedirect: function RequestRedirect(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RequestDestination: function RequestDestination(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    RequestMode: function RequestMode(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    PropsResponse_get_headers_closure: function PropsResponse_get_headers_closure(t0) {
      this.headers = t0;
    },
    _RequestCache__Enum_JSEnum: function _RequestCache__Enum_JSEnum() {
    },
    _RequestCredentials__Enum_JSEnum: function _RequestCredentials__Enum_JSEnum() {
    },
    _RequestDestination__Enum_JSEnum: function _RequestDestination__Enum_JSEnum() {
    },
    _RequestMode__Enum_JSEnum: function _RequestMode__Enum_JSEnum() {
    },
    _RequestRedirect__Enum_JSEnum: function _RequestRedirect__Enum_JSEnum() {
    },
    Promise_fromFuture_staticInteropFactoryStub(future, $T) {
      return type$.JavaScriptObject._as(new self.Promise(A.allowInterop(new A.Promise_fromFuture_staticInteropFactoryStub_closure(future, false, $T), $T._eval$1("~(~(0),~(Object))"))));
    },
    Promise_fromFuture_staticInteropFactoryStub_closure: function Promise_fromFuture_staticInteropFactoryStub_closure(t0, t1, t2) {
      this.future = t0;
      this.captureError = t1;
      this.T = t2;
    },
    UnderlyingSource__staticInteropFactoryStub(pull) {
      var startFn = self.undefined,
        pullFn = type$.Future_void_Function_JavaScriptObject._is(pull) ? A.allowInterop(new A.UnderlyingSource__staticInteropFactoryStub_closure(pull), type$.JavaScriptObject_Function_JavaScriptObject) : A.allowInterop(pull, type$.void_Function_JavaScriptObject),
        cancelFn = self.undefined,
        t1 = B.ReadableStreamType_1.get$jsValue(),
        t2 = self.undefined;
      return type$.JavaScriptObject._as({start: startFn, pull: pullFn, cancel: cancelFn, type: t1, autoAllocateChunkSize: t2});
    },
    ReadableStreamView__pipeFrom(stream, sink, progressSink) {
      return A.ReadableStreamView__pipeFrom$body(stream, sink, progressSink);
    },
    ReadableStreamView__pipeFrom$body(stream, sink, progressSink) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], reader, bytesRead, chunk, value, e, st, t1, t2, t3, t4, t5, t6, t7, t8, t9, exception, $async$exception;
      var $async$ReadableStreamView__pipeFrom = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = type$.JavaScriptObject;
              reader = t1._as(stream.getReader(B.ReadableStreamReaderMode_1.get$jsValue()));
              bytesRead = 0;
              t2 = sink.$ti._precomputed1, t3 = sink._async$_target, t4 = progressSink.$ti._precomputed1, t5 = progressSink._async$_target, t6 = type$.Object, t7 = type$.nullable_Uint8List;
            case 7:
              // for condition
              // trivial condition
              $async$goto = 9;
              return A._asyncAwait(A.promiseToFuture(t6._as(reader.read()), t1), $async$ReadableStreamView__pipeFrom);
            case 9:
              // returning from await.
              chunk = $async$result;
              value = t7._as(chunk.value);
              if (A._asBool(chunk.done) || value == null) {
                // goto after for
                $async$goto = 8;
                break;
              }
              t8 = bytesRead;
              t9 = J.get$length$asx(value);
              if (typeof t8 !== "number") {
                $async$returnValue = t8.$add();
                $async$next = [1];
                // goto finally
                $async$goto = 5;
                break;
              }
              bytesRead = t8 + t9;
              t3.add$1(0, t2._as(value));
              t5.add$1(0, t4._as(bytesRead));
              // goto for condition
              $async$goto = 7;
              break;
            case 8:
              // after for
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              sink._async$_target.addError$2(type$.Object._as(e), type$.nullable_StackTrace._as(st));
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              sink._async$_target.close$0(0);
              progressSink._async$_target.close$0(0);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$ReadableStreamView__pipeFrom, $async$completer);
    },
    StreamToReadableStream_asReadableStream(_this) {
      var queue = new A.StreamQueue(_this, A.QueueList$(type$.Result_List_int), A.ListQueue$(type$._EventRequest_dynamic), type$.StreamQueue_List_int);
      if (_this.get$isBroadcast()) {
        queue._ensureListening$0();
        queue._stream_queue$_subscription.pause$0(0);
      }
      return type$.JavaScriptObject._as(new self.ReadableStream(A.UnderlyingSource__staticInteropFactoryStub(new A.StreamToReadableStream_asReadableStream_closure(queue, null))));
    },
    UnderlyingSource__staticInteropFactoryStub_closure: function UnderlyingSource__staticInteropFactoryStub_closure(t0) {
      this.pull = t0;
    },
    ReadableStreamType: function ReadableStreamType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ReadableStreamReaderMode: function ReadableStreamReaderMode(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ReadableStreamView: function ReadableStreamView(t0, t1) {
      this.progress = t0;
      this._stream = t1;
    },
    StreamToReadableStream_asReadableStream_closure: function StreamToReadableStream_asReadableStream_closure(t0, t1) {
      this.queue = t0;
      this.onError = t1;
    },
    StreamToReadableStream_asReadableStream__closure: function StreamToReadableStream_asReadableStream__closure(t0) {
      this.controller = t0;
    },
    _ReadableStreamReaderMode__Enum_JSEnum: function _ReadableStreamReaderMode__Enum_JSEnum() {
    },
    _ReadableStreamType__Enum_JSEnum: function _ReadableStreamType__Enum_JSEnum() {
    },
    AWSLogger_AWSLogger(namespace) {
      var t2,
        t1 = $.AWSLogger_activeLoggers.$index(0, namespace);
      if (t1 == null) {
        t1 = A._setArrayType([], type$.JSArray_AWSLogger);
        t1 = new A.AWSLogger(A.LinkedHashMap_LinkedHashMap$_empty(type$.AWSLoggerPlugin, type$.StreamSubscription_LogEntry), A.Logger_Logger(namespace), t1);
        A.AWSLogger__init(t1);
        t2 = t1.get$_aws_logger$_parent();
        if (t2 != null)
          B.JSArray_methods.add$1(t2._children, t1);
        $.AWSLogger_activeLoggers.$indexSet(0, namespace, t1);
      }
      return t1;
    },
    AWSLogger__init(rootLogger) {
      if ($.AWSLogger__initialized)
        return;
      $.hierarchicalLoggingEnabled = $.AWSLogger__initialized = true;
      rootLogger.registerPlugin$1$1(B.C_SimpleLogPrinter, type$.SimpleLogPrinter);
    },
    AWSLogger: function AWSLogger(t0, t1, t2) {
      this._subscriptions = t0;
      this._logger = t1;
      this._children = t2;
    },
    AWSLogger_getPlugin_closure: function AWSLogger_getPlugin_closure(t0) {
      this.Plugin = t0;
    },
    AWSLogger_registerPlugin_hasPlugin: function AWSLogger_registerPlugin_hasPlugin(t0) {
      this.T = t0;
    },
    AWSLogger_registerPlugin_hasPlugin_closure: function AWSLogger_registerPlugin_hasPlugin_closure(t0) {
      this.T = t0;
    },
    AWSLogger_registerPlugin_closure: function AWSLogger_registerPlugin_closure() {
    },
    AWSLoggerMixin: function AWSLoggerMixin() {
    },
    _AWSLogger_Object_AWSDebuggable: function _AWSLogger_Object_AWSDebuggable() {
    },
    LogEntry: function LogEntry(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.level = t0;
      _.message = t1;
      _.loggerName = t2;
      _.time = t3;
      _.error = t4;
      _.stackTrace = t5;
    },
    _LogEntry_Object_AWSEquatable: function _LogEntry_Object_AWSEquatable() {
    },
    _LogEntry_Object_AWSEquatable_AWSDebuggable: function _LogEntry_Object_AWSEquatable_AWSDebuggable() {
    },
    LogLevel: function LogLevel(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SimpleLogPrinter_formatLogEntry(logEntry) {
      var error, stackTrace,
        t1 = "" + B.JSString_methods.padRight$1(logEntry.level._core$_name.toUpperCase(), 5) + " | ",
        namespace = A.IterableExtension_get_lastOrNull(A._setArrayType(logEntry.loggerName.split("."), type$.JSArray_String), type$.String);
      if (namespace != null && namespace.length !== 0)
        t1 = t1 + J.padRight$1$s(namespace, 10) + " | ";
      t1 += logEntry.message;
      error = logEntry.error;
      if (error != null)
        t1 = t1 + ": " + (error + "\n");
      stackTrace = logEntry.stackTrace;
      if (stackTrace != null)
        t1 += stackTrace.toString$0(0) + "\n";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    SimpleLogPrinter: function SimpleLogPrinter() {
    },
    AWSOperation: function AWSOperation() {
    },
    AWSOperation_cancel_closure: function AWSOperation_cancel_closure(t0) {
      this.$this = t0;
    },
    _AWSOperation_Object_AWSDebuggable: function _AWSOperation_Object_AWSDebuggable() {
    },
    _AWSOperation_Object_AWSDebuggable_AWSLoggerMixin: function _AWSOperation_Object_AWSDebuggable_AWSLoggerMixin() {
    },
    AWSProgressOperation: function AWSProgressOperation() {
    },
    AWSDebuggable: function AWSDebuggable() {
    },
    AWSEquatable: function AWSEquatable() {
    },
    StringRecase_get_paramCase(_this) {
      var t1 = A.StringRecase_groupIntoWords(_this),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.StringRecase_get_paramCase_closure()), t2._eval$1("MappedListIterable<1,String>")).join$1(0, "-");
    },
    StringRecase_groupIntoWords(_this) {
      var t2, result, t3, _null = null, t1 = {};
      t1.result = _this;
      t2 = $.$get$StringRecase__nonAlphaNumericChars();
      result = A.stringReplaceAllUnchecked(_this, t2, " ");
      t1.result = result;
      t2 = type$.String_Function_Match;
      t3 = type$.nullable_String_Function_Match;
      t1.result = A.stringReplaceAllFuncUnchecked(A.stringReplaceAllFuncUnchecked(result, $.$get$StringRecase__standaloneVLower(), t3._as(t2._as(new A.StringRecase_groupIntoWords_closure())), _null), $.$get$StringRecase__standaloneVUpper(), t3._as(t2._as(new A.StringRecase_groupIntoWords_closure0())), _null);
      t1.start = 0;
      result = J.join$1$ax(new A.StringRecase_groupIntoWords_closure1(t1).call$0(), " ");
      t1.result = result;
      result = A.stringReplaceAllFuncUnchecked(result, $.$get$StringRecase__acronyms(), t3._as(t2._as(new A.StringRecase_groupIntoWords_closure2())), _null);
      t1.result = result;
      result = A.stringReplaceAllFuncUnchecked(result, $.$get$StringRecase__numInMiddleOrEnd(), t3._as(t2._as(new A.StringRecase_groupIntoWords_closure3())), _null);
      t1.result = result;
      t2 = A.RegExp_RegExp("\\s+", true, false);
      result = B.JSString_methods.trim$0(A.stringReplaceAllUnchecked(result, t2, " "));
      t1.result = result;
      return A._setArrayType(result.split(" "), type$.JSArray_String);
    },
    StringRecase_get_paramCase_closure: function StringRecase_get_paramCase_closure() {
    },
    StringRecase_groupIntoWords_closure: function StringRecase_groupIntoWords_closure() {
    },
    StringRecase_groupIntoWords_closure0: function StringRecase_groupIntoWords_closure0() {
    },
    StringRecase_groupIntoWords_closure1: function StringRecase_groupIntoWords_closure1(t0) {
      this._box_0 = t0;
    },
    StringRecase_groupIntoWords__closure: function StringRecase_groupIntoWords__closure(t0) {
      this._box_0 = t0;
    },
    StringRecase_groupIntoWords_closure2: function StringRecase_groupIntoWords_closure2() {
    },
    StringRecase_groupIntoWords_closure3: function StringRecase_groupIntoWords_closure3() {
    },
    AWSSerializable: function AWSSerializable() {
    },
    StreamForward_forward(_this, controller, cancelOnError, $T) {
      var t1 = new A._Future($.Zone__current, type$._Future_void);
      _this.listen$4$cancelOnError$onDone$onError(0, new A.StreamForward_forward_closure(controller, $T), cancelOnError, new A.StreamForward_forward_closure0(true, controller, new A._SyncCompleter(t1, type$._SyncCompleter_void)), new A.StreamForward_forward_closure1(controller));
      return A.Future_any(A._setArrayType([controller.get$done(), t1], type$.JSArray_Future_void), type$.void);
    },
    StreamForward_forward_closure: function StreamForward_forward_closure(t0, t1) {
      this.controller = t0;
      this.T = t1;
    },
    StreamForward_forward_closure1: function StreamForward_forward_closure1(t0) {
      this.controller = t0;
    },
    StreamForward_forward_closure0: function StreamForward_forward_closure0(t0, t1, t2) {
      this.closeWhenDone = t0;
      this.controller = t1;
      this.completer = t2;
    },
    CopyOnWriteList: function CopyOnWriteList(t0, t1, t2) {
      var _ = this;
      _._copyBeforeWrite = true;
      _._growable = t0;
      _._copy_on_write_list$_list = t1;
      _.$ti = t2;
    },
    hashObjects(objects) {
      return A._finish(B.JSArray_methods.fold$1$2(objects, 0, new A.hashObjects_closure(), type$.int));
    },
    _combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    _finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    hashObjects_closure: function hashObjects_closure() {
    },
    BuiltList_BuiltList$from(iterable, $E) {
      var t1;
      if (iterable instanceof A._BuiltList) {
        t1 = A.createRuntimeType($E);
        t1 = A.createRuntimeType(iterable.$ti._precomputed1) === t1;
      } else
        t1 = false;
      if (t1)
        return $E._eval$1("BuiltList<0>")._as(iterable);
      else {
        t1 = new A._BuiltList(A.List_List$from(iterable, false, $E), $E._eval$1("_BuiltList<0>"));
        t1._list$_maybeCheckForNull$0();
        return t1;
      }
    },
    ListBuilder_ListBuilder(iterable, $E) {
      var t1 = new A.ListBuilder($E._eval$1("ListBuilder<0>"));
      t1.replace$1(iterable);
      return t1;
    },
    BuiltList: function BuiltList() {
    },
    _BuiltList: function _BuiltList(t0, t1) {
      this._list = t0;
      this._list$_hashCode = null;
      this.$ti = t1;
    },
    ListBuilder: function ListBuilder(t0) {
      this.__ListBuilder__list_A = $;
      this._listOwner = null;
      this.$ti = t0;
    },
    BuiltListMultimap_BuiltListMultimap($K, $V) {
      var t1 = A._BuiltListMultimap$copy(B.Map_empty3.get$keys(B.Map_empty3), new A.BuiltListMultimap_BuiltListMultimap_closure(B.Map_empty3), $K, $V);
      return t1;
    },
    _BuiltListMultimap$copy(keys, lookup, $K, $V) {
      var t1 = new A._BuiltListMultimap(A.LinkedHashMap_LinkedHashMap$_empty($K, $V._eval$1("BuiltList<0>")), A.BuiltList_BuiltList$from(B.List_empty, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("_BuiltListMultimap<1,2>"));
      t1._BuiltListMultimap$copy$2(keys, lookup, $K, $V);
      return t1;
    },
    ListMultimapBuilder_ListMultimapBuilder($K, $V) {
      var t1 = new A.ListMultimapBuilder($K._eval$1("@<0>")._bind$1($V)._eval$1("ListMultimapBuilder<1,2>"));
      t1.replace$1(B.Map_empty3);
      return t1;
    },
    BuiltListMultimap: function BuiltListMultimap() {
    },
    BuiltListMultimap_BuiltListMultimap_closure: function BuiltListMultimap_BuiltListMultimap_closure(t0) {
      this.multimap = t0;
    },
    BuiltListMultimap_hashCode_closure: function BuiltListMultimap_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltListMultimap: function _BuiltListMultimap(t0, t1, t2) {
      var _ = this;
      _._list_multimap$_map = t0;
      _._emptyList = t1;
      _._list_multimap$_keys = _._list_multimap$_hashCode = null;
      _.$ti = t2;
    },
    ListMultimapBuilder: function ListMultimapBuilder(t0) {
      var _ = this;
      _.__ListMultimapBuilder__builtMap_A = $;
      _._list_multimap$_builtMapOwner = null;
      _.__ListMultimapBuilder__builderMap_A = $;
      _.$ti = t0;
    },
    ListMultimapBuilder_replace_closure: function ListMultimapBuilder_replace_closure(t0) {
      this.multimap = t0;
    },
    BuiltMap_BuiltMap($K, $V) {
      var t1 = new A._BuiltMap(null, A.LinkedHashMap_LinkedHashMap$_empty($K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("_BuiltMap<1,2>"));
      t1._BuiltMap$copyAndCheckTypes$2(B.Map_empty3.get$keys(B.Map_empty3), new A.BuiltMap_BuiltMap_closure(B.Map_empty3), $K, $V);
      return t1;
    },
    MapBuilder_MapBuilder($K, $V) {
      var t1 = new A.MapBuilder(null, $, null, $K._eval$1("@<0>")._bind$1($V)._eval$1("MapBuilder<1,2>"));
      t1.replace$1(B.Map_empty3);
      return t1;
    },
    BuiltMap: function BuiltMap() {
    },
    BuiltMap_BuiltMap_closure: function BuiltMap_BuiltMap_closure(t0) {
      this.map = t0;
    },
    BuiltMap_hashCode_closure: function BuiltMap_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltMap: function _BuiltMap(t0, t1, t2) {
      var _ = this;
      _._mapFactory = t0;
      _._map$_map = t1;
      _._map$_keys = _._map$_hashCode = null;
      _.$ti = t2;
    },
    MapBuilder: function MapBuilder(t0, t1, t2, t3) {
      var _ = this;
      _._mapFactory = t0;
      _.__MapBuilder__map_A = t1;
      _._mapOwner = t2;
      _.$ti = t3;
    },
    MapBuilder_replace_closure: function MapBuilder_replace_closure(t0, t1) {
      this.$this = t0;
      this.replacement = t1;
    },
    MapBuilder_replace_closure0: function MapBuilder_replace_closure0(t0, t1) {
      this.$this = t0;
      this.replacement = t1;
    },
    BuiltSet_BuiltSet(iterable, $E) {
      return A.BuiltSet_BuiltSet$from(iterable, $E);
    },
    BuiltSet_BuiltSet$from(iterable, $E) {
      var t1 = new A._BuiltSet(null, A.LinkedHashSet_LinkedHashSet$from(iterable, $E), $E._eval$1("_BuiltSet<0>"));
      t1._maybeCheckForNull$0();
      return t1;
    },
    SetBuilder_SetBuilder($E) {
      var t1 = new A.SetBuilder(null, $, null, $E._eval$1("SetBuilder<0>"));
      t1.replace$1(B.List_empty);
      return t1;
    },
    BuiltSet: function BuiltSet() {
    },
    BuiltSet_hashCode_closure: function BuiltSet_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltSet: function _BuiltSet(t0, t1, t2) {
      var _ = this;
      _._setFactory = t0;
      _._set$_set = t1;
      _._set$_hashCode = null;
      _.$ti = t2;
    },
    SetBuilder: function SetBuilder(t0, t1, t2, t3) {
      var _ = this;
      _._setFactory = t0;
      _.__SetBuilder__set_A = t1;
      _._setOwner = t2;
      _.$ti = t3;
    },
    SetMultimapBuilder_SetMultimapBuilder($K, $V) {
      var t1 = new A.SetMultimapBuilder($K._eval$1("@<0>")._bind$1($V)._eval$1("SetMultimapBuilder<1,2>"));
      t1.replace$1(B.Map_empty3);
      return t1;
    },
    BuiltSetMultimap: function BuiltSetMultimap() {
    },
    BuiltSetMultimap_hashCode_closure: function BuiltSetMultimap_hashCode_closure(t0) {
      this.$this = t0;
    },
    _BuiltSetMultimap: function _BuiltSetMultimap(t0, t1, t2) {
      var _ = this;
      _._set_multimap$_map = t0;
      _._emptySet = t1;
      _._set_multimap$_keys = _._set_multimap$_hashCode = null;
      _.$ti = t2;
    },
    SetMultimapBuilder: function SetMultimapBuilder(t0) {
      var _ = this;
      _.__SetMultimapBuilder__builtMap_A = $;
      _._builtMapOwner = null;
      _.__SetMultimapBuilder__builderMap_A = $;
      _.$ti = t0;
    },
    SetMultimapBuilder_replace_closure: function SetMultimapBuilder_replace_closure(t0) {
      this.multimap = t0;
    },
    $jc(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $jf(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    BuiltValueNullFieldError_checkNotNull(value, type, field, $T) {
      if (value == null)
        throw A.wrapException(new A.BuiltValueNullFieldError(type, field));
      return value;
    },
    BuiltValueNestedFieldError$(type, field, error) {
      return new A.BuiltValueNestedFieldError(type, field, error);
    },
    newBuiltValueToStringHelper_closure: function newBuiltValueToStringHelper_closure() {
    },
    IndentingBuiltValueToStringHelper: function IndentingBuiltValueToStringHelper(t0) {
      this._result = t0;
    },
    BuiltValueNullFieldError: function BuiltValueNullFieldError(t0, t1) {
      this.type = t0;
      this.field = t1;
    },
    BuiltValueNestedFieldError: function BuiltValueNestedFieldError(t0, t1, t2) {
      this.type = t0;
      this.field = t1;
      this.error = t2;
    },
    JsonObject_JsonObject(value) {
      if (typeof value == "number")
        return new A.NumJsonObject(value);
      else if (typeof value == "string")
        return new A.StringJsonObject(value);
      else if (A._isBool(value))
        return new A.BoolJsonObject(value);
      else if (type$.List_nullable_Object._is(value))
        return new A.ListJsonObject(new A.UnmodifiableListView(value, type$.UnmodifiableListView_nullable_Object));
      else if (type$.Map_of_String_and_nullable_Object._is(value))
        return new A.MapJsonObject(new A.UnmodifiableMapView(value, type$.UnmodifiableMapView_of_String_and_nullable_Object));
      else if (type$.Map_dynamic_dynamic._is(value))
        return new A.MapJsonObject(new A.UnmodifiableMapView(value.cast$2$0(0, type$.String, type$.nullable_Object), type$.UnmodifiableMapView_of_String_and_nullable_Object));
      else
        throw A.wrapException(A.ArgumentError$value(value, "value", "Must be bool, List<Object?>, Map<String?, Object?>, num or String"));
    },
    JsonObject: function JsonObject() {
    },
    BoolJsonObject: function BoolJsonObject(t0) {
      this.value = t0;
    },
    ListJsonObject: function ListJsonObject(t0) {
      this.value = t0;
    },
    MapJsonObject: function MapJsonObject(t0) {
      this.value = t0;
    },
    NumJsonObject: function NumJsonObject(t0) {
      this.value = t0;
    },
    StringJsonObject: function StringJsonObject(t0) {
      this.value = t0;
    },
    Serializers_Serializers() {
      var t1 = type$.Type,
        t2 = type$.Serializer_dynamic,
        t3 = type$.String;
      t2 = new A.BuiltJsonSerializersBuilder(A.MapBuilder_MapBuilder(t1, t2), A.MapBuilder_MapBuilder(t3, t2), A.MapBuilder_MapBuilder(t3, t2), A.MapBuilder_MapBuilder(type$.FullType, type$.Function), A.ListBuilder_ListBuilder(B.List_empty, type$.SerializerPlugin));
      t2.add$1(0, new A.BigIntSerializer(A.BuiltList_BuiltList$from([B.Type_BigInt_8OV, A.getRuntimeTypeOfDartObject($.$get$_BigIntImpl_zero())], t1)));
      t2.add$1(0, new A.BoolSerializer(A.BuiltList_BuiltList$from([B.Type_bool_lhE], t1)));
      t3 = type$.Object;
      t2.add$1(0, new A.BuiltListSerializer(A.BuiltList_BuiltList$from([B.Type_BuiltList_iTR, A.getRuntimeTypeOfDartObject(A.BuiltList_BuiltList$from(B.List_empty, t3))], t1)));
      t2.add$1(0, new A.BuiltListMultimapSerializer(A.BuiltList_BuiltList$from([B.Type_BuiltListMultimap_2Mt, A.getRuntimeTypeOfDartObject(A.BuiltListMultimap_BuiltListMultimap(t3, t3))], t1)));
      t2.add$1(0, new A.BuiltMapSerializer(A.BuiltList_BuiltList$from([B.Type_BuiltMap_qd4, A.getRuntimeTypeOfDartObject(A.BuiltMap_BuiltMap(t3, t3))], t1)));
      t2.add$1(0, new A.BuiltSetSerializer(A.BuiltList_BuiltList$from([B.Type_BuiltSet_fcN, A.getRuntimeTypeOfDartObject(A.BuiltSet_BuiltSet$from(B.List_empty, t3))], t1)));
      t2.add$1(0, new A.BuiltSetMultimapSerializer(A.BuiltSet_BuiltSet$from([B.Type_BuiltSetMultimap_9Fi], t1)));
      t2.add$1(0, new A.DateTimeSerializer(A.BuiltList_BuiltList$from([B.Type_DateTime_8AS], t1)));
      t2.add$1(0, new A.DoubleSerializer(A.BuiltList_BuiltList$from([B.Type_double_K1J], t1)));
      t2.add$1(0, new A.DurationSerializer(A.BuiltList_BuiltList$from([B.Type_Duration_SnA], t1)));
      t2.add$1(0, new A.IntSerializer(A.BuiltList_BuiltList$from([B.Type_int_tHn], t1)));
      t2.add$1(0, new A.Int64Serializer(A.BuiltList_BuiltList$from([B.Type_Int64_ww8], t1)));
      t2.add$1(0, new A.JsonObjectSerializer(A.BuiltList_BuiltList$from([B.Type_JsonObject_gyf, B.Type_BoolJsonObject_8HQ, B.Type_ListJsonObject_yPV, B.Type_MapJsonObject_bBG, B.Type_NumJsonObject_H9C, B.Type_StringJsonObject_GAC], t1)));
      t2.add$1(0, new A.NullSerializer(A.BuiltList_BuiltList$from([B.Type_Null_Yyn], t1)));
      t2.add$1(0, new A.NumSerializer(A.BuiltList_BuiltList$from([B.Type_num_cv7], t1)));
      t2.add$1(0, new A.RegExpSerializer(A.BuiltList_BuiltList$from([B.Type_RegExp_Eeh, $.$get$_runtimeType()], t1)));
      t2.add$1(0, new A.StringSerializer(A.BuiltList_BuiltList$from([B.Type_String_k8F], t1)));
      t2.add$1(0, new A.Uint8ListSerializer());
      t2.add$1(0, new A.UriSerializer(A.BuiltList_BuiltList$from([B.Type_Uri_EFX, A.getRuntimeTypeOfDartObject(A.Uri_parse("http://example.com")), A.getRuntimeTypeOfDartObject(A.Uri_parse("http://example.com:"))], t1)));
      t2.addBuilderFactory$2(B.FullType_WUY, new A.Serializers_Serializers_closure());
      t2.addBuilderFactory$2(B.FullType_fA4, new A.Serializers_Serializers_closure0());
      t2.addBuilderFactory$2(B.FullType_6Ps, new A.Serializers_Serializers_closure1());
      t2.addBuilderFactory$2(B.FullType_KVM, new A.Serializers_Serializers_closure2());
      t2.addBuilderFactory$2(B.FullType_gsm, new A.Serializers_Serializers_closure3());
      return t2.build$0();
    },
    FullType__getRawName(type) {
      var $name = J.toString$0$(type),
        genericsStart = B.JSString_methods.indexOf$1($name, "<");
      return genericsStart === -1 ? $name : B.JSString_methods.substring$2($name, 0, genericsStart);
    },
    DeserializationError_DeserializationError(json, type, error) {
      var limitedJson = J.toString$0$(json),
        t1 = limitedJson.length;
      if (t1 > 80)
        B.JSString_methods.replaceRange$3(limitedJson, 77, t1, "...");
      return new A.DeserializationError(type, error);
    },
    Serializers_Serializers_closure: function Serializers_Serializers_closure() {
    },
    Serializers_Serializers_closure0: function Serializers_Serializers_closure0() {
    },
    Serializers_Serializers_closure1: function Serializers_Serializers_closure1() {
    },
    Serializers_Serializers_closure2: function Serializers_Serializers_closure2() {
    },
    Serializers_Serializers_closure3: function Serializers_Serializers_closure3() {
    },
    FullType: function FullType(t0, t1, t2) {
      this.root = t0;
      this.parameters = t1;
      this.nullable = t2;
    },
    DeserializationError: function DeserializationError(t0, t1) {
      this.type = t0;
      this.error = t1;
    },
    BigIntSerializer: function BigIntSerializer(t0) {
      this.types = t0;
    },
    BoolSerializer: function BoolSerializer(t0) {
      this.types = t0;
    },
    _getRawName(type) {
      var $name = J.toString$0$(type),
        genericsStart = B.JSString_methods.indexOf$1($name, "<");
      return genericsStart === -1 ? $name : B.JSString_methods.substring$2($name, 0, genericsStart);
    },
    BuiltJsonSerializers: function BuiltJsonSerializers(t0, t1, t2, t3, t4) {
      var _ = this;
      _._typeToSerializer = t0;
      _._wireNameToSerializer = t1;
      _._typeNameToSerializer = t2;
      _.builderFactories = t3;
      _.serializerPlugins = t4;
    },
    BuiltJsonSerializersBuilder: function BuiltJsonSerializersBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _._typeToSerializer = t0;
      _._wireNameToSerializer = t1;
      _._typeNameToSerializer = t2;
      _._builderFactories = t3;
      _._plugins = t4;
    },
    BuiltListMultimapSerializer: function BuiltListMultimapSerializer(t0) {
      this.types = t0;
    },
    BuiltListMultimapSerializer_serialize_closure: function BuiltListMultimapSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    },
    BuiltListMultimapSerializer_deserialize_closure: function BuiltListMultimapSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    },
    BuiltListSerializer: function BuiltListSerializer(t0) {
      this.types = t0;
    },
    BuiltListSerializer_serialize_closure: function BuiltListSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    },
    BuiltListSerializer_deserialize_closure: function BuiltListSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    },
    BuiltMapSerializer: function BuiltMapSerializer(t0) {
      this.types = t0;
    },
    BuiltSetMultimapSerializer: function BuiltSetMultimapSerializer(t0) {
      this.types = t0;
    },
    BuiltSetMultimapSerializer_serialize_closure: function BuiltSetMultimapSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    },
    BuiltSetMultimapSerializer_deserialize_closure: function BuiltSetMultimapSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.valueType = t1;
    },
    BuiltSetSerializer: function BuiltSetSerializer(t0) {
      this.types = t0;
    },
    BuiltSetSerializer_serialize_closure: function BuiltSetSerializer_serialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    },
    BuiltSetSerializer_deserialize_closure: function BuiltSetSerializer_deserialize_closure(t0, t1) {
      this.serializers = t0;
      this.elementType = t1;
    },
    DateTimeSerializer: function DateTimeSerializer(t0) {
      this.types = t0;
    },
    DoubleSerializer: function DoubleSerializer(t0) {
      this.types = t0;
    },
    DurationSerializer: function DurationSerializer(t0) {
      this.types = t0;
    },
    Int64Serializer: function Int64Serializer(t0) {
      this.types = t0;
    },
    IntSerializer: function IntSerializer(t0) {
      this.types = t0;
    },
    JsonObjectSerializer: function JsonObjectSerializer(t0) {
      this.types = t0;
    },
    NullSerializer: function NullSerializer(t0) {
      this.types = t0;
    },
    NumSerializer: function NumSerializer(t0) {
      this.types = t0;
    },
    RegExpSerializer: function RegExpSerializer(t0) {
      this.types = t0;
    },
    StringSerializer: function StringSerializer(t0) {
      this.types = t0;
    },
    Uint8ListSerializer: function Uint8ListSerializer() {
    },
    UriSerializer: function UriSerializer(t0) {
      this.types = t0;
    },
    StandardJsonPlugin$() {
      return new A.StandardJsonPlugin();
    },
    StandardJsonPlugin: function StandardJsonPlugin() {
    },
    StandardJsonPlugin__toList_closure: function StandardJsonPlugin__toList_closure() {
    },
    StandardJsonPlugin__toList_closure0: function StandardJsonPlugin__toList_closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.keepNulls = t2;
      _.result = t3;
      _.hasEncodedKeys = t4;
    },
    StandardJsonPlugin__toListUsingDiscriminator_closure: function StandardJsonPlugin__toListUsingDiscriminator_closure() {
    },
    StandardJsonPlugin__toListUsingDiscriminator_closure0: function StandardJsonPlugin__toListUsingDiscriminator_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.result = t2;
      _.needToDecodeKeys = t3;
    },
    checkedYamlDecode(yamlContent, $constructor, sourceUrl, $T) {
      var e, map, e0, exception, t1, yaml = null;
      try {
        yaml = A.loadYamlNode(yamlContent, sourceUrl);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.YamlException) {
          e = t1;
          throw A.wrapException(new A._WrappedYamlException(e));
        } else
          throw exception;
      }
      map = null;
      if (type$.YamlMap._is(yaml))
        map = yaml;
      else {
        t1 = A.ParsedYamlException$("Not a map", yaml, null);
        throw A.wrapException(t1);
      }
      try {
        t1 = $constructor.call$1(map);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.CheckedFromJsonException) {
          e0 = t1;
          throw A.wrapException(A.toParsedYamlException(e0));
        } else
          throw exception;
      }
    },
    toParsedYamlException(exception) {
      var key, t1, node, t2,
        _s19_ = " of ' in type cast'",
        _s13_ = " in type cast",
        yamlMap = type$.YamlMap._as(exception.map),
        innerError = exception.innerError;
      if (exception.badKey) {
        key = innerError instanceof A.UnrecognizedKeysException ? B.JSArray_methods.get$first(innerError.unrecognizedKeys) : exception.key;
        t1 = yamlMap.get$nodes();
        t1 = t1.get$keys(t1);
        node = type$.YamlNode._as(t1.singleWhere$2$orElse(t1, new A.toParsedYamlException_closure(key), new A.toParsedYamlException_closure0(yamlMap)));
        return new A.ParsedYamlException(A.stringReplaceAllUnchecked(exception.message, _s19_, _s13_), node);
      } else {
        t1 = exception.key;
        if (t1 == null)
          return new A.ParsedYamlException(A.stringReplaceAllUnchecked(exception.message, _s19_, _s13_), yamlMap);
        else {
          t2 = yamlMap.get$keys(yamlMap);
          if (!t2.contains$1(t2, t1)) {
            t1 = A._setArrayType(['Missing key "' + t1 + '".'], type$.JSArray_String);
            t1.push(exception.message);
            t1 = B.JSArray_methods.join$1(t1, " ");
            return new A.ParsedYamlException(A.stringReplaceAllUnchecked(t1, _s19_, _s13_), yamlMap);
          } else {
            t2 = yamlMap.get$nodes().$index(0, t1);
            if (t2 == null)
              t2 = yamlMap;
            return new A.ParsedYamlException(A.stringReplaceAllUnchecked('Unsupported value for "' + t1 + '". ' + exception.message, _s19_, _s13_), t2);
          }
        }
      }
    },
    ParsedYamlException$(message, yamlNode, innerError) {
      return new A.ParsedYamlException(A.stringReplaceAllUnchecked(message, " of ' in type cast'", " in type cast"), yamlNode);
    },
    toParsedYamlException_closure: function toParsedYamlException_closure(t0) {
      this.key = t0;
    },
    toParsedYamlException_closure0: function toParsedYamlException_closure0(t0) {
      this.yamlMap = t0;
    },
    ParsedYamlException: function ParsedYamlException(t0, t1) {
      this.message = t0;
      this.yamlNode = t1;
    },
    _WrappedYamlException: function _WrappedYamlException(t0) {
      this.innerError = t0;
    },
    DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    },
    IterableEquality: function IterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    ListEquality: function ListEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _UnorderedEquality: function _UnorderedEquality() {
    },
    UnorderedIterableEquality: function UnorderedIterableEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    SetEquality: function SetEquality(t0, t1) {
      this._elementEquality = t0;
      this.$ti = t1;
    },
    _MapEntry: function _MapEntry(t0, t1, t2) {
      this.equality = t0;
      this.key = t1;
      this.value = t2;
    },
    MapEquality: function MapEquality(t0, t1, t2) {
      this._keyEquality = t0;
      this._valueEquality = t1;
      this.$ti = t2;
    },
    DeepCollectionEquality: function DeepCollectionEquality() {
    },
    QueueList$($E) {
      return new A.QueueList(A.List_List$filled(A.QueueList__computeInitialCapacity(null), null, false, $E._eval$1("0?")), 0, 0, $E._eval$1("QueueList<0>"));
    },
    QueueList__computeInitialCapacity(initialCapacity) {
      return 8;
    },
    QueueList__nextPowerOf2(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    QueueList: function QueueList(t0, t1, t2, t3) {
      var _ = this;
      _._table = t0;
      _._head = t1;
      _._tail = t2;
      _.$ti = t3;
    },
    _CastQueueList: function _CastQueueList(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue_list$_delegate = t0;
      _._table = t1;
      _._head = t2;
      _._tail = t3;
      _.$ti = t4;
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    UnmodifiableMapMixin__throw() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable Map"));
    },
    UnmodifiableMapMixin: function UnmodifiableMapMixin() {
    },
    DelegatingMap: function DelegatingMap() {
    },
    LocalFileSystem: function LocalFileSystem() {
    },
    FileSystem: function FileSystem() {
    },
    Int64__parseRadix(s, radix, throwOnError) {
      var i, negative, t1, d0, d1, d2, digit, d00, d10;
      if (B.JSString_methods.startsWith$1(s, "-")) {
        i = 1;
        negative = true;
      } else {
        i = 0;
        negative = false;
      }
      t1 = s.length;
      if (i >= t1)
        throw A.wrapException(A.FormatException$("No digits", s, i));
      for (d0 = 0, d1 = 0, d2 = 0; i < t1; ++i, d1 = d10, d0 = d00) {
        digit = A.decodeDigit(s.charCodeAt(i));
        if (digit < radix) {
          d0 = d0 * radix + digit;
          d00 = d0 & 4194303;
          d1 = d1 * radix + B.JSInt_methods._shrOtherPositive$1(d0, 22);
          d10 = d1 & 4194303;
          d2 = d2 * radix + (d1 >>> 22) & 1048575;
        } else
          throw A.wrapException(A.FormatException$("Not radix digit", s, i));
      }
      if (negative)
        return A.Int64__sub(0, 0, 0, d0, d1, d2);
      return new A.Int64(d0 & 4194303, d1 & 4194303, d2 & 1048575);
    },
    Int64_Int64(value) {
      var negative, v2, v1, t1, t2, t3;
      if (value < 0) {
        value = -value;
        negative = true;
      } else
        negative = false;
      v2 = B.JSInt_methods._tdivFast$1(value, 17592186044416);
      value -= v2 * 17592186044416;
      v1 = B.JSInt_methods._tdivFast$1(value, 4194304);
      t1 = value - v1 * 4194304 & 4194303;
      t2 = v1 & 4194303;
      t3 = v2 & 1048575;
      return negative ? A.Int64__sub(0, 0, 0, t1, t2, t3) : new A.Int64(t1, t2, t3);
    },
    Int64__promote(value) {
      if (value instanceof A.Int64)
        return value;
      else if (A._isInt(value))
        return A.Int64_Int64(value);
      throw A.wrapException(A.ArgumentError$value(value, "other", "not an int, Int32 or Int64"));
    },
    Int64__toRadixStringUnsigned(radix, d0, d1, d2, sign) {
      var d4, d3, fatRadix, chunk1, chunk2, chunk3, q, q0, q1, q2, q3, chunk10, residue;
      if (d0 === 0 && d1 === 0 && d2 === 0)
        return "0";
      d4 = (d2 << 4 | d1 >>> 18) >>> 0;
      d3 = d1 >>> 8 & 1023;
      d2 = (d1 << 2 | d0 >>> 20) & 1023;
      d1 = d0 >>> 10 & 1023;
      d0 &= 1023;
      if (!(radix < 37))
        return A.ioore(B.List_Icz, radix);
      fatRadix = B.List_Icz[radix];
      chunk1 = "";
      chunk2 = "";
      chunk3 = "";
      while (true) {
        if (!!(d4 === 0 && d3 === 0))
          break;
        q = B.JSInt_methods.$tdiv(d4, fatRadix);
        d3 += d4 - q * fatRadix << 10 >>> 0;
        q0 = B.JSInt_methods.$tdiv(d3, fatRadix);
        d2 += d3 - q0 * fatRadix << 10 >>> 0;
        q1 = B.JSInt_methods.$tdiv(d2, fatRadix);
        d1 += d2 - q1 * fatRadix << 10 >>> 0;
        q2 = B.JSInt_methods.$tdiv(d1, fatRadix);
        d0 += d1 - q2 * fatRadix << 10 >>> 0;
        q3 = B.JSInt_methods.$tdiv(d0, fatRadix);
        chunk10 = B.JSString_methods.substring$1(B.JSInt_methods.toRadixString$1(fatRadix + (d0 - q3 * fatRadix), radix), 1);
        chunk3 = chunk2;
        chunk2 = chunk1;
        chunk1 = chunk10;
        d3 = q0;
        d4 = q;
        d2 = q1;
        d1 = q2;
        d0 = q3;
      }
      residue = (d2 << 20 >>> 0) + (d1 << 10 >>> 0) + d0;
      return sign + (residue === 0 ? "" : B.JSInt_methods.toRadixString$1(residue, radix)) + chunk1 + chunk2 + chunk3;
    },
    Int64__sub(a0, a1, a2, b0, b1, b2) {
      var diff0 = a0 - b0,
        diff1 = a1 - b1 - (B.JSInt_methods._shrOtherPositive$1(diff0, 22) & 1);
      return new A.Int64(diff0 & 4194303, diff1 & 4194303, a2 - b2 - (B.JSInt_methods._shrOtherPositive$1(diff1, 22) & 1) & 1048575);
    },
    Int64: function Int64(t0, t1, t2) {
      this._l = t0;
      this._m = t1;
      this._h = t2;
    },
    $checkKeys(map, allowedKeys, disallowNullValues) {
      var invalidKeys, nullValuedKeys,
        t1 = map.get$keys(map),
        t2 = type$.String;
      t1 = t1.cast$1$0(t1, t2);
      invalidKeys = t1.where$1(t1, new A.$checkKeys_closure(allowedKeys)).toList$0(0);
      if (invalidKeys.length !== 0)
        throw A.wrapException(A.UnrecognizedKeysException$(invalidKeys, map, allowedKeys));
      if (disallowNullValues != null) {
        nullValuedKeys = map.get$entries(map).where$1(0, new A.$checkKeys_closure0(disallowNullValues)).map$1$1(0, new A.$checkKeys_closure1(), t2).toList$0(0);
        if (nullValuedKeys.length !== 0)
          throw A.wrapException(new A.DisallowedNullValueException(nullValuedKeys, map));
      }
    },
    UnrecognizedKeysException$(unrecognizedKeys, map, allowedKeys) {
      return new A.UnrecognizedKeysException(allowedKeys, unrecognizedKeys, map);
    },
    $checkKeys_closure: function $checkKeys_closure(t0) {
      this.allowedKeys = t0;
    },
    $checkKeys_closure0: function $checkKeys_closure0(t0) {
      this.disallowNullValues = t0;
    },
    $checkKeys_closure1: function $checkKeys_closure1() {
    },
    BadKeyException: function BadKeyException() {
    },
    UnrecognizedKeysException: function UnrecognizedKeysException(t0, t1, t2) {
      this.allowedKeys = t0;
      this.unrecognizedKeys = t1;
      this.map = t2;
    },
    MissingRequiredKeysException: function MissingRequiredKeysException() {
    },
    DisallowedNullValueException: function DisallowedNullValueException(t0, t1) {
      this.keysWithNullValues = t0;
      this.map = t1;
    },
    $checkedCreate(className, map, $constructor, fieldKeyMap, $T) {
      return A.$checkedNew(className, map, new A.$checkedCreate_closure($constructor, new A.$checkedCreate_checkedConvert(map), $T), fieldKeyMap, $T);
    },
    $checkedNew(className, map, $constructor, fieldKeyMap, $T) {
      var e, error, stack, key, t1, exception, key0;
      fieldKeyMap = fieldKeyMap;
      if (fieldKeyMap == null)
        fieldKeyMap = B.Map_empty0;
      try {
        t1 = $constructor.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.CheckedFromJsonException) {
          e = t1;
          if (e.map === map && e._className == null)
            e._className = className;
          throw exception;
        } else {
          error = t1;
          stack = A.getTraceFromException(exception);
          key = null;
          if (error instanceof A.ArgumentError) {
            key0 = J.$index$asx(fieldKeyMap, error.name);
            key = key0 == null ? error.name : key0;
          } else if (error instanceof A.MissingRequiredKeysException) {
            t1 = error.missingKeys;
            key = t1.get$first(t1);
          } else if (error instanceof A.DisallowedNullValueException)
            key = B.JSArray_methods.get$first(error.keysWithNullValues);
          throw A.wrapException(A.CheckedFromJsonException$_(error, stack, map, key, className));
        }
      }
    },
    $checkedConvert(map, key, castFunc, readValue, $T) {
      var error, stack, t1, exception;
      try {
        t1 = castFunc.call$1(readValue == null ? map.$index(0, key) : readValue.call$2(map, key));
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.CheckedFromJsonException)
          throw exception;
        else {
          error = t1;
          stack = A.getTraceFromException(exception);
          t1 = A.CheckedFromJsonException$_(error, stack, map, key, null);
          throw A.wrapException(t1);
        }
      }
    },
    CheckedFromJsonException$(map, key, className, message, badKey) {
      return new A.CheckedFromJsonException(null, key, map, message, className, badKey);
    },
    CheckedFromJsonException$_(innerError, innerStack, map, key, className) {
      return new A.CheckedFromJsonException(innerError, key, map, A.CheckedFromJsonException__getMessage(innerError), className, innerError instanceof A.BadKeyException);
    },
    CheckedFromJsonException__getMessage(error) {
      var message;
      if (error instanceof A.ArgumentError) {
        message = error.message;
        if (message != null)
          return J.toString$0$(message);
      }
      if (error instanceof A.BadKeyException)
        return error.get$message(error);
      if (type$.FormatException._is(error)) {
        message = error.get$message(error);
        return error.get$offset() != null ? message + " at offset " + A.S(error.get$offset()) + "." : message;
      }
      return J.toString$0$(error);
    },
    $checkedCreate_checkedConvert: function $checkedCreate_checkedConvert(t0) {
      this.map = t0;
    },
    $checkedCreate_closure: function $checkedCreate_closure(t0, t1, t2) {
      this.$constructor = t0;
      this.checkedConvert = t1;
      this.T = t2;
    },
    CheckedFromJsonException: function CheckedFromJsonException(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.innerError = t0;
      _.key = t1;
      _.map = t2;
      _.message = t3;
      _._className = t4;
      _.badKey = t5;
    },
    Level: function Level(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    LogRecord: function LogRecord(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.level = t0;
      _.message = t1;
      _.loggerName = t2;
      _.time = t3;
      _.error = t4;
      _.stackTrace = t5;
    },
    Logger_Logger($name) {
      return $.Logger__loggers.putIfAbsent$2($name, new A.Logger_Logger_closure($name));
    },
    Logger: function Logger(t0, t1, t2) {
      var _ = this;
      _.name = t0;
      _.parent = t1;
      _._level = null;
      _._logger$_children = t2;
      _._logger$_controller = null;
    },
    Logger_Logger_closure: function Logger_Logger_closure(t0) {
      this.name = t0;
    },
    BufferModule: function BufferModule() {
    },
    BufferConstants: function BufferConstants() {
    },
    Buffer: function Buffer() {
    },
    ConsoleModule: function ConsoleModule() {
    },
    Console: function Console() {
    },
    DNS: function DNS() {
    },
    DNSLookupOptions: function DNSLookupOptions() {
    },
    DNSAddress: function DNSAddress() {
    },
    Resolver: function Resolver() {
    },
    EventEmitter: function EventEmitter() {
    },
    fs() {
      var t1 = $._fs;
      if (t1 == null)
        t1 = $._fs = type$.nullable_FS._as(self.require("fs"));
      return type$.FS._as(t1);
    },
    FS: function FS() {
    },
    FSConstants: function FSConstants() {
    },
    FSWatcher: function FSWatcher() {
    },
    ReadStream: function ReadStream() {
    },
    ReadStreamOptions: function ReadStreamOptions() {
    },
    WriteStream: function WriteStream() {
    },
    WriteStreamOptions: function WriteStreamOptions() {
    },
    FileOptions: function FileOptions() {
    },
    StatOptions: function StatOptions() {
    },
    MkdirOptions: function MkdirOptions() {
    },
    RmdirOptions: function RmdirOptions() {
    },
    WatchOptions: function WatchOptions() {
    },
    WatchFileOptions: function WatchFileOptions() {
    },
    Stats: function Stats() {
    },
    HTTP: function HTTP() {
    },
    HttpAgent: function HttpAgent() {
    },
    HttpAgentOptions: function HttpAgentOptions() {
    },
    RequestOptions: function RequestOptions() {
    },
    ClientRequest: function ClientRequest() {
    },
    HttpServer: function HttpServer() {
    },
    ServerResponse: function ServerResponse() {
    },
    IncomingMessage: function IncomingMessage() {
    },
    Promise0: function Promise0() {
    },
    Date: function Date() {
    },
    JsError: function JsError() {
    },
    Atomics: function Atomics() {
    },
    Modules: function Modules() {
    },
    Module: function Module() {
    },
    Net: function Net() {
    },
    Socket: function Socket() {
    },
    NetAddress: function NetAddress() {
    },
    NetServer: function NetServer() {
    },
    NodeJsError: function NodeJsError() {
    },
    JsAssertionError: function JsAssertionError() {
    },
    JsRangeError: function JsRangeError() {
    },
    JsReferenceError: function JsReferenceError() {
    },
    JsSyntaxError: function JsSyntaxError() {
    },
    JsTypeError: function JsTypeError() {
    },
    JsSystemError: function JsSystemError() {
    },
    os() {
      var t1 = $._os;
      if (t1 == null)
        t1 = $._os = type$.nullable_OS._as(self.require("os"));
      return type$.OS._as(t1);
    },
    OS: function OS() {
    },
    CPU: function CPU() {
    },
    CPUTimes: function CPUTimes() {
    },
    OSConstants: function OSConstants() {
    },
    OSSignalConstants: function OSSignalConstants() {
    },
    OSErrorConstants: function OSErrorConstants() {
    },
    OSDLOpenConstants: function OSDLOpenConstants() {
    },
    path() {
      var t1 = $._path;
      if (t1 == null)
        t1 = $._path = type$.nullable_Path._as(self.require("path"));
      return type$.Path._as(t1);
    },
    Path: function Path() {
    },
    PathObject: function PathObject() {
    },
    Process0: function Process0() {
    },
    CPUUsage: function CPUUsage() {
    },
    Release: function Release() {
    },
    StreamModule: function StreamModule() {
    },
    Readable: function Readable() {
    },
    Writable: function Writable() {
    },
    Duplex: function Duplex() {
    },
    Transform: function Transform() {
    },
    WritableOptions: function WritableOptions() {
    },
    ReadableOptions: function ReadableOptions() {
    },
    Immediate: function Immediate() {
    },
    Timeout: function Timeout() {
    },
    TTY: function TTY() {
    },
    TTYReadStream: function TTYReadStream() {
    },
    TTYWriteStream: function TTYWriteStream() {
    },
    dartify(jsObject, $T) {
      var t1, result, t2, t3, t4, t5, t6;
      if (A._isBasicType(jsObject))
        return $T._as(jsObject);
      if (type$.List_dynamic._is(jsObject)) {
        t1 = J.map$1$1$ax(jsObject, B.CONSTANT, type$.dynamic);
        return $T._as(A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E")));
      }
      t1 = type$.dynamic;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t1);
      for (t2 = J.get$iterator$ax(self.Object.keys(jsObject)), t3 = jsObject == null, t4 = type$.Object; t2.moveNext$0();) {
        t5 = t2.get$current();
        t6 = t3 ? t4._as(jsObject) : jsObject;
        result.$indexSet(0, t5, A.dartify(t6[t5], t1));
      }
      return $T._as(result);
    },
    _isBasicType(value) {
      if (value == null || typeof value == "number" || A._isBool(value) || typeof value == "string")
        return true;
      return false;
    },
    Util: function Util() {
    },
    Directory: function Directory(t0) {
      this.path = t0;
    },
    Directory_listSync_list: function Directory_listSync_list(t0, t1, t2) {
      this.$this = t0;
      this.followLinks = t1;
      this.recursive = t2;
    },
    File: function File(t0) {
      this.path = t0;
    },
    File_length_closure: function File_length_closure() {
    },
    NodeFileSystem: function NodeFileSystem() {
    },
    FileSystemEntity_parentOf(path) {
      var rootEnd, pos;
      if ($.$get$Platform_isWindows())
        if (B.JSString_methods.startsWith$1(path, $.$get$FileSystemEntity__absoluteWindowsPathPattern())) {
          rootEnd = B.JSString_methods.indexOf$2(path, A.RegExp_RegExp("[/\\\\]", true, false), 2);
          if (rootEnd === -1)
            return path;
        } else
          rootEnd = B.JSString_methods.startsWith$1(path, "\\") || B.JSString_methods.startsWith$1(path, "/") ? 0 : -1;
      else
        rootEnd = B.JSString_methods.startsWith$1(path, "/") ? 0 : -1;
      pos = B.JSString_methods.lastIndexOf$1(path, $.$get$FileSystemEntity__parentRegExp());
      if (pos > rootEnd)
        return B.JSString_methods.substring$2(path, 0, pos + 1);
      else if (rootEnd > -1)
        return B.JSString_methods.substring$2(path, 0, rootEnd + 1);
      else
        return ".";
    },
    FileStat$_internalNotFound() {
      return new A.FileStat(A.DateTime$fromMillisecondsSinceEpoch(0, false), A.DateTime$fromMillisecondsSinceEpoch(0, false), A.DateTime$fromMillisecondsSinceEpoch(0, false), B.FileSystemEntityType_5, 0, -1);
    },
    FileStat_FileStat$_fromNodeStats(stats) {
      var type,
        t1 = J.getInterceptor$x(stats);
      if (A.boolConversionCheck(t1.isDirectory$0(stats)))
        type = B.FileSystemEntityType_1;
      else if (A.boolConversionCheck(t1.isFile$0(stats)))
        type = B.FileSystemEntityType_0;
      else
        type = A.boolConversionCheck(t1.isSymbolicLink$0(stats)) ? B.FileSystemEntityType_2 : B.FileSystemEntityType_5;
      return new A.FileStat(A.DateTime_parse(J.toISOString$0$x(t1.get$ctime(stats))), A.DateTime_parse(J.toISOString$0$x(t1.get$mtime(stats))), A.DateTime_parse(J.toISOString$0$x(t1.get$atime(stats))), type, J.floor$0$n(t1.get$mode(stats)), t1.get$size(stats));
    },
    FileStat_stat(path) {
      var t1 = new A._Future($.Zone__current, type$._Future_FileStat),
        jsCallback = A.allowInterop(new A.FileStat_stat_callback(new A._AsyncCompleter(t1, type$._AsyncCompleter_FileStat)), type$.void_Function_dynamic_$opt_dynamic);
      J.lstat$2$x(A.fs(), path, jsCallback);
      return t1;
    },
    FileStat_statSync(path) {
      var t1, exception;
      try {
        t1 = A.FileStat_FileStat$_fromNodeStats(J.lstatSync$1$x(A.fs(), path));
        return t1;
      } catch (exception) {
        t1 = A.FileStat$_internalNotFound();
        return t1;
      }
    },
    FileSystemEntity0: function FileSystemEntity0() {
    },
    FileStat: function FileStat(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.changed = t0;
      _.modified = t1;
      _.accessed = t2;
      _.type = t3;
      _.mode = t4;
      _.size = t5;
    },
    FileStat_stat_callback: function FileStat_stat_callback(t0) {
      this.completer = t0;
    },
    Link: function Link(t0) {
      this.path = t0;
    },
    Context_Context(current, style) {
      if (current == null)
        current = style == null ? A.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return new A.Context(style, current);
    },
    _parseUri(uri) {
      if (type$.Uri._is(uri))
        return uri;
      throw A.wrapException(A.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    _PathDirection: function _PathDirection(t0) {
      this.name = t0;
    },
    _PathRelation: function _PathRelation(t0) {
      this.name = t0;
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, t2, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t2 = style.isSeparator$1(path.charCodeAt(0));
      } else
        t2 = false;
      if (t2) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      var t1, _null = null;
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      t1 = A.Uri_base();
      if (!B.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(_null, "a/b", _null, _null, _null, _null, _null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    },
    LocalPlatform: function LocalPlatform() {
    },
    Platform: function Platform() {
    },
    LocalProcessManager: function LocalProcessManager() {
    },
    Version$_(major, minor, patch, preRelease, build, _text) {
      var t1 = preRelease == null ? A._setArrayType([], type$.JSArray_Object) : A.Version__splitParts(preRelease),
        t2 = build == null ? A._setArrayType([], type$.JSArray_Object) : A.Version__splitParts(build);
      if (major < 0)
        A.throwExpression(A.ArgumentError$("Major version must be non-negative.", null));
      if (minor < 0)
        A.throwExpression(A.ArgumentError$("Minor version must be non-negative.", null));
      if (patch < 0)
        A.throwExpression(A.ArgumentError$("Patch version must be non-negative.", null));
      return new A.Version(major, minor, patch, t1, t2, _text);
    },
    Version_Version(major, minor, patch, pre) {
      var text = "" + major + "." + minor + "." + patch;
      if (pre != null)
        text += "-" + pre;
      return A.Version$_(major, minor, patch, pre, null, text);
    },
    Version_Version$parse(text) {
      var major, minor, patch, preRelease, build, t1, exception, _null = null,
        _s17_ = 'Could not parse "',
        match = $.$get$completeVersion().firstMatch$1(text);
      if (match == null)
        throw A.wrapException(A.FormatException$(_s17_ + text + '".', _null, _null));
      try {
        t1 = match._match;
        if (1 >= t1.length)
          return A.ioore(t1, 1);
        t1 = t1[1];
        t1.toString;
        major = A.int_parse(t1, _null);
        t1 = match._match;
        if (2 >= t1.length)
          return A.ioore(t1, 2);
        t1 = t1[2];
        t1.toString;
        minor = A.int_parse(t1, _null);
        t1 = match._match;
        if (3 >= t1.length)
          return A.ioore(t1, 3);
        t1 = t1[3];
        t1.toString;
        patch = A.int_parse(t1, _null);
        t1 = match._match;
        if (5 >= t1.length)
          return A.ioore(t1, 5);
        preRelease = t1[5];
        t1 = match._match;
        if (8 >= t1.length)
          return A.ioore(t1, 8);
        build = t1[8];
        t1 = A.Version$_(major, minor, patch, preRelease, build, text);
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          throw A.wrapException(A.FormatException$(_s17_ + text + '".', _null, _null));
        else
          throw exception;
      }
    },
    Version__splitParts(text) {
      var t1 = type$.MappedListIterable_String_Object;
      return A.List_List$of(new A.MappedListIterable(A._setArrayType(text.split("."), type$.JSArray_String), type$.Object_Function_String._as(new A.Version__splitParts_closure()), t1), true, t1._eval$1("ListIterable.E"));
    },
    Version: function Version(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.major = t0;
      _.minor = t1;
      _.patch = t2;
      _.preRelease = t3;
      _.build = t4;
      _._version$_text = t5;
    },
    Version__splitParts_closure: function Version__splitParts_closure() {
    },
    VersionConstraint_VersionConstraint$parse(text) {
      var skipWhitespace, matchVersion, matchComparison, compatibleWith, max, min, includeMin, includeMax, newRange, t1, _null = null, _box_0 = {};
      _box_0.text = text;
      skipWhitespace = new A.VersionConstraint_VersionConstraint$parse_skipWhitespace(_box_0);
      skipWhitespace.call$0();
      if (_box_0.text === "any")
        return $.$get$VersionConstraint_any();
      matchVersion = new A.VersionConstraint_VersionConstraint$parse_matchVersion(_box_0);
      matchComparison = new A.VersionConstraint_VersionConstraint$parse_matchComparison(_box_0, skipWhitespace, matchVersion, text);
      compatibleWith = new A.VersionConstraint_VersionConstraint$parse_matchCompatibleWith(_box_0, skipWhitespace, matchVersion, text).call$0();
      if (compatibleWith != null)
        return compatibleWith;
      for (max = _null, min = max, includeMin = false, includeMax = false; true;) {
        skipWhitespace.call$0();
        if (_box_0.text.length === 0)
          break;
        newRange = matchVersion.call$0();
        if (newRange == null)
          newRange = matchComparison.call$0();
        if (newRange == null)
          throw A.wrapException(A.FormatException$('Could not parse version "' + text + '". Unknown text at "' + _box_0.text + '".', _null, _null));
        if (newRange.get$min() != null)
          if (min == null || newRange.get$min().compareTo$1(0, min) > 0) {
            min = newRange.get$min();
            includeMin = newRange.get$includeMin();
          } else if (J.$eq$(newRange.get$min(), min) && !newRange.get$includeMin())
            includeMin = false;
        if (newRange.get$max() != null)
          if (max == null || newRange.get$max().compareTo$1(0, max) < 0) {
            max = newRange.get$max();
            includeMax = newRange.get$includeMax();
          } else if (J.$eq$(newRange.get$max(), max) && !newRange.get$includeMax())
            includeMax = false;
      }
      t1 = min == null;
      if (t1 && max == null)
        throw A.wrapException(B.FormatException_Ynx);
      if (!t1 && max != null) {
        if (min.compareTo$1(0, max) > 0)
          return B.C__EmptyVersion;
        if (min.$eq(0, max)) {
          if (includeMin && includeMax)
            return min;
          return B.C__EmptyVersion;
        }
      }
      return A.VersionRange_VersionRange(false, includeMax, includeMin, max, min);
    },
    VersionConstraint_VersionConstraint$parse_skipWhitespace: function VersionConstraint_VersionConstraint$parse_skipWhitespace(t0) {
      this._box_0 = t0;
    },
    VersionConstraint_VersionConstraint$parse_matchVersion: function VersionConstraint_VersionConstraint$parse_matchVersion(t0) {
      this._box_0 = t0;
    },
    VersionConstraint_VersionConstraint$parse_matchComparison: function VersionConstraint_VersionConstraint$parse_matchComparison(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.skipWhitespace = t1;
      _.matchVersion = t2;
      _.originalText = t3;
    },
    VersionConstraint_VersionConstraint$parse_matchCompatibleWith: function VersionConstraint_VersionConstraint$parse_matchCompatibleWith(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.skipWhitespace = t1;
      _.matchVersion = t2;
      _.originalText = t3;
    },
    _EmptyVersion: function _EmptyVersion() {
    },
    VersionRange_VersionRange(alwaysIncludeMaxPreRelease, includeMax, includeMin, max, min) {
      var t1 = min != null;
      if (t1 && max != null && min.compareTo$1(0, max) > 0)
        throw A.wrapException(A.ArgumentError$('Minimum version ("' + A.S(min) + '") must be less than maximum ("' + A.S(max) + '").', null));
      if (!alwaysIncludeMaxPreRelease)
        if (!includeMax)
          if (max != null)
            if (max.preRelease.length === 0)
              if (max.build.length === 0)
                t1 = !t1 || min.preRelease.length === 0 || !A.equalsWithoutPreRelease(min, max);
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return new A.VersionRange(min, t1 ? A.Version_Version(max.major, max.minor, max.patch, "0") : max, includeMin, includeMax);
    },
    CompatibleWithVersionRange$(version) {
      var t1 = version.get$nextBreaking();
      return new A.CompatibleWithVersionRange(version, A.Version_Version(t1.major, t1.minor, t1.patch, "0"), true, false);
    },
    VersionRange: function VersionRange(t0, t1, t2, t3) {
      var _ = this;
      _.min = t0;
      _.max = t1;
      _.includeMin = t2;
      _.includeMax = t3;
    },
    CompatibleWithVersionRange: function CompatibleWithVersionRange(t0, t1, t2, t3) {
      var _ = this;
      _.min = t0;
      _.max = t1;
      _.includeMin = t2;
      _.includeMax = t3;
    },
    parseDeps(source) {
      var t1 = source == null ? null : source.map$2$1(0, new A.parseDeps_closure(source), type$.String, type$.Dependency);
      return t1 == null ? A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Dependency) : t1;
    },
    _fromJson(data, $name) {
      var t1, t2, matchedKeys;
      if (typeof data == "string" || data == null) {
        t1 = type$.dynamic;
        return A._$HostedDependencyFromJson(A.LinkedHashMap_LinkedHashMap$_literal(["version", data], t1, t1));
      }
      if (type$.Map_dynamic_dynamic._is(data)) {
        t1 = data.get$keys(data);
        t2 = type$.String;
        t1 = t1.cast$1$0(t1, t2);
        matchedKeys = t1.where$1(t1, new A._fromJson_closure()).toList$0(0);
        if (!data.get$isEmpty(data))
          t1 = matchedKeys.length === 0 && data.containsKey$1("version");
        else
          t1 = true;
        if (t1)
          return A._$HostedDependencyFromJson(data);
        else
          return A.$checkedNew("Dependency", data, new A._fromJson_closure0(A.IterableExtension_firstWhereOrNull(matchedKeys, new A._fromJson_closure1(), t2), data, matchedKeys, $name), null, type$.Dependency);
      }
      return null;
    },
    GitDependency_GitDependency$fromData(data) {
      var t1;
      if (typeof data == "string") {
        t1 = type$.String;
        data = A.LinkedHashMap_LinkedHashMap$_literal(["url", data], t1, t1);
      }
      if (type$.Map_dynamic_dynamic._is(data))
        return A._$GitDependencyFromJson(data);
      throw A.wrapException(A.ArgumentError$value(data, "git", "Must be a String or a Map."));
    },
    _tryParseScpUri(value) {
      var slashIndex, atIndex, user, _null = null,
        colonIndex = B.JSString_methods.indexOf$1(value, ":");
      if (colonIndex < 0)
        return _null;
      else if (colonIndex === B.JSString_methods.indexOf$1(value, "://"))
        return _null;
      slashIndex = B.JSString_methods.indexOf$1(value, "/");
      if (slashIndex >= 0 && slashIndex < colonIndex)
        return _null;
      atIndex = B.JSString_methods.indexOf$1(value, "@");
      if (colonIndex > atIndex) {
        user = atIndex >= 0 ? B.JSString_methods.substring$2(value, 0, atIndex) : _null;
        return A._Uri__Uri(B.JSString_methods.substring$2(value, atIndex + 1, colonIndex), B.JSString_methods.substring$1(value, colonIndex + 1), _null, _null, _null, "ssh", user);
      }
      return _null;
    },
    PathDependency_PathDependency$fromData(data) {
      if (typeof data == "string")
        return new A.PathDependency(data);
      throw A.wrapException(A.ArgumentError$value(data, "path", "Must be a String."));
    },
    HostedDetails_HostedDetails$fromJson(data) {
      var t1;
      if (typeof data == "string") {
        t1 = type$.String;
        data = A.LinkedHashMap_LinkedHashMap$_literal(["url", data], t1, t1);
      }
      if (type$.Map_dynamic_dynamic._is(data))
        return A._$HostedDetailsFromJson(data);
      throw A.wrapException(A.ArgumentError$value(data, "hosted", "Must be a Map or String."));
    },
    _$SdkDependencyFromJson(json) {
      return A.$checkedCreate("SdkDependency", json, new A._$SdkDependencyFromJson_closure(), B.Map_empty0, type$.SdkDependency);
    },
    _$GitDependencyFromJson(json) {
      return A.$checkedCreate("GitDependency", json, new A._$GitDependencyFromJson_closure(), B.Map_empty0, type$.GitDependency);
    },
    _$HostedDependencyFromJson(json) {
      return A.$checkedCreate("HostedDependency", json, new A._$HostedDependencyFromJson_closure(json), B.Map_empty0, type$.HostedDependency);
    },
    _$HostedDetailsFromJson(json) {
      return A.$checkedCreate("HostedDetails", json, new A._$HostedDetailsFromJson_closure(json), B.Map_E8aOh, type$.HostedDetails);
    },
    parseDeps_closure: function parseDeps_closure(t0) {
      this.source = t0;
    },
    _fromJson_closure: function _fromJson_closure() {
    },
    _fromJson_closure1: function _fromJson_closure1() {
    },
    _fromJson_closure0: function _fromJson_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.firstUnrecognizedKey = t0;
      _.data = t1;
      _.matchedKeys = t2;
      _.name = t3;
    },
    Dependency: function Dependency() {
    },
    SdkDependency: function SdkDependency(t0, t1) {
      this.sdk = t0;
      this.version = t1;
    },
    GitDependency: function GitDependency(t0, t1, t2) {
      this.url = t0;
      this.ref = t1;
      this.path = t2;
    },
    PathDependency: function PathDependency(t0) {
      this.path = t0;
    },
    HostedDependency: function HostedDependency(t0, t1) {
      this.version = t0;
      this.hosted = t1;
    },
    HostedDetails: function HostedDetails(t0) {
      this.url = t0;
    },
    _$SdkDependencyFromJson_closure: function _$SdkDependencyFromJson_closure() {
    },
    _$SdkDependencyFromJson__closure: function _$SdkDependencyFromJson__closure() {
    },
    _$SdkDependencyFromJson__closure0: function _$SdkDependencyFromJson__closure0() {
    },
    _$GitDependencyFromJson_closure: function _$GitDependencyFromJson_closure() {
    },
    _$GitDependencyFromJson__closure: function _$GitDependencyFromJson__closure() {
    },
    _$GitDependencyFromJson__closure0: function _$GitDependencyFromJson__closure0() {
    },
    _$GitDependencyFromJson__closure1: function _$GitDependencyFromJson__closure1() {
    },
    _$HostedDependencyFromJson_closure: function _$HostedDependencyFromJson_closure(t0) {
      this.json = t0;
    },
    _$HostedDependencyFromJson__closure: function _$HostedDependencyFromJson__closure() {
    },
    _$HostedDependencyFromJson__closure0: function _$HostedDependencyFromJson__closure0() {
    },
    _$HostedDetailsFromJson_closure: function _$HostedDetailsFromJson_closure(t0) {
      this.json = t0;
    },
    _$HostedDetailsFromJson__closure: function _$HostedDetailsFromJson__closure() {
    },
    _$HostedDetailsFromJson__closure0: function _$HostedDetailsFromJson__closure0() {
    },
    Pubspec_Pubspec$fromJson(json, lenient) {
      return A._$PubspecFromJson(json);
    },
    Pubspec_Pubspec$parse(yaml, sourceUrl) {
      return A.checkedYamlDecode(yaml, new A.Pubspec_Pubspec$parse_closure(false), sourceUrl, type$.Pubspec);
    },
    _environmentMap(source) {
      return source == null ? null : source.map$2$1(0, new A._environmentMap_closure(source), type$.String, type$.nullable_VersionConstraint);
    },
    _$PubspecFromJson(json) {
      return A.$checkedCreate("Pubspec", json, new A._$PubspecFromJson_closure(), B.Map_gwFkb, type$.Pubspec);
    },
    Pubspec: function Pubspec(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.name = t0;
      _.version = t1;
      _.description = t2;
      _.homepage = t3;
      _.publishTo = t4;
      _.repository = t5;
      _.issueTracker = t6;
      _.environment = t7;
      _.dependencies = t8;
      _.devDependencies = t9;
      _.dependencyOverrides = t10;
      _.flutter = t11;
    },
    Pubspec_Pubspec$parse_closure: function Pubspec_Pubspec$parse_closure(t0) {
      this.lenient = t0;
    },
    _environmentMap_closure: function _environmentMap_closure(t0) {
      this.source = t0;
    },
    _$PubspecFromJson_closure: function _$PubspecFromJson_closure() {
    },
    _$PubspecFromJson__closure: function _$PubspecFromJson__closure() {
    },
    _$PubspecFromJson__closure0: function _$PubspecFromJson__closure0() {
    },
    _$PubspecFromJson__closure1: function _$PubspecFromJson__closure1() {
    },
    _$PubspecFromJson__closure2: function _$PubspecFromJson__closure2() {
    },
    _$PubspecFromJson__closure3: function _$PubspecFromJson__closure3() {
    },
    _$PubspecFromJson___closure2: function _$PubspecFromJson___closure2() {
    },
    _$PubspecFromJson__closure4: function _$PubspecFromJson__closure4() {
    },
    _$PubspecFromJson__closure5: function _$PubspecFromJson__closure5() {
    },
    _$PubspecFromJson__closure6: function _$PubspecFromJson__closure6() {
    },
    _$PubspecFromJson__closure7: function _$PubspecFromJson__closure7() {
    },
    _$PubspecFromJson__closure8: function _$PubspecFromJson__closure8() {
    },
    _$PubspecFromJson___closure1: function _$PubspecFromJson___closure1() {
    },
    _$PubspecFromJson__closure9: function _$PubspecFromJson__closure9() {
    },
    _$PubspecFromJson___closure0: function _$PubspecFromJson___closure0() {
    },
    _$PubspecFromJson__closure10: function _$PubspecFromJson__closure10() {
    },
    _$PubspecFromJson__closure11: function _$PubspecFromJson__closure11() {
    },
    _$PubspecFromJson__closure12: function _$PubspecFromJson__closure12() {
    },
    _$PubspecFromJson__closure13: function _$PubspecFromJson__closure13() {
    },
    _$PubspecFromJson__closure14: function _$PubspecFromJson__closure14() {
    },
    _$PubspecFromJson__closure15: function _$PubspecFromJson__closure15() {
    },
    _$PubspecFromJson__closure16: function _$PubspecFromJson__closure16() {
    },
    _$PubspecFromJson___closure: function _$PubspecFromJson___closure() {
    },
    parseScreenshots(input) {
      var t1, t2, e, description, path,
        _s11_ = "description",
        _s10_ = "Screenshot",
        _s17_ = "` is not a String",
        _s4_ = "path",
        res = A._setArrayType([], type$.JSArray_Screenshot);
      if (input == null)
        return res;
      for (t1 = J.get$iterator$ax(input), t2 = type$.Map_dynamic_dynamic; t1.moveNext$0();) {
        e = t1.get$current();
        if (!t2._is(e))
          continue;
        description = e.$index(0, _s11_);
        if (description == null)
          throw A.wrapException(A.CheckedFromJsonException$(e, _s11_, _s10_, "Missing required key `description`", false));
        if (typeof description != "string")
          throw A.wrapException(A.CheckedFromJsonException$(e, _s11_, _s10_, "`" + A.S(description) + _s17_, false));
        path = e.$index(0, _s4_);
        if (path == null)
          throw A.wrapException(A.CheckedFromJsonException$(e, _s4_, _s10_, "Missing required key `path`", false));
        if (typeof path != "string")
          throw A.wrapException(A.CheckedFromJsonException$(e, _s4_, _s10_, "`" + A.S(path) + _s17_, false));
        B.JSArray_methods.add$1(res, new A.Screenshot(path));
      }
      return res;
    },
    Screenshot: function Screenshot(t0) {
      this.path = t0;
    },
    mapStackTrace(sourceMap, stackTrace, minified, packageMap, sdkRoot) {
      var t1, t2;
      if (type$.Chain._is(stackTrace)) {
        t1 = stackTrace.get$traces();
        t2 = A._arrayInstanceType(t1);
        return new A.Chain(A.List_List$unmodifiable(new A.MappedListIterable(t1, t2._eval$1("Trace(1)")._as(new A.mapStackTrace_closure(sourceMap, false, packageMap, sdkRoot)), t2._eval$1("MappedListIterable<1,Trace>")), type$.Trace));
      }
      t1 = A.Trace_Trace$from(stackTrace).get$frames();
      t2 = A._arrayInstanceType(t1);
      return A.Trace$(new A.WhereTypeIterable(new A.MappedListIterable(t1, t2._eval$1("Frame?(1)")._as(new A.mapStackTrace_closure0(sourceMap, null, packageMap, false)), t2._eval$1("MappedListIterable<1,Frame?>")), type$.WhereTypeIterable_Frame), null);
    },
    _prettifyMember(member) {
      var t2, t3, t4,
        t1 = A.RegExp_RegExp("/?<$", true, false);
      t1 = A.stringReplaceAllUnchecked(member, t1, "");
      t2 = A.RegExp_RegExp("\\$\\d+(\\$[a-zA-Z_0-9]+)*$", true, false);
      t3 = type$.String_Function_Match;
      t4 = type$.nullable_String_Function_Match;
      t2 = A.stringReplaceAllFuncUnchecked(A.stringReplaceAllUnchecked(t1, t2, ""), A.RegExp_RegExp("(_+)closure\\d*\\.call$", true, false), t4._as(t3._as(new A._prettifyMember_closure())), null);
      t1 = A.RegExp_RegExp("\\.call$", true, false);
      t1 = A.stringReplaceAllUnchecked(t2, t1, "");
      t2 = A.RegExp_RegExp("^dart\\.", true, false);
      t1 = A.stringReplaceAllUnchecked(t1, t2, "");
      t2 = A.RegExp_RegExp("[a-zA-Z_0-9]+\\$", true, false);
      t1 = A.stringReplaceAllUnchecked(t1, t2, "");
      t2 = A.RegExp_RegExp("^[a-zA-Z_0-9]+.(static|dart).", true, false);
      return A.stringReplaceAllFuncUnchecked(A.stringReplaceAllUnchecked(t1, t2, ""), A.RegExp_RegExp("([a-zA-Z0-9]+)_", true, false), t4._as(t3._as(new A._prettifyMember_closure0())), null);
    },
    mapStackTrace_closure: function mapStackTrace_closure(t0, t1, t2, t3) {
      var _ = this;
      _.sourceMap = t0;
      _.minified = t1;
      _.packageMap = t2;
      _.sdkRoot = t3;
    },
    mapStackTrace_closure0: function mapStackTrace_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.sourceMap = t0;
      _.sdkLib = t1;
      _.packageMap = t2;
      _.minified = t3;
    },
    _prettifyMember_closure: function _prettifyMember_closure() {
    },
    _prettifyMember_closure0: function _prettifyMember_closure0() {
    },
    parseJson(map, mapUrl, otherMaps) {
      var t1, t2,
        _s8_ = "sections";
      if (!J.$eq$(map.$index(0, "version"), 3))
        throw A.wrapException(A.ArgumentError$("unexpected source map version: " + A.S(map.$index(0, "version")) + ". Only version 3 is supported.", null));
      if (map.containsKey$1(_s8_)) {
        if (map.containsKey$1("mappings") || map.containsKey$1("sources") || map.containsKey$1("names"))
          throw A.wrapException(A.FormatException$('map containing "sections" cannot contain "mappings", "sources", or "names".', null, null));
        t1 = type$.List_dynamic._as(map.$index(0, _s8_));
        t2 = type$.JSArray_int;
        t2 = new A.MultiSectionMapping(A._setArrayType([], t2), A._setArrayType([], t2), A._setArrayType([], type$.JSArray_Mapping));
        t2.MultiSectionMapping$fromJson$3$mapUrl(t1, otherMaps, mapUrl);
        return t2;
      }
      return A.SingleMapping$fromJson(map.cast$2$0(0, type$.String, type$.dynamic), mapUrl);
    },
    SingleMapping$fromJson(map, mapUrl) {
      var t6, t7, t8,
        t1 = A._asStringQ(map.$index(0, "file")),
        t2 = type$.List_dynamic,
        t3 = type$.String,
        t4 = A.List_List$from(t2._as(map.$index(0, "sources")), true, t3),
        t5 = type$.nullable_List_dynamic._as(map.$index(0, "names"));
      t5 = A.List_List$from(t5 == null ? [] : t5, true, t3);
      t2 = A.List_List$filled(J.get$length$asx(t2._as(map.$index(0, "sources"))), null, false, type$.nullable_SourceFile);
      t6 = A._asStringQ(map.$index(0, "sourceRoot"));
      t7 = A._setArrayType([], type$.JSArray_TargetLineEntry);
      t8 = typeof mapUrl == "string" ? A.Uri_parse(mapUrl) : type$.nullable_Uri._as(mapUrl);
      t3 = new A.SingleMapping(t4, t5, t2, t7, t1, t6, t8, A.LinkedHashMap_LinkedHashMap$_empty(t3, type$.dynamic));
      t3.SingleMapping$fromJson$2$mapUrl(map, mapUrl);
      return t3;
    },
    Mapping: function Mapping() {
    },
    MultiSectionMapping: function MultiSectionMapping(t0, t1, t2) {
      this._lineStart = t0;
      this._columnStart = t1;
      this._maps = t2;
    },
    SingleMapping: function SingleMapping(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.urls = t0;
      _.names = t1;
      _.files = t2;
      _.lines = t3;
      _.targetUrl = t4;
      _.sourceRoot = t5;
      _._mapUrl = t6;
      _.extensions = t7;
    },
    SingleMapping$fromJson_closure: function SingleMapping$fromJson_closure(t0) {
      this.$this = t0;
    },
    SingleMapping_toJson_closure: function SingleMapping_toJson_closure(t0) {
      this.result = t0;
    },
    SingleMapping__findLine_closure: function SingleMapping__findLine_closure(t0) {
      this.line = t0;
    },
    SingleMapping__findColumn_closure: function SingleMapping__findColumn_closure(t0) {
      this.column = t0;
    },
    TargetLineEntry: function TargetLineEntry(t0, t1) {
      this.line = t0;
      this.entries = t1;
    },
    TargetEntry: function TargetEntry(t0, t1, t2, t3, t4) {
      var _ = this;
      _.column = t0;
      _.sourceUrlId = t1;
      _.sourceLine = t2;
      _.sourceColumn = t3;
      _.sourceNameId = t4;
    },
    _MappingTokenizer: function _MappingTokenizer(t0, t1) {
      this._internal = t0;
      this._parser0$_length = t1;
      this.index = -1;
    },
    _TokenKind: function _TokenKind(t0, t1, t2) {
      this.isNewLine = t0;
      this.isNewSegment = t1;
      this.isEof = t2;
    },
    SourceMapSpan$(start, end, text, isIdentifier) {
      var t1 = new A.SourceMapSpan(isIdentifier, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      return t1;
    },
    SourceMapSpan: function SourceMapSpan(t0, t1, t2, t3) {
      var _ = this;
      _.isIdentifier = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    encodeVlq(value) {
      var res, signBit, digit, t1,
        _s64_ = string$.ABCDEF;
      if (value < $.$get$minInt32() || value > $.$get$maxInt32())
        throw A.wrapException(A.ArgumentError$("expected 32 bit int, got: " + value, null));
      res = A._setArrayType([], type$.JSArray_String);
      if (value < 0) {
        value = -value;
        signBit = 1;
      } else
        signBit = 0;
      value = value << 1 | signBit;
      do {
        digit = value & 31;
        value = value >>> 5;
        t1 = value > 0;
        if (t1)
          digit |= 32;
        if (!(digit < 64))
          return A.ioore(_s64_, digit);
        B.JSArray_methods.add$1(res, _s64_[digit]);
      } while (t1);
      return res;
    },
    decodeVlq(chars) {
      var t1, result, $stop, shift, char, digit, result0, _null = null;
      for (t1 = chars._parser0$_length, result = 0, $stop = false, shift = 0; !$stop;) {
        if (++chars.index >= t1)
          throw A.wrapException(A.StateError$("incomplete VLQ value"));
        char = chars.get$current();
        digit = $.$get$_digits().$index(0, char);
        if (digit == null)
          throw A.wrapException(A.FormatException$("invalid character in VLQ encoding: " + char, _null, _null));
        $stop = (digit & 32) === 0;
        result += B.JSInt_methods._shlPositive$1(digit & 31, shift);
        shift += 5;
      }
      result0 = result >>> 1;
      result = (result & 1) === 1 ? -result0 : result0;
      if (result < $.$get$minInt32() || result > $.$get$maxInt32())
        throw A.wrapException(A.FormatException$("expected an encoded 32 bit int, but we got: " + result, _null, _null));
      return result;
    },
    _digits_closure: function _digits_closure() {
    },
    SourceFile$fromString(text, url) {
      var t1 = new A.CodeUnits(text),
        t2 = A._setArrayType([0], type$.JSArray_int),
        t3 = typeof url == "string" ? A.Uri_parse(url) : type$.nullable_Uri._as(url);
      t2 = new A.SourceFile(t3, t2, new Uint32Array(A._ensureNativeList(t1.toList$0(t1))));
      t2.SourceFile$decoded$2$url(t1, url);
      return t2;
    },
    FileLocation$_(file, offset) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        A.throwExpression(A.RangeError$("Offset " + offset + string$.x20must_ + file.get$length(file) + "."));
      return new A.FileLocation(file, offset);
    },
    _FileSpan$(file, _start, _end) {
      if (_end < _start)
        A.throwExpression(A.ArgumentError$("End " + _end + " must come after start " + _start + ".", null));
      else if (_end > file._decodedChars.length)
        A.throwExpression(A.RangeError$("End " + _end + string$.x20must_ + file.get$length(file) + "."));
      else if (_start < 0)
        A.throwExpression(A.RangeError$("Start may not be negative, was " + _start + "."));
      return new A._FileSpan(file, _start, _end);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._end = t2;
    },
    Highlighter$(span, color) {
      var t1 = A.Highlighter__collateLines(A._setArrayType([A._Highlight$(span, true)], type$.JSArray__Highlight)),
        t2 = new A.Highlighter_closure(color).call$0(),
        t3 = B.JSInt_methods.toString$0(B.JSArray_methods.get$last(t1).number + 1),
        t4 = A.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = A._arrayInstanceType(t1);
      return new A.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new A.MappedListIterable(t1, t5._eval$1("int(1)")._as(new A.Highlighter$__closure()), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT0), !A.isAllTheSame(new A.MappedListIterable(t1, t5._eval$1("Object?(1)")._as(new A.Highlighter$__closure0()), t5._eval$1("MappedListIterable<1,Object?>"))), new A.StringBuffer(""));
    },
    Highlighter__contiguous(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && J.$eq$(thisLine.url, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines(highlights) {
      var t1, t2, t3,
        highlightsByUrl = A.groupBy(highlights, new A.Highlighter__collateLines_closure(), type$._Highlight, type$.Object);
      for (t1 = highlightsByUrl.get$values(highlightsByUrl), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        J.sort$1$ax(t3, new A.Highlighter__collateLines_closure0());
      }
      t1 = highlightsByUrl.get$entries(highlightsByUrl);
      t2 = A._instanceType(t1);
      t3 = t2._eval$1("ExpandIterable<Iterable.E,_Line>");
      return A.List_List$of(new A.ExpandIterable(t1, t2._eval$1("Iterable<_Line>(Iterable.E)")._as(new A.Highlighter__collateLines_closure1()), t3), true, t3._eval$1("Iterable.E"));
    },
    _Highlight$(span, primary) {
      var t1 = new A._Highlight_closure(span).call$0();
      return new A._Highlight(t1, true, null);
    },
    _Highlight__normalizeNewlines(span) {
      var endOffset, t1, i, t2, t3, t4,
        text = span.get$text();
      if (!B.JSString_methods.contains$1(text, "\r\n"))
        return span;
      endOffset = span.get$end(span).get$offset();
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (text.charCodeAt(i) === 13 && text.charCodeAt(i + 1) === 10)
          --endOffset;
      t1 = span.get$start(span);
      t2 = span.get$sourceUrl(span);
      t3 = span.get$end(span).get$line();
      t2 = A.SourceLocation$(endOffset, span.get$end(span).get$column(), t3, t2);
      t3 = A.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context();
      return A.SourceSpanWithContext$(t1, t2, t3, A.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline(span) {
      var context, text, start, end, t1, t2, t3;
      if (!B.JSString_methods.endsWith$1(span.get$context(), "\n"))
        return span;
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n\n"))
        return span;
      context = B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1);
      text = span.get$text();
      start = span.get$start(span);
      end = span.get$end(span);
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n")) {
        t1 = A.findLineStart(span.get$context(), span.get$text(), span.get$start(span).get$column());
        t1.toString;
        t1 = t1 + span.get$start(span).get$column() + span.get$length(span) === span.get$context().length;
      } else
        t1 = false;
      if (t1) {
        text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end(span).get$offset();
          t2 = span.get$sourceUrl(span);
          t3 = span.get$end(span).get$line();
          end = A.SourceLocation$(t1 - 1, A._Highlight__lastLineLength(context), t3 - 1, t2);
          start = span.get$start(span).get$offset() === span.get$end(span).get$offset() ? end : span.get$start(span);
        }
      }
      return A.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end(span).get$column() !== 0)
        return span;
      if (span.get$end(span).get$line() === span.get$start(span).get$line())
        return span;
      text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
      t1 = span.get$start(span);
      t2 = span.get$end(span).get$offset();
      t3 = span.get$sourceUrl(span);
      t4 = span.get$end(span).get$line();
      t3 = A.SourceLocation$(t2 - 1, text.length - B.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return A.SourceSpanWithContext$(t1, t3, text, B.JSString_methods.endsWith$1(span.get$context(), "\n") ? B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1) : span.get$context());
    },
    _Highlight__lastLineLength(text) {
      var t2,
        t1 = text.length;
      if (t1 === 0)
        return 0;
      else {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(text, t2);
        if (text.charCodeAt(t2) === 10)
          return t1 === 1 ? 0 : t1 - B.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
        else
          return t1 - B.JSString_methods.lastIndexOf$1(text, "\n") - 1;
      }
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._highlighter$_buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1, t2) {
      this.span = t0;
      this.isPrimary = t1;
      this.label = t2;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    },
    SourceLocation$(offset, column, line, sourceUrl) {
      var t1 = typeof sourceUrl == "string" ? A.Uri_parse(sourceUrl) : type$.nullable_Uri._as(sourceUrl),
        t2 = line == null,
        t3 = t2 ? 0 : line,
        t4 = column == null,
        t5 = t4 ? offset : column;
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (!t2 && line < 0)
        A.throwExpression(A.RangeError$("Line may not be negative, was " + A.S(line) + "."));
      else if (!t4 && column < 0)
        A.throwExpression(A.RangeError$("Column may not be negative, was " + A.S(column) + "."));
      return new A.SourceLocation(t1, offset, t3, t5);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    SourceSpanBase$(start, end, text) {
      var t1 = new A.SourceSpanBase(start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      return t1;
    },
    SourceSpanBase: function SourceSpanBase(t0, t1, t2) {
      this.start = t0;
      this.end = t1;
      this.text = t2;
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException() {
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    SourceSpanWithContext$(start, end, text, _context) {
      var t1 = new A.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!B.JSString_methods.contains$1(_context, text))
        A.throwExpression(A.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".', null));
      if (A.findLineStart(_context, text, start.get$column()) == null)
        A.throwExpression(A.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".', null));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    Chain_capture(callback, onError, $T) {
      var _null = null,
        spec = new A.StackZoneSpecification(new A.Expando(new WeakMap(), "stack chains", type$.Expando__Node), onError, true),
        t1 = type$.nullable_Object;
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      t1.$indexSet(0, $.$get$_specKey(), spec);
      t1.$indexSet(0, $.$get$StackZoneSpecification_disableKey(), false);
      return A.runZoned(new A.Chain_capture_closure(callback, $T), new A._ZoneSpecification(spec.get$_handleUncaughtError(), _null, _null, _null, spec.get$_registerCallback(), spec.get$_registerUnaryCallback(), spec.get$_registerBinaryCallback(), spec.get$_errorCallback(), _null, _null, _null, _null, _null), t1, $T);
    },
    Chain_Chain$parse(chain) {
      var t1, t2,
        _s51_ = string$.x3d_____;
      if (chain.length === 0)
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([], type$.JSArray_Trace), type$.Trace));
      t1 = $.$get$vmChainGap();
      if (B.JSString_methods.contains$1(chain, t1)) {
        t1 = B.JSString_methods.split$1(chain, t1);
        t2 = A._arrayInstanceType(t1);
        return new A.Chain(A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Chain_Chain$parse_closure()), t2._eval$1("WhereIterable<1>")), t2._eval$1("Trace(1)")._as(A.trace_Trace___parseVM_tearOff$closure()), t2._eval$1("MappedIterable<1,Trace>")), type$.Trace));
      }
      if (!B.JSString_methods.contains$1(chain, _s51_))
        return new A.Chain(A.List_List$unmodifiable(A._setArrayType([A.Trace_Trace$parse(chain)], type$.JSArray_Trace), type$.Trace));
      return new A.Chain(A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(chain.split(_s51_), type$.JSArray_String), type$.Trace_Function_String._as(A.trace_Trace___parseFriendly_tearOff$closure()), type$.MappedListIterable_String_Trace), type$.Trace));
    },
    Chain: function Chain(t0) {
      this.traces = t0;
    },
    Chain_capture_closure: function Chain_capture_closure(t0, t1) {
      this.callback = t0;
      this.T = t1;
    },
    Chain_Chain$parse_closure: function Chain_Chain$parse_closure() {
    },
    Chain_toTrace_closure: function Chain_toTrace_closure() {
    },
    Chain_toString_closure0: function Chain_toString_closure0() {
    },
    Chain_toString__closure0: function Chain_toString__closure0() {
    },
    Chain_toString_closure: function Chain_toString_closure(t0) {
      this.longest = t0;
    },
    Chain_toString__closure: function Chain_toString__closure(t0) {
      this.longest = t0;
    },
    Frame___parseVM_tearOff(frame) {
      return A.Frame_Frame$parseVM(A._asString(frame));
    },
    Frame_Frame$parseVM(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseVM_closure(frame));
    },
    Frame___parseV8_tearOff(frame) {
      return A.Frame_Frame$parseV8(A._asString(frame));
    },
    Frame_Frame$parseV8(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseV8_closure(frame));
    },
    Frame_Frame$_parseFirefoxEval(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$_parseFirefoxEval_closure(frame));
    },
    Frame___parseFirefox_tearOff(frame) {
      return A.Frame_Frame$parseFirefox(A._asString(frame));
    },
    Frame_Frame$parseFirefox(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFirefox_closure(frame));
    },
    Frame___parseFriendly_tearOff(frame) {
      return A.Frame_Frame$parseFriendly(A._asString(frame));
    },
    Frame_Frame$parseFriendly(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFriendly_closure(frame));
    },
    Frame__uriOrPathToUri(uriOrPath) {
      if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__uriRegExp()))
        return A.Uri_parse(uriOrPath);
      else if (B.JSString_methods.contains$1(uriOrPath, $.$get$Frame__windowsRegExp()))
        return A._Uri__Uri$file(uriOrPath, true);
      else if (B.JSString_methods.startsWith$1(uriOrPath, "/"))
        return A._Uri__Uri$file(uriOrPath, false);
      if (B.JSString_methods.contains$1(uriOrPath, "\\"))
        return $.$get$windows().toUri$1(uriOrPath);
      return A.Uri_parse(uriOrPath);
    },
    Frame__catchFormatException(text, body) {
      var t1, exception, _null = null;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null, _null, _null), text);
        else
          throw exception;
      }
    },
    Frame: function Frame(t0, t1, t2, t3) {
      var _ = this;
      _.uri = t0;
      _.line = t1;
      _.column = t2;
      _.member = t3;
    },
    Frame_Frame$parseVM_closure: function Frame_Frame$parseVM_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure: function Frame_Frame$parseV8_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure_parseLocation: function Frame_Frame$parseV8_closure_parseLocation(t0) {
      this.frame = t0;
    },
    Frame_Frame$_parseFirefoxEval_closure: function Frame_Frame$_parseFirefoxEval_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFirefox_closure: function Frame_Frame$parseFirefox_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFriendly_closure: function Frame_Frame$parseFriendly_closure(t0) {
      this.frame = t0;
    },
    LazyChain: function LazyChain(t0) {
      this._lazy_chain$_thunk = t0;
      this.__LazyChain__chain_FI = $;
    },
    LazyTrace: function LazyTrace(t0) {
      this._thunk = t0;
      this.__LazyTrace__trace_FI = $;
    },
    StackZoneSpecification: function StackZoneSpecification(t0, t1, t2) {
      var _ = this;
      _._chains = t0;
      _._stack_zone_specification$_onError = t1;
      _._currentNode = null;
      _._errorZone = t2;
    },
    StackZoneSpecification_chainFor_closure: function StackZoneSpecification_chainFor_closure(t0) {
      this._box_0 = t0;
    },
    StackZoneSpecification_chainFor_closure0: function StackZoneSpecification_chainFor_closure0(t0, t1) {
      this.$this = t0;
      this.original = t1;
    },
    StackZoneSpecification__registerCallback_closure: function StackZoneSpecification__registerCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.node = t2;
      _.R = t3;
    },
    StackZoneSpecification__registerUnaryCallback_closure: function StackZoneSpecification__registerUnaryCallback_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.node = t2;
      _.T = t3;
      _.R = t4;
    },
    StackZoneSpecification__registerUnaryCallback__closure: function StackZoneSpecification__registerUnaryCallback__closure(t0, t1, t2) {
      this.f = t0;
      this.arg = t1;
      this.R = t2;
    },
    StackZoneSpecification__registerBinaryCallback_closure: function StackZoneSpecification__registerBinaryCallback_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.node = t2;
      _.T1 = t3;
      _.T2 = t4;
      _.R = t5;
    },
    StackZoneSpecification__registerBinaryCallback__closure: function StackZoneSpecification__registerBinaryCallback__closure(t0, t1, t2, t3) {
      var _ = this;
      _.f = t0;
      _.arg1 = t1;
      _.arg2 = t2;
      _.R = t3;
    },
    StackZoneSpecification__currentTrace_closure: function StackZoneSpecification__currentTrace_closure(t0, t1, t2) {
      this.$this = t0;
      this.stackTrace = t1;
      this.level = t2;
    },
    _Node: function _Node(t0, t1) {
      this.trace = t0;
      this.previous = t1;
    },
    Trace_Trace$from(trace) {
      if (type$.Trace._is(trace))
        return trace;
      if (type$.Chain._is(trace))
        return trace.toTrace$0();
      return new A.LazyTrace(new A.Trace_Trace$from_closure(trace));
    },
    Trace_Trace$parse(trace) {
      var error, t1, exception;
      try {
        if (trace.length === 0) {
          t1 = A.Trace$(A._setArrayType([], type$.JSArray_Frame), null);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_v8Trace())) {
          t1 = A.Trace$parseV8(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, "\tat ")) {
          t1 = A.Trace$parseJSCore(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_firefoxSafariTrace()) || B.JSString_methods.contains$1(trace, $.$get$_firefoxEvalTrace())) {
          t1 = A.Trace$parseFirefox(trace);
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, string$.x3d_____)) {
          t1 = A.Chain_Chain$parse(trace).toTrace$0();
          return t1;
        }
        if (B.JSString_methods.contains$1(trace, $.$get$_friendlyTrace())) {
          t1 = A.Trace$parseFriendly(trace);
          return t1;
        }
        t1 = A.Trace$parseVM(trace);
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (type$.FormatException._is(t1)) {
          error = t1;
          throw A.wrapException(A.FormatException$(J.get$message$z(error) + "\nStack trace:\n" + trace, null, null));
        } else
          throw exception;
      }
    },
    Trace___parseVM_tearOff(trace) {
      return A.Trace$parseVM(A._asString(trace));
    },
    Trace$parseVM(trace) {
      var t1 = A.List_List$unmodifiable(A.Trace__parseVM(trace), type$.Frame);
      return new A.Trace(t1);
    },
    Trace__parseVM(trace) {
      var $frames,
        t1 = B.JSString_methods.trim$0(trace),
        t2 = $.$get$vmChainGap(),
        t3 = type$.WhereIterable_String,
        lines = new A.WhereIterable(A._setArrayType(A.stringReplaceAllUnchecked(t1, t2, "").split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace__parseVM_closure()), t3);
      if (!lines.get$iterator(lines).moveNext$0())
        return A._setArrayType([], type$.JSArray_Frame);
      t1 = A.TakeIterable_TakeIterable(lines, lines.get$length(lines) - 1, t3._eval$1("Iterable.E"));
      t2 = A._instanceType(t1);
      t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("Frame(Iterable.E)")._as(A.frame_Frame___parseVM_tearOff$closure()), t2._eval$1("Iterable.E"), type$.Frame);
      $frames = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("Iterable.E"));
      if (!J.endsWith$1$s(lines.get$last(lines), ".da"))
        B.JSArray_methods.add$1($frames, A.Frame_Frame$parseVM(lines.get$last(lines)));
      return $frames;
    },
    Trace$parseV8(trace) {
      var t2, t3,
        t1 = A.SubListIterable$(A._setArrayType(trace.split("\n"), type$.JSArray_String), 1, null, type$.String);
      t1 = t1.super$Iterable$skipWhile(0, t1.$ti._eval$1("bool(ListIterable.E)")._as(new A.Trace$parseV8_closure()));
      t2 = type$.Frame;
      t3 = t1.$ti;
      t2 = A.List_List$unmodifiable(A.MappedIterable_MappedIterable(t1, t3._eval$1("Frame(Iterable.E)")._as(A.frame_Frame___parseV8_tearOff$closure()), t3._eval$1("Iterable.E"), t2), t2);
      return new A.Trace(t2);
    },
    Trace$parseJSCore(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(trace.split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseJSCore_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseV8_tearOff$closure()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1);
    },
    Trace$parseFirefox(trace) {
      var t1 = A.List_List$unmodifiable(new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFirefox_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseFirefox_tearOff$closure()), type$.MappedIterable_String_Frame), type$.Frame);
      return new A.Trace(t1);
    },
    Trace___parseFriendly_tearOff(trace) {
      return A.Trace$parseFriendly(A._asString(trace));
    },
    Trace$parseFriendly(trace) {
      var t1 = trace.length === 0 ? A._setArrayType([], type$.JSArray_Frame) : new A.MappedIterable(new A.WhereIterable(A._setArrayType(B.JSString_methods.trim$0(trace).split("\n"), type$.JSArray_String), type$.bool_Function_String._as(new A.Trace$parseFriendly_closure()), type$.WhereIterable_String), type$.Frame_Function_String._as(A.frame_Frame___parseFriendly_tearOff$closure()), type$.MappedIterable_String_Frame);
      t1 = A.List_List$unmodifiable(t1, type$.Frame);
      return new A.Trace(t1);
    },
    Trace$($frames, original) {
      var t1 = A.List_List$unmodifiable($frames, type$.Frame);
      return new A.Trace(t1);
    },
    Trace: function Trace(t0) {
      this.frames = t0;
    },
    Trace_Trace$from_closure: function Trace_Trace$from_closure(t0) {
      this.trace = t0;
    },
    Trace__parseVM_closure: function Trace__parseVM_closure() {
    },
    Trace$parseV8_closure: function Trace$parseV8_closure() {
    },
    Trace$parseJSCore_closure: function Trace$parseJSCore_closure() {
    },
    Trace$parseFirefox_closure: function Trace$parseFirefox_closure() {
    },
    Trace$parseFriendly_closure: function Trace$parseFriendly_closure() {
    },
    Trace_toString_closure0: function Trace_toString_closure0() {
    },
    Trace_toString_closure: function Trace_toString_closure(t0) {
      this.longest = t0;
    },
    UnparsedFrame: function UnparsedFrame(t0, t1) {
      this.uri = t0;
      this.member = t1;
    },
    TransformByHandlers_transformByHandlers(_this, onData, onDone, onError, $S, $T) {
      var _null = null, t1 = {},
        controller = _this.get$isBroadcast() ? A.StreamController_StreamController$broadcast(true, $T) : A.StreamController_StreamController(_null, _null, _null, _null, true, $T);
      t1.subscription = null;
      controller.set$onListen(new A.TransformByHandlers_transformByHandlers_closure(t1, _this, onData, controller, onError, onDone, $S));
      return controller.get$stream();
    },
    TransformByHandlers_transformByHandlers_closure: function TransformByHandlers_transformByHandlers_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_1 = t0;
      _._this = t1;
      _.handleData = t2;
      _.controller = t3;
      _.handleError = t4;
      _.handleDone = t5;
      _.S = t6;
    },
    TransformByHandlers_transformByHandlers__closure: function TransformByHandlers_transformByHandlers__closure(t0, t1, t2) {
      this.handleData = t0;
      this.controller = t1;
      this.S = t2;
    },
    TransformByHandlers_transformByHandlers__closure1: function TransformByHandlers_transformByHandlers__closure1(t0, t1) {
      this.handleError = t0;
      this.controller = t1;
    },
    TransformByHandlers_transformByHandlers__closure0: function TransformByHandlers_transformByHandlers__closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.handleDone = t1;
      this.controller = t2;
    },
    TransformByHandlers_transformByHandlers__closure2: function TransformByHandlers_transformByHandlers__closure2(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    TakeUntil_takeUntil(_this, trigger, $T) {
      var _null = null, t1 = {},
        controller = _this.get$isBroadcast() ? A.StreamController_StreamController$broadcast(true, $T) : A.StreamController_StreamController(_null, _null, _null, _null, true, $T);
      t1.subscription = null;
      t1.isDone = false;
      trigger.then$1$1(0, new A.TakeUntil_takeUntil_closure(t1, controller), type$.Null);
      controller.set$onListen(new A.TakeUntil_takeUntil_closure0(t1, _this, controller, $T));
      return controller.get$stream();
    },
    TakeUntil_takeUntil_closure: function TakeUntil_takeUntil_closure(t0, t1) {
      this._box_0 = t0;
      this.controller = t1;
    },
    TakeUntil_takeUntil_closure0: function TakeUntil_takeUntil_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _._this = t1;
      _.controller = t2;
      _.T = t3;
    },
    TakeUntil_takeUntil__closure: function TakeUntil_takeUntil__closure(t0, t1) {
      this._box_0 = t0;
      this.controller = t1;
    },
    TakeUntil_takeUntil__closure0: function TakeUntil_takeUntil__closure0(t0) {
      this._box_0 = t0;
    },
    Tap_tap(_this, onValue, onDone, $T) {
      return A.TransformByHandlers_transformByHandlers(_this, new A.Tap_tap_closure(onValue, $T), new A.Tap_tap_closure0(onDone, $T), new A.Tap_tap_closure1(null, $T), $T, $T);
    },
    Tap_tap_closure: function Tap_tap_closure(t0, t1) {
      this.onValue = t0;
      this.T = t1;
    },
    Tap_tap_closure1: function Tap_tap_closure1(t0, t1) {
      this.onError = t0;
      this.T = t1;
    },
    Tap_tap_closure0: function Tap_tap_closure0(t0, t1) {
      this.onDone = t0;
      this.T = t1;
    },
    EagerSpanScanner: function EagerSpanScanner(t0, t1, t2) {
      var _ = this;
      _._column = _._line = 0;
      _._sourceFile = t0;
      _.sourceUrl = t1;
      _.string = t2;
      _._position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    _EagerSpanScannerState: function _EagerSpanScannerState(t0) {
      this.position = t0;
    },
    StringScannerException$(message, span, source) {
      return new A.StringScannerException(message, span);
    },
    StringScannerException: function StringScannerException(t0, t1) {
      this._span_exception$_message = t0;
      this._span = t1;
    },
    SpanScanner: function SpanScanner() {
    },
    StringScanner: function StringScanner() {
    },
    Uuid: function Uuid() {
    },
    deepEquals0(obj1, obj2) {
      return new A._DeepEquals([], []).equals$2(0, obj1, obj2);
    },
    deepHashCode(obj) {
      return new A.deepHashCode_deepHashCodeInner([]).call$1(obj);
    },
    _DeepEquals: function _DeepEquals(t0, t1) {
      this._parents1 = t0;
      this._parents2 = t1;
    },
    deepHashCode_deepHashCodeInner: function deepHashCode_deepHashCodeInner(t0) {
      this.parents = t0;
    },
    deepHashCode_deepHashCodeInner_closure: function deepHashCode_deepHashCodeInner_closure(t0) {
      this.value = t0;
    },
    DocumentStartEvent$(span, isImplicit, tagDirectives, versionDirective) {
      return new A.DocumentStartEvent(span, versionDirective, tagDirectives == null ? A._setArrayType([], type$.JSArray_TagDirective) : tagDirectives, isImplicit);
    },
    Event: function Event(t0, t1) {
      this.type = t0;
      this.span = t1;
    },
    DocumentStartEvent: function DocumentStartEvent(t0, t1, t2, t3) {
      var _ = this;
      _.span = t0;
      _.versionDirective = t1;
      _.tagDirectives = t2;
      _.isImplicit = t3;
    },
    DocumentEndEvent: function DocumentEndEvent(t0, t1) {
      this.span = t0;
      this.isImplicit = t1;
    },
    AliasEvent: function AliasEvent(t0, t1) {
      this.span = t0;
      this.name = t1;
    },
    _ValueEvent: function _ValueEvent() {
    },
    ScalarEvent: function ScalarEvent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.span = t0;
      _.anchor = t1;
      _.tag = t2;
      _.value = t3;
      _.style = t4;
    },
    SequenceStartEvent: function SequenceStartEvent(t0, t1, t2, t3) {
      var _ = this;
      _.span = t0;
      _.anchor = t1;
      _.tag = t2;
      _.style = t3;
    },
    MappingStartEvent: function MappingStartEvent(t0, t1, t2, t3) {
      var _ = this;
      _.span = t0;
      _.anchor = t1;
      _.tag = t2;
      _.style = t3;
    },
    EventType: function EventType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    Loader: function Loader(t0, t1, t2) {
      this._parser = t0;
      this._loader$_aliases = t1;
      this._loader$_span = t2;
    },
    NullSpan: function NullSpan(t0) {
      this.start = t0;
    },
    Parser: function Parser(t0, t1, t2, t3) {
      var _ = this;
      _._parser$_scanner = t0;
      _._states = t1;
      _._parser$_state = t2;
      _._tagDirectives = t3;
    },
    Parser__parseNode_parseAnchor: function Parser__parseNode_parseAnchor(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Parser__parseNode_parseTag: function Parser__parseNode_parseTag(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _State: function _State(t0) {
      this.name = t0;
    },
    Scanner: function Scanner(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._recover = t0;
      _._errorListener = t1;
      _._scanner = t2;
      _._streamEndProduced = _._streamStartProduced = false;
      _._tokens = t3;
      _._tokensParsed = 0;
      _._tokenAvailable = false;
      _._indents = t4;
      _._simpleKeyAllowed = true;
      _._simpleKeys = t5;
    },
    Scanner__fetchMoreTokens_closure: function Scanner__fetchMoreTokens_closure(t0) {
      this.$this = t0;
    },
    _SimpleKey: function _SimpleKey(t0, t1, t2, t3, t4) {
      var _ = this;
      _.tokenNumber = t0;
      _.location = t1;
      _.line = t2;
      _.column = t3;
      _.required = t4;
    },
    _Chomping: function _Chomping(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ScalarStyle: function ScalarStyle(t0) {
      this.name = t0;
    },
    CollectionStyle: function CollectionStyle(t0) {
      this.name = t0;
    },
    Token: function Token(t0, t1) {
      this.type = t0;
      this.span = t1;
    },
    VersionDirectiveToken: function VersionDirectiveToken(t0, t1, t2) {
      this.span = t0;
      this.major = t1;
      this.minor = t2;
    },
    TagDirectiveToken: function TagDirectiveToken(t0, t1, t2) {
      this.span = t0;
      this.handle = t1;
      this.prefix = t2;
    },
    AnchorToken: function AnchorToken(t0, t1) {
      this.span = t0;
      this.name = t1;
    },
    AliasToken: function AliasToken(t0, t1) {
      this.span = t0;
      this.name = t1;
    },
    TagToken: function TagToken(t0, t1, t2) {
      this.span = t0;
      this.handle = t1;
      this.suffix = t2;
    },
    ScalarToken: function ScalarToken(t0, t1, t2) {
      this.span = t0;
      this.value = t1;
      this.style = t2;
    },
    TokenType: function TokenType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    Pair: function Pair(t0, t1, t2) {
      this.first = t0;
      this.last = t1;
      this.$ti = t2;
    },
    yamlWarningCallback_closure: function yamlWarningCallback_closure() {
    },
    YamlDocument: function YamlDocument(t0, t1) {
      this.contents = t0;
      this.span = t1;
    },
    VersionDirective: function VersionDirective(t0, t1) {
      this.major = t0;
      this.minor = t1;
    },
    TagDirective: function TagDirective(t0, t1) {
      this.handle = t0;
      this.prefix = t1;
    },
    YamlException$(message, span) {
      return new A.YamlException(message, span);
    },
    YamlException: function YamlException(t0, t1) {
      this._span_exception$_message = t0;
      this._span = t1;
    },
    YamlNode: function YamlNode() {
    },
    YamlMap: function YamlMap(t0, t1, t2) {
      this.nodes = t0;
      this.style = t1;
      this._yaml_node$_span = t2;
    },
    YamlMap_keys_closure: function YamlMap_keys_closure() {
    },
    YamlList: function YamlList(t0, t1, t2) {
      this.nodes = t0;
      this.style = t1;
      this._yaml_node$_span = t2;
    },
    YamlScalar: function YamlScalar(t0, t1, t2) {
      this.value = t0;
      this.style = t1;
      this._yaml_node$_span = t2;
    },
    _YamlList_YamlNode_ListMixin: function _YamlList_YamlNode_ListMixin() {
    },
    _YamlMap_YamlNode_MapMixin: function _YamlMap_YamlNode_MapMixin() {
    },
    _YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin: function _YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin() {
    },
    YamlMapWrapper$_(dartMap, span, style) {
      A.ArgumentError_checkNotNull(style, "style", type$.CollectionStyle);
      return new A.YamlMapWrapper(style, dartMap, span, new A._YamlMapNodes(dartMap, span));
    },
    YamlListWrapper$_(dartList, span) {
      A.ArgumentError_checkNotNull(B.CollectionStyle_ANY, "style", type$.CollectionStyle);
      return new A.YamlListWrapper(dartList, span, new A._YamlListNodes(dartList, span));
    },
    _nodeForValue(value, span) {
      if (type$.Map_dynamic_dynamic._is(value))
        return A.YamlMapWrapper$_(value, span, B.CollectionStyle_ANY);
      if (type$.List_dynamic._is(value))
        return A.YamlListWrapper$_(value, span);
      return new A.YamlScalar(value, B.ScalarStyle_ANY, span);
    },
    YamlMapWrapper: function YamlMapWrapper(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _._dartMap = t1;
      _.span = t2;
      _.nodes = t3;
    },
    _YamlMapNodes: function _YamlMapNodes(t0, t1) {
      this._dartMap = t0;
      this._yaml_node_wrapper$_span = t1;
    },
    _YamlMapNodes_keys_closure: function _YamlMapNodes_keys_closure(t0) {
      this.$this = t0;
    },
    YamlListWrapper: function YamlListWrapper(t0, t1, t2) {
      this._dartList = t0;
      this.span = t1;
      this.nodes = t2;
    },
    _YamlListNodes: function _YamlListNodes(t0, t1) {
      this._dartList = t0;
      this._yaml_node_wrapper$_span = t1;
    },
    _YamlMapWrapper_MapBase_UnmodifiableMapMixin: function _YamlMapWrapper_MapBase_UnmodifiableMapMixin() {
    },
    __YamlMapNodes_MapBase_UnmodifiableMapMixin: function __YamlMapNodes_MapBase_UnmodifiableMapMixin() {
    },
    YamlEditor: function YamlEditor(t0, t1, t2, t3) {
      var _ = this;
      _._edits = t0;
      _._yaml = t1;
      _._editor$_contents = t2;
      _._aliases = t3;
    },
    YamlEditor__initialize_collectAliases: function YamlEditor__initialize_collectAliases(t0, t1) {
      this.$this = t0;
      this.visited = t1;
    },
    YamlEditor__initialize_collectAliases_closure: function YamlEditor__initialize_collectAliases_closure(t0) {
      this.collectAliases = t0;
    },
    YamlEditor_update_closure: function YamlEditor_update_closure(t0, t1) {
      this.keyOrIndex = t0;
      this.valueNode = t1;
    },
    YamlEditor__deepModify_closure: function YamlEditor__deepModify_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.keyOrIndex = t1;
      _.path = t2;
      _.subPath = t3;
      _.expectedNode = t4;
    },
    deepEqualsMap($K, $V) {
      return A.LinkedHashMap_LinkedHashMap(A.equality0__deepEquals$closure(), A.equality0__deepHashCode$closure(), $K, $V);
    },
    deepEquals(obj1, obj2) {
      var t1 = type$.YamlNode;
      if (t1._is(obj1))
        obj1 = obj1.get$value();
      if (t1._is(obj2))
        obj2 = obj2.get$value();
      t1 = type$.Map_dynamic_dynamic;
      if (t1._is(obj1) && t1._is(obj2))
        return A.mapDeepEquals(obj1, obj2);
      t1 = type$.List_dynamic;
      if (t1._is(obj1) && t1._is(obj2))
        return A.listDeepEquals(obj1, obj2);
      return J.$eq$(obj1, obj2);
    },
    listDeepEquals(list1, list2) {
      var t1, t2, i;
      if (J.get$length$asx(list1) !== J.get$length$asx(list2))
        return false;
      t1 = type$.YamlList;
      if (t1._is(list1))
        list1 = list1.get$nodes();
      if (t1._is(list2))
        list2 = list2.get$nodes();
      for (t1 = J.getInterceptor$asx(list1), t2 = J.getInterceptor$asx(list2), i = 0; i < t1.get$length(list1); ++i)
        if (!A.deepEquals(t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    mapDeepEquals(map1, map2) {
      var t2, t1 = {};
      t1.map1 = map1;
      t1.map2 = map2;
      if (map1.get$length(map1) !== map2.get$length(map2))
        return false;
      t2 = map1.get$keys(map1);
      return t2.every$1(t2, new A.mapDeepEquals_closure(t1));
    },
    deepHashCode0(value) {
      var t1, t2, t3, t4;
      if (type$.Map_dynamic_dynamic._is(value)) {
        t1 = value.get$keys(value);
        t2 = type$.dynamic;
        t1 = B.UnorderedIterableEquality_DefaultEquality.hash$1(t1.map$1$1(t1, A.equality0__deepHashCode$closure(), t2));
        t3 = value.get$values(value);
        t4 = A._instanceType(t3);
        return t1 ^ B.UnorderedIterableEquality_DefaultEquality.hash$1(A.MappedIterable_MappedIterable(t3, t4._eval$1("@(Iterable.E)")._as(A.equality0__deepHashCode$closure()), t4._eval$1("Iterable.E"), t2));
      } else if (type$.Iterable_dynamic._is(value))
        return B.IterableEquality_DefaultEquality0.hash$1(J.map$1$1$ax(value, A.equality0__deepHashCode$closure(), type$.dynamic));
      else if (type$.YamlScalar._is(value))
        return J.get$hashCode$(value.get$value());
      return J.get$hashCode$(value);
    },
    getKeyNode(map, key) {
      var t1 = map.get$nodes();
      t1 = t1.get$keys(t1);
      return type$.YamlNode._as(t1.firstWhere$1(t1, new A.getKeyNode_closure(key)));
    },
    getKey(map, key) {
      var t1 = map.get$keys(map);
      return t1.firstWhere$1(t1, new A.getKey_closure(key));
    },
    containsKey(map, key) {
      var t1 = map.get$keys(map);
      t1 = t1.where$1(t1, new A.containsKey_closure(key));
      return !t1.get$isEmpty(t1);
    },
    mapDeepEquals_closure: function mapDeepEquals_closure(t0) {
      this._box_0 = t0;
    },
    getKeyNode_closure: function getKeyNode_closure(t0) {
      this.key = t0;
    },
    getKey_closure: function getKey_closure(t0) {
      this.key = t0;
    },
    containsKey_closure: function containsKey_closure(t0) {
      this.key = t0;
    },
    PathError$(path, subPath, $parent) {
      return new A.PathError(path, subPath, $parent, true, subPath, "path", null);
    },
    AliasError$(path, anchor) {
      return new A.AliasError(path, "Encountered an alias node along " + A.S(path) + '! Alias nodes are nodes that refer to a previously serialized nodes, and are denoted by either the "*" or the "&" indicators in the original YAML. As the resulting behavior of mutations on these nodes is not well-defined, the operation will not be supported by this library.\n\n' + anchor.get$span().message$1(0, "The alias was first defined here."));
    },
    createAssertionError(message, oldYaml, newYaml) {
      var t1 = A.stringReplaceAllUnchecked(oldYaml, "\n", "\n> ");
      return new A._YamlAssertionError("(package:yaml_edit) " + message + "\n\n# YAML before edit:\n> " + t1 + "\n\n# YAML after edit:\n> " + A.stringReplaceAllUnchecked(newYaml, "\n", "\n> ") + "\n\nPlease file an issue at:\nhttps://github.com/dart-lang/yaml_edit/issues/new?labels=bug\n");
    },
    PathError: function PathError(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.path = t0;
      _.subPath = t1;
      _.parent = t2;
      _._hasValue = t3;
      _.invalidValue = t4;
      _.name = t5;
      _.message = t6;
    },
    AliasError: function AliasError(t0, t1) {
      this.path = t0;
      this.message = t1;
    },
    _YamlAssertionError: function _YamlAssertionError(t0) {
      this.message = t0;
    },
    SourceEdit$_(offset, $length, replacement) {
      A.RangeError_checkNotNegative(offset, null);
      A.RangeError_checkNotNegative($length, null);
      return new A.SourceEdit(offset, $length, replacement);
    },
    SourceEdit: function SourceEdit(t0, t1, t2) {
      this.offset = t0;
      this.length = t1;
      this.replacement = t2;
    },
    _tryYamlEncodePlain(value) {
      A.assertValidScalar(value);
      if (typeof value == "string") {
        if (A.isDangerousString(value))
          return A._yamlEncodeDoubleQuoted(value);
        return value;
      }
      return J.toString$0$(value);
    },
    _hasUnprintableCharacters(string) {
      var t1,
        codeUnits = new A.CodeUnits(string);
      for (t1 = $.$get$unprintableCharCodes(), t1 = A.LinkedHashMapKeyIterator$(t1, t1._modifications, A._instanceType(t1)._precomputed1); t1.moveNext$0();)
        if (codeUnits.contains$1(codeUnits, t1.__js_helper$_current))
          return true;
      return false;
    },
    _yamlEncodeDoubleQuoted(string) {
      var t1, t2, t3, t4,
        buffer = new A.StringBuffer("");
      for (t1 = new A.CodeUnits(string), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        t4 = $.$get$doubleQuoteEscapeChars();
        if (t4.$index(0, t3) != null)
          buffer._contents += A.S(t4.$index(0, t3));
        else
          buffer._contents += A.Primitives_stringFromCharCode(t3);
      }
      return '"' + buffer.toString$0(0) + '"';
    },
    _tryYamlEncodeSingleQuoted(string) {
      if (B.JSString_methods.contains$1(string, "\n"))
        return A._yamlEncodeDoubleQuoted(string);
      return "'" + A.stringReplaceAllUnchecked(string, "'", "''") + "'";
    },
    _yamlEncodeFlowScalar(value) {
      var val;
      if (type$.YamlScalar._is(value)) {
        A.assertValidScalar(value.get$value());
        val = value.get$value();
        if (typeof val == "string") {
          if (A._hasUnprintableCharacters(val) || value.get$style() === B.ScalarStyle_DOUBLE_QUOTED)
            return A._yamlEncodeDoubleQuoted(val);
          if (value.get$style() === B.ScalarStyle_SINGLE_QUOTED)
            return A._tryYamlEncodeSingleQuoted(val);
        }
        return A._tryYamlEncodePlain(value.get$value());
      }
      A.assertValidScalar(value);
      return A._tryYamlEncodePlain(value);
    },
    yamlEncodeBlockScalar(value, indentation, lineEnding) {
      var val, t1, t2, trimmedString, removedPortion, result;
      if (type$.YamlScalar._is(value)) {
        A.assertValidScalar(value.get$value());
        val = value.get$value();
        if (typeof val == "string") {
          if (A._hasUnprintableCharacters(val))
            return A._yamlEncodeDoubleQuoted(val);
          if (value.get$style() === B.ScalarStyle_SINGLE_QUOTED)
            return A._tryYamlEncodeSingleQuoted(val);
          t1 = B.JSString_methods.trim$0(val);
          t2 = val.length;
          if (t1.length === t2 && t2 !== 0) {
            if (value.get$style() === B.ScalarStyle_FOLDED) {
              trimmedString = B.JSString_methods.trimRight$0(val);
              removedPortion = B.JSString_methods.substring$1(val, trimmedString.length);
              result = B.JSString_methods.contains$1(removedPortion, "\n") ? ">+\n" + B.JSString_methods.$mul(" ", indentation) : ">-\n" + B.JSString_methods.$mul(" ", indentation);
              t1 = B.JSString_methods.$mul(lineEnding, 2);
              t2 = B.JSString_methods.$mul(" ", indentation);
              return result + A.stringReplaceAllUnchecked(trimmedString, "\n", t1 + t2) + removedPortion;
            }
            if (value.get$style() === B.ScalarStyle_LITERAL) {
              t1 = B.JSString_methods.$mul(" ", indentation);
              return A.stringReplaceAllUnchecked("|-\n" + val, "\n", lineEnding + t1);
            }
          }
        }
        return A._tryYamlEncodePlain(value.get$value());
      }
      A.assertValidScalar(value);
      return A._yamlEncodeFlowScalar(value);
    },
    yamlEncodeFlowString(value) {
      var t1;
      type$.YamlNode._as(value);
      if (type$.YamlList._is(value))
        return "[" + J.map$1$1$ax(value.get$nodes(), A.strings__yamlEncodeFlowString$closure(), type$.String).join$1(0, ", ") + "]";
      else if (type$.YamlMap._is(value)) {
        t1 = value.get$nodes();
        return "{" + t1.get$entries(t1).map$1$1(0, new A.yamlEncodeFlowString_closure(), type$.String).join$1(0, ", ") + "}";
      }
      return A._yamlEncodeFlowScalar(value);
    },
    yamlEncodeBlockString(value, indentation, lineEnding) {
      var newIndentation, t1;
      if (!A.isBlockNode(value))
        return A.yamlEncodeFlowString(value);
      newIndentation = indentation + 2;
      if (type$.YamlList._is(value)) {
        if (value.get$length(value) === 0)
          return B.JSString_methods.$mul(" ", indentation) + "[]";
        return J.map$1$1$ax(value.get$nodes(), new A.yamlEncodeBlockString_closure(newIndentation, lineEnding, indentation), type$.String).join$1(0, lineEnding);
      } else if (type$.YamlMap._is(value)) {
        t1 = value.get$keys(value);
        if (t1.get$isEmpty(t1))
          return B.JSString_methods.$mul(" ", indentation) + "{}";
        t1 = value.get$nodes();
        return t1.get$entries(t1).map$1$1(0, new A.yamlEncodeBlockString_closure0(indentation, newIndentation, lineEnding), type$.String).join$1(0, lineEnding);
      }
      return A.yamlEncodeBlockScalar(value, newIndentation, lineEnding);
    },
    yamlEncodeFlowString_closure: function yamlEncodeFlowString_closure() {
    },
    yamlEncodeBlockString_closure: function yamlEncodeBlockString_closure(t0, t1, t2) {
      this.newIndentation = t0;
      this.lineEnding = t1;
      this.indentation = t2;
    },
    yamlEncodeBlockString_closure0: function yamlEncodeBlockString_closure0(t0, t1, t2) {
      this.indentation = t0;
      this.newIndentation = t1;
      this.lineEnding = t2;
    },
    isDangerousString(string) {
      var t1, exception;
      try {
        if (!J.$eq$(A.loadYamlNode(string, null).get$value(), string))
          return true;
        t1 = B.JSString_methods.contains$1(string, A.RegExp_RegExp("\\{|\\[|\\]|\\}|,", true, false));
        return t1;
      } catch (exception) {
        return true;
      }
    },
    assertValidScalar(value) {
      if (typeof value == "number" || typeof value == "string" || A._isBool(value) || value == null)
        return;
      throw A.wrapException(A.ArgumentError$value(value, "value", "Not a valid scalar type!"));
    },
    isBlockNode(node) {
      var t1;
      if (type$.YamlScalar._is(node))
        if (node.get$style() === B.ScalarStyle_LITERAL || node.get$style() === B.ScalarStyle_FOLDED || node.get$style() === B.ScalarStyle_ANY)
          return true;
      if (type$.YamlList._is(node))
        t1 = node.get$style() === B.CollectionStyle_BLOCK || node.get$style() === B.CollectionStyle_ANY;
      else
        t1 = false;
      if (t1)
        return true;
      if (type$.YamlMap._is(node))
        t1 = node.get$style() === B.CollectionStyle_BLOCK || node.get$style() === B.CollectionStyle_ANY;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    getContentSensitiveEnd(yamlNode) {
      var t1;
      if (type$.YamlList._is(yamlNode))
        if (yamlNode.get$style() === B.CollectionStyle_FLOW) {
          t1 = yamlNode.get$span();
          return t1.get$end(t1).get$offset();
        } else
          return A.getContentSensitiveEnd(J.get$last$ax(yamlNode.get$nodes()));
      else if (type$.YamlMap._is(yamlNode))
        if (yamlNode.get$style() === B.CollectionStyle_FLOW) {
          t1 = yamlNode.get$span();
          return t1.get$end(t1).get$offset();
        } else {
          t1 = yamlNode.get$nodes();
          t1 = t1.get$values(t1);
          return A.getContentSensitiveEnd(t1.get$last(t1));
        }
      t1 = yamlNode.get$span();
      return t1.get$end(t1).get$offset();
    },
    isValidIndex(index, $length) {
      return A._isInt(index) && index >= 0 && index < $length;
    },
    isEmpty(item) {
      var t1;
      if (type$.Map_dynamic_dynamic._is(item)) {
        t1 = item.get$keys(item);
        return t1.get$isEmpty(t1);
      }
      if (type$.List_dynamic._is(item))
        return item.get$length(item) === 0;
      return false;
    },
    getMapInsertionIndex(map, newKey) {
      var keys, i, t2, insertionIndex,
        t1 = map.get$nodes();
      t1 = t1.get$keys(t1);
      keys = t1.map$1$1(t1, new A.getMapInsertionIndex_closure(), type$.String).toList$0(0);
      for (i = 1; i < keys.length; ++i) {
        t1 = keys[i];
        t2 = A._asString(keys[i - 1]);
        if (J.$eq$(t1, t2))
          t1 = 0;
        else
          t1 = t1 < t2 ? -1 : 1;
        if (t1 < 0) {
          t1 = map.get$keys(map);
          return t1.get$length(t1);
        }
      }
      insertionIndex = B.JSArray_methods.indexWhere$1(keys, new A.getMapInsertionIndex_closure0(newKey));
      if (insertionIndex !== -1)
        return insertionIndex;
      t1 = map.get$keys(map);
      return t1.get$length(t1);
    },
    getIndentation(editor) {
      var t2, children, t3, indentation, t4, indent,
        node = editor._traverse$2$orElse([], null),
        t1 = type$.YamlMap;
      if (t1._is(node) && node.get$style() === B.CollectionStyle_BLOCK) {
        t2 = node.get$nodes();
        children = t2.get$values(t2);
      } else
        children = type$.YamlList._is(node) && node.get$style() === B.CollectionStyle_BLOCK ? node.get$nodes() : null;
      if (children != null)
        for (t2 = J.get$iterator$ax(children), t3 = type$.YamlList, indentation = 2; t2.moveNext$0();) {
          t4 = t2.get$current();
          if (t3._is(t4))
            indent = A.getListIndentation(editor._yaml, t4);
          else
            indent = t1._is(t4) ? A.getMapIndentation(editor._yaml, t4) : 0;
          if (indent !== 0)
            indentation = indent;
        }
      else
        indentation = 2;
      return indentation;
    },
    getListIndentation(yaml, list) {
      var t1, lastNewLine, lastHyphen;
      if (list.get$style() === B.CollectionStyle_FLOW)
        return 0;
      if (list.get$length(list) === 0)
        throw A.wrapException(A.UnsupportedError$("Unable to get indentation for empty block list"));
      t1 = J.get$last$ax(list.get$nodes()).get$span();
      t1 = t1.get$start(t1).get$offset() - 1;
      lastNewLine = B.JSString_methods.lastIndexOf$2(yaml, "\n", t1);
      lastHyphen = B.JSString_methods.lastIndexOf$2(yaml, "-", t1);
      if (lastNewLine === -1)
        return lastHyphen;
      return lastHyphen - lastNewLine - 1;
    },
    getMapIndentation(yaml, map) {
      var t1, lastSpanOffset, lastNewLine, lastQuestionMark;
      if (map.get$style() === B.CollectionStyle_FLOW)
        return 0;
      t1 = map.get$keys(map);
      if (t1.get$isEmpty(t1))
        throw A.wrapException(A.UnsupportedError$("Unable to get indentation for empty block map"));
      t1 = map.get$nodes();
      t1 = t1.get$keys(t1);
      t1 = type$.YamlNode._as(t1.get$last(t1)).get$span();
      lastSpanOffset = t1.get$start(t1).get$offset();
      lastNewLine = B.JSString_methods.lastIndexOf$2(yaml, "\n", lastSpanOffset);
      lastQuestionMark = B.JSString_methods.lastIndexOf$2(yaml, "?", lastSpanOffset);
      if (lastQuestionMark === -1) {
        if (lastNewLine === -1)
          return lastSpanOffset;
        return lastSpanOffset - lastNewLine - 1;
      }
      if (lastNewLine === -1)
        return lastQuestionMark;
      if (lastQuestionMark > lastNewLine)
        return lastQuestionMark - lastNewLine - 1;
      return lastSpanOffset - lastNewLine - 1;
    },
    getLineEnding(yaml) {
      var t1, index, unixNewlines, windowsNewlines, t2;
      for (t1 = yaml.length, index = -1, unixNewlines = 0, windowsNewlines = 0; index = B.JSString_methods.indexOf$2(yaml, "\n", index + 1), index !== -1;) {
        if (index !== 0) {
          t2 = index - 1;
          if (!(t2 >= 0 && t2 < t1))
            return A.ioore(yaml, t2);
          t2 = yaml[t2] === "\r";
        } else
          t2 = false;
        if (t2)
          ++windowsNewlines;
        else
          ++unixNewlines;
      }
      return windowsNewlines > unixNewlines ? "\r\n" : "\n";
    },
    YamlNodeExtension_get_collectionStyle(_this) {
      if (type$.YamlMap._is(_this))
        return _this.get$style();
      if (type$.YamlList._is(_this))
        return _this.get$style();
      return null;
    },
    getMapInsertionIndex_closure: function getMapInsertionIndex_closure() {
    },
    getMapInsertionIndex_closure0: function getMapInsertionIndex_closure0(t0) {
      this.newKey = t0;
    },
    updatedYamlMap(map, update) {
      var t1 = type$.dynamic,
        dummyMap = A.deepEqualsMap(t1, t1);
      dummyMap.addAll$1(0, map.get$nodes());
      update.call$1(dummyMap);
      return type$.YamlMap._as(A.wrapAsYamlNode(dummyMap, B.CollectionStyle_ANY, B.ScalarStyle_ANY));
    },
    wrapAsYamlNode(value, collectionStyle, scalarStyle) {
      var t1, t2, shellSourceLocation;
      if (type$.YamlScalar._is(value)) {
        A.assertValidScalar(value.get$value());
        return value;
      } else if (type$.YamlList._is(value)) {
        for (t1 = J.get$iterator$ax(value.get$nodes()); t1.moveNext$0();)
          A.wrapAsYamlNode(t1.get$current(), B.CollectionStyle_ANY, B.ScalarStyle_ANY);
        return value;
      } else if (type$.YamlMap._is(value)) {
        for (t1 = value.get$nodes(), t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current();
          A.wrapAsYamlNode(t2.key, B.CollectionStyle_ANY, B.ScalarStyle_ANY);
          A.wrapAsYamlNode(t2.value, B.CollectionStyle_ANY, B.ScalarStyle_ANY);
        }
        return value;
      } else if (type$.Map_dynamic_dynamic._is(value))
        return A.YamlMapWrap_YamlMapWrap(value, collectionStyle, scalarStyle);
      else if (type$.List_dynamic._is(value))
        return A.YamlListWrap_YamlListWrap(value, collectionStyle, scalarStyle);
      else {
        A.assertValidScalar(value);
        shellSourceLocation = A.SourceLocation$(0, null, null, null);
        return new A.YamlScalarWrap(scalarStyle, A.SourceSpanBase$(shellSourceLocation, shellSourceLocation, ""), value);
      }
    },
    YamlMapWrap_YamlMapWrap(dartMap, collectionStyle, scalarStyle) {
      var t1, t2, shellSourceLocation,
        wrappedMap = A.deepEqualsMap(type$.dynamic, type$.YamlNode);
      for (t1 = dartMap.get$entries(dartMap), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        wrappedMap.$indexSet(0, A.wrapAsYamlNode(t2.key, collectionStyle, scalarStyle), A.wrapAsYamlNode(t2.value, collectionStyle, scalarStyle));
      }
      shellSourceLocation = A.SourceLocation$(0, null, null, null);
      t1 = A.SourceSpanBase$(shellSourceLocation, shellSourceLocation, "");
      return new A.YamlMapWrap(wrappedMap.__js_helper$_length === 0 ? B.CollectionStyle_FLOW : collectionStyle, wrappedMap, t1);
    },
    YamlListWrap_YamlListWrap(dartList, collectionStyle, scalarStyle) {
      var shellSourceLocation, t2,
        t1 = J.map$1$1$ax(dartList, new A.YamlListWrap_YamlListWrap_closure(collectionStyle, scalarStyle), type$.YamlNode);
      t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
      shellSourceLocation = A.SourceLocation$(0, null, null, null);
      t2 = A.SourceSpanBase$(shellSourceLocation, shellSourceLocation, "");
      return new A.YamlListWrap(t1.length === 0 ? B.CollectionStyle_FLOW : collectionStyle, t1, t2);
    },
    YamlScalarWrap: function YamlScalarWrap(t0, t1, t2) {
      this.style = t0;
      this.span = t1;
      this.value = t2;
    },
    YamlMapWrap: function YamlMapWrap(t0, t1, t2) {
      this.style = t0;
      this.nodes = t1;
      this.span = t2;
    },
    YamlMapWrap_keys_closure: function YamlMapWrap_keys_closure() {
    },
    YamlListWrap: function YamlListWrap(t0, t1, t2) {
      this.style = t0;
      this.nodes = t1;
      this.span = t2;
    },
    YamlListWrap_YamlListWrap_closure: function YamlListWrap_YamlListWrap_closure(t0, t1) {
      this.collectionStyle = t0;
      this.scalarStyle = t1;
    },
    _YamlListWrap_Object_ListMixin: function _YamlListWrap_Object_ListMixin() {
    },
    _YamlMapWrap_Object_MapMixin: function _YamlMapWrap_Object_MapMixin() {
    },
    _YamlMapWrap_Object_MapMixin_UnmodifiableMapMixin: function _YamlMapWrap_Object_MapMixin_UnmodifiableMapMixin() {
    },
    main() {
      return A.wrapMain(A.deputy_scan___deputyScan$closure());
    },
    _deputyScan() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, deputy, t1, t2, updates, git, t3, logger;
      var $async$_deputyScan = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              logger = A.AWSLogger_AWSLogger(A.AWSLogger_AWSLogger("AWS")._logger.get$fullName() + ".Deputy");
              logger.unregisterAllPlugins$0();
              logger.registerPlugin$1$1(B.C_NodeLoggerPlugin, type$.NodeLoggerPlugin);
              $async$goto = 3;
              return A._asyncAwait(A.Deputy_create(B.C_NodeFileSystem, logger, B.C_NodePlatform, $.$get$processManager()), $async$_deputyScan);
            case 3:
              // returning from await.
              deputy = $async$result;
              t1 = self;
              t2 = type$.JSObject;
              $async$goto = 4;
              return A._asyncAwait(A.Core_withGroup(t2._as(t1.core), "Scan for Updates", deputy.get$scanAndUpdate(), type$.nullable_Map_String_VersionConstraint), $async$_deputyScan);
            case 4:
              // returning from await.
              updates = $async$result;
              if (updates == null) {
                $async$returnValue = t2._as(t1.core).info("No updates needed");
                // goto return
                $async$goto = 1;
                break;
              }
              git = deputy.repo.git;
              $async$goto = 5;
              return A._asyncAwait(A.Core_withGroup(t2._as(t1.core), "Diff", new A._deputyScan_closure(git), type$.ProcessResult), $async$_deputyScan);
            case 5:
              // returning from await.
              t3 = type$.Null;
              $async$goto = 6;
              return A._asyncAwait(A.Core_withGroup(t2._as(t1.core), "Commit Changes", new A._deputyScan_closure0(git), t3), $async$_deputyScan);
            case 6:
              // returning from await.
              $async$goto = 7;
              return A._asyncAwait(A.Core_withGroup(t2._as(t1.core), "Create PR", new A._deputyScan_closure1(updates), t3), $async$_deputyScan);
            case 7:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_deputyScan, $async$completer);
    },
    _deputyScan_closure: function _deputyScan_closure(t0) {
      this.git = t0;
    },
    _deputyScan_closure0: function _deputyScan_closure0(t0) {
      this.git = t0;
    },
    _deputyScan_closure1: function _deputyScan_closure1(t0) {
      this.updates = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    Core_withGroup(_this, $name, action, $R) {
      return A.Core_withGroup$body(_this, $name, action, $R, $R);
    },
    Core_withGroup$body(_this, $name, action, $R, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], t1;
      var $async$Core_withGroup = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _this.startGroup($name);
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(action.call$0(), $async$Core_withGroup);
            case 6:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              _this.endGroup();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$Core_withGroup, $async$completer);
    },
    Core_setFailed(_this, error) {
      _this.setFailed(error);
      A.Process_exit(type$.JSObject._as(self.process), 1);
    },
    Process_get_env(_this) {
      var t2, $name, value,
        t1 = type$.String,
        variables = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t1 = type$.JSObject, t2 = J.get$iterator$ax(type$.List_nullable_Object._as(self.Object.getOwnPropertyNames(t1._as(_this.env)))); t2.moveNext$0();) {
        $name = A._asString(t2.get$current());
        value = A._asStringQ(t1._as(_this.env)[$name]);
        if (value == null)
          value = null;
        if (value == null)
          continue;
        variables.$indexSet(0, $name, value);
      }
      return variables;
    },
    Process_exit(_this, exitCode) {
      _this.exit(exitCode);
      A.unreachable();
    },
    LevelConversion_get_logLevel(_this) {
      var t1 = _this.value;
      if (t1 >= 2000)
        return B.LogLevel_5;
      else if (t1 >= 1000)
        return B.LogLevel_4;
      else if (t1 >= 900)
        return B.LogLevel_3;
      else if (t1 >= 700)
        return B.LogLevel_2;
      else if (t1 >= 500)
        return B.LogLevel_1;
      else if (t1 >= 300)
        return B.LogLevel_0;
      return B.LogLevel_0;
    },
    equalsIgnoreAsciiCase(a, b) {
      var t1, t2, i, aChar, bChar, aCharLowerCase;
      A._asString(a);
      A._asString(b);
      t1 = a.length;
      t2 = b.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        aChar = a.charCodeAt(i);
        if (!(i < t2))
          return A.ioore(b, i);
        bChar = b.charCodeAt(i);
        if (aChar === bChar)
          continue;
        if ((aChar ^ bChar) !== 32)
          return false;
        aCharLowerCase = aChar | 32;
        if (97 <= aCharLowerCase && aCharLowerCase <= 122)
          continue;
        return false;
      }
      return true;
    },
    hashIgnoreAsciiCase(string) {
      var t1, hash, i, char;
      A._asString(string);
      for (t1 = string.length, hash = 0, i = 0; i < t1; ++i) {
        char = string.charCodeAt(i);
        hash = hash + (97 <= char && char <= 122 ? char - 32 : char) & 536870911;
        hash = hash + ((hash & 524287) << 10) >>> 6 & 8388607;
      }
      hash = hash + ((hash & 67108863) << 3) >>> 11 & 262143;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    groupBy(values, key, $S, $T) {
      var t1, _i, element, t2, t3,
        map = A.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (t1 = $S._eval$1("JSArray<0>"), _i = 0; _i < 1; ++_i) {
        element = values[_i];
        t2 = key.call$1(element);
        t3 = map.$index(0, t2);
        if (t3 == null) {
          t3 = A._setArrayType([], t1);
          map.$indexSet(0, t2, t3);
          t2 = t3;
        } else
          t2 = t3;
        J.add$1$ax(t2, element);
      }
      return map;
    },
    maxBy(values, orderBy, $S, $T) {
      var t1, maxValue, maxOrderBy, _i, element, elementOrderBy, t2;
      for (t1 = values.length, maxValue = null, maxOrderBy = null, _i = 0; _i < values.length; values.length === t1 || (0, A.throwConcurrentModificationError)(values), ++_i) {
        element = values[_i];
        elementOrderBy = orderBy.call$1(element);
        if (maxOrderBy != null) {
          t2 = A.defaultCompare(elementOrderBy, maxOrderBy);
          if (typeof t2 !== "number")
            return t2.$gt();
          t2 = t2 > 0;
        } else
          t2 = true;
        if (t2) {
          maxOrderBy = elementOrderBy;
          maxValue = element;
        }
      }
      return maxValue;
    },
    IterableExtension_firstWhereOrNull(_this, test, $T) {
      var t1, element;
      for (t1 = J.get$iterator$ax(_this); t1.moveNext$0();) {
        element = t1.get$current();
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
      }
      return null;
    },
    IterableExtension_get_lastOrNull(_this, $T) {
      var t1 = J.getInterceptor$asx(_this);
      if (t1.get$isEmpty(_this))
        return null;
      return t1.get$last(_this);
    },
    defaultCompare(value1, value2) {
      return J.compareTo$1$ns(type$.Comparable_nullable_Object._as(value1), value2);
    },
    decodeDigit(c) {
      var letter,
        digit = c ^ 48;
      if (digit < 10)
        return digit;
      letter = (c | 32) - 97;
      if (letter >= 0)
        return letter + 10;
      else
        return 255;
    },
    $enumDecodeNullable(enumValues, source, $K, $V) {
      var t1, t2;
      if (source == null)
        return null;
      for (t1 = enumValues.get$entries(enumValues), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (J.$eq$(t2.value, source))
          return t2.key;
      }
      t1 = A.ArgumentError$("`" + A.S(source) + "` is not one of the supported values: " + enumValues.get$values(enumValues).join$1(0, ", "), null);
      throw A.wrapException(t1);
    },
    $enumDecode(enumValues, source, $K, $V) {
      var t1, t2;
      if (source == null)
        throw A.wrapException(A.ArgumentError$("A value must be provided. Supported values: " + enumValues.get$values(enumValues).join$1(0, ", "), null));
      for (t1 = enumValues.get$entries(enumValues), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (J.$eq$(t2.value, source))
          return t2.key;
      }
      t1 = A.ArgumentError$("`" + A.S(source) + "` is not one of the supported values: " + enumValues.get$values(enumValues).join$1(0, ", "), null);
      throw A.wrapException(t1);
    },
    Platform_localeName() {
      return A.throwExpression(A.UnsupportedError$("Not supported in Node."));
    },
    Platform_operatingSystem() {
      return J.platform$0$x(A.os());
    },
    Platform_packageConfig() {
      return A.throwExpression(A.UnsupportedError$("Not supported in Node."));
    },
    Platform_version() {
      return A.throwExpression(A.UnsupportedError$("Not supported in Node."));
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() === $.$get$Style_url())
        t1 = $._current = J.resolve$1$x(uri, ".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    absolute(part1) {
      var _null = null;
      return $.$get$context().absolute$15(part1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    join(part1, part2) {
      var _null = null;
      return $.$get$context().join$16(0, part1, part2, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter(path, index) {
      var t3,
        t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!(index >= 0 && index < t1))
        return A.ioore(path, index);
      if (!A.isAlphabetic(path.charCodeAt(index)))
        return false;
      t3 = index + 1;
      if (!(t3 < t1))
        return A.ioore(path, t3);
      if (path.charCodeAt(t3) !== 58)
        return false;
      if (t1 === t2)
        return true;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(path, t2);
      return path.charCodeAt(t2) === 47;
    },
    equalsWithoutPreRelease(version1, version2) {
      return version1.major === version2.major && version1.minor === version2.minor && version1.patch === version2.patch;
    },
    binarySearch(list, matches, $T) {
      var max, min, half;
      if (list.length === 0)
        return -1;
      if (A.boolConversionCheck(matches.call$1(B.JSArray_methods.get$first(list))))
        return 0;
      if (!A.boolConversionCheck(matches.call$1(B.JSArray_methods.get$last(list))))
        return list.length;
      max = list.length - 1;
      for (min = 0; min < max;) {
        half = min + B.JSInt_methods._tdivFast$1(max - min, 2);
        if (!(half >= 0 && half < list.length))
          return A.ioore(list, half);
        if (A.boolConversionCheck(matches.call$1(list[half])))
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    isAllTheSame(iter) {
      var firstValue, t1, t2, value;
      if (iter.get$length(iter) === 0)
        return true;
      firstValue = iter.get$first(iter);
      for (t1 = A.SubListIterable$(iter, 1, null, iter.$ti._eval$1("ListIterable.E")), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        value = t1.__internal$_current;
        if (!J.$eq$(value == null ? t2._as(value) : value, firstValue))
          return false;
      }
      return true;
    },
    replaceFirstNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no null elements.", null));
      B.JSArray_methods.$indexSet(list, index, element);
    },
    replaceWithNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no elements matching " + element.toString$0(0) + ".", null));
      B.JSArray_methods.$indexSet(list, index, null);
    },
    countCodeUnits(string, codeUnit) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(string), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === codeUnit)
          ++count;
      }
      return count;
    },
    findLineStart(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = B.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = B.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : B.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = B.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    },
    validateErrorArgs(string, match, position, $length) {
      var t1 = position != null;
      if (t1)
        if (position < 0)
          throw A.wrapException(A.RangeError$("position must be greater than or equal to 0."));
        else if (position > string.length)
          throw A.wrapException(A.RangeError$("position must be less than or equal to the string length."));
      if (t1 && $length != null && position + $length > string.length)
        throw A.wrapException(A.RangeError$("position plus length must not go beyond the end of the string."));
    },
    UuidUtil_mathRNG(seed) {
      var b, rand, i, t1;
      A._asInt(seed);
      b = new Uint8Array(16);
      if (seed === -1)
        rand = $.$get$UuidUtil__random();
      else {
        rand = new A._Random();
        rand._Random$1(seed);
      }
      for (i = 0; i < 16; ++i) {
        t1 = rand.nextInt$1(256);
        if (!(i < 16))
          return A.ioore(b, i);
        b[i] = t1;
      }
      return b;
    },
    loadYamlNode(yaml, sourceUrl) {
      return A.loadYamlDocument(yaml, null, false, sourceUrl).contents;
    },
    loadYamlDocument(yaml, errorListener, recover, sourceUrl) {
      var t7, parser, loader, $document, nextDocument,
        t1 = A._setArrayType([], type$.JSArray__State),
        t2 = type$.String,
        t3 = A.QueueList$(type$.Token),
        t4 = A._setArrayType([-1], type$.JSArray_int),
        t5 = A._setArrayType([null], type$.JSArray_nullable__SimpleKey),
        t6 = A.SourceFile$fromString(yaml, sourceUrl);
      if (sourceUrl == null)
        t7 = null;
      else
        t7 = sourceUrl;
      parser = new A.Parser(new A.Scanner(false, errorListener, new A.EagerSpanScanner(t6, t7, yaml), t3, t4, t5), t1, B._State_STREAM_START, A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.TagDirective));
      loader = new A.Loader(parser, A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.YamlNode), parser.parse$0(0).get$span());
      $document = loader.load$0(0);
      if ($document == null) {
        t1 = loader._loader$_span;
        return new A.YamlDocument(new A.YamlScalar(null, B.ScalarStyle_ANY, t1), t1);
      }
      nextDocument = loader.load$0(0);
      if (nextDocument != null)
        throw A.wrapException(A.YamlException$("Only expected one document.", nextDocument.span));
      return $document;
    },
    updateInList(yamlEdit, list, index, newValue) {
      var currValue, t1, offset, yaml, indentation, lineEnding, valueString, end;
      A.RangeError_checkValueInInterval(index, 0, list.get$length(list) - 1, null);
      currValue = J.$index$asx(list.get$nodes(), index);
      t1 = currValue.get$span();
      offset = t1.get$start(t1).get$offset();
      yaml = yamlEdit._yaml;
      if (list.get$style() === B.CollectionStyle_BLOCK) {
        indentation = A.getListIndentation(yaml, list) + A.getIndentation(yamlEdit);
        lineEnding = A.getLineEnding(yaml);
        valueString = A.yamlEncodeBlockString(A.wrapAsYamlNode(newValue, B.CollectionStyle_ANY, B.ScalarStyle_ANY), indentation, lineEnding);
        if (!(type$.List_dynamic._is(newValue) && !newValue.get$isEmpty(newValue)))
          if (type$.Map_dynamic_dynamic._is(newValue)) {
            t1 = newValue.get$keys(newValue);
            t1 = t1.get$isNotEmpty(t1);
          } else
            t1 = false;
        else
          t1 = true;
        if (t1)
          valueString = B.JSString_methods.substring$1(valueString, indentation);
        else if (A.YamlNodeExtension_get_collectionStyle(currValue) === B.CollectionStyle_BLOCK)
          valueString += lineEnding;
        end = A.getContentSensitiveEnd(currValue);
        if (end <= offset) {
          ++offset;
          valueString = " " + valueString;
          end = offset;
        }
        return A.SourceEdit$_(offset, end - offset, valueString);
      } else {
        valueString = A.yamlEncodeFlowString(newValue);
        t1 = currValue.get$span();
        return A.SourceEdit$_(offset, t1.get$length(t1), valueString);
      }
    },
    updateInMap(yamlEdit, map, key, newValue) {
      var keyNode, yaml, t1, t2, keyString, lineEnding, formattedValue, t3, offset, insertionIndex, nextNewLineIndex, valueString, valueSpan, valueAsString, start, end;
      if (!A.containsKey(map, key)) {
        keyNode = A.wrapAsYamlNode(key, B.CollectionStyle_ANY, B.ScalarStyle_ANY);
        if (map.get$style() === B.CollectionStyle_FLOW)
          return A._addToFlowMap(yamlEdit, map, keyNode, newValue);
        else {
          yaml = yamlEdit._yaml;
          t1 = A.getMapIndentation(yaml, map);
          t2 = A.getIndentation(yamlEdit);
          keyString = A.yamlEncodeFlowString(A.wrapAsYamlNode(keyNode, B.CollectionStyle_ANY, B.ScalarStyle_ANY));
          lineEnding = A.getLineEnding(yaml);
          formattedValue = B.JSString_methods.$mul(" ", A.getMapIndentation(yaml, map));
          t3 = map.get$span();
          offset = t3.get$end(t3).get$offset();
          insertionIndex = A.getMapInsertionIndex(map, keyString);
          t3 = map.get$keys(map);
          if (t3.get$isNotEmpty(t3)) {
            t3 = map.get$keys(map);
            if (insertionIndex === t3.get$length(t3)) {
              t3 = map.get$nodes();
              t3 = t3.get$values(t3);
              nextNewLineIndex = B.JSString_methods.indexOf$2(yaml, "\n", A.getContentSensitiveEnd(t3.get$last(t3)));
              if (nextNewLineIndex !== -1)
                offset = nextNewLineIndex + 1;
              else
                formattedValue = lineEnding + formattedValue;
            } else {
              t3 = map.get$nodes();
              t3 = t3.get$keys(t3);
              t3 = t3.toList$0(t3);
              if (!(insertionIndex >= 0 && insertionIndex < t3.length))
                return A.ioore(t3, insertionIndex);
              t3 = type$.YamlNode._as(t3[insertionIndex]).get$span();
              offset = B.JSString_methods.lastIndexOf$2(yaml, "\n", t3.get$start(t3).get$offset()) + 1;
            }
          }
          valueString = A.yamlEncodeBlockString(newValue, t1 + t2, lineEnding);
          if (type$.Map_dynamic_dynamic._is(newValue) || type$.List_dynamic._is(newValue)) {
            t1 = A.YamlNodeExtension_get_collectionStyle(newValue);
            t1 = t1 !== B.CollectionStyle_FLOW && !A.isEmpty(newValue);
          } else
            t1 = false;
          return A.SourceEdit$_(offset, 0, t1 ? formattedValue + (keyString + ":" + lineEnding + valueString + lineEnding) : formattedValue + (keyString + ": " + valueString + lineEnding));
        }
      } else if (map.get$style() === B.CollectionStyle_FLOW) {
        valueSpan = map.get$nodes().$index(0, key).get$span();
        valueString = A.yamlEncodeFlowString(newValue);
        return A.SourceEdit$_(valueSpan.get$start(valueSpan).get$offset(), valueSpan.get$length(valueSpan), valueString);
      } else {
        yaml = yamlEdit._yaml;
        lineEnding = A.getLineEnding(yaml);
        t1 = A.getMapIndentation(yaml, map);
        t2 = A.getIndentation(yamlEdit);
        keyNode = A.getKeyNode(map, key);
        valueAsString = A.yamlEncodeBlockString(A.wrapAsYamlNode(newValue, B.CollectionStyle_ANY, B.ScalarStyle_ANY), t1 + t2, lineEnding);
        if (type$.Map_dynamic_dynamic._is(newValue) || type$.List_dynamic._is(newValue)) {
          t1 = A.YamlNodeExtension_get_collectionStyle(newValue);
          t1 = t1 !== B.CollectionStyle_FLOW && !A.isEmpty(newValue);
        } else
          t1 = false;
        if (t1)
          valueAsString = lineEnding + valueAsString;
        if (!B.JSString_methods.startsWith$1(valueAsString, lineEnding))
          valueAsString = " " + valueAsString;
        t1 = keyNode.get$span();
        start = t1.get$end(t1).get$offset() + 1;
        t1 = map.get$nodes().$index(0, key);
        t1.toString;
        end = A.getContentSensitiveEnd(t1);
        return A.SourceEdit$_(start, (end < start ? start : end) - start, valueAsString);
      }
    },
    _addToFlowMap(yamlEdit, map, keyNode, newValue) {
      var insertionIndex,
        keyString = A.yamlEncodeFlowString(keyNode),
        valueString = A.yamlEncodeFlowString(newValue),
        t1 = map.get$keys(map);
      if (t1.get$isEmpty(t1)) {
        t1 = map.get$span();
        return A.SourceEdit$_(t1.get$end(t1).get$offset() - 1, 0, keyString + ": " + valueString);
      }
      insertionIndex = A.getMapInsertionIndex(map, keyString);
      t1 = map.get$keys(map);
      if (insertionIndex === t1.get$length(t1)) {
        t1 = map.get$span();
        return A.SourceEdit$_(t1.get$end(t1).get$offset() - 1, 0, ", " + keyString + ": " + valueString);
      }
      t1 = map.get$nodes();
      t1 = t1.get$keys(t1);
      t1 = t1.toList$0(t1);
      if (!(insertionIndex >= 0 && insertionIndex < t1.length))
        return A.ioore(t1, insertionIndex);
      t1 = type$.YamlNode._as(t1[insertionIndex]).get$span();
      return A.SourceEdit$_(t1.get$start(t1).get$offset(), 0, keyString + ": " + valueString + ", ");
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1(receiver, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(receiver, type$.Invocation._as(invocation)));
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.Null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_8k0;
    },
    toString$0(receiver) {
      return String(receiver);
    },
    $isFS: 1,
    $isStats: 1,
    $isOS: 1,
    $isPath: 1,
    get$keys(obj) {
      return obj.keys;
    },
    get$length(obj) {
      return obj.length;
    },
    toString$0(receiver) {
      return receiver.toString();
    },
    write$1(receiver, p0) {
      return receiver.write(p0);
    },
    closeSync$1(receiver, p0) {
      return receiver.closeSync(p0);
    },
    lstat$2(receiver, p0, p1) {
      return receiver.lstat(p0, p1);
    },
    lstatSync$1(receiver, p0) {
      return receiver.lstatSync(p0);
    },
    mkdtempSync$1(receiver, p0) {
      return receiver.mkdtempSync(p0);
    },
    openSync$2(receiver, p0, p1) {
      return receiver.openSync(p0, p1);
    },
    readdirSync$1(receiver, p0) {
      return receiver.readdirSync(p0);
    },
    readFileSync$1(receiver, p0) {
      return receiver.readFileSync(p0);
    },
    writeFileSync$2(receiver, p0, p1) {
      return receiver.writeFileSync(p0, p1);
    },
    get$path(obj) {
      return obj.path;
    },
    get$mode(obj) {
      return obj.mode;
    },
    isDirectory$0(receiver) {
      return receiver.isDirectory();
    },
    isFile$0(receiver) {
      return receiver.isFile();
    },
    isSymbolicLink$0(receiver) {
      return receiver.isSymbolicLink();
    },
    get$atime(obj) {
      return obj.atime;
    },
    get$ctime(obj) {
      return obj.ctime;
    },
    get$mtime(obj) {
      return obj.mtime;
    },
    get$size(obj) {
      return obj.size;
    },
    hostname$0(receiver) {
      return receiver.hostname();
    },
    toISOString$0(receiver) {
      return receiver.toISOString();
    },
    get$parent(obj) {
      return obj.parent;
    },
    cpus$0(receiver) {
      return receiver.cpus();
    },
    platform$0(receiver) {
      return receiver.platform();
    },
    release$0(receiver) {
      return receiver.release();
    },
    tmpdir$0(receiver) {
      return receiver.tmpdir();
    },
    get$sep(obj) {
      return obj.sep;
    },
    resolve$1(receiver, p0) {
      return receiver.resolve(p0);
    },
    get$argv(obj) {
      return obj.argv;
    },
    get$argv0(obj) {
      return obj.argv0;
    },
    cwd$0(receiver) {
      return receiver.cwd();
    },
    get$env(obj) {
      return obj.env;
    },
    get$execArgv(obj) {
      return obj.execArgv;
    },
    get$execPath(obj) {
      return obj.execPath;
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + A.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insertAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!A.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("clear"));
      receiver.length = 0;
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      var t1 = receiver.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, "start", null));
      if (start === t1)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, t1), A._arrayInstanceType(receiver));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return A.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      throw A.wrapException(A.IterableElementError_tooMany());
    },
    removeRange$2(receiver, start, end) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    fillRange$3(receiver, start, end, fillValue) {
      var i;
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("fill range"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      A._arrayInstanceType(receiver)._precomputed1._as(fillValue);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      if (t1._precomputed1._is(null)) {
        for (undefineds = 0, i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      } else
        undefineds = 0;
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    sort$0($receiver) {
      return this.sort$1($receiver, null);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    indexOf$2(receiver, element, start) {
      var i,
        $length = receiver.length;
      if (start >= $length)
        return -1;
      for (i = start; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    indexOf$1($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    indexWhere$2(receiver, test, start) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (start >= receiver.length)
        return -1;
      for (i = start; i < receiver.length; ++i)
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return i;
      return -1;
    },
    indexWhere$1($receiver, test) {
      return this.indexWhere$2($receiver, test, 0);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2, match, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, t2, i, t3, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return _null;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(string, t3);
        if (string.charCodeAt(t3) !== receiver.charCodeAt(i))
          return _null;
      }
      return new A.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceFirst$2(receiver, from, to) {
      A.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return A.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    split$1(receiver, pattern) {
      if (typeof pattern == "string")
        return A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else if (pattern instanceof A.JSSyntaxRegExp && pattern.get$_nativeAnchoredVersion().exec("").length - 2 === 0)
        return A._setArrayType(receiver.split(pattern._nativeRegExp), type$.JSArray_String);
      else
        return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1, start, $length, match, matchStart, matchEnd,
        result = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
        match = t1.get$current();
        matchStart = match.get$start(match);
        matchEnd = match.get$end(match);
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        B.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        B.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0(receiver) {
      var t1,
        result = receiver.trimEnd(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      if (result.charCodeAt(t1) !== 133)
        return result;
      return result.substring(0, J.JSString__skipTrailingWhitespace(result, t1));
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var match, t1, t2, i;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern == "string")
        return receiver.indexOf(pattern, start);
      if (pattern instanceof A.JSSyntaxRegExp) {
        match = pattern._execGlobal$2(receiver, start);
        return match == null ? -1 : match._match.index;
      }
      for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2, i;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2)
          start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    lastIndexOf$1($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isJSIndexable: 1,
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A._BytesBuilder.prototype = {
    add$1(_, bytes) {
      var typedBytes;
      type$.List_int._as(bytes);
      typedBytes = type$.Uint8List._is(bytes) ? bytes : new Uint8Array(A._ensureNativeList(bytes));
      B.JSArray_methods.add$1(this._chunks, typedBytes);
      this.__internal$_length = this.__internal$_length + typedBytes.length;
    },
    takeBytes$0() {
      var t2, t3, buffer, offset, _i, chunk, offset0, _this = this,
        t1 = _this.__internal$_length;
      if (t1 === 0)
        return $.$get$_CopyingBytesBuilder__emptyList();
      t2 = _this._chunks;
      t3 = t2.length;
      if (t3 === 1) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        buffer = t2[0];
        _this.__internal$_length = 0;
        B.JSArray_methods.clear$0(t2);
        return buffer;
      }
      buffer = new Uint8Array(t1);
      for (offset = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i, offset = offset0) {
        chunk = t2[_i];
        offset0 = offset + chunk.length;
        B.NativeUint8List_methods.setRange$3(buffer, offset, offset0, chunk);
      }
      _this.__internal$_length = 0;
      B.JSArray_methods.clear$0(t2);
      return buffer;
    },
    get$length(_) {
      return this.__internal$_length;
    }
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    get$last(_) {
      return A._instanceType(this)._rest[1]._as(J.get$last$ax(this.get$_source()));
    },
    get$single(_) {
      return A._instanceType(this)._rest[1]._as(J.get$single$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this._source, A._instanceType(this)._precomputed1, $R);
    },
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    sort$1(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)?")._as(compare);
      t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, start, end), t1._precomputed1, t1._rest[1]);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(iterable), t1._rest[1], t1._precomputed1), skipCount);
    },
    fillRange$3(_, start, end, fillValue) {
      J.fillRange$3$ax(this._source, start, end, this.$ti._precomputed1._as(fillValue));
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.CastMap.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = this.$ti;
      return new A.CastMap(this._source, t1._eval$1("@<1>")._bind$1(t1._rest[1])._bind$1(RK)._bind$1(RV)._eval$1("CastMap<1,2,3,4>"));
    },
    containsKey$1(key) {
      return this._source.containsKey$1(key);
    },
    $index(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.$index(0, key));
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      t1._rest[2]._as(key);
      t1._rest[3]._as(value);
      this._source.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    remove$1(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.remove$1(0, key));
    },
    forEach$1(_, f) {
      this._source.forEach$1(0, new A.CastMap_forEach_closure(this, this.$ti._eval$1("~(3,4)")._as(f)));
    },
    get$keys(_) {
      var t1 = this._source,
        t2 = this.$ti;
      return A.CastIterable_CastIterable(t1.get$keys(t1), t2._precomputed1, t2._rest[2]);
    },
    get$values(_) {
      var t1 = this._source,
        t2 = this.$ti;
      return A.CastIterable_CastIterable(t1.get$values(t1), t2._rest[1], t2._rest[3]);
    },
    get$length(_) {
      var t1 = this._source;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._source;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._source;
      return t1.get$isNotEmpty(t1);
    },
    get$entries(_) {
      var t1 = this._source;
      return t1.get$entries(t1).map$1$1(0, new A.CastMap_entries_closure(this), this.$ti._eval$1("MapEntry<3,4>"));
    }
  };
  A.CastMap_forEach_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this.f.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1,2)");
    }
  };
  A.CastMap_entries_closure.prototype = {
    call$1(e) {
      var t2,
        t1 = this.$this.$ti;
      t1._eval$1("MapEntry<1,2>")._as(e);
      t2 = t1._rest[3];
      return new A.MapEntry(t1._rest[2]._as(e.key), t2._as(e.value), t1._eval$1("@<3>")._bind$1(t2)._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<3,4>(MapEntry<1,2>)");
    }
  };
  A.CastQueue.prototype = {
    cast$1$0(_, $R) {
      return new A.CastQueue(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastQueue<1,2>"));
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    get$_source() {
      return this._source;
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      var t1 = this.__internal$_string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.Null);
    },
    $signature: 40
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return _this.elementAt$1(0, _this.get$length(_this) - 1);
    },
    get$single(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      if (_this.get$length(_this) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      return _this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    every$1(_, test) {
      var $length, i, _this = this;
      A._instanceType(_this)._eval$1("bool(ListIterable.E)")._as(test);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (!A.boolConversionCheck(test.call$1(_this.elementAt$1(0, i))))
          return false;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return true;
    },
    firstWhere$1(_, test) {
      var $length, i, element, _this = this;
      A._instanceType(_this)._eval$1("bool(ListIterable.E)")._as(test);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        element = _this.elementAt$1(0, i);
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    singleWhere$2$orElse(_, test, orElse) {
      var $length, match, matchFound, i, element, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("bool(ListIterable.E)")._as(test);
      t1._eval$1("ListIterable.E()?")._as(orElse);
      $length = _this.get$length(_this);
      match = A._Cell$named("match");
      for (matchFound = false, i = 0; i < $length; ++i) {
        element = _this.elementAt$1(0, i);
        if (A.boolConversionCheck(test.call$1(element))) {
          if (matchFound)
            throw A.wrapException(A.IterableElementError_tooMany());
          match.__late_helper$_value = element;
          matchFound = true;
        }
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      if (matchFound)
        return match._readLocal$0();
      return orElse.call$0();
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0($receiver) {
      return this.join$1($receiver, "");
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, A._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    },
    reduce$1(_, combine) {
      var $length, value, i, _this = this;
      A._instanceType(_this)._eval$1("ListIterable.E(ListIterable.E,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$1$2(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      $T._as(initialValue);
      A._instanceType(_this)._bind$1($T)._eval$1("1(1,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(_this), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this._start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      else {
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = A._instanceType(this);
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    get$single(_) {
      return this._f.call$1(J.get$single$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      var t1 = this.$ti;
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("ExpandIterator<1,2>"));
    }
  };
  A.ExpandIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current())));
        } else
          return false;
      }
      _this.set$__internal$_current(_this._currentExpansion.get$current());
      return true;
    },
    set$_currentExpansion(_currentExpansion) {
      this._currentExpansion = this.$ti._eval$1("Iterator<2>?")._as(_currentExpansion);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return new A.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, A._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current() {
      if (this._remaining < 0) {
        this.$ti._precomputed1._as(null);
        return null;
      }
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipWhileIterable.prototype = {
    get$iterator(_) {
      return new A.SkipWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("SkipWhileIterator<1>"));
    }
  };
  A.SkipWhileIterator.prototype = {
    moveNext$0() {
      var t1, t2, _this = this;
      if (!_this._hasSkipped) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = _this._f; t1.moveNext$0();)
          if (!A.boolConversionCheck(t2.call$1(t1.get$current())))
            return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$single(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    every$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return true;
    },
    firstWhere$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      throw A.wrapException(A.IterableElementError_noElement());
    },
    singleWhere$2$orElse(_, test, orElse) {
      var t1 = this.$ti;
      t1._eval$1("bool(1)")._as(test);
      t1 = t1._eval$1("1()?")._as(orElse).call$0();
      return t1;
    },
    join$1(_, separator) {
      return "";
    },
    where$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return this;
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.NonNullsIterable.prototype = {
    get$_firstNonNull() {
      var t1, element;
      for (t1 = this._source, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        element = t1.get$current();
        if (element != null)
          return element;
      }
      return null;
    },
    get$isEmpty(_) {
      return this.get$_firstNonNull() == null;
    },
    get$isNotEmpty(_) {
      return this.get$_firstNonNull() != null;
    },
    get$first(_) {
      var t1 = this.get$_firstNonNull();
      return t1 == null ? A.throwExpression(A.IterableElementError_noElement()) : t1;
    },
    get$iterator(_) {
      var t1 = this._source;
      return new A.NonNullsIterator(t1.get$iterator(t1), this.$ti._eval$1("NonNullsIterator<1>"));
    }
  };
  A.NonNullsIterator.prototype = {
    moveNext$0() {
      var t1, next;
      this.set$__internal$_current(null);
      for (t1 = this._source; t1.moveNext$0();) {
        next = t1.get$current();
        if (next != null) {
          this.set$__internal$_current(next);
          return true;
        }
      }
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? A.throwExpression(A.IterableElementError_noElement()) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1(_, compare) {
      A._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    fillRange$3(_, start, end, fillValue) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * B.JSString_methods.get$hashCode(this._name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + this._name + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Symbol && this._name === other._name;
    },
    $isSymbol0: 1
  };
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A._Record_2_isBreaking.prototype = {$recipe: "+isBreaking(1,2)", $shape: 2};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._precomputed1, t1._rest[1], RK, RV);
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      A.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      A.ConstantMap__throwUnmodifiable();
    },
    get$entries(_) {
      return new A._SyncStarIterable(this.entries$body$ConstantMap(0), A._instanceType(this)._eval$1("_SyncStarIterable<MapEntry<1,2>>"));
    },
    entries$body$ConstantMap($async$_) {
      var $async$self = this;
      return function() {
        var _ = $async$_;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys($async$self), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("@<1>")._bind$1(t3)._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = new A.MapEntry(key, t4 == null ? t3._as(t4) : t4, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    map$2$1(_, transform, K2, V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._values.length;
    },
    get$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$_keys();
      values = this._values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys(_) {
      return new A._KeysOrValues(this.get$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    },
    get$values(_) {
      return new A._KeysOrValues(this._values, this.$ti._eval$1("_KeysOrValues<2>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return 0 === this._elements.length;
    },
    get$isNotEmpty(_) {
      return 0 !== this._elements.length;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this.__js_helper$_length) {
        _this.set$__js_helper$_current(null);
        return false;
      }
      _this.set$__js_helper$_current(_this._elements[t1]);
      ++_this.__js_helper$_index;
      return true;
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var t1, _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        t1 = _this.$ti;
        backingMap = new A.JsConstantLinkedHashMap(t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("JsConstantLinkedHashMap<1,2>"));
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys(_) {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.Instantiation.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeTypeOfClosure(this) === A.getRuntimeTypeOfClosure(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeTypeOfClosure(this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1(this.get$_types(), ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    get$_types() {
      return [A.createRuntimeType(this.$ti._precomputed1)];
    },
    call$0() {
      return this._genericClosure.call$1$0(this.$ti._rest[0]);
    },
    call$1(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti._rest[0]);
    },
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    call$4(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this._memberName;
      if (t1 instanceof A.Symbol)
        return t1;
      return this._memberName = new A.Symbol(A._asString(t1));
    },
    get$positionalArguments() {
      var t1, t2, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return B.List_empty;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      argumentCount = t2.get$length(t1) - J.get$length$asx(_this._namedArgumentNames) - _this._typeArgumentCount;
      if (argumentCount === 0)
        return B.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, t2, namedArgumentCount, t3, t4, namedArgumentsStartIndex, map, i, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return B.Map_empty;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      namedArgumentsStartIndex = t4.get$length(t3) - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return B.Map_empty;
      map = new A.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new A.Symbol(A._asString(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
      return new A.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  A.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2($name, argument) {
      var t1;
      A._asString($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + $name;
      B.JSArray_methods.add$1(this.namedArgumentList, $name);
      B.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 26
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A._Required.prototype = {};
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return this.__js_helper$_length !== 0;
    },
    get$keys(_) {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var t2, value, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key)) {
        t2 = _this.$index(0, key);
        return t2 == null ? t1._rest[1]._as(t2) : t2;
      }
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this.__js_helper$_removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this.__js_helper$_removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    clear$0(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this._strings = _this._nums = _this.__js_helper$_rest = _this._first = _this._last = null;
        _this.__js_helper$_length = 0;
        _this._modified$0();
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this.__js_helper$_map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this.__js_helper$_map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.JsIdentityLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 8
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 78
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 51
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return A.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start(_) {
      return this._match.index;
    },
    get$end(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    group$1(_, index) {
      var t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $index(_, index) {
      var t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                if (!(t1 >= 0 && t1 < t2))
                  return A.ioore(string, t1);
                t1 = string.charCodeAt(t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  if (!(t3 >= 0))
                    return A.ioore(string, t3);
                  t1 = string.charCodeAt(t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end(_) {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null, null));
      return this.pattern;
    },
    group$1(_, group_) {
      if (group_ !== 0)
        throw A.wrapException(A.RangeError$value(group_, null, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start(receiver) {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    readLocal$1$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        A.throwExpression(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    readLocal$0() {
      return this.readLocal$1$0(type$.dynamic);
    },
    _readLocal$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(new A.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    _readField$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    }
  };
  A._InitializedCell.prototype = {
    _readFinal$0() {
      var result, _this = this,
        t1 = _this.__late_helper$_value;
      if (t1 === _this) {
        result = _this._initializer.call$0();
        if (_this.__late_helper$_value !== _this)
          throw A.wrapException(new A.LateError("Local '" + _this.__late_helper$_name + string$.x27_has_));
        _this.__late_helper$_value = result;
        t1 = result;
      }
      return t1;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_RkP;
    },
    $isTrustedGetRuntimeType: 1,
    $isByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_zNC;
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_LB7;
    },
    sublist$2(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat32List: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_LB7;
    },
    sublist$2(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat64List: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_uXf;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isInt16List: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_O50;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isInt32List: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_ekJ;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isInt8List: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2bx;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2bx;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_Jik;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint8ClampedList: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_WLA;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    },
    $isType: 1
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 37
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 147
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 3
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setInterval(A.convertDartClosureToJS(new A._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("Periodic timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._tick = 1;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._TimerImpl$periodic_closure.prototype = {
    call$0() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = B.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    $signature: 3
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 21
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 44
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 110
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, _null = null, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this.set$_async$_current(nestedIterator.get$current());
              return true;
            } else
              _this.set$_nestedIterator(_null);
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this.set$_nestedIterator(_null);
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this.set$_async$_current(_null);
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this.set$_async$_current(_null);
            _this._body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._body);
        _this._body = t1;
        return 2;
      } else {
        _this.set$_nestedIterator(J.get$iterator$ax(iterable));
        return 2;
      }
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastStream.prototype = {
    get$isBroadcast() {
      return true;
    }
  };
  A._BroadcastSubscription.prototype = {
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_async$_next(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_async$_previous(_previous) {
      this._async$_previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    set$onPause(onPauseHandler) {
      type$.nullable_void_Function._as(onPauseHandler);
      throw A.wrapException(A.UnsupportedError$(string$.Broadc));
    },
    set$onResume(onResumeHandler) {
      type$.nullable_void_Function._as(onResumeHandler);
      throw A.wrapException(A.UnsupportedError$(string$.Broadc));
    },
    get$stream() {
      return new A._BroadcastStream(this, A._instanceType(this)._eval$1("_BroadcastStream<1>"));
    },
    get$isClosed() {
      return (this._state & 4) !== 0;
    },
    get$isPaused(_) {
      return false;
    },
    get$_mayAddEvent() {
      return this._state < 4;
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      return t1 == null ? this._doneFuture = new A._Future($.Zone__current, type$._Future_void) : t1;
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, subscription, oldLast, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 4) !== 0)
        return A._DoneStreamSubscription$(onDone, t1._precomputed1);
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new A._BroadcastSubscription(_this, A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1), A._BufferingStreamSubscription__registerErrorHandler(t2, onError), A._BufferingStreamSubscription__registerDoneHandler(t2, onDone), t2, t3, t4);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
      t4._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add new events after calling close");
      return new A.StateError("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if (!this.get$_mayAddEvent())
        throw A.wrapException(this._addEventError$0());
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._sendError$2(error, stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0(_) {
      var t1, doneFuture, _this = this;
      if ((_this._state & 4) !== 0) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._ensureDoneFuture$0();
      _this._sendDone$0();
      return doneFuture;
    },
    get$done() {
      return this._ensureDoneFuture$0();
    },
    addStream$1(stream) {
      var addStreamState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Stream<1>")._as(stream);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._state |= 8;
      addStreamState = A._AddStreamState$(_this, stream, false, t1._precomputed1);
      _this.set$_addStreamState(addStreamState);
      return addStreamState.addStreamFuture;
    },
    _async$_add$1(data) {
      this._sendData$1(A._instanceType(this)._precomputed1._as(data));
    },
    _addError$2(error, stackTrace) {
      this._sendError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _close$0() {
      var t1 = this._addStreamState;
      t1.toString;
      this.set$_addStreamState(null);
      this._state &= 4294967287;
      t1.addStreamFuture._asyncComplete$1(null);
    },
    _forEachListener$1(action) {
      var t1, subscription, id, next, _this = this;
      A._instanceType(_this)._eval$1("~(_BufferingStreamSubscription<1>)")._as(action);
      t1 = _this._state;
      if ((t1 & 2) !== 0)
        throw A.wrapException(A.StateError$(string$.Cannotf));
      subscription = _this._firstSubscription;
      if (subscription == null)
        return;
      id = t1 & 1;
      _this._state = t1 ^ 3;
      for (; subscription != null;) {
        t1 = subscription._eventState;
        if ((t1 & 1) === id) {
          subscription._eventState = t1 | 2;
          action.call$1(subscription);
          t1 = subscription._eventState ^= 1;
          next = subscription._async$_next;
          if ((t1 & 4) !== 0)
            _this._removeListener$1(subscription);
          subscription._eventState &= 4294967293;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      }
      _this._state &= 4294967293;
      if (_this._firstSubscription == null)
        _this._callOnCancel$0();
    },
    _callOnCancel$0() {
      if ((this._state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if ((doneFuture._state & 30) === 0)
          doneFuture._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    set$_firstSubscription(_firstSubscription) {
      this._firstSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_firstSubscription);
    },
    set$_lastSubscription(_lastSubscription) {
      this._lastSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_lastSubscription);
    },
    set$_addStreamState(_addStreamState) {
      this._addStreamState = A._instanceType(this)._eval$1("_AddStreamState<1>?")._as(_addStreamState);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent() {
      return A._BroadcastStreamController.prototype.get$_mayAddEvent.call(this) && (this._state & 2) === 0;
    },
    _addEventError$0() {
      if ((this._state & 2) !== 0)
        return new A.StateError(string$.Cannotf);
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1(data) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(data);
      t1 = _this._firstSubscription;
      if (t1 == null)
        return;
      if (t1 === _this._lastSubscription) {
        _this._state |= 2;
        t1._async$_add$1(data);
        _this._state &= 4294967293;
        if (_this._firstSubscription == null)
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new A._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    _sendError$2(error, stackTrace) {
      if (this._firstSubscription == null)
        return;
      this._forEachListener$1(new A._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0() {
      var _this = this;
      if (_this._firstSubscription != null)
        _this._forEachListener$1(new A._SyncBroadcastStreamController__sendDone_closure(_this));
      else
        _this._doneFuture._asyncComplete$1(null);
    }
  };
  A._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._async$_add$1(this.data);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendError_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._addError$2(this.error, this.stackTrace);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._SyncBroadcastStreamController__sendDone_closure.prototype = {
    call$1(subscription) {
      this.$this.$ti._eval$1("_BufferingStreamSubscription<1>")._as(subscription)._close$0();
    },
    $signature() {
      return this.$this.$ti._eval$1("~(_BufferingStreamSubscription<1>)");
    }
  };
  A._AsyncBroadcastStreamController.prototype = {
    _sendData$1(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedData(data, t1));
    },
    _sendError$2(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(B.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        if (t1.remaining === 0 || _this.eagerError)
          _this._future._completeError$2(theError, theStackTrace);
        else {
          _this.error.__late_helper$_value = theError;
          _this.stackTrace.__late_helper$_value = theStackTrace;
        }
      } else if (t2 === 0 && !_this.eagerError)
        _this._future._completeError$2(_this.error._readLocal$0(), _this.stackTrace._readLocal$0());
    },
    $signature: 6
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var valueList, t2, _this = this,
        t1 = _this.T;
      t1._as(value);
      t2 = _this._box_0;
      --t2.remaining;
      valueList = t2.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (t2.remaining === 0)
          _this._future._completeWithValue$1(A.List_List$from(valueList, true, t1));
      } else if (t2.remaining === 0 && !_this.eagerError)
        _this._future._completeError$2(_this.error._readLocal$0(), _this.stackTrace._readLocal$0());
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A.Future_any_onValue.prototype = {
    call$1(value) {
      var t1;
      this.T._as(value);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(value);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A.Future_any_onError.prototype = {
    call$2(error, stack) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stack);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.completeError$2(error, stack);
    },
    $signature: 6
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeError$2(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    _setChained$1(source) {
      this._state = this._state & 1 | 4;
      this._resultOrListeners = source;
    },
    then$1$2$onError(_, f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        f = currentZone.registerUnaryCallback$2$1(f, $R._eval$1("0/"), t1._precomputed1);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future($.Zone__current, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1($receiver, f, $R) {
      return this.then$1$2$onError($receiver, f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1(onError) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(new A._FutureListener(result, 2, null, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    whenComplete$1(action) {
      var t1, t2, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        action = t2.registerCallback$1$1(action, type$.dynamic);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new A._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new A._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(0, new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFutureSync(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      _this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteWithValue_closure(_this, value));
    },
    _chainFuture$1(value) {
      var t1 = this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        A._Future__chainCoreFutureAsync(value, this);
        return;
      }
      this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._state ^= 2;
      this._zone.scheduleMicrotask$1(new A._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 37
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 13
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__chainCoreFutureAsync_closure.prototype = {
    call$0() {
      A._Future__chainCoreFutureSync(this._box_0.source, this.target);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = J.then$1$1$z(completeResult, new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 80
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$isBroadcast() {
      return false;
    },
    map$1$1(_, convert, $S) {
      var t1 = A._instanceType(this);
      return new A._MapStream(t1._bind$1($S)._eval$1("1(Stream.T)")._as(convert), this, t1._eval$1("@<Stream.T>")._bind$1($S)._eval$1("_MapStream<1,2>"));
    },
    map$1($receiver, convert) {
      return this.map$1$1($receiver, convert, type$.dynamic);
    },
    fold$1$2(_, initialValue, combine, $S) {
      var result, subscription, t1 = {};
      $S._as(initialValue);
      A._instanceType(this)._bind$1($S)._eval$1("1(1,Stream.T)")._as(combine);
      result = new A._Future($.Zone__current, $S._eval$1("_Future<0>"));
      t1.value = initialValue;
      subscription = this.listen$4$cancelOnError$onDone$onError(0, null, true, new A.Stream_fold_closure(t1, result), result.get$_completeError());
      subscription.onData$1(new A.Stream_fold_closure0(t1, this, combine, subscription, result, $S));
      return result;
    },
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(0, new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  };
  A.Stream_fold_closure.prototype = {
    call$0() {
      this.result._complete$1(this._box_0.value);
    },
    $signature: 0
  };
  A.Stream_fold_closure0.prototype = {
    call$1(element) {
      var _this = this,
        t1 = _this._box_0,
        t2 = _this.S;
      A._runUserCode(new A.Stream_fold__closure(t1, _this.combine, A._instanceType(_this.$this)._eval$1("Stream.T")._as(element), t2), new A.Stream_fold__closure0(t1, t2), A._cancelAndErrorClosure(_this.subscription, _this.result), t2);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_fold__closure.prototype = {
    call$0() {
      return this.combine.call$2(this._box_0.value, this.element);
    },
    $signature() {
      return this.S._eval$1("0()");
    }
  };
  A.Stream_fold__closure0.prototype = {
    call$1(newValue) {
      this._box_0.value = this.S._as(newValue);
    },
    $signature() {
      return this.S._eval$1("Null(0)");
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A.StreamView.prototype = {
    listen$4$cancelOnError$onDone$onError(_, onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(0, A._instanceType(this)._eval$1("~(StreamView.T)?")._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$onDone$onError($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    }
  };
  A.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  A._StreamController.prototype = {
    get$stream() {
      return new A._ControllerStream(this, A._instanceType(this)._eval$1("_ControllerStream<1>"));
    },
    get$isClosed() {
      return (this._state & 4) !== 0;
    },
    get$isPaused(_) {
      var t1 = this._state;
      return (t1 & 1) !== 0 ? (this.get$_subscription()._state & 4) !== 0 : (t1 & 2) === 0;
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).varData);
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state.varData;
      if (events == null)
        events = state.varData = new A._PendingEvents(t1._eval$1("_PendingEvents<1>"));
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).varData;
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    addStream$1(source) {
      var t2, t3, t4, t5, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Stream<1>")._as(source);
      t2 = _this._state;
      if (t2 >= 4)
        throw A.wrapException(_this._badEventState$0());
      if ((t2 & 2) !== 0) {
        t1 = new A._Future($.Zone__current, type$._Future_dynamic);
        t1._asyncComplete$1(null);
        return t1;
      }
      t2 = _this._varData;
      t3 = new A._Future($.Zone__current, type$._Future_dynamic);
      t4 = t1._eval$1("~(1)")._as(_this.get$_async$_add());
      t4 = source.listen$4$cancelOnError$onDone$onError(0, t4, false, _this.get$_close(), _this.get$_addError());
      t5 = _this._state;
      if ((t5 & 1) !== 0 ? (_this.get$_subscription()._state & 4) !== 0 : (t5 & 2) === 0)
        t4.pause$0(0);
      _this._varData = new A._StreamControllerAddStreamState(t2, t3, t4, t1._eval$1("_StreamControllerAddStreamState<1>"));
      _this._state |= 8;
      return t3;
    },
    get$done() {
      return this._ensureDoneFuture$0();
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._async$_add$1(value);
    },
    addError$2(error, stackTrace) {
      var replacement,
        t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if (this._state >= 4)
        throw A.wrapException(this._badEventState$0());
      replacement = $.Zone__current.errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = replacement.error;
        stackTrace = replacement.stackTrace;
      } else if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._addError$2(error, stackTrace);
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var t1 = this._state |= 4;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _async$_add$1(value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        addState = A._instanceType(_this)._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      _this._varData = addState.varData;
      _this._state &= 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.varData = subscription;
        addState.addSubscription.resume$0(0);
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0(0);
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (cancelResult instanceof A._Future)
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.pause$0(0);
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.resume$0(0);
      A._runGuarded(_this.onResume);
    },
    set$onListen(onListen) {
      this.onListen = type$.nullable_void_Function._as(onListen);
    },
    set$onPause(onPause) {
      this.onPause = type$.nullable_void_Function._as(onPause);
    },
    set$onResume(onResume) {
      this.onResume = type$.nullable_void_Function._as(onResume);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._async$_add$1(data);
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_subscription()._close$0();
    }
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._controller === this._controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._controller._recordPause$1(this);
    },
    _onResume$0() {
      this._controller._recordResume$1(this);
    }
  };
  A._StreamSinkWrapper.prototype = {
    add$1(_, data) {
      this._async$_target.add$1(0, this.$ti._precomputed1._as(data));
    },
    addError$2(error, stackTrace) {
      this._async$_target.addError$2(error, type$.nullable_StackTrace._as(stackTrace));
    },
    close$0(_) {
      return this._async$_target.close$0(0);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isSink: 1
  };
  A._AddStreamState.prototype = {
    cancel$0(_) {
      var cancel = this.addSubscription.cancel$0(0);
      return cancel.whenComplete$1(new A._AddStreamState_cancel_closure(this));
    }
  };
  A._AddStreamState_cancel_closure.prototype = {
    call$0() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 3
  };
  A._StreamControllerAddStreamState.prototype = {};
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 64) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this.set$_onData(A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    onError$1(handleError) {
      this._onError = A._BufferingStreamSubscription__registerErrorHandler(this._zone, handleError);
    },
    onDone$1(handleDone) {
      this.set$_onDone(A._BufferingStreamSubscription__registerDoneHandler(this._zone, type$.nullable_void_Function._as(handleDone)));
    },
    pause$1(_, resumeSignal) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128) {
        t3 = _this._pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0(_) {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    get$isPaused(_) {
      return this._state >= 128;
    },
    _cancel$0() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _async$_add$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._pending;
      if (pending == null) {
        pending = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>"));
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._state,
        t2 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 64) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967263) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_onData(_onData) {
      this._onData = A._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_onDone(_onDone) {
      this._onDone = type$.void_Function._as(_onDone);
    },
    set$_pending(_pending) {
      this._pending = A._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 0
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(_, onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$1($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(_) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 0
  };
  A._DoneStreamSubscription.prototype = {
    get$isPaused(_) {
      return this._state >= 2;
    },
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    onError$1(handleError) {
    },
    onDone$1(handleDone) {
      type$.nullable_void_Function._as(handleDone);
      if (this._state >= 0)
        this.set$_onDone(handleDone != null ? this._zone.registerCallback$1$1(handleDone, type$.void) : handleDone);
    },
    pause$1(_, resumeSignal) {
      var t1 = this._state;
      if (t1 >= 0)
        this._state = t1 + 2;
    },
    pause$0($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0(_) {
      var _this = this,
        resumeState = _this._state - 2;
      if (resumeState < 0)
        return;
      if (resumeState === 0) {
        _this._state = 1;
        A.scheduleMicrotask(_this.get$_onMicrotask());
      } else
        _this._state = resumeState;
    },
    cancel$0(_) {
      this._state = -1;
      this.set$_onDone(null);
      return $.$get$Future__nullFuture();
    },
    _onMicrotask$0() {
      var _0_0, doneHandler, t1, _this = this,
        unscheduledState = _this._state - 1;
      if (unscheduledState === 0) {
        _this._state = -1;
        _0_0 = _this._onDone;
        if (_0_0 != null) {
          doneHandler = _0_0;
          t1 = true;
        } else {
          doneHandler = null;
          t1 = false;
        }
        if (t1) {
          _this.set$_onDone(null);
          _this._zone.runGuarded$1(doneHandler);
        }
      } else
        _this._state = unscheduledState;
    },
    set$_onDone(_onDone) {
      this._onDone = type$.nullable_void_Function._as(_onDone);
    },
    $isStreamSubscription: 1
  };
  A._StreamIterator.prototype = {};
  A._EmptyStream.prototype = {
    listen$4$cancelOnError$onDone$onError(_, onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      return A._DoneStreamSubscription$(type$.nullable_void_Function._as(onDone), t1._precomputed1);
    },
    listen$1($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    },
    get$isBroadcast() {
      return true;
    }
  };
  A._cancelAndError_closure.prototype = {
    call$0() {
      return this.future._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._cancelAndErrorClosure_closure.prototype = {
    call$2(error, stackTrace) {
      A._cancelAndError(this.subscription, this.future, error, type$.StackTrace._as(stackTrace));
    },
    $signature: 6
  };
  A._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError(_, onData, cancelOnError, onDone, onError) {
      var t2, t3, t4,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._rest[1];
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t2 = new A._ForwardingStreamSubscription(this, A._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), A._BufferingStreamSubscription__registerErrorHandler(t3, onError), A._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4, t1._eval$1("@<1>")._bind$1(t2)._eval$1("_ForwardingStreamSubscription<1,2>"));
      t2.set$_subscription(this._async$_source.listen$3$onDone$onError(0, t2.get$_handleData(), t2.get$_handleDone(), t2.get$_handleError()));
      return t2;
    },
    listen$1($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    }
  };
  A._ForwardingStreamSubscription.prototype = {
    _async$_add$1(data) {
      this.$ti._rest[1]._as(data);
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(data);
    },
    _addError$2(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0(0);
    },
    _onResume$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0(0);
    },
    _onCancel$0() {
      var subscription = this._subscription;
      if (subscription != null) {
        this.set$_subscription(null);
        return subscription.cancel$0(0);
      }
      return null;
    },
    _handleData$1(data) {
      this._stream._handleData$2(this.$ti._precomputed1._as(data), this);
    },
    _handleError$2(error, stackTrace) {
      var t1;
      type$.StackTrace._as(stackTrace);
      t1 = error == null ? type$.Object._as(error) : error;
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._addError$2(t1, stackTrace);
    },
    _handleDone$0() {
      this._stream.$ti._eval$1("_EventSink<2>")._as(this)._close$0();
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._MapStream.prototype = {
    _handleData$2(inputEvent, sink) {
      var outputEvent, e, s, exception, error, stackTrace, replacement,
        t1 = this.$ti;
      t1._precomputed1._as(inputEvent);
      t1._eval$1("_EventSink<2>")._as(sink);
      outputEvent = null;
      try {
        outputEvent = this._transform.call$1(inputEvent);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        error = e;
        stackTrace = s;
        replacement = $.Zone__current.errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = replacement.error;
          stackTrace = replacement.stackTrace;
        }
        sink._addError$2(error, stackTrace);
        return;
      }
      sink._async$_add$1(outputEvent);
    }
  };
  A._EventSinkWrapper.prototype = {
    add$1(_, data) {
      var t1 = this._async$_sink;
      data = t1.$ti._rest[1]._as(this.$ti._precomputed1._as(data));
      if ((t1._state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_add(data);
    },
    addError$2(error, stackTrace) {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    close$0(_) {
      var t1 = this._async$_sink;
      if ((t1._state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_close();
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A._SinkTransformerStreamSubscription.prototype = {
    _onPause$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0(0);
    },
    _onResume$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0(0);
    },
    _onCancel$0() {
      var subscription = this._subscription;
      if (subscription != null) {
        this.set$_subscription(null);
        return subscription.cancel$0(0);
      }
      return null;
    },
    _handleData$1(data) {
      var e, s, t1, exception, t2, _this = this;
      _this.$ti._precomputed1._as(data);
      try {
        t1 = _this.___SinkTransformerStreamSubscription__transformerSink_A;
        t1 === $ && A.throwLateFieldNI("_transformerSink");
        t1.add$1(0, data);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._state & 2) !== 0)
          A.throwExpression(A.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    _handleError$2(error, stackTrace) {
      var e, s, t2, t3, exception, _this = this,
        _s24_ = "Stream is already closed",
        t1 = type$.Object;
      t1._as(error);
      t2 = type$.StackTrace;
      t2._as(stackTrace);
      try {
        t3 = _this.___SinkTransformerStreamSubscription__transformerSink_A;
        t3 === $ && A.throwLateFieldNI("_transformerSink");
        t3.addError$2(error, stackTrace);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (e === error) {
          if ((_this._state & 2) !== 0)
            A.throwExpression(A.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
        } else {
          t1 = t1._as(e);
          t2 = t2._as(s);
          if ((_this._state & 2) !== 0)
            A.throwExpression(A.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(t1, t2);
        }
      }
    },
    _handleDone$0() {
      var e, s, t1, exception, t2, _this = this;
      try {
        _this.set$_subscription(null);
        t1 = _this.___SinkTransformerStreamSubscription__transformerSink_A;
        t1 === $ && A.throwLateFieldNI("_transformerSink");
        t1.close$0(0);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._state & 2) !== 0)
          A.throwExpression(A.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    set$___SinkTransformerStreamSubscription__transformerSink_A(___SinkTransformerStreamSubscription__transformerSink_A) {
      this.___SinkTransformerStreamSubscription__transformerSink_A = this.$ti._eval$1("EventSink<1>")._as(___SinkTransformerStreamSubscription__transformerSink_A);
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._BoundSinkStream.prototype = {
    listen$4$cancelOnError$onDone$onError(_, onData, cancelOnError, onDone, onError) {
      var t2, t3, t4, t5, subscription,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = t1._rest[1];
      t3 = $.Zone__current;
      t4 = cancelOnError === true ? 1 : 0;
      t5 = t1._eval$1("@<1>")._bind$1(t2);
      subscription = new A._SinkTransformerStreamSubscription(A._BufferingStreamSubscription__registerDataHandler(t3, onData, t2), A._BufferingStreamSubscription__registerErrorHandler(t3, onError), A._BufferingStreamSubscription__registerDoneHandler(t3, onDone), t3, t4, t5._eval$1("_SinkTransformerStreamSubscription<1,2>"));
      subscription.set$___SinkTransformerStreamSubscription__transformerSink_A(t5._eval$1("EventSink<1>")._as(this._sinkMapper.call$1(new A._EventSinkWrapper(subscription, t1._eval$1("_EventSinkWrapper<2>")))));
      subscription.set$_subscription(this._stream.listen$3$onDone$onError(0, subscription.get$_handleData(), subscription.get$_handleDone(), subscription.get$_handleError()));
      return subscription;
    },
    listen$1($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    }
  };
  A._ZoneFunction.prototype = {};
  A._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  A._ZoneDelegate.prototype = {
    registerCallback$1$2(zone, f, $R) {
      var implementation, implZone;
      $R._eval$1("0()")._as(f);
      implementation = this._delegationTarget.get$_async$_registerCallback();
      implZone = implementation.zone;
      return implementation.$function.call$1$4(implZone, implZone.get$_parentDelegate(), zone, f, $R);
    },
    registerUnaryCallback$2$2(zone, f, $R, $T) {
      var implementation, implZone;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      implementation = this._delegationTarget.get$_async$_registerUnaryCallback();
      implZone = implementation.zone;
      return implementation.$function.call$2$4(implZone, implZone.get$_parentDelegate(), zone, f, $R, $T);
    },
    registerBinaryCallback$3$2(zone, f, $R, T1, T2) {
      var implementation, implZone;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      implementation = this._delegationTarget.get$_async$_registerBinaryCallback();
      implZone = implementation.zone;
      return implementation.$function.call$3$4(implZone, implZone.get$_parentDelegate(), zone, f, $R, T1, T2);
    },
    errorCallback$3(zone, error, stackTrace) {
      var implementation, implZone;
      A.checkNotNullable(error, "error", type$.Object);
      implementation = this._delegationTarget.get$_async$_errorCallback();
      implZone = implementation.zone;
      if (implZone === B.C__RootZone)
        return null;
      return implementation.$function.call$5(implZone, implZone.get$_parentDelegate(), zone, error, stackTrace);
    },
    $isZoneDelegate: 1
  };
  A._Zone.prototype = {
    _processUncaughtError$3(zone, error, stackTrace) {
      var implZone, handler, parentDelegate, parentZone, currentZone, e, s, implementation, t1, exception;
      type$.StackTrace._as(stackTrace);
      implementation = this.get$_async$_handleUncaughtError();
      implZone = implementation.zone;
      if (implZone === B.C__RootZone) {
        A._rootHandleError(error, stackTrace);
        return;
      }
      handler = implementation.$function;
      parentDelegate = implZone.get$_parentDelegate();
      t1 = J.get$parent$x(implZone);
      t1.toString;
      parentZone = t1;
      currentZone = $.Zone__current;
      try {
        $.Zone__current = parentZone;
        handler.call$5(implZone, parentDelegate, zone, error, stackTrace);
        $.Zone__current = currentZone;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        $.Zone__current = currentZone;
        t1 = error === e ? stackTrace : s;
        parentZone._processUncaughtError$3(implZone, e, t1);
      }
    },
    $isZone: 1
  };
  A._CustomZone.prototype = {
    get$_delegate() {
      var t1 = this._delegateCache;
      return t1 == null ? this._delegateCache = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      return this.parent.get$_delegate();
    },
    get$errorZone() {
      return this._async$_handleUncaughtError.zone;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        this.run$1$1(f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        this.runUnary$2$2(f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        this.runBinary$3$3(f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        this._processUncaughtError$3(this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._CustomZone_bindCallback_closure(this, this.registerCallback$1$1($R._eval$1("0()")._as(f), $R), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1($R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $R, $T), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(type$.void_Function._as(f), type$.void));
    },
    $index(_, key) {
      var value,
        t1 = this._async$_map,
        result = t1.$index(0, key);
      if (result != null || t1.containsKey$1(key))
        return result;
      value = this.parent.$index(0, key);
      if (value != null)
        t1.$indexSet(0, key, value);
      return value;
    },
    handleUncaughtError$2(error, stackTrace) {
      this._processUncaughtError$3(this, error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      var implementation = this._fork,
        t1 = implementation.zone;
      return implementation.$function.call$5(t1, t1.get$_parentDelegate(), this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(f);
      implementation = this._async$_run;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      implementation = this._runUnary;
      t1 = implementation.zone;
      return implementation.$function.call$2$5(t1, t1.get$_parentDelegate(), this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      implementation = this._runBinary;
      t1 = implementation.zone;
      return implementation.$function.call$3$6(t1, t1.get$_parentDelegate(), this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(callback, $R) {
      var implementation, t1;
      $R._eval$1("0()")._as(callback);
      implementation = this._async$_registerCallback;
      t1 = implementation.zone;
      return implementation.$function.call$1$4(t1, t1.get$_parentDelegate(), this, callback, $R);
    },
    registerUnaryCallback$2$1(callback, $R, $T) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(callback);
      implementation = this._async$_registerUnaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$2$4(t1, t1.get$_parentDelegate(), this, callback, $R, $T);
    },
    registerBinaryCallback$3$1(callback, $R, T1, T2) {
      var implementation, t1;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(callback);
      implementation = this._async$_registerBinaryCallback;
      t1 = implementation.zone;
      return implementation.$function.call$3$4(t1, t1.get$_parentDelegate(), this, callback, $R, T1, T2);
    },
    errorCallback$2(error, stackTrace) {
      var implementation, implementationZone;
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", type$.Object);
      implementation = this._async$_errorCallback;
      implementationZone = implementation.zone;
      if (implementationZone === B.C__RootZone)
        return null;
      return implementation.$function.call$5(implementationZone, implementationZone.get$_parentDelegate(), this, error, stackTrace);
    },
    scheduleMicrotask$1(f) {
      var implementation, t1;
      type$.void_Function._as(f);
      implementation = this._scheduleMicrotask;
      t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, f);
    },
    print$1(line) {
      var implementation = this._print,
        t1 = implementation.zone;
      return implementation.$function.call$4(t1, t1.get$_parentDelegate(), this, line);
    },
    set$_async$_registerCallback(_registerCallback) {
      this._async$_registerCallback = type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function._as(_registerCallback);
    },
    set$_async$_registerUnaryCallback(_registerUnaryCallback) {
      this._async$_registerUnaryCallback = type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B._as(_registerUnaryCallback);
    },
    set$_async$_registerBinaryCallback(_registerBinaryCallback) {
      this._async$_registerBinaryCallback = type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C._as(_registerBinaryCallback);
    },
    set$_async$_errorCallback(_errorCallback) {
      this._async$_errorCallback = type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace._as(_errorCallback);
    },
    set$_async$_handleUncaughtError(_handleUncaughtError) {
      this._async$_handleUncaughtError = type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace._as(_handleUncaughtError);
    },
    get$_async$_run() {
      return this._async$_run;
    },
    get$_runUnary() {
      return this._runUnary;
    },
    get$_runBinary() {
      return this._runBinary;
    },
    get$_async$_registerCallback() {
      return this._async$_registerCallback;
    },
    get$_async$_registerUnaryCallback() {
      return this._async$_registerUnaryCallback;
    },
    get$_async$_registerBinaryCallback() {
      return this._async$_registerBinaryCallback;
    },
    get$_async$_errorCallback() {
      return this._async$_errorCallback;
    },
    get$_scheduleMicrotask() {
      return this._scheduleMicrotask;
    },
    get$_createTimer() {
      return this._createTimer;
    },
    get$_createPeriodicTimer() {
      return this._createPeriodicTimer;
    },
    get$_print() {
      return this._print;
    },
    get$_fork() {
      return this._fork;
    },
    get$_async$_handleUncaughtError() {
      return this._async$_handleUncaughtError;
    },
    get$parent(receiver) {
      return this.parent;
    },
    get$_async$_map() {
      return this._async$_map;
    }
  };
  A._CustomZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.registered, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.registered);
    },
    $signature: 0
  };
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    get$_async$_run() {
      return B._ZoneFunction__RootZone__rootRun;
    },
    get$_runUnary() {
      return B._ZoneFunction__RootZone__rootRunUnary;
    },
    get$_runBinary() {
      return B._ZoneFunction__RootZone__rootRunBinary;
    },
    get$_async$_registerCallback() {
      return B._ZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_async$_registerUnaryCallback() {
      return B._ZoneFunction_Eeh;
    },
    get$_async$_registerBinaryCallback() {
      return B._ZoneFunction_7G2;
    },
    get$_async$_errorCallback() {
      return B._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask() {
      return B._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_createTimer() {
      return B._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer() {
      return B._ZoneFunction_3bB;
    },
    get$_print() {
      return B._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork() {
      return B._ZoneFunction__RootZone__rootFork;
    },
    get$_async$_handleUncaughtError() {
      return B._ZoneFunction_NMc;
    },
    get$parent(_) {
      return null;
    },
    get$_async$_map() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$_parentDelegate() {
      var t1 = $._RootZone__rootDelegate;
      return t1 == null ? $._RootZone__rootDelegate = new A._ZoneDelegate(this) : t1;
    },
    get$errorZone() {
      return this;
    },
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallback$1$1(f, $R) {
      return new A._RootZone_bindCallback_closure(this, $R._eval$1("0()")._as(f), $R);
    },
    bindUnaryCallback$2$1(f, $R, $T) {
      return new A._RootZone_bindUnaryCallback_closure(this, $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f), $T, $R);
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    $index(_, key) {
      return null;
    },
    handleUncaughtError$2(error, stackTrace) {
      A._rootHandleError(error, type$.StackTrace._as(stackTrace));
    },
    fork$2$specification$zoneValues(specification, zoneValues) {
      return A._rootFork(null, null, this, specification, zoneValues);
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerCallback$1$1(f, $R) {
      return $R._eval$1("0()")._as(f);
    },
    registerUnaryCallback$2$1(f, $R, $T) {
      return $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    },
    errorCallback$2(error, stackTrace) {
      type$.nullable_StackTrace._as(stackTrace);
      return null;
    },
    scheduleMicrotask$1(f) {
      A._rootScheduleMicrotask(null, null, this, type$.void_Function._as(f));
    },
    print$1(line) {
      A.printString(line);
    }
  };
  A._RootZone_bindCallback_closure.prototype = {
    call$0() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A._RootZone_bindUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.f, t1._as(arg), _this.R, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    get$keys(_) {
      return new A._HashMapKeyIterable(this, A._instanceType(this)._eval$1("_HashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A._HashMapKeyIterable(this, t1._eval$1("_HashMapKeyIterable<1>")), new A._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        A._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._collection$_keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        }
      }
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string" && key !== "__proto__")
        return _this._removeHashTableEntry$2(_this._collection$_strings, key);
      else if (typeof key == "number" && (key & 1073741823) === key)
        return _this._removeHashTableEntry$2(_this._collection$_nums, key);
      else
        return _this._remove$1(key);
    },
    _remove$1(key) {
      var hash, bucket, index, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      --_this._collection$_length;
      _this._collection$_keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        delete rest[hash];
      return result;
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = A._instanceType(this)._rest[1]._as(A._HashMap__getTableEntry(table, key));
        delete table[key];
        --this._collection$_length;
        this._collection$_keys = null;
        return value;
      } else
        return null;
    },
    _computeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    }
  };
  A._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A._IdentityHashMap.prototype = {
    _computeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._CustomHashMap.prototype = {
    $index(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$_HashMap$_get(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$_HashMap$_set(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$_HashMap$_containsKey(key);
    },
    remove$1(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$_HashMap$_remove(key);
    },
    _computeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    _findBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; i += 2)
        if (A.boolConversionCheck(t2.call$2(bucket[i], t1._as(key))))
          return i;
      return -1;
    }
  };
  A._CustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 5
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map._collection$_length;
    },
    get$isEmpty(_) {
      return this._map._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._map._collection$_length !== 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._map;
      if (keys !== t1._collection$_keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (A.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 5
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(first._element);
    },
    get$last(_) {
      var last = this._collection$_last;
      if (last == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(last._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(element);
    },
    _collection$_add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var t1 = this._remove$1(object);
      return t1;
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._collection$_unlinkCell$1(cell);
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.UnmodifiableListView.prototype = {
    cast$1$0(_, $R) {
      return new A.UnmodifiableListView(J.cast$1$0$ax(this._collection$_source, $R), $R._eval$1("UnmodifiableListView<0>"));
    },
    get$length(_) {
      return J.get$length$asx(this._collection$_source);
    },
    $index(_, index) {
      return J.elementAt$1$ax(this._collection$_source, A._asInt(index));
    }
  };
  A.HashMap_HashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 16
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 16
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1(receiver, action) {
      var $length, i;
      A.instanceType(receiver)._eval$1("~(ListBase.E)")._as(action);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    get$single(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      if (this.get$length(receiver) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (!A.boolConversionCheck(test.call$1(this.$index(receiver, i))))
          return false;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var $length, i, element;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    singleWhere$2$orElse(receiver, test, orElse) {
      var $length, match, matchFound, i, element,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      t1._eval$1("ListBase.E()?")._as(orElse);
      $length = this.get$length(receiver);
      match = A._Cell$named("match");
      for (matchFound = false, i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (A.boolConversionCheck(test.call$1(element))) {
          if (matchFound)
            throw A.wrapException(A.IterableElementError_tooMany());
          match.__late_helper$_value = element;
          matchFound = true;
        }
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (matchFound)
        return match._readLocal$0();
      return orElse.call$0();
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = A.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    where$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("WhereIterable<ListBase.E>"));
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListBase.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListBase.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A.instanceType(receiver);
      t1._eval$1("int(ListBase.E,ListBase.E)?")._as(compare);
      t2 = compare == null ? A.collection_ListBase__compareAny$closure() : compare;
      A.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, t2, t1._eval$1("ListBase.E"));
    },
    sublist$2(receiver, start, end) {
      var listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      A.RangeError_checkValidRange(start, end, listLength);
      return A.List_List$from(this.getRange$2(receiver, start, end), true, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    fillRange$3(receiver, start, end, fill) {
      var value, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("ListBase.E?")._as(fill);
      value = fill == null ? t1._eval$1("ListBase.E")._as(fill) : fill;
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, value);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListBase.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    insert$2(receiver, index, element) {
      var $length, _this = this;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      A.checkNotNullable(index, "index", type$.int);
      $length = _this.get$length(receiver);
      A.RangeError_checkValueInInterval(index, 0, $length, "index");
      _this.add$1(receiver, element);
      if (index !== $length) {
        _this.setRange$4(receiver, index + 1, $length + 1, receiver, index);
        _this.$indexSet(receiver, index, element);
      }
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._eval$1("MapBase.K"), t1._eval$1("MapBase.V"), RK, RV);
    },
    forEach$1(_, action) {
      var t2, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = _this.get$keys(_this), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    updateAll$1(update) {
      var t2, key, t3, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("MapBase.V(MapBase.K,MapBase.V)")._as(update);
      for (t2 = _this.get$keys(_this), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        _this.$indexSet(0, key, update.call$2(key, t3 == null ? t1._as(t3) : t3));
      }
    },
    get$entries(_) {
      var _this = this,
        t1 = _this.get$keys(_this);
      return t1.map$1$1(t1, new A.MapBase_entries_closure(_this), A._instanceType(_this)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, t3, entry, _this = this,
        t1 = A._instanceType(_this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = _this.get$keys(_this), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    addEntries$1(newEntries) {
      var t1, t2;
      A._instanceType(this)._eval$1("Iterable<MapEntry<MapBase.K,MapBase.V>>")._as(newEntries);
      for (t1 = newEntries.get$iterator(newEntries); t1.moveNext$0();) {
        t2 = t1.get$current();
        this.$indexSet(0, t2.key, t2.value);
      }
    },
    removeWhere$1(_, test) {
      var keysToRemove, t2, key, t3, _i, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("bool(MapBase.K,MapBase.V)")._as(test);
      keysToRemove = A._setArrayType([], t1._eval$1("JSArray<MapBase.K>"));
      for (t2 = _this.get$keys(_this), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        if (A.boolConversionCheck(test.call$2(key, t3 == null ? t1._as(t3) : t3)))
          B.JSArray_methods.add$1(keysToRemove, key);
      }
      for (t1 = keysToRemove.length, _i = 0; _i < keysToRemove.length; keysToRemove.length === t1 || (0, A.throwConcurrentModificationError)(keysToRemove), ++_i)
        _this.remove$1(0, keysToRemove[_i]);
    },
    containsKey$1(key) {
      var t1 = this.get$keys(this);
      return t1.contains$1(t1, key);
    },
    get$length(_) {
      var t1 = this.get$keys(this);
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys(this);
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$keys(this);
      return t1.get$isNotEmpty(t1);
    },
    get$values(_) {
      var t1 = A._instanceType(this);
      return new A._MapBaseValueIterable(this, t1._eval$1("@<MapBase.K>")._bind$1(t1._eval$1("MapBase.V"))._eval$1("_MapBaseValueIterable<1,2>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("@<MapBase.K>")._bind$1(t2._eval$1("MapBase.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += A.S(k);
      t1._contents = t2 + ": ";
      t1._contents += A.S(v);
    },
    $signature: 36
  };
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._map;
      return t1.get$isNotEmpty(t1);
    },
    get$first(_) {
      var t1 = this._map,
        t2 = t1.get$keys(t1);
      t2 = t1.$index(0, t2.get$first(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$single(_) {
      var t1 = this._map,
        t2 = t1.get$keys(t1);
      t2 = t1.$index(0, t2.get$single(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$last(_) {
      var t1 = this._map,
        t2 = t1.get$keys(t1);
      t2 = t1.$index(0, t2.get$last(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = this.$ti,
        t3 = t1.get$keys(t1);
      return new A._MapBaseValueIterator(t3.get$iterator(t3), t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._collection$_keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(_this._map.$index(0, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    cast$2$0(_, RK, RV) {
      return this._map.cast$2$0(0, RK, RV);
    },
    $index(_, key) {
      return this._map.$index(0, key);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      this._map.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      return this._map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._map.forEach$1(0, A._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._map;
      return t1.get$isEmpty(t1);
    },
    get$length(_) {
      var t1 = this._map;
      return t1.get$length(t1);
    },
    get$keys(_) {
      var t1 = this._map;
      return t1.get$keys(t1);
    },
    toString$0(_) {
      return this._map.toString$0(0);
    },
    get$values(_) {
      var t1 = this._map;
      return t1.get$values(t1);
    },
    get$entries(_) {
      var t1 = this._map;
      return t1.get$entries(t1);
    },
    map$2$1(_, transform, K2, V2) {
      return this._map.map$2$1(0, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {
    cast$2$0(_, RK, RV) {
      return new A.UnmodifiableMapView(this._map.cast$2$0(0, RK, RV), RK._eval$1("@<0>")._bind$1(RV)._eval$1("UnmodifiableMapView<1,2>"));
    }
  };
  A.ListQueue.prototype = {
    cast$1$0(_, $R) {
      return new A.CastQueue(this, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastQueue<1,2>"));
    },
    get$iterator(_) {
      var _this = this;
      return new A._ListQueueIterator(_this, _this._collection$_tail, _this._modificationCount, _this._collection$_head, _this.$ti._eval$1("_ListQueueIterator<1>"));
    },
    get$isEmpty(_) {
      return this._collection$_head === this._collection$_tail;
    },
    get$length(_) {
      return (this._collection$_tail - this._collection$_head & this._collection$_table.length - 1) >>> 0;
    },
    get$first(_) {
      var t2, _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = _this._collection$_table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      t1 = t2[t1];
      return t1 == null ? _this.$ti._precomputed1._as(t1) : t1;
    },
    get$last(_) {
      var t3, _this = this,
        t1 = _this._collection$_head,
        t2 = _this._collection$_tail;
      if (t1 === t2)
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = _this._collection$_table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (!(t2 >= 0 && t2 < t3))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      return t2 == null ? _this.$ti._precomputed1._as(t2) : t2;
    },
    get$single(_) {
      var t1, t2, _this = this;
      if (_this._collection$_head === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      if (_this.get$length(_this) > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      t1 = _this._collection$_table;
      t2 = _this._collection$_head;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      return t2 == null ? _this.$ti._precomputed1._as(t2) : t2;
    },
    elementAt$1(_, index) {
      var t2, t3, _this = this,
        t1 = _this.get$length(_this);
      if (0 > index || index >= t1)
        A.throwExpression(A.IndexError$withLength(index, t1, _this, null, "index"));
      t1 = _this._collection$_table;
      t2 = t1.length;
      t3 = (_this._collection$_head + index & t2 - 1) >>> 0;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
      t3 = t1[t3];
      return t3 == null ? _this.$ti._precomputed1._as(t3) : t3;
    },
    toList$1$growable(_, growable) {
      var t1, list, i, t2, t3, _this = this,
        mask = _this._collection$_table.length - 1,
        $length = (_this._collection$_tail - _this._collection$_head & mask) >>> 0;
      if ($length === 0) {
        t1 = J.JSArray_JSArray$growable(0, _this.$ti._precomputed1);
        return t1;
      }
      t1 = _this.$ti._precomputed1;
      list = A.List_List$filled($length, _this.get$first(_this), true, t1);
      for (i = 0; i < $length; ++i) {
        t2 = _this._collection$_table;
        t3 = (_this._collection$_head + i & mask) >>> 0;
        if (!(t3 < t2.length))
          return A.ioore(t2, t3);
        t3 = t2[t3];
        B.JSArray_methods.$indexSet(list, i, t3 == null ? t1._as(t3) : t3);
      }
      return list;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    removeFirst$0() {
      var t2, result, _this = this,
        t1 = _this._collection$_head;
      if (t1 === _this._collection$_tail)
        throw A.wrapException(A.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._collection$_table;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      result = t2[t1];
      if (result == null)
        result = _this.$ti._precomputed1._as(result);
      B.JSArray_methods.$indexSet(t2, t1, null);
      _this._collection$_head = (_this._collection$_head + 1 & _this._collection$_table.length - 1) >>> 0;
      return result;
    },
    _collection$_add$1(element) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(element);
      B.JSArray_methods.$indexSet(_this._collection$_table, _this._collection$_tail, element);
      t1 = (_this._collection$_tail + 1 & _this._collection$_table.length - 1) >>> 0;
      _this._collection$_tail = t1;
      if (_this._collection$_head === t1)
        _this._grow$0();
      ++_this._modificationCount;
    },
    _grow$0() {
      var _this = this,
        newTable = A.List_List$filled(_this._collection$_table.length * 2, null, false, _this.$ti._eval$1("1?")),
        t1 = _this._collection$_table,
        t2 = _this._collection$_head,
        split = t1.length - t2;
      B.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      B.JSArray_methods.setRange$4(newTable, split, split + _this._collection$_head, _this._collection$_table, 0);
      _this._collection$_head = 0;
      _this._collection$_tail = _this._collection$_table.length;
      _this.set$_collection$_table(newTable);
    },
    set$_collection$_table(_table) {
      this._collection$_table = this.$ti._eval$1("List<1?>")._as(_table);
    },
    $isQueue: 1
  };
  A._ListQueueIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        A.throwExpression(A.ConcurrentModificationError$(t1));
      t2 = _this._collection$_position;
      if (t2 === _this._collection$_end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._collection$_table;
      if (!(t2 < t3.length))
        return A.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._collection$_position = (_this._collection$_position + 1 & t1._collection$_table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    containsAll$1(other) {
      var t1, t2, o;
      for (t1 = other._set$_set, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        o = t1._collection$_current;
        if (!this.contains$1(0, o == null ? t2._as(o) : o))
          return false;
      }
      return true;
    },
    map$1$1(_, f, $T) {
      var t1 = A._instanceType(this);
      return new A.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    get$single(_) {
      var it, result, _this = this;
      if (_this._collection$_length > 1)
        throw A.wrapException(A.IterableElementError_tooMany());
      it = A._LinkedHashSetIterator$(_this, _this._collection$_modifications, A._instanceType(_this)._precomputed1);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      result = it._collection$_current;
      return result == null ? it.$ti._precomputed1._as(result) : result;
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    every$1(_, f) {
      var t2, element,
        t1 = A._instanceType(this);
      t1._eval$1("bool(1)")._as(f);
      for (t1 = A._LinkedHashSetIterator$(this, this._collection$_modifications, t1._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        element = t1._collection$_current;
        if (!A.boolConversionCheck(f.call$1(element == null ? t2._as(element) : element)))
          return false;
      }
      return true;
    },
    join$1(_, separator) {
      var t1, first, t2, t3,
        iterator = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!iterator.moveNext$0())
        return "";
      t1 = iterator._collection$_current;
      first = J.toString$0$(t1 == null ? iterator.$ti._precomputed1._as(t1) : t1);
      if (!iterator.moveNext$0())
        return first;
      t1 = iterator.$ti._precomputed1;
      if (separator.length === 0) {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 += A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      } else {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 = t2 + separator + A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$first(_) {
      var t1,
        it = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = it._collection$_current;
      return t1 == null ? it.$ti._precomputed1._as(t1) : t1;
    },
    get$last(_) {
      var t1, result,
        it = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = it.$ti._precomputed1;
      do {
        result = it._collection$_current;
        if (result == null)
          result = t1._as(result);
      } while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount, t1, _this = this;
      A.RangeError_checkNotNegative(index, "index");
      iterator = A._LinkedHashSetIterator$(_this, _this._collection$_modifications, A._instanceType(_this)._precomputed1);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0) {
          t1 = iterator._collection$_current;
          return t1 == null ? iterator.$ti._precomputed1._as(t1) : t1;
        }
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, _this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      return this._processed == null ? this._data.__js_helper$_length : this._convert$_computeKeys$0().length;
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) > 0;
    },
    get$keys(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      }
      return new A._JsonMapKeyIterable(this);
    },
    get$values(_) {
      var t1, _this = this;
      if (_this._processed == null) {
        t1 = _this._data;
        return t1.get$values(t1);
      }
      return A.MappedIterable_MappedIterable(_this._convert$_computeKeys$0(), new A._JsonMap_values_closure(_this), type$.String, type$.dynamic);
    },
    $indexSet(_, key, value) {
      var processed, original, _this = this;
      A._asString(key);
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      if (typeof key != "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    remove$1(_, key) {
      if (this._processed != null && !this.containsKey$1(key))
        return null;
      return this._upgrade$0().remove$1(0, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = A._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0() {
      var keys = type$.nullable_List_dynamic._as(this._data);
      if (keys == null)
        keys = this._data = A._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _upgrade$0() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        B.JSArray_methods.add$1(keys, "");
      else
        B.JSArray_methods.clear$0(keys);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = A._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  A._JsonMap_values_closure.prototype = {
    call$1(each) {
      return this.$this.$index(0, A._asString(each));
    },
    $signature: 51
  };
  A._JsonMapKeyIterable.prototype = {
    get$length(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys(t1).elementAt$1(0, index);
      else {
        t1 = t1._convert$_computeKeys$0();
        if (!(index >= 0 && index < t1.length))
          return A.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1(_, key) {
      return this._parent.containsKey$1(key);
    }
  };
  A._JsonDecoderSink.prototype = {
    close$0(_) {
      var t1, t2, _this = this;
      _this.super$_StringSinkConversionSink$close(0);
      t1 = _this._stringSink;
      t2 = t1._contents;
      t1._contents = "";
      t1 = _this._sink;
      t1.add$1(0, A._parseJson(t2.charCodeAt(0) == 0 ? t2 : t2, _this._reviver));
      t1.close$0(0);
    }
  };
  A.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 43
  };
  A.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 43
  };
  A.AsciiCodec.prototype = {
    encode$1(source) {
      return B.AsciiEncoder_127.convert$1(source);
    },
    get$decoder() {
      return B.AsciiDecoder_false_127;
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var stringLength, $length, result, t1, i, codeUnit;
      A._asString(string);
      stringLength = string.length;
      $length = A.RangeError_checkValidRange(0, null, stringLength) - 0;
      result = new Uint8Array($length);
      for (t1 = ~this._subsetMask, i = 0; i < $length; ++i) {
        if (!(i < stringLength))
          return A.ioore(string, i);
        codeUnit = string.charCodeAt(i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < $length))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    startChunkedConversion$1(sink) {
      var t1;
      type$.Sink_List_int._as(sink);
      t1 = sink instanceof A.ByteConversionSink ? sink : new A._ByteAdapterSink(sink);
      return new A._UnicodeSubsetEncoderSink(t1, this._subsetMask);
    }
  };
  A.AsciiEncoder.prototype = {};
  A._UnicodeSubsetEncoderSink.prototype = {
    close$0(_) {
      this._sink.close$0(0);
    },
    addSlice$4(source, start, end, isLast) {
      var t2, i, codeUnit,
        t1 = source.length;
      A.RangeError_checkValidRange(start, end, t1);
      for (t2 = ~this._subsetMask, i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(source, i);
        codeUnit = source.charCodeAt(i);
        if ((codeUnit & t2) !== 0)
          throw A.wrapException(A.ArgumentError$("Source contains invalid character with code point: " + codeUnit + ".", null));
      }
      t1 = this._sink;
      t2 = new A.CodeUnits(source);
      t1.add$1(0, t2.sublist$2(t2, start, end));
      if (isLast)
        t1.close$0(0);
    }
  };
  A._UnicodeSubsetDecoder.prototype = {
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_List_int._as(stream));
    }
  };
  A.AsciiDecoder.prototype = {
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : new A._StringAdapterSink(sink);
      if (this._allowInvalid)
        return new A._ErrorHandlingAsciiDecoderSink(stringSink.asUtf8Sink$1(false));
      else
        return new A._SimpleAsciiDecoderSink(stringSink);
    }
  };
  A._ErrorHandlingAsciiDecoderSink.prototype = {
    close$0(_) {
      this._utf8Sink.close$0(0);
    },
    add$1(_, source) {
      type$.List_int._as(source);
      this.addSlice$4(source, 0, J.get$length$asx(source), false);
    },
    addSlice$4(source, start, end, isLast) {
      var t1, t2, i, t3;
      type$.List_int._as(source);
      t1 = J.getInterceptor$asx(source);
      A.RangeError_checkValidRange(start, end, t1.get$length(source));
      for (t2 = this._utf8Sink, i = start; i < end; ++i) {
        t3 = t1.$index(source, i);
        if (typeof t3 !== "number")
          return t3.$and();
        if ((t3 & 4294967168) >>> 0 !== 0) {
          if (i > start)
            t2.addSlice$4(source, start, i, false);
          t2.add$1(0, B.List_239_191_189);
          start = i + 1;
        }
      }
      if (start < end)
        t2.addSlice$4(source, start, end, isLast);
      else if (isLast)
        t2.close$0(0);
    }
  };
  A._SimpleAsciiDecoderSink.prototype = {
    close$0(_) {
      this._sink.close$0(0);
    },
    add$1(_, source) {
      var t1, i, t2;
      type$.List_int._as(source);
      for (t1 = J.getInterceptor$asx(source), i = 0; i < t1.get$length(source); ++i) {
        t2 = t1.$index(source, i);
        if (typeof t2 !== "number")
          return t2.$and();
        if ((t2 & 4294967168) >>> 0 !== 0)
          throw A.wrapException(A.FormatException$("Source contains non-ASCII bytes.", null, null));
      }
      this._sink.add$1(0, A.String_String$fromCharCodes(source, 0, null));
    },
    addSlice$4(source, start, end, isLast) {
      var $length;
      type$.List_int._as(source);
      $length = source.length;
      A.RangeError_checkValidRange(start, end, $length);
      if (start < end)
        this.add$1(0, start !== 0 || end !== $length ? B.NativeUint8List_methods.sublist$2(source, start, end) : source);
      if (isLast)
        this._sink.close$0(0);
    }
  };
  A.Base64Codec.prototype = {
    get$encoder() {
      return B.C_Base64Encoder;
    },
    normalize$3(_, source, start, end) {
      var inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, t3, digit2, char0, value, endLength, $length,
        _s64_ = string$.ABCDEF,
        _s31_ = "Invalid base64 encoding length ",
        t1 = source.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t2 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            if (!(i0 < t1))
              return A.ioore(source, i0);
            digit1 = A.hexDigitValue(source.charCodeAt(i0));
            t3 = i0 + 1;
            if (!(t3 < t1))
              return A.ioore(source, t3);
            digit2 = A.hexDigitValue(source.charCodeAt(t3));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t2))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer._contents.length;
                if (t3 == null)
                  t3 = 0;
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t3._contents += A.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += B.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1;
      type$.List_int._as(input);
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      t1 = new A._Base64Encoder(string$.ABCDEF).encode$4(input, 0, t1.get$length(input), true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    },
    startChunkedConversion$1(sink) {
      var t1,
        _s64_ = string$.ABCDEF;
      type$.Sink_String._as(sink);
      if (type$.StringConversionSink._is(sink)) {
        t1 = sink.asUtf8Sink$1(false);
        return new A._Utf8Base64EncoderSink(t1, new A._Base64Encoder(_s64_));
      }
      return new A._AsciiBase64EncoderSink(sink, new A._BufferCachingBase64Encoder(_s64_));
    }
  };
  A._Base64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      return new Uint8Array(bufferLength);
    },
    encode$4(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      type$.List_int._as(bytes);
      byteCount = (_this._convert$_state & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this._convert$_state = A._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A._BufferCachingBase64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      var buffer = this.bufferCache;
      if (buffer == null || buffer.length < bufferLength)
        buffer = this.bufferCache = new Uint8Array(bufferLength);
      return A.NativeUint8List_NativeUint8List$view(buffer.buffer, buffer.byteOffset, bufferLength);
    }
  };
  A._Base64EncoderSink.prototype = {
    add$1(_, source) {
      type$.List_int._as(source);
      this._add$4(source, 0, J.get$length$asx(source), false);
    },
    close$0(_) {
      this._add$4(B.List_empty1, 0, 0, true);
    },
    addSlice$4(source, start, end, isLast) {
      type$.List_int._as(source);
      A.RangeError_checkValidRange(start, end, source.length);
      this._add$4(source, start, end, isLast);
    }
  };
  A._AsciiBase64EncoderSink.prototype = {
    _add$4(source, start, end, isLast) {
      var buffer = this._encoder.encode$4(type$.List_int._as(source), start, end, isLast);
      if (buffer != null)
        this._sink.add$1(0, A.String_String$fromCharCodes(buffer, 0, null));
      if (isLast)
        this._sink.close$0(0);
    }
  };
  A._Utf8Base64EncoderSink.prototype = {
    _add$4(source, start, end, isLast) {
      var buffer = this._encoder.encode$4(type$.List_int._as(source), start, end, isLast);
      if (buffer != null)
        this._sink.addSlice$4(buffer, 0, buffer.length, isLast);
    }
  };
  A.Base64Decoder.prototype = {
    convert$1(input) {
      var end, decoder, t1;
      A._asString(input);
      end = A.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return new Uint8Array(0);
      decoder = new A._Base64Decoder();
      t1 = decoder.decode$3(input, 0, end);
      t1.toString;
      decoder.close$2(0, input, end);
      return t1;
    },
    startChunkedConversion$1(sink) {
      return new A._Base64DecoderSink(type$.Sink_List_int._as(sink), new A._Base64Decoder());
    }
  };
  A._Base64Decoder.prototype = {
    decode$3(input, start, end) {
      var buffer, _this = this,
        t1 = _this._convert$_state;
      if (t1 < 0) {
        _this._convert$_state = A._Base64Decoder__checkPadding(input, start, end, t1);
        return null;
      }
      if (start === end)
        return new Uint8Array(0);
      buffer = A._Base64Decoder__allocateBuffer(input, start, end, t1);
      _this._convert$_state = A._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._convert$_state);
      return buffer;
    },
    close$2(_, input, end) {
      var t1 = this._convert$_state;
      if (t1 < -1)
        throw A.wrapException(A.FormatException$("Missing padding character", input, end));
      if (t1 > 0)
        throw A.wrapException(A.FormatException$("Invalid length, must be multiple of four", input, end));
      this._convert$_state = -1;
    }
  };
  A._Base64DecoderSink.prototype = {
    add$1(_, string) {
      var t1, buffer;
      A._asString(string);
      t1 = string.length;
      if (t1 === 0)
        return;
      buffer = this._decoder.decode$3(string, 0, t1);
      if (buffer != null)
        this._sink.add$1(0, buffer);
    },
    close$0(_) {
      this._decoder.close$2(0, null, null);
      this._sink.close$0(0);
    },
    addSlice$4(string, start, end, isLast) {
      var t1, buffer;
      A.RangeError_checkValidRange(start, end, string.length);
      if (start === end)
        return;
      t1 = this._decoder;
      buffer = t1.decode$3(string, start, end);
      if (buffer != null)
        this._sink.add$1(0, buffer);
      if (isLast) {
        t1.close$2(0, string, end);
        this._sink.close$0(0);
      }
    }
  };
  A.ByteConversionSink.prototype = {
    addSlice$4(chunk, start, end, isLast) {
      this.add$1(0, B.NativeUint8List_methods.sublist$2(type$.List_int._as(chunk), start, end));
      if (isLast)
        this.close$0(0);
    },
    $isSink: 1
  };
  A._ByteAdapterSink.prototype = {
    add$1(_, chunk) {
      this._sink.add$1(0, type$.List_int._as(chunk));
    },
    close$0(_) {
      this._sink.close$0(0);
    }
  };
  A.ChunkedConversionSink.prototype = {$isSink: 1};
  A._ConverterStreamEventSink.prototype = {
    add$1(_, o) {
      this._chunkedSink.add$1(0, this.$ti._precomputed1._as(o));
    },
    addError$2(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      this._eventSink.addError$2(error, stackTrace);
    },
    close$0(_) {
      this._chunkedSink.close$0(0);
    },
    $isEventSink: 1,
    $isSink: 1
  };
  A.Codec.prototype = {};
  A._FusedCodec.prototype = {};
  A.Converter.prototype = {
    startChunkedConversion$1(sink) {
      A._instanceType(this)._eval$1("Sink<Converter.T>")._as(sink);
      throw A.wrapException(A.UnsupportedError$("This converter does not support chunked conversions: " + this.toString$0(0)));
    },
    bind$1(stream) {
      var t1 = A._instanceType(this);
      return new A._BoundSinkStream(new A.Converter_bind_closure(this), t1._eval$1("Stream<Converter.S>")._as(stream), type$.$env_1_1_dynamic._bind$1(t1._eval$1("Converter.T"))._eval$1("_BoundSinkStream<1,2>"));
    },
    $isStreamTransformer: 1
  };
  A.Converter_bind_closure.prototype = {
    call$1(sink) {
      return new A._ConverterStreamEventSink(sink, this.$this.startChunkedConversion$1(sink), type$._ConverterStreamEventSink_dynamic_dynamic);
    },
    $signature: 84
  };
  A.Encoding.prototype = {
    decodeStream$1(byteStream) {
      type$.Stream_List_int._as(byteStream);
      return this.get$decoder().bind$1(byteStream).fold$1$2(0, new A.StringBuffer(""), new A.Encoding_decodeStream_closure(), type$.StringBuffer).then$1$1(0, new A.Encoding_decodeStream_closure0(), type$.String);
    }
  };
  A.Encoding_decodeStream_closure.prototype = {
    call$2(buffer, string) {
      type$.StringBuffer._as(buffer);
      buffer._contents += A._asString(string);
      return buffer;
    },
    $signature: 90
  };
  A.Encoding_decodeStream_closure0.prototype = {
    call$1(buffer) {
      var t1 = type$.StringBuffer._as(buffer)._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $signature: 99
  };
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    decode$2$reviver(source, reviver) {
      var t1 = A._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    decode$1(source) {
      return this.decode$2$reviver(source, null);
    },
    encode$1(value) {
      var t1 = this.get$encoder();
      t1 = A._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      return t1;
    },
    get$encoder() {
      return B.JsonEncoder_null_null;
    },
    get$decoder() {
      return B.JsonDecoder_null;
    }
  };
  A.JsonEncoder.prototype = {
    startChunkedConversion$1(sink) {
      var t1, _this = this;
      type$.Sink_String._as(sink);
      if (sink instanceof A._Utf8EncoderSink)
        return new A._JsonUtf8EncoderSink(sink._sink, A.JsonUtf8Encoder__utf8Encode(_this.indent), _this._toEncodable, 256);
      t1 = type$.StringConversionSink._is(sink) ? sink : new A._StringAdapterSink(sink);
      return new A._JsonEncoderSink(_this.indent, _this._toEncodable, t1);
    }
  };
  A._JsonEncoderSink.prototype = {
    add$1(_, o) {
      var stringSink, _this = this;
      if (_this._isDone)
        throw A.wrapException(A.StateError$("Only one call to add allowed"));
      _this._isDone = true;
      stringSink = _this._sink.asStringSink$0();
      A._JsonStringStringifier_printOn(o, stringSink, _this._toEncodable, _this._indent);
      stringSink.close$0(0);
    },
    close$0(_) {
    }
  };
  A._JsonUtf8EncoderSink.prototype = {
    _addChunk$3(chunk, start, end) {
      this._sink.addSlice$4(chunk, start, end, false);
    },
    add$1(_, object) {
      var _this = this;
      if (_this._isDone)
        throw A.wrapException(A.StateError$("Only one call to add allowed"));
      _this._isDone = true;
      A._JsonUtf8Stringifier_stringify(object, _this._indent, _this._toEncodable, _this._bufferSize, _this.get$_addChunk());
      _this._sink.close$0(0);
    },
    close$0(_) {
      if (!this._isDone) {
        this._isDone = true;
        this._sink.close$0(0);
      }
    }
  };
  A.JsonDecoder.prototype = {
    startChunkedConversion$1(sink) {
      return new A._JsonDecoderSink(this._reviver, sink, new A.StringBuffer(""));
    }
  };
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = s.charCodeAt(i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (s.charCodeAt(t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (s.charCodeAt(t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 36
  };
  A._JsonPrettyPrintMixin.prototype = {
    writeList$1(list) {
      var i, _this = this,
        t1 = J.getInterceptor$asx(list);
      if (t1.get$isEmpty(list))
        _this.writeString$1("[]");
      else {
        _this.writeString$1("[\n");
        _this.writeIndentation$1(++_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",\n");
          _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
          _this.writeObject$1(t1.$index(list, i));
        }
        _this.writeString$1("\n");
        _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1("]");
      }
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonPrettyPrintMixin_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{\n");
      ++_this._JsonPrettyPrintMixin__indentLevel;
      for (separator = ""; i < t1; i += 2, separator = ",\n") {
        _this.writeString$1(separator);
        _this.writeIndentation$1(_this._JsonPrettyPrintMixin__indentLevel);
        _this.writeString$1('"');
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('": ');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("\n");
      _this.writeIndentation$1(--_this._JsonPrettyPrintMixin__indentLevel);
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonPrettyPrintMixin_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 36
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink;
      return t1 instanceof A.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1(number) {
      this._sink.write$1(0, B.JSNumber_methods.toString$0(number));
    },
    writeString$1(string) {
      this._sink.write$1(0, string);
    },
    writeStringSlice$3(string, start, end) {
      this._sink.write$1(0, B.JSString_methods.substring$2(string, start, end));
    },
    writeCharCode$1(charCode) {
      this._sink.writeCharCode$1(charCode);
    }
  };
  A._JsonStringStringifierPretty.prototype = {
    writeIndentation$1(count) {
      var t1, t2, i;
      for (t1 = this._indent, t2 = this._sink, i = 0; i < count; ++i)
        t2.write$1(0, t1);
    }
  };
  A._JsonUtf8Stringifier.prototype = {
    get$_partialResult() {
      return null;
    },
    writeNumber$1(number) {
      this.writeAsciiString$1(B.JSNumber_methods.toString$0(number));
    },
    writeAsciiString$1(string) {
      var t1, i;
      for (t1 = string.length, i = 0; i < t1; ++i)
        this.writeByte$1(string.charCodeAt(i));
    },
    writeString$1(string) {
      this.writeStringSlice$3(string, 0, string.length);
    },
    writeStringSlice$3(string, start, end) {
      var t1, i, char, i0, nextChar, _this = this;
      for (t1 = string.length, i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(string, i);
        char = string.charCodeAt(i);
        if (char <= 127)
          _this.writeByte$1(char);
        else {
          if ((char & 63488) === 55296) {
            if (char < 56320 && i + 1 < end) {
              i0 = i + 1;
              if (!(i0 < t1))
                return A.ioore(string, i0);
              nextChar = string.charCodeAt(i0);
              if ((nextChar & 64512) === 56320) {
                _this.writeFourByteCharCode$1(65536 + ((char & 1023) << 10) + (nextChar & 1023));
                i = i0;
                continue;
              }
            }
            _this.writeMultiByteCharCode$1(65533);
            continue;
          }
          _this.writeMultiByteCharCode$1(char);
        }
      }
    },
    writeCharCode$1(charCode) {
      if (charCode <= 127) {
        this.writeByte$1(charCode);
        return;
      }
      this.writeMultiByteCharCode$1(charCode);
    },
    writeMultiByteCharCode$1(charCode) {
      var _this = this;
      if (charCode <= 2047) {
        _this.writeByte$1((charCode >>> 6 | 192) >>> 0);
        _this.writeByte$1(charCode & 63 | 128);
        return;
      }
      if (charCode <= 65535) {
        _this.writeByte$1((charCode >>> 12 | 224) >>> 0);
        _this.writeByte$1(charCode >>> 6 & 63 | 128);
        _this.writeByte$1(charCode & 63 | 128);
        return;
      }
      _this.writeFourByteCharCode$1(charCode);
    },
    writeFourByteCharCode$1(charCode) {
      var _this = this;
      _this.writeByte$1((charCode >>> 18 | 240) >>> 0);
      _this.writeByte$1(charCode >>> 12 & 63 | 128);
      _this.writeByte$1(charCode >>> 6 & 63 | 128);
      _this.writeByte$1(charCode & 63 | 128);
    },
    writeByte$1(byte) {
      var t0, _this = this,
        t1 = _this.index,
        t2 = _this.buffer;
      if (t1 === t2.length) {
        _this.addChunk.call$3(t2, 0, t1);
        t1 = _this.buffer = new Uint8Array(_this.bufferSize);
        t2 = _this.index = 0;
      } else {
        t0 = t2;
        t2 = t1;
        t1 = t0;
      }
      _this.index = t2 + 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      t1[t2] = byte;
    }
  };
  A._JsonUtf8StringifierPretty.prototype = {
    writeIndentation$1(count) {
      var char, t2, end, t3, i, _this = this,
        indent = _this.indent,
        t1 = J.getInterceptor$asx(indent),
        indentLength = t1.get$length(indent);
      if (indentLength === 1) {
        char = t1.$index(indent, 0);
        for (; count > 0;) {
          _this.writeByte$1(char);
          --count;
        }
        return;
      }
      for (; count > 0;) {
        --count;
        t2 = _this.index;
        end = t2 + indentLength;
        t3 = _this.buffer;
        if (end <= t3.length) {
          B.NativeUint8List_methods.setRange$3(t3, t2, end, indent);
          _this.index = end;
        } else
          for (i = 0; i < indentLength; ++i)
            _this.writeByte$1(t1.$index(indent, i));
      }
    }
  };
  A.LineSplitter.prototype = {
    bind$1(stream) {
      return new A._BoundSinkStream(new A.LineSplitter_bind_closure(), type$.Stream_String._as(stream), type$._BoundSinkStream_dynamic_String);
    }
  };
  A.LineSplitter_bind_closure.prototype = {
    call$1(sink) {
      type$.EventSink_String._as(sink);
      return new A._LineSplitterEventSink(sink, new A._StringAdapterSink(sink));
    },
    $signature: 115
  };
  A._LineSplitterSink.prototype = {
    addSlice$4(chunk, start, end, isLast) {
      var _this = this,
        t1 = chunk.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      if (start < end) {
        if (_this._skipLeadingLF) {
          if (!(start < t1))
            return A.ioore(chunk, start);
          if (chunk.charCodeAt(start) === 10)
            ++start;
          _this._skipLeadingLF = false;
        }
        _this._addLines$4(chunk, start, end, isLast);
      }
      if (isLast)
        _this.close$0(0);
    },
    close$0(_) {
      var _this = this,
        carry = _this._carry;
      if (carry != null)
        _this._sink._sink.add$1(0, _this._useCarry$2(carry, ""));
      _this._sink._sink.close$0(0);
    },
    _addLines$4(lines, start, end, isLast) {
      var t1, t2, i, sliceStart, char, char0, slice, endSlice, multiCarry, _this = this,
        carry = _this._carry;
      for (t1 = _this._sink._sink, t2 = lines.length, i = start, sliceStart = i, char = 0; i < end; ++i, char = char0) {
        if (!(i < t2))
          return A.ioore(lines, i);
        char0 = lines.charCodeAt(i);
        if (char0 !== 13) {
          if (char0 !== 10)
            continue;
          if (char === 13) {
            sliceStart = i + 1;
            continue;
          }
        }
        slice = B.JSString_methods.substring$2(lines, sliceStart, i);
        if (carry != null) {
          slice = _this._useCarry$2(carry, slice);
          carry = null;
        }
        t1.add$1(0, slice);
        sliceStart = i + 1;
      }
      if (sliceStart < end) {
        endSlice = B.JSString_methods.substring$2(lines, sliceStart, end);
        if (isLast) {
          t1.add$1(0, carry != null ? _this._useCarry$2(carry, endSlice) : endSlice);
          return;
        }
        if (carry == null)
          _this._carry = endSlice;
        else {
          multiCarry = _this._multiCarry;
          if (multiCarry == null)
            multiCarry = _this._multiCarry = new A.StringBuffer("");
          if (carry.length !== 0) {
            multiCarry._contents += carry;
            _this._carry = "";
          }
          multiCarry._contents += endSlice;
        }
      } else
        _this._skipLeadingLF = char === 13;
    },
    _useCarry$2(carry, continuation) {
      var multiCarry, t1;
      this._carry = null;
      if (carry.length !== 0)
        return carry + continuation;
      multiCarry = this._multiCarry;
      t1 = multiCarry._contents += continuation;
      multiCarry._contents = "";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._LineSplitterEventSink.prototype = {
    addError$2(o, stackTrace) {
      this._eventSink.addError$2(o, stackTrace);
    },
    $isEventSink: 1
  };
  A.StringConversionSink.prototype = {
    add$1(_, str) {
      A._asString(str);
      this.addSlice$4(str, 0, str.length, false);
    },
    asUtf8Sink$1(allowMalformed) {
      return new A._Utf8ConversionSink(new A._Utf8Decoder(allowMalformed), this, new A.StringBuffer(""));
    },
    asStringSink$0() {
      return new A._StringConversionSinkAsStringSinkAdapter(new A.StringBuffer(""), this);
    },
    $isSink: 1
  };
  A._ClosableStringSink.prototype = {
    close$0(_) {
      this._callback.call$0();
    },
    writeCharCode$1(charCode) {
      this._sink._contents += A.Primitives_stringFromCharCode(charCode);
    },
    write$1(_, o) {
      this._sink._contents += o;
    },
    $isStringSink: 1
  };
  A._StringConversionSinkAsStringSinkAdapter.prototype = {
    close$0(_) {
      if (this._buffer._contents.length !== 0)
        this._flush$0();
      this._chunkedSink.close$0(0);
    },
    writeCharCode$1(charCode) {
      var t1 = this._buffer._contents += A.Primitives_stringFromCharCode(charCode);
      if (t1.length > 16)
        this._flush$0();
    },
    write$1(_, o) {
      if (this._buffer._contents.length !== 0)
        this._flush$0();
      this._chunkedSink.add$1(0, o);
    },
    _flush$0() {
      var t1 = this._buffer,
        t2 = t1._contents;
      t1._contents = "";
      this._chunkedSink.add$1(0, t2.charCodeAt(0) == 0 ? t2 : t2);
    },
    $isStringSink: 1
  };
  A._StringSinkConversionSink.prototype = {
    close$0(_) {
    },
    addSlice$4(str, start, end, isLast) {
      var t1, t2, i;
      if (start !== 0 || end !== str.length)
        for (t1 = this._stringSink, t2 = str.length, i = start; i < end; ++i) {
          if (!(i < t2))
            return A.ioore(str, i);
          t1._contents += A.Primitives_stringFromCharCode(str.charCodeAt(i));
        }
      else
        this._stringSink._contents += str;
      if (isLast)
        this.close$0(0);
    },
    add$1(_, str) {
      this._stringSink._contents += A._asString(str);
    },
    asUtf8Sink$1(allowMalformed) {
      return new A._Utf8StringSinkAdapter(new A._Utf8Decoder(allowMalformed), this, this._stringSink);
    },
    asStringSink$0() {
      return new A._ClosableStringSink(this.get$close(this), this._stringSink);
    }
  };
  A._StringAdapterSink.prototype = {
    add$1(_, str) {
      this._sink.add$1(0, A._asString(str));
    },
    addSlice$4(str, start, end, isLast) {
      var t1 = start === 0 && end === str.length,
        t2 = this._sink;
      if (t1)
        t2.add$1(0, str);
      else
        t2.add$1(0, B.JSString_methods.substring$2(str, start, end));
      if (isLast)
        t2.close$0(0);
    },
    close$0(_) {
      this._sink.close$0(0);
    }
  };
  A._Utf8StringSinkAdapter.prototype = {
    close$0(_) {
      this._decoder.flush$1(this._stringSink);
      this._sink.close$0(0);
    },
    add$1(_, chunk) {
      type$.List_int._as(chunk);
      this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
    },
    addSlice$4(codeUnits, startIndex, endIndex, isLast) {
      this._stringSink._contents += this._decoder.convertGeneral$4(type$.List_int._as(codeUnits), startIndex, endIndex, false);
      if (isLast)
        this.close$0(0);
    }
  };
  A._Utf8ConversionSink.prototype = {
    close$0(_) {
      var t2, t3, accumulated,
        t1 = this._buffer;
      this._decoder.flush$1(t1);
      t2 = t1._contents;
      t3 = this._chunkedSink;
      if (t2.length !== 0) {
        accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
        t1._contents = "";
        t3.addSlice$4(accumulated, 0, accumulated.length, true);
      } else
        t3.close$0(0);
    },
    add$1(_, chunk) {
      type$.List_int._as(chunk);
      this.addSlice$4(chunk, 0, J.get$length$asx(chunk), false);
    },
    addSlice$4(chunk, startIndex, endIndex, isLast) {
      var accumulated, _this = this,
        t1 = _this._buffer,
        t2 = t1._contents += _this._decoder.convertGeneral$4(type$.List_int._as(chunk), startIndex, endIndex, false);
      if (t2.length !== 0) {
        accumulated = t2.charCodeAt(0) == 0 ? t2 : t2;
        _this._chunkedSink.addSlice$4(accumulated, 0, accumulated.length, isLast);
        t1._contents = "";
        return;
      }
      if (isLast)
        _this.close$0(0);
    }
  };
  A.Utf8Codec.prototype = {
    decode$1(codeUnits) {
      type$.List_int._as(codeUnits);
      return (this._allowMalformed ? B.Utf8Decoder_true : B.Utf8Decoder_false).convert$1(codeUnits);
    },
    get$decoder() {
      return this._allowMalformed ? B.Utf8Decoder_true : B.Utf8Decoder_false;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var stringLength, end, $length, t1, encoder, t2;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < stringLength))
          return A.ioore(string, t2);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    },
    startChunkedConversion$1(sink) {
      var t1;
      type$.Sink_List_int._as(sink);
      t1 = sink instanceof A.ByteConversionSink ? sink : new A._ByteAdapterSink(sink);
      return new A._Utf8EncoderSink(t1, new Uint8Array(1024));
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, t5, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t3))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t4 = _this._bufferIndex;
          if (t4 >= t2)
            break;
          _this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else {
          t4 = codeUnit & 64512;
          if (t4 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            t4 = stringIndex + 1;
            if (!(t4 < t3))
              return A.ioore(str, t4);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t4)))
              stringIndex = t4;
          } else if (t4 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t4 = _this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            _this._bufferIndex = t5;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t5 + 1;
            t1[t5] = codeUnit & 63 | 128;
          } else {
            t4 = _this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 12 | 224;
            t4 = _this._bufferIndex = t5 + 1;
            if (!(t5 < t2))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A._Utf8EncoderSink.prototype = {
    close$0(_) {
      if (this._carry !== 0) {
        this.addSlice$4("", 0, 0, true);
        return;
      }
      this._sink.close$0(0);
    },
    addSlice$4(str, start, end, isLast) {
      var t1, t2, nextCodeUnit, t3, t4, t5, isLastSlice, t6, _this = this;
      _this._bufferIndex = 0;
      t1 = start === end;
      if (t1 && !isLast)
        return;
      t2 = _this._carry;
      if (t2 !== 0) {
        if (!t1) {
          if (!(start < str.length))
            return A.ioore(str, start);
          nextCodeUnit = str.charCodeAt(start);
        } else
          nextCodeUnit = 0;
        if (_this._writeSurrogate$2(t2, nextCodeUnit))
          ++start;
        _this._carry = 0;
      }
      t1 = _this._sink;
      t2 = _this._buffer;
      t3 = end - 1;
      t4 = str.length;
      t5 = t2.length - 3;
      do {
        start = _this._fillBuffer$3(str, start, end);
        isLastSlice = isLast && start === end;
        if (start === t3) {
          if (!(start < t4))
            return A.ioore(str, start);
          t6 = (str.charCodeAt(start) & 64512) === 55296;
        } else
          t6 = false;
        if (t6) {
          if (isLast && _this._bufferIndex < t5)
            _this._writeReplacementCharacter$0();
          else {
            if (!(start < t4))
              return A.ioore(str, start);
            _this._carry = str.charCodeAt(start);
          }
          ++start;
        }
        t1.addSlice$4(t2, 0, _this._bufferIndex, isLastSlice);
        _this._bufferIndex = 0;
      } while (start < end);
      if (isLast)
        _this.close$0(0);
    },
    $isSink: 1
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      var t1, result;
      type$.List_int._as(codeUnits);
      t1 = this._allowMalformed;
      result = A.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      return new A._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    },
    startChunkedConversion$1(sink) {
      var stringSink;
      type$.Sink_String._as(sink);
      stringSink = type$.StringConversionSink._is(sink) ? sink : new A._StringAdapterSink(sink);
      return stringSink.asUtf8Sink$1(this._allowMalformed);
    },
    bind$1(stream) {
      return this.super$Converter$bind(type$.Stream_List_int._as(stream));
    }
  };
  A._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, bytes, errorOffset, result, t1, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (type$.Uint8List._is(codeUnits)) {
        bytes = codeUnits;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      result = _this._convertRecursive$4(bytes, start, end, single);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      type$.Uint8List._as(bytes);
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    flush$1(sink) {
      var state = this._convert$_state;
      this._convert$_state = 0;
      if (state <= 32)
        return;
      if (this.allowMalformed)
        sink._contents += A.Primitives_stringFromCharCode(65533);
      else
        throw A.wrapException(A.FormatException$(A._Utf8Decoder_errorDescription(77), null, null));
    },
    decodeGeneral$4(bytes, start, end, single) {
      var state, char, buffer, i, t1, byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533;
      type$.Uint8List._as(bytes);
      state = _this._convert$_state;
      char = _this._charOrIndex;
      buffer = new A.StringBuffer("");
      i = start + 1;
      t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              buffer._contents += A.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t3 = buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                buffer._contents += A.Primitives_stringFromCharCode(bytes[m]);
              }
            else
              buffer._contents += A.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2)
          buffer._contents += A.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {};
  A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin.prototype = {};
  A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink.prototype = {};
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) >>> 0 !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, t2, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.length;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t2 = yUsed0 + 2;
      nyDigits = new Uint16Array(t2);
      if (!(yUsed0 >= 0 && yUsed0 < t2))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits.__late_helper$_value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed.__late_helper$_value = resultUsed1;
      $._BigIntImpl____lastRemUsed.__late_helper$_value = yUsed0;
      $._BigIntImpl____lastRem_nsh.__late_helper$_value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 61
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 121
  };
  A._symbolMapToStringMap_closure.prototype = {
    call$2(key, value) {
      this.result.$indexSet(0, type$.Symbol._as(key)._name, value);
    },
    $signature: 63
  };
  A._WeakReferenceWrapper.prototype = {$isWeakReference: 1};
  A.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t3 = t1._contents += t2.comma;
      t3 += key._name;
      t1._contents = t3;
      t1._contents = t3 + ": ";
      t1._contents += A.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 63
  };
  A.DateTime.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._value === other._value && this.isUtc === other.isUtc;
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._value, type$.DateTime._as(other)._value);
    },
    get$hashCode(_) {
      var t1 = this._value;
      return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toUtc$0() {
      if (this.isUtc)
        return this;
      return A.DateTime$_withValue(this._value, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1
  };
  A.DateTime_parse_parseIntOrZero.prototype = {
    call$1(matched) {
      if (matched == null)
        return 0;
      return A.int_parse(matched, null);
    },
    $signature: 52
  };
  A.DateTime_parse_parseMilliAndMicroseconds.prototype = {
    call$1(matched) {
      var t1, result, i;
      if (matched == null)
        return 0;
      for (t1 = matched.length, result = 0, i = 0; i < 6; ++i) {
        result *= 10;
        if (i < t1) {
          if (!(i < t1))
            return A.ioore(matched, i);
          result += matched.charCodeAt(i) ^ 48;
        }
      }
      return result;
    },
    $signature: 52
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    },
    $isEnum: 1
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.getTraceFromException(this.$thrownJsError);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    $isRangeError: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  A.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new A.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += A.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new A.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = A.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      return "NoSuchMethodError: method not found: '" + _this._core$_memberName._name + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, end, start, prefix, postfix,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message(receiver) {
      return this.message;
    },
    get$offset() {
      return this.offset;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    map$1($receiver, toElement) {
      return this.map$1$1($receiver, toElement, type$.dynamic);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    every$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (!A.boolConversionCheck(test.call$1(t1.get$current())))
          return false;
      return true;
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current());
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += A.S(J.toString$0$(iterator.get$current()));
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + A.S(J.toString$0$(iterator.get$current()));
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (A.boolConversionCheck(test.call$1(t1.get$current())))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skipWhile$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.SkipWhileIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("SkipWhileIterable<Iterable.E>"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    get$single(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse(_, test, orElse) {
      var t1, element;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    singleWhere$2$orElse(_, test, orElse) {
      var iterator, result,
        t1 = A._instanceType(this);
      t1._eval$1("bool(Iterable.E)")._as(test);
      t1._eval$1("Iterable.E()?")._as(orElse);
      iterator = this.get$iterator(this);
      do {
        if (!iterator.moveNext$0())
          return orElse.call$0();
        result = iterator.get$current();
      } while (!A.boolConversionCheck(test.call$1(result)));
      for (; iterator.moveNext$0();)
        if (A.boolConversionCheck(test.call$1(iterator.get$current())))
          throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1(_, invocation) {
      throw A.wrapException(A.NoSuchMethodError_NoSuchMethodError$withInvocation(this, type$.Invocation._as(invocation)));
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    write$1(_, obj) {
      this._contents += A.S(obj);
    },
    writeCharCode$1(charCode) {
      this._contents += A.Primitives_stringFromCharCode(charCode);
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 145
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 146
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 61
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwLateFieldADI("_text");
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, t1, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        t1 = pathToSplit.length;
        if (t1 !== 0) {
          if (0 >= t1)
            return A.ioore(pathToSplit, 0);
          t1 = pathToSplit.charCodeAt(0) === 47;
        } else
          t1 = false;
        if (t1)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty0 : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwLateFieldADI("pathSegments");
        _this.set$___Uri_pathSegments_FI(result);
        value = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$queryParametersAll() {
      var t1, result, _this = this,
        value = _this.___Uri_queryParametersAll_FI;
      if (value === $) {
        t1 = _this._query;
        result = A._Uri__computeQueryParametersAll(t1 == null ? "" : t1);
        _this.___Uri_queryParametersAll_FI !== $ && A.throwLateFieldADI("queryParametersAll");
        _this.set$___Uri_queryParametersAll_FI(result);
        value = result;
      }
      return value;
    },
    get$userInfo(_) {
      return this._userInfo;
    },
    get$host(_) {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port(_) {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveCompareStart(scheme, thisScheme, 0) >= 0;
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, t1, newEnd, delta, t2, t3;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      t1 = base.length;
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t2 = delta !== 2;
        if (!t2 || delta === 3) {
          t3 = newEnd + 1;
          if (!(t3 < t1))
            return A.ioore(base, t3);
          if (base.charCodeAt(t3) === 46)
            if (t2) {
              t2 = newEnd + 2;
              if (!(t2 < t1))
                return A.ioore(base, t2);
              t2 = base.charCodeAt(t2) === 46;
            } else
              t2 = true;
          else
            t2 = false;
        } else
          t2 = false;
        if (t2)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(_, reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, t1, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo(reference);
          targetHost = reference.get$host(reference);
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = A._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo(reference);
          targetHost = reference.get$host(reference);
          targetPort = A._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = A._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$path(reference) === "")
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path(reference)) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path(reference)));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path(reference));
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path(reference) : A._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path(reference));
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path(reference));
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasPort() {
      return this._port != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      t1 = $.$get$_Uri__isWindowsCached();
      if (t1)
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host(_this) !== "")
          A.throwExpression(A.UnsupportedError$(string$.Cannoten));
        pathSegments = _this.get$pathSegments();
        A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo(other))
              if (_this.get$host(_this) === other.get$host(other))
                if (_this.get$port(_this) === other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query()) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    set$___Uri_pathSegments_FI(___Uri_pathSegments_FI) {
      this.___Uri_pathSegments_FI = type$.List_String._as(___Uri_pathSegments_FI);
    },
    set$___Uri_queryParametersAll_FI(___Uri_queryParametersAll_FI) {
      this.___Uri_queryParametersAll_FI = type$.Map_of_String_and_List_String._as(___Uri_queryParametersAll_FI);
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path(receiver) {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(B.List_XRg0, A._asString(s), B.Utf8Codec_false, false);
    },
    $signature: 23
  };
  A._Uri__makeQuery_writeParameter.prototype = {
    call$2(key, value) {
      var t1 = this.result,
        t2 = this._box_0;
      t1._contents += t2.separator;
      t2.separator = "&";
      t2 = t1._contents += A._Uri__uriEncode(B.List_M1A, key, B.Utf8Codec_false, true);
      if (value != null && value.length !== 0) {
        t1._contents = t2 + "=";
        t1._contents += A._Uri__uriEncode(B.List_M1A, value, B.Utf8Codec_false, true);
      }
    },
    $signature: 168
  };
  A._Uri__makeQuery_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (value == null || typeof value == "string")
        this.writeParameter.call$2(key, A._asStringQ(value));
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, A._asString(t1.get$current()));
    },
    $signature: 26
  };
  A._Uri__splitQueryStringAll_parsePair.prototype = {
    call$3(start, equalsIndex, end) {
      var t1, t2, key, value;
      if (start === end)
        return;
      t1 = this.query;
      t2 = this.encoding;
      if (equalsIndex < 0) {
        key = A._Uri__uriDecode(t1, start, end, t2, true);
        value = "";
      } else {
        key = A._Uri__uriDecode(t1, start, equalsIndex, t2, true);
        value = A._Uri__uriDecode(t1, equalsIndex + 1, end, t2, true);
      }
      J.add$1$ax(this.result.putIfAbsent$2(key, A.core__Uri__createList$closure()), value);
    },
    $signature: 187
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, B.List_oFp, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, B.List_XRg, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables;
      if (!(state < t1.length))
        return A.ioore(t1, state);
      t1 = t1[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 193
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = chars.charCodeAt(i) ^ 96;
        if (!(t2 < 96))
          return A.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 42
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n,
        t1 = range.length;
      if (0 >= t1)
        return A.ioore(range, 0);
      i = range.charCodeAt(0);
      if (1 >= t1)
        return A.ioore(range, 1);
      n = range.charCodeAt(1);
      for (; i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (!(t1 < 96))
          return A.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 42
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    isScheme$1(scheme) {
      var t1 = scheme.length;
      if (t1 === 0)
        return this._schemeEnd < 0;
      if (t1 !== this._schemeEnd)
        return false;
      return A._caseInsensitiveCompareStart(scheme, this._uri, 0) >= 0;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo(_) {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port(_) {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path(_) {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, t2, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (B.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return B.List_empty0;
      parts = A._setArrayType([], type$.JSArray_String);
      for (t2 = t1.length, i = start; i < end; ++i) {
        if (!(i >= 0 && i < t2))
          return A.ioore(t1, i);
        if (t1.charCodeAt(i) === 47) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      }
      B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(t1, start, end));
      return A.List_List$unmodifiable(parts, type$.String);
    },
    get$queryParametersAll() {
      if (this._queryStart >= this._fragmentStart)
        return B.Map_empty4;
      var queryParameterLists = A._Uri__splitQueryStringAll(this.get$query());
      queryParameterLists.updateAll$1(A.core___toUnmodifiableStringList$closure());
      return A.ConstantMap_ConstantMap$from(queryParameterLists, type$.String, type$.List_String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1(_, reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (t3 = baseUri.length, insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (!(baseEnd >= 0 && baseEnd < t3))
          return A.ioore(baseUri, baseEnd);
        if (baseUri.charCodeAt(baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, t3, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotefq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannoteff));
      }
      t3 = $.$get$_Uri__isWindowsCached();
      if (t3)
        t1 = A._Uri__toWindowsFilePath(_this);
      else {
        if (_this._hostStart < _this._portStart)
          A.throwExpression(A.UnsupportedError$(string$.Cannoten));
        t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(_this),
        t3 = _this._hostStart > 0 ? _this.get$host(_this) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.Expando.prototype = {
    $indexSet(_, object, value) {
      type$.Object._as(object);
      this.$ti._eval$1("1?")._as(value);
      if (object instanceof A._Record)
        A.Expando__badExpandoKey(object);
      this._jsWeakMap.set(object, value);
    },
    toString$0(_) {
      return "Expando:" + A.S(this.name);
    }
  };
  A.FileSystemEntityType.prototype = {
    toString$0(_) {
      var t1 = this._type;
      if (!(t1 < 6))
        return A.ioore(B.List_0, t1);
      return B.List_0[t1];
    }
  };
  A._StreamSinkImpl.prototype = {
    add$1(_, data) {
      A._instanceType(this)._eval$1("_StreamSinkImpl.T")._as(data);
      if (this._isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      this.get$_io$_controller().add$1(0, data);
    },
    addError$2(error, stackTrace) {
      if (this._isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      this.get$_io$_controller().addError$2(error, stackTrace);
    },
    close$0(_) {
      var t1, _this = this;
      if (_this._isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      if (!_this._isClosed) {
        _this._isClosed = true;
        t1 = _this._controllerInstance;
        if (t1 != null)
          t1.close$0(0);
        else
          _this._closeTarget$0();
      }
      return _this._doneCompleter.future;
    },
    _closeTarget$0() {
      this._target._async$_target.close$0(0).then$1$2$onError(0, this.get$_completeDoneValue(), this.get$_completeDoneError(), type$.void);
    },
    _completeDoneValue$1(value) {
      var t1 = this._doneCompleter;
      if ((t1.future._state & 30) === 0)
        t1.complete$1(value);
    },
    _completeDoneError$2(error, stackTrace) {
      var t1;
      type$.nullable_StackTrace._as(stackTrace);
      t1 = this._doneCompleter;
      if ((t1.future._state & 30) === 0) {
        this._hasError = true;
        t1.completeError$2(error == null ? type$.Object._as(error) : error, stackTrace);
      }
    },
    get$_io$_controller() {
      var t1, t2, _this = this, _null = null;
      if (_this._isBound)
        throw A.wrapException(A.StateError$("StreamSink is bound to a stream"));
      if (_this._isClosed)
        throw A.wrapException(A.StateError$("StreamSink is closed"));
      if (_this._controllerInstance == null) {
        _this.set$_controllerInstance(A.StreamController_StreamController(_null, _null, _null, _null, true, A._instanceType(_this)._eval$1("_StreamSinkImpl.T")));
        _this._controllerCompleter = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
        t1 = _this._target;
        t2 = _this.get$_io$_controller();
        t1._async$_target.addStream$1(t1.$ti._eval$1("Stream<1>")._as(new A._ControllerStream(t2, A._instanceType(t2)._eval$1("_ControllerStream<1>")))).then$1$2$onError(0, new A._StreamSinkImpl__controller_closure(_this), new A._StreamSinkImpl__controller_closure0(_this), type$.Null);
      }
      t1 = _this._controllerInstance;
      t1.toString;
      return t1;
    },
    set$_controllerInstance(_controllerInstance) {
      this._controllerInstance = A._instanceType(this)._eval$1("StreamController<_StreamSinkImpl.T>?")._as(_controllerInstance);
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isSink: 1
  };
  A._StreamSinkImpl__controller_closure.prototype = {
    call$1(_) {
      var t1 = this.$this;
      if (t1._isBound) {
        t1._controllerCompleter.complete$1(t1);
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._closeTarget$0();
    },
    $signature: 37
  };
  A._StreamSinkImpl__controller_closure0.prototype = {
    call$2(error, stackTrace) {
      var t2, t3,
        t1 = this.$this;
      if (t1._isBound) {
        t2 = t1._controllerCompleter;
        t2.toString;
        t3 = error == null ? type$.Object._as(error) : error;
        t2.completeError$2(t3, type$.nullable_StackTrace._as(stackTrace));
        t1._controllerCompleter = null;
        t1.set$_controllerInstance(null);
      } else
        t1._completeDoneError$2(error, type$.nullable_StackTrace._as(stackTrace));
    },
    $signature: 240
  };
  A._IOSinkImpl.prototype = {$isStringSink: 1, $isIOSink: 1};
  A.ProcessStartMode.prototype = {
    toString$0(_) {
      var t1 = this._mode;
      if (!(t1 < 4))
        return A.ioore(B.List_sww, t1);
      return B.List_sww[t1];
    }
  };
  A.ProcessResult.prototype = {};
  A.ProcessException.prototype = {
    toString$0(_) {
      return "ProcessException: " + this.message + "\n  Command: " + this.executable + " " + B.JSArray_methods.join$1(this.$arguments, " ");
    },
    $isException: 1
  };
  A.jsify__convert.prototype = {
    call$1(o) {
      var t1, convertedMap, key, convertedList;
      if (A._noJsifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      if (type$.Map_of_nullable_Object_and_nullable_Object._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = o.get$keys(o), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(o.$index(0, key));
        }
        return convertedMap;
      } else if (type$.Iterable_nullable_Object._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 58
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 21
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 21
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  A._JSRandom.prototype = {
    nextInt$1(max) {
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$(string$.max_mu + max));
      return Math.random() * max >>> 0;
    }
  };
  A._Random.prototype = {
    _Random$1(seed) {
      var low, high, tmplow, low0, t1, t2, t3, _this = this, _4294967296 = 4294967296,
        empty_seed = seed < 0 ? -1 : 0;
      do {
        low = seed >>> 0;
        seed = B.JSInt_methods._tdivFast$1(seed - low, _4294967296);
        high = seed >>> 0;
        seed = B.JSInt_methods._tdivFast$1(seed - high, _4294967296);
        tmplow = (~low >>> 0) + (low << 21 >>> 0);
        low0 = tmplow >>> 0;
        high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + B.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296) >>> 0;
        tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
        low = tmplow >>> 0;
        high = ((high ^ high >>> 24) >>> 0) * 265 + B.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) >>> 0;
        tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
        low = tmplow >>> 0;
        high = ((high ^ high >>> 14) >>> 0) * 21 + B.JSInt_methods._tdivFast$1(tmplow - low, _4294967296) >>> 0;
        low = (low ^ (low >>> 28 | high << 4)) >>> 0;
        high = (high ^ high >>> 28) >>> 0;
        tmplow = (low << 31 >>> 0) + low;
        low0 = tmplow >>> 0;
        t1 = B.JSInt_methods._tdivFast$1(tmplow - low0, _4294967296);
        tmplow = _this._lo * 1037;
        t2 = _this._lo = tmplow >>> 0;
        t3 = _this._hi * 1037 + B.JSInt_methods._tdivFast$1(tmplow - t2, _4294967296) >>> 0;
        _this._hi = t3;
        t2 = (t2 ^ low0) >>> 0;
        _this._lo = t2;
        t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 >>> 0) >>> 0;
        _this._hi = t1;
      } while (seed !== empty_seed);
      if (t1 === 0 && t2 === 0)
        _this._lo = 23063;
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
      _this._nextState$0();
    },
    _nextState$0() {
      var _this = this,
        t1 = _this._lo,
        tmpHi = 4294901760 * t1,
        tmpHiLo = tmpHi >>> 0,
        tmpLo = 55905 * t1,
        tmpLoLo = tmpLo >>> 0,
        newLo = tmpLoLo + tmpHiLo + _this._hi;
      t1 = newLo >>> 0;
      _this._lo = t1;
      _this._hi = B.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) >>> 0;
    },
    nextInt$1(max) {
      var t1, rnd32, result, _this = this;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$(string$.max_mu + max));
      t1 = max - 1;
      if ((max & t1) === 0) {
        _this._nextState$0();
        return (_this._lo & t1) >>> 0;
      }
      do {
        _this._nextState$0();
        rnd32 = _this._lo;
        result = rnd32 % max;
      } while (rnd32 - result + max >= 4294967296);
      return result;
    }
  };
  A.wrapMain_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Never),
        $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.mainFn.call$0(), $async$call$0);
            case 2:
              // returning from await.
              t1 = self;
              t2 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.Core_withGroup(t2._as(t1.core), "Clean up (Success)", new A.wrapMain__closure0(), type$.void), $async$call$0);
            case 3:
              // returning from await.
              A.Process_exit(t2._as(t1.process), 0);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 114
  };
  A.wrapMain__closure0.prototype = {
    call$0() {
      return $.$get$context0().runTearDowns$1(B.ActionResult_0);
    },
    $signature: 12
  };
  A.wrapMain_closure0.prototype = {
    call$2(error, chain) {
      return this.$call$body$wrapMain_closure(type$.Object._as(error), type$.Chain._as(chain));
    },
    $call$body$wrapMain_closure(error, chain) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        t1, t2, mappedStackChain, t3;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = self;
              t2 = type$.JSObject;
              mappedStackChain = A.mapStackTrace(A.parseJson(type$.Map_dynamic_dynamic._as(B.C_JsonCodec.decode$2$reviver(A._asString(t2._as(t1.fs).readFileSync(A.join(A._asString(t1.__dirname), "main.cjs.map"), "utf8")), null)), null, null), chain, false, null, null);
              t3 = t2._as(t1.core);
              t3.error(J.toString$0$(error));
              t3.error(mappedStackChain.toString$0(0));
              t3.error(chain.toString$0(0));
              $async$goto = 2;
              return A._asyncAwait(A.Core_withGroup(t2._as(t1.core), "Clean up (Failure)", new A.wrapMain__closure(), type$.void), $async$call$2);
            case 2:
              // returning from await.
              A.Core_setFailed(t2._as(t1.core), "Action failed with error: " + A.S(error));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 89
  };
  A.wrapMain__closure.prototype = {
    call$0() {
      return $.$get$context0().runTearDowns$1(B.ActionResult_1);
    },
    $signature: 12
  };
  A.ActionContext.prototype = {
    runTearDowns$1(result) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$runTearDowns$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = result === B.ActionResult_0 ? $async$self._successTearDowns : $async$self._errorTearDowns;
              t2 = A._arrayInstanceType(t1);
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(new A.MappedListIterable(t1, t2._eval$1("Future<~()>(1)")._as(B.CONSTANT1), t2._eval$1("MappedListIterable<1,Future<~()>>")), type$.void_Function), $async$runTearDowns$1);
            case 2:
              // returning from await.
              type$.JSObject._as(self.core).info("Clean up completed");
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$runTearDowns$1, $async$completer);
    }
  };
  A.ActionResult.prototype = {
    _enumToString$0() {
      return "ActionResult." + this._core$_name;
    }
  };
  A.NodeLoggerPlugin.prototype = {
    handleLogEntry$1(logEntry) {
      var message;
      type$.LogEntry._as(logEntry);
      message = A.SimpleLogPrinter_formatLogEntry(logEntry);
      switch (logEntry.level.index) {
        case 4:
          type$.JSObject._as(self.core).error(message);
          break;
        case 3:
          type$.JSObject._as(self.core).warning(message);
          break;
        case 2:
          type$.JSObject._as(self.core).info(message);
          break;
        case 1:
        case 0:
          type$.JSObject._as(self.core).debug(message);
          break;
        case 5:
          break;
      }
    },
    $isAWSLoggerPlugin: 1
  };
  A.ChildProcess_spawn_closure.prototype = {
    call$1(arg) {
      return A._asString(arg);
    },
    $signature: 23
  };
  A.NodeReadableStream_get_stream_onData.prototype = {
    call$1(chunk) {
      var t1;
      type$.Uint8List._as(chunk);
      t1 = this.controller;
      if ((t1._state & 4) !== 0)
        return;
      t1.add$1(0, chunk);
    },
    $signature: 133
  };
  A.NodeReadableStream_get_stream_onError.prototype = {
    call$1(error) {
      var t1;
      type$.JSObject._as(error);
      t1 = this.controller;
      if ((t1._state & 4) !== 0)
        return;
      t1.addError$1(error);
      t1.close$0(0);
    },
    $signature: 163
  };
  A.NodeReadableStream_get_stream_onDone.prototype = {
    call$1(_) {
      var t1 = this.controller;
      if ((t1._state & 4) !== 0)
        return;
      t1.close$0(0);
    },
    call$0() {
      return this.call$1(null);
    },
    "call*": "call$1",
    $requiredArgCount: 0,
    $defaultValues() {
      return [null];
    },
    $signature: 207
  };
  A.NodeReadableStream_get_stream_closure.prototype = {
    call$0() {
      var t2, _this = this,
        t1 = _this._this;
      t1.addListener("data", A.allowInterop(_this.onData, type$.Function));
      t2 = type$.void;
      A.EventEmitter_once(t1, "close", type$.nullable_Object).then$1$1(0, _this.onDone, t2);
      A.EventEmitter_once(t1, "error", type$.JSObject).then$1$1(0, _this.onError, t2);
    },
    $signature: 0
  };
  A.NodeReadableStream_get_stream_closure0.prototype = {
    call$0() {
      return this._this.removeListener("data", A.allowInterop(this.onData, type$.Function));
    },
    $signature: 0
  };
  A.EventEmitter_once_closure.prototype = {
    call$3(arg0, arg1, arg2) {
      this.completer.complete$1(this.T._as(arg0));
    },
    call$0() {
      return this.call$3(null, null, null);
    },
    call$1(arg0) {
      return this.call$3(arg0, null, null);
    },
    call$2(arg0, arg1) {
      return this.call$3(arg0, arg1, null);
    },
    "call*": "call$3",
    $requiredArgCount: 0,
    $defaultValues() {
      return [null, null, null];
    },
    $signature: 217
  };
  A.NodePlatform.prototype = {
    get$environment() {
      var t1 = type$.String;
      return A.ConstantMap_ConstantMap$from(A.dartify(J.get$env$x(self.process), type$.Map_dynamic_dynamic), t1, t1);
    },
    get$executable() {
      return J.get$argv0$x(self.process);
    },
    get$executableArguments() {
      return A.List_List$from(J.get$execArgv$x(self.process), true, type$.String);
    },
    get$localHostname() {
      return J.hostname$0$x(A.os());
    },
    get$localeName() {
      return A.Platform_localeName();
    },
    get$numberOfProcessors() {
      return J.get$length$asx(J.cpus$0$x(A.os()));
    },
    get$operatingSystem() {
      return J.platform$0$x(A.os());
    },
    get$operatingSystemVersion() {
      return J.release$0$x(A.os());
    },
    get$packageConfig() {
      return A.Platform_packageConfig();
    },
    get$pathSeparator() {
      return J.get$sep$x(A.path());
    },
    get$resolvedExecutable() {
      return J.get$execPath$x(self.process);
    },
    get$script() {
      return A._Uri__Uri$file(A._asString(J.$index$asx(J.get$argv$x(self.process), 1)), $.$get$Platform_isWindows());
    },
    get$stdinSupportsAnsi() {
      return false;
    },
    get$stdoutSupportsAnsi() {
      return false;
    },
    get$version(_) {
      return A.Platform_version();
    }
  };
  A.processManager_closure.prototype = {
    call$0() {
      var pm = new A.NodeProcessManager(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.NodeProcess)),
        t1 = $.$get$context0(),
        t2 = type$.void_Function._as(pm.get$close(pm));
      B.JSArray_methods.add$1(t1._successTearDowns, t2);
      B.JSArray_methods.add$1(t1._errorTearDowns, t2);
      return pm;
    },
    $signature: 220
  };
  A.NodeProcessManager.prototype = {
    run$3$runInShell$workingDirectory(command, runInShell, workingDirectory) {
      return this.run$body$NodeProcessManager(type$.List_Object._as(command), true, workingDirectory);
    },
    run$body$NodeProcessManager(command, runInShell, workingDirectory) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.ProcessResult),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, stdoutSub, stderrSub, exitCode, process, pid, stdout, stderr, t1, t2;
      var $async$run$3$runInShell$workingDirectory = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.start$7$environment$includeParentEnvironment$mode$pipe$runInShell$workingDirectory(0, command, null, true, B.ProcessStartMode_0, null, true, workingDirectory), $async$run$3$runInShell$workingDirectory);
            case 3:
              // returning from await.
              process = $async$result;
              pid = J.get$pid$z(process);
              stdout = new A.StringBuffer("");
              stderr = new A.StringBuffer("");
              t1 = process._stdout;
              t2 = A._instanceType(t1)._eval$1("_ControllerStream<1>");
              t1 = t2._eval$1("StreamTransformer<Stream.T,String>")._as(B.Utf8Decoder_true).bind$1(new A._ControllerStream(t1, t2));
              stdoutSub = t1.$ti._eval$1("StreamTransformer<Stream.T,String>")._as(B.C_LineSplitter).bind$1(t1).listen$1(0, new A.NodeProcessManager_run_closure(false, stdout));
              t1 = process._stderr;
              t2 = A._instanceType(t1)._eval$1("_ControllerStream<1>");
              t1 = t2._eval$1("StreamTransformer<Stream.T,String>")._as(B.Utf8Decoder_true).bind$1(new A._ControllerStream(t1, t2));
              stderrSub = t1.$ti._eval$1("StreamTransformer<Stream.T,String>")._as(B.C_LineSplitter).bind$1(t1).listen$1(0, new A.NodeProcessManager_run_closure0(false, stderr));
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(J.get$exitCode$z(process), $async$run$3$runInShell$workingDirectory);
            case 7:
              // returning from await.
              exitCode = $async$result;
              t1 = stdout._contents;
              t2 = stderr._contents;
              $async$returnValue = new A.ProcessResult(exitCode, t1.charCodeAt(0) == 0 ? t1 : t1, t2.charCodeAt(0) == 0 ? t2 : t2, pid);
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1 = type$.void;
              A.FutureExtensions_ignore(J.cancel$0$z(stdoutSub), t1);
              A.FutureExtensions_ignore(J.cancel$0$z(stderrSub), t1);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$run$3$runInShell$workingDirectory, $async$completer);
    },
    start$7$environment$includeParentEnvironment$mode$pipe$runInShell$workingDirectory(_, command, environment, includeParentEnvironment, mode, pipe, runInShell, workingDirectory) {
      return this.start$body$NodeProcessManager(0, type$.List_Object._as(command), environment, true, mode, pipe, true, workingDirectory);
    },
    start$body$NodeProcessManager(_, command, environment, includeParentEnvironment, mode, pipe, runInShell, workingDirectory) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Process),
        $async$returnValue, $async$self = this, executable, args, t2, nodeProcess, t1, _0_0;
      var $async$start$7$environment$includeParentEnvironment$mode$pipe$runInShell$workingDirectory = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._arrayInstanceType(command)._eval$1("CastList<1,String>");
              _0_0 = new A.CastList(command, t1);
              if (command.length >= 1) {
                executable = t1._rest[1]._as(command[0]);
                args = _0_0.sublist$1(_0_0, 1);
                t1 = true;
              } else {
                executable = null;
                args = null;
                t1 = false;
              }
              if (!t1)
                throw A.wrapException(A.StateError$("Pattern matching error"));
              t1 = type$.JSObject._as(self.childProcess);
              t2 = type$.List_int;
              nodeProcess = new A.NodeProcess(executable, args, A.ChildProcess_spawn(t1, executable, args, environment, true, mode, true, null, workingDirectory), A.StreamController_StreamController(null, null, null, null, true, t2), A.StreamController_StreamController(null, null, null, null, true, t2), A.StreamController_StreamController(null, null, null, null, true, t2));
              $async$goto = 3;
              return A._asyncAwait(nodeProcess._init$0(), $async$start$7$environment$includeParentEnvironment$mode$pipe$runInShell$workingDirectory);
            case 3:
              // returning from await.
              $async$self._activeProcesses.$indexSet(0, nodeProcess.get$pid(nodeProcess), nodeProcess);
              $async$returnValue = nodeProcess;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$start$7$environment$includeParentEnvironment$mode$pipe$runInShell$workingDirectory, $async$completer);
    },
    close$0(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              for (t1 = $async$self._activeProcesses, t1 = t1.get$values(t1), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
                t3 = t1.__internal$_current;
                (t3 == null ? t2._as(t3) : t3).close$0(0)._state |= 1;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    },
    $isProcessManager: 1
  };
  A.NodeProcessManager_run_closure.prototype = {
    call$1(line) {
      A._asString(line);
      this.stdout._contents += line + "\n";
    },
    $signature: 30
  };
  A.NodeProcessManager_run_closure0.prototype = {
    call$1(line) {
      A._asString(line);
      this.stderr._contents += line + "\n";
    },
    $signature: 30
  };
  A.NodeProcess.prototype = {
    _init$0() {
      return this._init$body$NodeProcess();
    },
    _init$body$NodeProcess() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, t3, _0_0, t4, t5, _1_0, stdout, _2_0, stderr, t1;
      var $async$_init$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.stdin = null;
              t2 = $async$self._jsProcess;
              t3 = type$.nullable_JSObject;
              _0_0 = t3._as(t2.stdin);
              if (_0_0 != null) {
                t1.stdin = _0_0;
                t4 = true;
              } else
                t4 = false;
              if (t4) {
                t4 = $async$self._stdin;
                t5 = A._instanceType(t4);
                $async$self._stdinSink = new A._IOSinkImpl(B.Utf8Codec_false, new A._StreamSinkWrapper(t4, t5._eval$1("_StreamSinkWrapper<1>")), new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic));
                $async$self.set$_stdinSub(new A._ControllerStream(t4, t5._eval$1("_ControllerStream<1>")).listen$1(0, new A.NodeProcess__init_closure(t1)));
              }
              _1_0 = t3._as(t2.stdout);
              if (_1_0 != null) {
                stdout = _1_0;
                t1 = true;
              } else {
                stdout = null;
                t1 = false;
              }
              t4 = $async$self._stdout;
              if (t1)
                A.StreamForward_forward(A.NodeReadableStream_get_stream(stdout), t4, false, type$.List_int);
              else
                t4.close$0(0);
              _2_0 = t3._as(t2.stderr);
              if (_2_0 != null) {
                stderr = _2_0;
                t1 = true;
              } else {
                stderr = null;
                t1 = false;
              }
              t3 = $async$self._stderr;
              if (t1)
                A.StreamForward_forward(A.NodeReadableStream_get_stream(stderr), t3, false, type$.List_int);
              else
                t3.close$0(0);
              $async$goto = 2;
              return A._asyncAwait(A.Future_any(A._setArrayType([A.EventEmitter_once(t2, "spawn", type$.nullable_Object), A.EventEmitter_once(t2, "error", type$.JSObject).then$1$1(0, new A.NodeProcess__init_closure0($async$self), type$.Never)], type$.JSArray_Future_void), type$.void), $async$_init$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_init$0, $async$completer);
    },
    get$exitCode(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.int),
        $async$returnValue, $async$self = this, exitCode, t2, t1, _0_0;
      var $async$get$exitCode = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._jsProcess;
              _0_0 = A._asIntQ(t1.exitCode);
              if (_0_0 != null) {
                exitCode = _0_0;
                t2 = true;
              } else {
                exitCode = null;
                t2 = false;
              }
              if (t2) {
                $async$returnValue = exitCode;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(A.Future_any(A._setArrayType([A.EventEmitter_once(t1, "close", type$.nullable_Object), A.EventEmitter_once(t1, "error", type$.JSObject), A.EventEmitter_once(t1, "exit", type$.double)], type$.JSArray_Future_void), type$.void), $async$get$exitCode);
            case 3:
              // returning from await.
              t1 = A._asIntQ(t1.exitCode);
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$get$exitCode, $async$completer);
    },
    get$pid(_) {
      var t1 = A._asIntQ(this._jsProcess.pid);
      return t1 == null ? -1 : t1;
    },
    close$0(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              A._asBool($async$self._jsProcess.kill("SIGTERM"));
              t1 = A._setArrayType([], type$.JSArray_Future_dynamic);
              t2 = $async$self._stdin;
              if ((t2._state & 4) === 0)
                t1.push(t2.close$0(0));
              t2 = $async$self._stdout;
              if ((t2._state & 4) === 0)
                t1.push(t2.close$0(0));
              t2 = $async$self._stderr;
              if ((t2._state & 4) === 0)
                t1.push(t2.close$0(0));
              t2 = type$.dynamic;
              $async$goto = 2;
              return A._asyncAwait(A.Future_wait(t1, t2), $async$close$0);
            case 2:
              // returning from await.
              t1 = $async$self._stdinSub;
              t1 = t1 == null ? null : t1.cancel$0(0);
              $async$goto = 3;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.void), $async$close$0);
            case 3:
              // returning from await.
              t1 = $async$self._stdinSink;
              t1 = t1 == null ? null : t1.close$0(0);
              $async$goto = 4;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, t2), $async$close$0);
            case 4:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    },
    set$_stdinSub(_stdinSub) {
      this._stdinSub = type$.nullable_StreamSubscription_List_int._as(_stdinSub);
    },
    $isProcess: 1
  };
  A.NodeProcess__init_closure.prototype = {
    call$1(chunk) {
      type$.List_int._as(chunk);
      this._box_0.stdin.write(new Uint8Array(A._ensureNativeList(chunk)));
    },
    $signature: 29
  };
  A.NodeProcess__init_closure0.prototype = {
    call$1(error) {
      var t1 = this.$this;
      return A.throwExpression(A.ProcessException$(t1.executable, t1.$arguments, "Error spawning subprocess: " + A.S(type$.JSObject._as(error)), 0));
    },
    $signature: 82
  };
  A._UnreachableError.prototype = {};
  A.AftConfig.prototype = {
    get$runtimeTypeName() {
      return "AftConfig";
    },
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$aftConfigSerializer(), this, type$.AftConfig));
    }
  };
  A.AftComponent.prototype = {
    get$runtimeTypeName() {
      return "AftComponent";
    },
    toJson$0() {
      return A._$AftComponentToJson(this);
    }
  };
  A.PackageInfo.prototype = {
    get$props() {
      return [this.name];
    },
    get$runtimeTypeName() {
      return "PackageInfo";
    },
    compareTo$1(_, other) {
      return B.JSString_methods.compareTo$1(this.path, type$.PackageInfo._as(other).path);
    },
    toJson$0() {
      var t3, t4, _this = this,
        t1 = A._$PubspecInfoToJson(_this.pubspecInfo),
        t2 = B.Map_QS6eY.$index(0, _this.flavor);
      t2.toString;
      t3 = _this.example;
      t3 = t3 == null ? null : A._$PackageInfoToJson(t3);
      t4 = _this.docs;
      t4 = t4 == null ? null : A._$PackageInfoToJson(t4);
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "path", _this.path, "pubspecInfo", t1, "flavor", t2, "example", t3, "docs", t4], type$.String, type$.dynamic);
    },
    $isComparable: 1
  };
  A.PubspecInfo.prototype = {
    get$pubspecYamlEditor() {
      var t1, result, _this = this,
        value = _this.__PubspecInfo_pubspecYamlEditor_FI;
      if (value === $) {
        t1 = _this.pubspecYaml;
        result = new A.YamlEditor(A._setArrayType([], type$.JSArray_SourceEdit), t1, A.loadYamlNode(t1, null), A.LinkedHashSet_LinkedHashSet$_empty(type$.YamlNode));
        result._initialize$0();
        _this.__PubspecInfo_pubspecYamlEditor_FI !== $ && A.throwLateFieldADI("pubspecYamlEditor");
        _this.__PubspecInfo_pubspecYamlEditor_FI = result;
        value = result;
      }
      return value;
    },
    get$runtimeTypeName() {
      return "PubspecInfo";
    },
    toJson$0() {
      var _this = this,
        t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["pubspec", A._extension_1_toJson(_this.pubspec), "uri", _this.uri.toString$0(0), "pubspecYaml", _this.pubspecYaml, "pubspecMap", _this.pubspecMap.cast$2$0(0, t1, type$.nullable_Object)], t1, type$.dynamic);
    }
  };
  A._$AftConfigSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      var result, value;
      type$.AftConfig._as(object);
      result = ["rootDirectory", serializers.serialize$2$specifiedType(object.rootDirectory, B.FullType_ohJ), "workingDirectory", serializers.serialize$2$specifiedType(object.workingDirectory, B.FullType_ohJ), "allPackages", serializers.serialize$2$specifiedType(object.allPackages, B.FullType_fsZ), "dependencies", serializers.serialize$2$specifiedType(object.dependencies, B.FullType_0), "environment", serializers.serialize$2$specifiedType(object.environment, B.FullType_sM2), "ignore", serializers.serialize$2$specifiedType(object.ignore, B.FullType_hkZ), "components", serializers.serialize$2$specifiedType(object.components, B.FullType_zMO), "scripts", serializers.serialize$2$specifiedType(object.scripts, B.FullType_hYw)];
      value = object.platforms;
      if (value != null) {
        result.push("platforms");
        result.push(serializers.serialize$2$specifiedType(value, B.FullType_00));
      }
      return result;
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, value, t13, t14, t15, t16, _null = null,
        result = new A.AftConfigBuilder(),
        iterator = J.get$iterator$ax(type$.Iterable_nullable_Object._as(serialized));
      for (t1 = type$.MapBuilder_String_AftScript, t2 = type$.MapBuilder_String_AftComponent, t3 = type$.BuiltList_nullable_Object, t4 = type$.String, t5 = type$.List_String, t6 = type$.ListBuilder_String, t7 = type$.PlatformEnvironment, t8 = type$.Environment, t9 = type$.MapBuilder_String_VersionConstraint, t10 = type$.MapBuilder_String_PackageInfo, t11 = type$.Uri; iterator.moveNext$0();) {
        t12 = iterator.get$current();
        t12.toString;
        A._asString(t12);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t12) {
          case "rootDirectory":
            t12 = serializers.deserialize$2$specifiedType(value, B.FullType_ohJ);
            t12.toString;
            t11._as(t12);
            result.get$_config$_$this()._rootDirectory = t12;
            break;
          case "workingDirectory":
            t12 = serializers.deserialize$2$specifiedType(value, B.FullType_ohJ);
            t12.toString;
            t11._as(t12);
            result.get$_config$_$this()._workingDirectory = t12;
            break;
          case "allPackages":
            t12 = result.get$_config$_$this();
            t13 = t12._allPackages;
            if (t13 == null) {
              t13 = new A.MapBuilder(_null, $, _null, t10);
              t13.replace$1(B.Map_empty3);
              t12.set$_allPackages(t13);
              t12 = t13;
            } else
              t12 = t13;
            t13 = serializers.deserialize$2$specifiedType(value, B.FullType_fsZ);
            t13.toString;
            t12.replace$1(t13);
            break;
          case "dependencies":
            t12 = result.get$_config$_$this();
            t13 = t12._dependencies;
            if (t13 == null) {
              t13 = new A.MapBuilder(_null, $, _null, t9);
              t13.replace$1(B.Map_empty3);
              t12.set$_dependencies(t13);
              t12 = t13;
            } else
              t12 = t13;
            t13 = serializers.deserialize$2$specifiedType(value, B.FullType_0);
            t13.toString;
            t12.replace$1(t13);
            break;
          case "environment":
            t12 = result.get$_config$_$this();
            t13 = t12._environment;
            t12 = t13 == null ? t12._environment = new A.EnvironmentBuilder() : t13;
            t13 = serializers.deserialize$2$specifiedType(value, B.FullType_sM2);
            t13.toString;
            t8._as(t13);
            t12._raw_config$_$v = t13;
            break;
          case "platforms":
            t12 = result.get$_config$_$this();
            t13 = t12._platforms;
            t12 = t13 == null ? t12._platforms = new A.PlatformEnvironmentBuilder() : t13;
            t13 = serializers.deserialize$2$specifiedType(value, B.FullType_00);
            t13.toString;
            t7._as(t13);
            t12._raw_config$_$v = t13;
            break;
          case "ignore":
            t12 = result.get$_config$_$this();
            t13 = t12._ignore;
            if (t13 == null) {
              t13 = new A.ListBuilder(t6);
              t13.set$__ListBuilder__list_A(t5._as(A.List_List$from(B.List_empty, true, t4)));
              t13.set$_listOwner(_null);
              t12.set$_ignore(t13);
              t12 = t13;
            } else
              t12 = t13;
            t13 = serializers.deserialize$2$specifiedType(value, B.FullType_hkZ);
            t13.toString;
            t3._as(t13);
            t14 = t12.$ti;
            t15 = t14._eval$1("_BuiltList<1>");
            t16 = t14._eval$1("List<1>");
            if (t15._is(t13)) {
              t15._as(t13);
              t12.set$__ListBuilder__list_A(t16._as(t13._list));
              t12.set$_listOwner(t13);
            } else {
              t12.set$__ListBuilder__list_A(t16._as(A.List_List$from(t13, true, t14._precomputed1)));
              t12.set$_listOwner(_null);
            }
            break;
          case "components":
            t12 = result.get$_config$_$this();
            t13 = t12._components;
            if (t13 == null) {
              t13 = new A.MapBuilder(_null, $, _null, t2);
              t13.replace$1(B.Map_empty3);
              t12.set$_components(t13);
              t12 = t13;
            } else
              t12 = t13;
            t13 = serializers.deserialize$2$specifiedType(value, B.FullType_zMO);
            t13.toString;
            t12.replace$1(t13);
            break;
          case "scripts":
            t12 = result.get$_config$_$this();
            t13 = t12._scripts;
            if (t13 == null) {
              t13 = new A.MapBuilder(_null, $, _null, t1);
              t13.replace$1(B.Map_empty3);
              t12.set$_scripts(t13);
              t12 = t13;
            } else
              t12 = t13;
            t13 = serializers.deserialize$2$specifiedType(value, B.FullType_hYw);
            t13.toString;
            t12.replace$1(t13);
            break;
        }
      }
      return result._config$_build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_aLp;
    },
    get$wireName() {
      return "AftConfig";
    }
  };
  A._$AftConfig.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof A._$AftConfig && _this.rootDirectory.$eq(0, other.rootDirectory) && _this.workingDirectory.$eq(0, other.workingDirectory) && _this.allPackages.$eq(0, other.allPackages) && _this.dependencies.$eq(0, other.dependencies) && _this.environment.$eq(0, other.environment) && J.$eq$(_this.platforms, other.platforms) && _this.ignore.$eq(0, other.ignore) && _this.components.$eq(0, other.components) && _this.scripts.$eq(0, other.scripts);
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.rootDirectory,
        t2 = _this.workingDirectory,
        t3 = _this.allPackages,
        t4 = _this.dependencies,
        t5 = _this.environment,
        t6 = _this.ignore,
        t7 = _this.components,
        t8 = _this.scripts;
      return A.$jf(A.$jc(A.$jc(A.$jc(A.$jc(A.$jc(A.$jc(A.$jc(A.$jc(A.$jc(0, t1.get$hashCode(t1)), t2.get$hashCode(t2)), t3.get$hashCode(t3)), t4.get$hashCode(t4)), t5.get$hashCode(t5)), J.get$hashCode$(_this.platforms)), t6.get$hashCode(t6)), t7.get$hashCode(t7)), t8.get$hashCode(t8)));
    }
  };
  A.AftConfigBuilder.prototype = {
    get$allPackages() {
      var t1 = this.get$_config$_$this(),
        t2 = t1._allPackages;
      if (t2 == null) {
        t2 = A.MapBuilder_MapBuilder(type$.String, type$.PackageInfo);
        t1.set$_allPackages(t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    get$dependencies() {
      var t1 = this.get$_config$_$this(),
        t2 = t1._dependencies;
      if (t2 == null) {
        t2 = A.MapBuilder_MapBuilder(type$.String, type$.VersionConstraint);
        t1.set$_dependencies(t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    get$environment() {
      var t1 = this.get$_config$_$this(),
        t2 = t1._environment;
      return t2 == null ? t1._environment = new A.EnvironmentBuilder() : t2;
    },
    get$platforms() {
      var t1 = this.get$_config$_$this(),
        t2 = t1._platforms;
      return t2 == null ? t1._platforms = new A.PlatformEnvironmentBuilder() : t2;
    },
    get$ignore() {
      var t1 = this.get$_config$_$this(),
        t2 = t1._ignore;
      if (t2 == null) {
        t2 = A.ListBuilder_ListBuilder(B.List_empty, type$.String);
        t1.set$_ignore(t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    get$components() {
      var t1 = this.get$_config$_$this(),
        t2 = t1._components;
      if (t2 == null) {
        t2 = A.MapBuilder_MapBuilder(type$.String, type$.AftComponent);
        t1.set$_components(t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    get$scripts() {
      var t1 = this.get$_config$_$this(),
        t2 = t1._scripts;
      if (t2 == null) {
        t2 = A.MapBuilder_MapBuilder(type$.String, type$.AftScript);
        t1.set$_scripts(t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    get$_config$_$this() {
      var t1, t2, _this = this,
        $$v = _this._config$_$v;
      if ($$v != null) {
        _this._rootDirectory = $$v.rootDirectory;
        _this._workingDirectory = $$v.workingDirectory;
        t1 = $$v.allPackages;
        t2 = t1.$ti;
        t2._eval$1("_BuiltMap<1,2>")._as(t1);
        _this.set$_allPackages(new A.MapBuilder(t1._mapFactory, t1._map$_map, t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("MapBuilder<1,2>")));
        t2 = $$v.dependencies;
        t1 = t2.$ti;
        t1._eval$1("_BuiltMap<1,2>")._as(t2);
        _this.set$_dependencies(new A.MapBuilder(t2._mapFactory, t2._map$_map, t2, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MapBuilder<1,2>")));
        t1 = $$v.environment;
        t2 = new A.EnvironmentBuilder();
        A.ArgumentError_checkNotNull(t1, "other", type$.Environment);
        t2._raw_config$_$v = t1;
        _this._environment = t2;
        t2 = $$v.platforms;
        if (t2 == null)
          t1 = null;
        else {
          t1 = new A.PlatformEnvironmentBuilder();
          A.ArgumentError_checkNotNull(t2, "other", type$.PlatformEnvironment);
          t1._raw_config$_$v = t2;
        }
        _this._platforms = t1;
        t1 = $$v.ignore;
        _this.set$_ignore(A.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1));
        t1 = $$v.components;
        t2 = t1.$ti;
        t2._eval$1("_BuiltMap<1,2>")._as(t1);
        _this.set$_components(new A.MapBuilder(t1._mapFactory, t1._map$_map, t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("MapBuilder<1,2>")));
        t2 = $$v.scripts;
        t1 = t2.$ti;
        t1._eval$1("_BuiltMap<1,2>")._as(t2);
        _this.set$_scripts(new A.MapBuilder(t2._mapFactory, t2._map$_map, t2, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MapBuilder<1,2>")));
        _this._config$_$v = null;
      }
      return _this;
    },
    _config$_build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, exception, _this = this,
        _s9_ = "AftConfig",
        _s13_ = "rootDirectory",
        _s16_ = "workingDirectory",
        _s11_ = "allPackages",
        _s12_ = "dependencies",
        _s11_0 = "environment",
        _s10_ = "components",
        _$result = null;
      try {
        _$result0 = _this._config$_$v;
        if (_$result0 == null) {
          t1 = type$.Uri;
          t2 = A.BuiltValueNullFieldError_checkNotNull(_this.get$_config$_$this()._rootDirectory, _s9_, _s13_, t1);
          t3 = A.BuiltValueNullFieldError_checkNotNull(_this.get$_config$_$this()._workingDirectory, _s9_, _s16_, t1);
          t4 = _this.get$allPackages().build$0();
          t5 = _this.get$dependencies().build$0();
          t6 = _this.get$environment()._raw_config$_build$0();
          t7 = _this._platforms;
          t7 = t7 == null ? null : t7._raw_config$_build$0();
          t8 = _this.get$ignore().build$0();
          t9 = _this.get$components().build$0();
          t10 = _this.get$scripts().build$0();
          _$result0 = new A._$AftConfig(t2, t3, t4, t5, t6, t7, t8, t9, t10);
          A.BuiltValueNullFieldError_checkNotNull(t2, _s9_, _s13_, t1);
          A.BuiltValueNullFieldError_checkNotNull(t3, _s9_, _s16_, t1);
          A.BuiltValueNullFieldError_checkNotNull(t4, _s9_, _s11_, type$.BuiltMap_String_PackageInfo);
          A.BuiltValueNullFieldError_checkNotNull(t5, _s9_, _s12_, type$.BuiltMap_String_VersionConstraint);
          A.BuiltValueNullFieldError_checkNotNull(t6, _s9_, _s11_0, type$.Environment);
          A.BuiltValueNullFieldError_checkNotNull(t8, _s9_, "ignore", type$.BuiltList_String);
          A.BuiltValueNullFieldError_checkNotNull(t9, _s9_, _s10_, type$.BuiltMap_String_AftComponent);
          A.BuiltValueNullFieldError_checkNotNull(t10, _s9_, "scripts", type$.BuiltMap_String_AftScript);
        }
        _$result = _$result0;
      } catch (exception) {
        _$failedField = A._Cell$named("_$failedField");
        try {
          _$failedField.__late_helper$_value = _s11_;
          _this.get$allPackages().build$0();
          _$failedField.__late_helper$_value = _s12_;
          _this.get$dependencies().build$0();
          _$failedField.__late_helper$_value = _s11_0;
          _this.get$environment()._raw_config$_build$0();
          _$failedField.__late_helper$_value = "platforms";
          t1 = _this._platforms;
          if (t1 != null)
            t1._raw_config$_build$0();
          _$failedField.__late_helper$_value = "ignore";
          _this.get$ignore().build$0();
          _$failedField.__late_helper$_value = _s10_;
          _this.get$components().build$0();
          _$failedField.__late_helper$_value = "scripts";
          _this.get$scripts().build$0();
        } catch (exception) {
          e = A.unwrapException(exception);
          t1 = A.BuiltValueNestedFieldError$(_s9_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw A.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.AftConfig;
      t2 = t1._as(_$result);
      A.ArgumentError_checkNotNull(t2, "other", t1);
      _this._config$_$v = t2;
      return _$result;
    },
    set$_allPackages(_allPackages) {
      this._allPackages = type$.nullable_MapBuilder_String_PackageInfo._as(_allPackages);
    },
    set$_dependencies(_dependencies) {
      this._dependencies = type$.nullable_MapBuilder_String_VersionConstraint._as(_dependencies);
    },
    set$_ignore(_ignore) {
      this._ignore = type$.nullable_ListBuilder_String._as(_ignore);
    },
    set$_components(_components) {
      this._components = type$.nullable_MapBuilder_String_AftComponent._as(_components);
    },
    set$_scripts(_scripts) {
      this._scripts = type$.nullable_MapBuilder_String_AftScript._as(_scripts);
    }
  };
  A._$AftComponentFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_EFr, null);
      return new A.AftComponent($$checkedConvert.call$1$2("name", new A._$AftComponentFromJson__closure(), type$.String), $$checkedConvert.call$1$2("summary", new A._$AftComponentFromJson__closure0(), type$.nullable_PackageInfo), $$checkedConvert.call$1$2("packages", new A._$AftComponentFromJson__closure1(), type$.List_PackageInfo), $$checkedConvert.call$1$2("packageGraph", new A._$AftComponentFromJson__closure2(), type$.Map_of_String_and_List_PackageInfo), $$checkedConvert.call$1$2("propagate", new A._$AftComponentFromJson__closure3(), type$.VersionPropagation));
    },
    $signature: 101
  };
  A._$AftComponentFromJson__closure.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$AftComponentFromJson__closure0.prototype = {
    call$1(v) {
      return v == null ? null : A._$PackageInfoFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object));
    },
    $signature: 41
  };
  A._$AftComponentFromJson__closure1.prototype = {
    call$1(v) {
      var t1 = J.map$1$1$ax(type$.List_dynamic._as(v), new A._$AftComponentFromJson___closure0(), type$.PackageInfo);
      return A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
    },
    $signature: 112
  };
  A._$AftComponentFromJson___closure0.prototype = {
    call$1(e) {
      return A._$PackageInfoFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(e), type$.String, type$.nullable_Object));
    },
    $signature: 47
  };
  A._$AftComponentFromJson__closure2.prototype = {
    call$1(v) {
      return type$.Map_dynamic_dynamic._as(v).map$2$1(0, new A._$AftComponentFromJson___closure(), type$.String, type$.List_PackageInfo);
    },
    $signature: 117
  };
  A._$AftComponentFromJson___closure.prototype = {
    call$2(k, e) {
      var t1;
      A._asString(k);
      t1 = J.map$1$1$ax(type$.List_dynamic._as(e), new A._$AftComponentFromJson____closure(), type$.PackageInfo);
      return new A.MapEntry(k, A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E")), type$.MapEntry_of_String_and_List_PackageInfo);
    },
    $signature: 130
  };
  A._$AftComponentFromJson____closure.prototype = {
    call$1(e) {
      return A._$PackageInfoFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(e), type$.String, type$.nullable_Object));
    },
    $signature: 47
  };
  A._$AftComponentFromJson__closure3.prototype = {
    call$1(v) {
      return A.$enumDecode(B.Map_gv0sl, v, type$.VersionPropagation, type$.String);
    },
    $signature: 48
  };
  A._$AftComponentToJson_closure.prototype = {
    call$1(e) {
      return A._$PackageInfoToJson(type$.PackageInfo._as(e));
    },
    $signature: 49
  };
  A._$AftComponentToJson_closure0.prototype = {
    call$2(k, e) {
      var t1;
      A._asString(k);
      t1 = J.map$1$1$ax(type$.List_PackageInfo._as(e), new A._$AftComponentToJson__closure(), type$.Map_of_String_and_nullable_Object);
      return new A.MapEntry(k, A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E")), type$.MapEntry_of_String_and_List_Map_of_String_and_nullable_Object);
    },
    $signature: 173
  };
  A._$AftComponentToJson__closure.prototype = {
    call$1(e) {
      return A._$PackageInfoToJson(type$.PackageInfo._as(e));
    },
    $signature: 49
  };
  A._$PackageInfoFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      var t1, t2;
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_I27, null);
      t1 = type$.String;
      t2 = type$.nullable_PackageInfo;
      return new A.PackageInfo($$checkedConvert.call$1$2("name", new A._$PackageInfoFromJson__closure(), t1), $$checkedConvert.call$1$2("path", new A._$PackageInfoFromJson__closure0(), t1), $$checkedConvert.call$1$2("pubspecInfo", new A._$PackageInfoFromJson__closure1(), type$.PubspecInfo), $$checkedConvert.call$1$2("flavor", new A._$PackageInfoFromJson__closure2(), type$.PackageFlavor), $$checkedConvert.call$1$2("example", new A._$PackageInfoFromJson__closure3(), t2), $$checkedConvert.call$1$2("docs", new A._$PackageInfoFromJson__closure4(), t2));
    },
    $signature: 196
  };
  A._$PackageInfoFromJson__closure.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$PackageInfoFromJson__closure0.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$PackageInfoFromJson__closure1.prototype = {
    call$1(v) {
      return A._$PubspecInfoFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object));
    },
    $signature: 198
  };
  A._$PackageInfoFromJson__closure2.prototype = {
    call$1(v) {
      return A.$enumDecode(B.Map_QS6eY, v, type$.PackageFlavor, type$.String);
    },
    $signature: 201
  };
  A._$PackageInfoFromJson__closure3.prototype = {
    call$1(v) {
      return v == null ? null : A._$PackageInfoFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object));
    },
    $signature: 41
  };
  A._$PackageInfoFromJson__closure4.prototype = {
    call$1(v) {
      return v == null ? null : A._$PackageInfoFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object));
    },
    $signature: 41
  };
  A._$PubspecInfoFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      var t1, t2;
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_pubspec_uri_pubspecYaml_pubspecMap, null);
      t1 = $$checkedConvert.call$1$2("pubspec", new A._$PubspecInfoFromJson__closure(), type$.Pubspec);
      t2 = $$checkedConvert.call$1$2("pubspecYaml", new A._$PubspecInfoFromJson__closure0(), type$.String);
      return A.PubspecInfo$(t1, $$checkedConvert.call$1$2("pubspecMap", new A._$PubspecInfoFromJson__closure1(), type$.YamlMap), t2, $$checkedConvert.call$1$2("uri", new A._$PubspecInfoFromJson__closure2(), type$.Uri));
    },
    $signature: 202
  };
  A._$PubspecInfoFromJson__closure.prototype = {
    call$1(v) {
      var t1 = type$.Map_of_String_and_nullable_Object;
      return A.Pubspec_Pubspec$fromJson(t1._as(t1._as(v)), false);
    },
    $signature: 203
  };
  A._$PubspecInfoFromJson__closure0.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$PubspecInfoFromJson__closure1.prototype = {
    call$1(v) {
      var t1 = type$.Map_of_String_and_nullable_Object;
      v = t1._as(t1._as(v));
      t1 = new A.NullSpan(A.SourceLocation$(0, null, null, null));
      A.ArgumentError_checkNotNull(B.CollectionStyle_ANY, "style", type$.CollectionStyle);
      return new A.YamlMapWrapper(B.CollectionStyle_ANY, v, t1, new A._YamlMapNodes(v, t1));
    },
    $signature: 205
  };
  A._$PubspecInfoFromJson__closure2.prototype = {
    call$1(v) {
      return A.Uri_parse(A._asString(v));
    },
    $signature: 50
  };
  A._AftComponent_Object_AWSSerializable.prototype = {};
  A._AftComponent_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._AftConfig_Object_AWSSerializable.prototype = {};
  A._AftConfig_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._PackageInfo_Object_AWSEquatable.prototype = {};
  A._PackageInfo_Object_AWSEquatable_AWSSerializable.prototype = {};
  A._PackageInfo_Object_AWSEquatable_AWSSerializable_AWSDebuggable.prototype = {};
  A._PubspecInfo_Object_AWSSerializable.prototype = {};
  A._PubspecInfo_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A.AftConfigLoader.prototype = {
    reload$0() {
      var t1, rootDirectory, t2, _0_0, pubspec, pubspecMap, t3, t4, t5,
        pubspecQueue = A.ListQueue$(type$.Record_2_YamlMap_and_Pubspec),
        dir = this.workingDirectory;
      for (t1 = pubspecQueue.$ti._precomputed1, rootDirectory = null; t2 = dir.path, A.absolute(A.FileSystemEntity_parentOf(t2)) !== A.absolute(t2);) {
        _0_0 = A.DirectoryX_get_pubspec(dir);
        if (_0_0 instanceof A.PubspecInfo) {
          pubspec = _0_0.pubspec;
          pubspecMap = _0_0.pubspecMap;
          t3 = true;
        } else {
          pubspec = null;
          pubspecMap = null;
          t3 = false;
        }
        if (t3) {
          t3 = t1._as(new A._Record_2(pubspecMap, pubspec));
          t4 = pubspecQueue._collection$_head;
          t5 = pubspecQueue._collection$_table;
          t4 = (t4 - 1 & t5.length - 1) >>> 0;
          pubspecQueue._collection$_head = t4;
          B.JSArray_methods.$indexSet(t5, t4, t3);
          if (pubspecQueue._collection$_head === pubspecQueue._collection$_tail)
            pubspecQueue._grow$0();
          ++pubspecQueue._modificationCount;
          rootDirectory = dir;
        }
        dir = new A.Directory(A.FileSystemEntity_parentOf(t2));
      }
      if (pubspecQueue._collection$_head === pubspecQueue._collection$_tail || rootDirectory == null)
        throw A.wrapException(A.StateError$("Root directory not found. Make sure to run this command from within a Dart or Flutter project"));
      return this._loadedConfig = this._processPubspecs$2$pubspecQueue$rootDirectory(pubspecQueue, rootDirectory);
    },
    load$0(_) {
      var loadedConfig, t1,
        _0_0 = this._loadedConfig;
      if (_0_0 != null) {
        loadedConfig = _0_0;
        t1 = true;
      } else {
        loadedConfig = null;
        t1 = false;
      }
      if (t1)
        return loadedConfig;
      return this.reload$0();
    },
    _processPubspecs$2$pubspecQueue$rootDirectory(pubspecQueue, rootDirectory) {
      var aftConfig, t1, t2, rawComponents, mergePubspec, i, _3_0, repoPackages;
      type$.Queue_Record_2_YamlMap_and_Pubspec._as(pubspecQueue);
      aftConfig = new A.AftConfigBuilder();
      t1 = $.$get$Platform_isWindows();
      t2 = A._Uri__Uri$file(rootDirectory.path, t1);
      aftConfig.get$_config$_$this()._rootDirectory = t2;
      t1 = A._Uri__Uri$file(this.workingDirectory.path, t1);
      aftConfig.get$_config$_$this()._workingDirectory = t1;
      t1 = type$.String;
      rawComponents = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.RawAftComponent);
      mergePubspec = new A.AftConfigLoader__processPubspecs_mergePubspec(aftConfig, rawComponents);
      for (i = 0; i < (pubspecQueue._collection$_tail - pubspecQueue._collection$_head & pubspecQueue._collection$_table.length - 1) >>> 0; ++i) {
        _3_0 = pubspecQueue.elementAt$1(0, i);
        mergePubspec.call$3$isRoot(_3_0._0, _3_0._1, i === 0);
      }
      t2 = aftConfig.get$ignore().build$0();
      repoPackages = this._collectPackages$2$ignore$rootDirectory(new A.CopyOnWriteList(true, t2._list, t2.$ti._eval$1("CopyOnWriteList<1>")), rootDirectory);
      aftConfig.get$allPackages().replace$1(repoPackages);
      aftConfig.get$components().addAll$1(0, rawComponents.map$2$1(0, new A.AftConfigLoader__processPubspecs_closure(repoPackages), t1, type$.AftComponent));
      return aftConfig._config$_build$0();
    },
    _collectPackages$2$ignore$rootDirectory(ignore, rootDirectory) {
      var t1, allPackages, t2, t3, $package, t4, _i;
      type$.List_String._as(ignore);
      t1 = rootDirectory.listSync$2$followLinks$recursive(false, true);
      allPackages = A._setArrayType([], type$.JSArray_PackageInfo);
      for (t1 = B.JSArray_methods.get$iterator(t1), t2 = new A.WhereTypeIterator(t1, type$.WhereTypeIterator_Directory), t3 = type$.Directory; t2.moveNext$0();) {
        $package = A.PackageInfo_fromDirectory(t3._as(t1.get$current()));
        if ($package != null) {
          t4 = $package.name;
          t4 = J.contains$1$asx(ignore._copy_on_write_list$_list, t4);
        } else
          t4 = true;
        if (t4)
          continue;
        B.JSArray_methods.add$1(allPackages, $package);
      }
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.PackageInfo);
      for (B.JSArray_methods.sort$0(allPackages), t2 = allPackages.length, _i = 0; _i < allPackages.length; allPackages.length === t2 || (0, A.throwConcurrentModificationError)(allPackages), ++_i) {
        $package = allPackages[_i];
        t1.$indexSet(0, $package.name, $package);
      }
      return new A.UnmodifiableMapView(t1, type$.UnmodifiableMapView_String_PackageInfo);
    }
  };
  A.AftConfigLoader__processPubspecs_mergePubspec.prototype = {
    call$3$isRoot(yaml, pubspec, isRoot) {
      var t1, t2, t3, _1_0, rawAftConfig, _2_0, platforms,
        rawPubspecConfig = A._$RawPubspecConfigFromJson(yaml.cast$2$0(0, type$.String, type$.nullable_Object));
      if (isRoot) {
        t1 = rawPubspecConfig.dependencies;
        t1 = t1.get$entries(t1).map$1$1(0, new A.AftConfigLoader__processPubspecs_mergePubspec_closure(), type$.nullable_MapEntry_String_VersionConstraint);
        t2 = this.aftConfig;
        t3 = t2.get$dependencies();
        t1 = t3.$ti._eval$1("Iterable<MapEntry<1,2>>")._as(new A.NonNullsIterable(t1, type$.NonNullsIterable_MapEntry_String_VersionConstraint));
        t3.get$_safeMap().addEntries$1(t1);
        t2 = t2.get$environment();
        t1 = rawPubspecConfig.environment;
        A.ArgumentError_checkNotNull(t1, "other", type$.Environment);
        t2._raw_config$_$v = t1;
      }
      _1_0 = rawPubspecConfig.aft;
      if (_1_0 != null) {
        rawAftConfig = _1_0;
        t1 = true;
      } else {
        rawAftConfig = null;
        t1 = false;
      }
      if (t1) {
        this.rawComponents.addEntries$1(J.map$1$1$ax(rawAftConfig.components, new A.AftConfigLoader__processPubspecs_mergePubspec_closure0(), type$.MapEntry_String_RawAftComponent));
        t1 = this.aftConfig;
        t1.get$ignore().addAll$1(0, rawAftConfig.ignore);
        t1.get$scripts().addAll$1(0, rawAftConfig.scripts);
        if (isRoot) {
          _2_0 = rawAftConfig.platforms;
          if (_2_0 != null) {
            platforms = _2_0;
            t2 = true;
          } else {
            platforms = null;
            t2 = false;
          }
          if (t2) {
            t1 = t1.get$platforms();
            t2 = type$.PlatformEnvironment;
            t2._as(platforms);
            A.ArgumentError_checkNotNull(platforms, "other", t2);
            t1._raw_config$_$v = platforms;
          }
        }
      }
    },
    call$2(yaml, pubspec) {
      return this.call$3$isRoot(yaml, pubspec, false);
    },
    $signature: 215
  };
  A.AftConfigLoader__processPubspecs_mergePubspec_closure.prototype = {
    call$1(entry) {
      var _0_2, dependency, t1;
      type$.MapEntry_String_Dependency._as(entry);
      _0_2 = A._InitializedCell$named("#0#2", new A.AftConfigLoader__processPubspecs_mergePubspec__closure(entry));
      $label0$0: {
        if (_0_2._readFinal$0() instanceof A.HostedDependency) {
          dependency = _0_2._readFinal$0();
          t1 = true;
        } else {
          dependency = null;
          t1 = false;
        }
        if (t1) {
          t1 = new A.MapEntry(entry.key, dependency.version, type$.MapEntry_String_VersionConstraint);
          break $label0$0;
        }
        t1 = null;
        break $label0$0;
      }
      return t1;
    },
    $signature: 216
  };
  A.AftConfigLoader__processPubspecs_mergePubspec__closure.prototype = {
    call$0() {
      return this._0_0.value;
    },
    $signature: 27
  };
  A.AftConfigLoader__processPubspecs_mergePubspec_closure0.prototype = {
    call$1(component) {
      type$.RawAftComponent._as(component);
      return new A.MapEntry(component.name, component, type$.MapEntry_String_RawAftComponent);
    },
    $signature: 143
  };
  A.AftConfigLoader__processPubspecs_closure.prototype = {
    call$2($name, component) {
      var _5_0, t1, _4_0, summaryPackage, t2, t3, t4, packages, t5, t6, _i, $package, t7, t8, _null = null;
      A._asString($name);
      type$.RawAftComponent._as(component);
      _5_0 = component.summary;
      $label1$1: {
        if (_5_0 == null) {
          t1 = _null;
          break $label1$1;
        }
        _4_0 = this.repoPackages._map.$index(0, _5_0);
        $label2$2: {
          if (_4_0 != null) {
            summaryPackage = _4_0;
            t1 = true;
          } else {
            summaryPackage = _null;
            t1 = false;
          }
          if (t1) {
            t1 = summaryPackage;
            break $label2$2;
          }
          t1 = _null;
          break $label2$2;
        }
        break $label1$1;
      }
      t2 = type$.nullable_PackageInfo;
      t3 = type$.NonNullsIterable_PackageInfo;
      t4 = t3._eval$1("Iterable.E");
      packages = A.List_List$of(new A.NonNullsIterable(J.map$1$1$ax(component.packages, new A.AftConfigLoader__processPubspecs__closure(this.repoPackages, component), t2), t3), true, t4);
      t5 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_PackageInfo);
      for (t6 = packages.length, _i = 0; _i < packages.length; packages.length === t6 || (0, A.throwConcurrentModificationError)(packages), ++_i) {
        $package = packages[_i];
        t7 = $package.name;
        t8 = $package.pubspecInfo.pubspec.dependencies;
        t8 = t8.get$keys(t8);
        t5.$indexSet(0, t7, A.List_List$of(new A.NonNullsIterable(t8.map$1$1(t8, new A.AftConfigLoader__processPubspecs__closure0(packages), t2), t3), true, t4));
      }
      t2 = component.name;
      return new A.MapEntry(t2, new A.AftComponent(t2, t1, packages, new A.UnmodifiableMapView(t5, type$.UnmodifiableMapView_of_String_and_List_PackageInfo), component.propagate), type$.MapEntry_String_AftComponent);
    },
    $signature: 241
  };
  A.AftConfigLoader__processPubspecs__closure.prototype = {
    call$1($name) {
      var $package, t1,
        _6_0 = this.repoPackages._map.$index(0, A._asString($name));
      $label3$3: {
        if (_6_0 != null) {
          $package = _6_0;
          t1 = true;
        } else {
          $package = null;
          t1 = false;
        }
        if (t1) {
          t1 = $package;
          break $label3$3;
        }
        t1 = null;
        break $label3$3;
      }
      return t1;
    },
    $signature: 28
  };
  A.AftConfigLoader__processPubspecs__closure0.prototype = {
    call$1(packageName) {
      return A.IterableExtension_firstWhereOrNull(this.packages, new A.AftConfigLoader__processPubspecs___closure(A._asString(packageName)), type$.PackageInfo);
    },
    $signature: 28
  };
  A.AftConfigLoader__processPubspecs___closure.prototype = {
    call$1(pkg) {
      return type$.PackageInfo._as(pkg).name === this.packageName;
    },
    $signature: 79
  };
  A.PackageSelector.prototype = {};
  A._PackageSelector.prototype = {
    toJson$0() {
      var t2,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Object);
      t1.$indexSet(0, "include", this._include.toJson$0());
      t2 = this._exclude;
      if (t2 != null)
        t1.$indexSet(0, "exclude", t2.toJson$0());
      return t1;
    }
  };
  A._PackageOrComponentSelector.prototype = {
    toJson$0() {
      return this.selector;
    }
  };
  A._AllPackageSelector.prototype = {
    toJson$0() {
      return "all";
    }
  };
  A._DevelopmentPackageSelector.prototype = {
    toJson$0() {
      return "dev";
    }
  };
  A._ExamplePackageSelector.prototype = {
    toJson$0() {
      return "example";
    }
  };
  A._TestPackageSelector.prototype = {
    toJson$0() {
      return "test";
    }
  };
  A._DartPackageSelector.prototype = {
    toJson$0() {
      return "dart";
    }
  };
  A._FlutterPackageSelector.prototype = {
    toJson$0() {
      return "flutter";
    }
  };
  A._RootPackageSelector.prototype = {
    toJson$0() {
      return "root";
    }
  };
  A._CurrentPackageSelector.prototype = {
    toJson$0() {
      return "current";
    }
  };
  A._OrPackageSelector.prototype = {
    toJson$0() {
      var t1 = this.selectors,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Object?>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["or", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Object?(1)")._as(new A._OrPackageSelector_toJson_closure()), t3), true, t3._eval$1("ListIterable.E"))], type$.String, type$.List_nullable_Object);
    }
  };
  A._OrPackageSelector_toJson_closure.prototype = {
    call$1(selector) {
      return type$.PackageSelector._as(selector).toJson$0();
    },
    $signature: 53
  };
  A._AndPackageSelector.prototype = {
    toJson$0() {
      var t1 = this.selectors,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Object?>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["and", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Object?(1)")._as(new A._AndPackageSelector_toJson_closure()), t3), true, t3._eval$1("ListIterable.E"))], type$.String, type$.List_nullable_Object);
    }
  };
  A._AndPackageSelector_toJson_closure.prototype = {
    call$1(selector) {
      return type$.PackageSelector._as(selector).toJson$0();
    },
    $signature: 53
  };
  A.PackageSelectorConverter.prototype = {
    fromJson$1(json) {
      var t1 = J.$eq$(json, "");
      if (t1)
        return B.C__DevelopmentPackageSelector;
      return A.PackageSelector_PackageSelector$fromJson(json);
    }
  };
  A._PackageSelector_Object_AWSSerializable.prototype = {};
  A.RawPubspecConfig.prototype = {};
  A.RawAftConfig.prototype = {
    get$runtimeTypeName() {
      return "RawAftConfig";
    },
    toJson$0() {
      return A._$RawAftConfigToJson(this);
    }
  };
  A.Environment.prototype = {
    get$runtimeTypeName() {
      return "Environment";
    },
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$environmentSerializer(), this, type$.Environment));
    }
  };
  A.PlatformEnvironment.prototype = {
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$platformEnvironmentSerializer(), this, type$.PlatformEnvironment));
    }
  };
  A.AndroidEnvironment.prototype = {
    get$runtimeTypeName() {
      return "AndroidEnvironment";
    },
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$androidEnvironmentSerializer(), this, type$.AndroidEnvironment));
    }
  };
  A.IosEnvironment.prototype = {
    get$runtimeTypeName() {
      return "IosEnvironment";
    },
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$iosEnvironmentSerializer(), this, type$.IosEnvironment));
    }
  };
  A.MacOSEnvironment.prototype = {
    get$runtimeTypeName() {
      return "MacOSEnvironment";
    },
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$macOSEnvironmentSerializer(), this, type$.MacOSEnvironment));
    }
  };
  A.GitHubPackageConfig.prototype = {
    get$runtimeTypeName() {
      return "GitHubPackageConfig";
    },
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$aftSerializers().serializeWith$1$2($.$get$_$gitHubPackageConfigSerializer(), this, type$.GitHubPackageConfig));
    }
  };
  A.VersionPropagation.prototype = {
    _enumToString$0() {
      return "VersionPropagation." + this._core$_name;
    }
  };
  A.RawAftComponent.prototype = {
    get$runtimeTypeName() {
      return "RawAftComponent";
    },
    toJson$0() {
      var _this = this,
        t1 = B.Map_gv0sl.$index(0, _this.propagate);
      t1.toString;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "summary", _this.summary, "packages", _this.packages, "propagate", t1], type$.String, type$.dynamic);
    }
  };
  A.AftScript.prototype = {
    get$runtimeTypeName() {
      return "AftScript";
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["run", _this.run, "description", _this.description, "from", _this.from.toJson$0(), "fail-fast", _this.failFast], type$.String, type$.dynamic);
    }
  };
  A._extension_1_toJson_closure.prototype = {
    call$2(key, constraint) {
      var t1;
      A._asString(key);
      type$.nullable_VersionConstraint._as(constraint);
      t1 = constraint == null ? null : constraint.toString$0(0);
      return new A.MapEntry(key, t1, type$.MapEntry_of_String_and_nullable_String);
    },
    $signature: 81
  };
  A._extension_1_toJson_closure0.prototype = {
    call$2($name, dependency) {
      return new A.MapEntry(A._asString($name), A._extension_0_toJson(type$.Dependency._as(dependency)), type$.MapEntry_of_String_and_Map_of_String_and_nullable_Object);
    },
    $signature: 34
  };
  A._extension_1_toJson_closure1.prototype = {
    call$2($name, dependency) {
      return new A.MapEntry(A._asString($name), A._extension_0_toJson(type$.Dependency._as(dependency)), type$.MapEntry_of_String_and_Map_of_String_and_nullable_Object);
    },
    $signature: 34
  };
  A._extension_1_toJson_closure2.prototype = {
    call$2($name, dependency) {
      return new A.MapEntry(A._asString($name), A._extension_0_toJson(type$.Dependency._as(dependency)), type$.MapEntry_of_String_and_Map_of_String_and_nullable_Object);
    },
    $signature: 34
  };
  A._$EnvironmentSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      type$.Environment._as(object);
      return ["sdk", serializers.serialize$2$specifiedType(object.sdk, B.FullType_0AN), "flutter", serializers.serialize$2$specifiedType(object.flutter, B.FullType_0AN)];
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1, t2, value, $$v,
        result = new A.EnvironmentBuilder(),
        iterator = J.get$iterator$ax(type$.Iterable_nullable_Object._as(serialized));
      for (t1 = type$.VersionConstraint; iterator.moveNext$0();) {
        t2 = iterator.get$current();
        t2.toString;
        A._asString(t2);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t2) {
          case "sdk":
            t2 = serializers.deserialize$2$specifiedType(value, B.FullType_0AN);
            t2.toString;
            t1._as(t2);
            $$v = result._raw_config$_$v;
            if ($$v != null) {
              result._sdk = $$v.sdk;
              result._flutter = $$v.flutter;
              result._raw_config$_$v = null;
            }
            result._sdk = t2;
            break;
          case "flutter":
            t2 = serializers.deserialize$2$specifiedType(value, B.FullType_0AN);
            t2.toString;
            t1._as(t2);
            $$v = result._raw_config$_$v;
            if ($$v != null) {
              result._sdk = $$v.sdk;
              result._flutter = $$v.flutter;
              result._raw_config$_$v = null;
            }
            result._flutter = t2;
            break;
        }
      }
      return result._raw_config$_build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_X3r;
    },
    get$wireName() {
      return "Environment";
    }
  };
  A._$PlatformEnvironmentSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      type$.PlatformEnvironment._as(object);
      return ["android", serializers.serialize$2$specifiedType(object.android, B.FullType_URx), "ios", serializers.serialize$2$specifiedType(object.ios, B.FullType_5i6), "macOS", serializers.serialize$2$specifiedType(object.macOS, B.FullType_W3m)];
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1, t2, t3, t4, value, t5,
        result = new A.PlatformEnvironmentBuilder(),
        iterator = J.get$iterator$ax(type$.Iterable_nullable_Object._as(serialized));
      for (t1 = type$.MacOSEnvironment, t2 = type$.IosEnvironment, t3 = type$.AndroidEnvironment; iterator.moveNext$0();) {
        t4 = iterator.get$current();
        t4.toString;
        A._asString(t4);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t4) {
          case "android":
            t4 = result.get$_raw_config$_$this();
            t5 = t4._android;
            t4 = t5 == null ? t4._android = new A.AndroidEnvironmentBuilder() : t5;
            t5 = serializers.deserialize$2$specifiedType(value, B.FullType_URx);
            t5.toString;
            t3._as(t5);
            t4._raw_config$_$v = t5;
            break;
          case "ios":
            t4 = result.get$_raw_config$_$this();
            t5 = t4._ios;
            t4 = t5 == null ? t4._ios = new A.IosEnvironmentBuilder() : t5;
            t5 = serializers.deserialize$2$specifiedType(value, B.FullType_5i6);
            t5.toString;
            t2._as(t5);
            t4._raw_config$_$v = t5;
            break;
          case "macOS":
            t4 = result.get$_raw_config$_$this();
            t5 = t4._macOS;
            t4 = t5 == null ? t4._macOS = new A.MacOSEnvironmentBuilder() : t5;
            t5 = serializers.deserialize$2$specifiedType(value, B.FullType_W3m);
            t5.toString;
            t1._as(t5);
            t4._raw_config$_$v = t5;
            break;
        }
      }
      return result._raw_config$_build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_4e8;
    },
    get$wireName() {
      return "PlatformEnvironment";
    }
  };
  A._$AndroidEnvironmentSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      return ["minSdkVersion", serializers.serialize$2$specifiedType(type$.AndroidEnvironment._as(object).minSdkVersion, B.FullType_h8g)];
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1, value, $$v,
        result = new A.AndroidEnvironmentBuilder(),
        iterator = J.get$iterator$ax(type$.Iterable_nullable_Object._as(serialized));
      for (; iterator.moveNext$0();) {
        t1 = iterator.get$current();
        t1.toString;
        A._asString(t1);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t1) {
          case "minSdkVersion":
            t1 = serializers.deserialize$2$specifiedType(value, B.FullType_h8g);
            t1.toString;
            A._asString(t1);
            $$v = result._raw_config$_$v;
            if ($$v != null) {
              result._minSdkVersion = $$v.minSdkVersion;
              result._raw_config$_$v = null;
            }
            result._minSdkVersion = t1;
            break;
        }
      }
      return result._raw_config$_build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_CSD;
    },
    get$wireName() {
      return "AndroidEnvironment";
    }
  };
  A._$IosEnvironmentSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      return ["minOSVersion", serializers.serialize$2$specifiedType(type$.IosEnvironment._as(object).minOSVersion, B.FullType_h8g)];
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1, value, $$v,
        result = new A.IosEnvironmentBuilder(),
        iterator = J.get$iterator$ax(type$.Iterable_nullable_Object._as(serialized));
      for (; iterator.moveNext$0();) {
        t1 = iterator.get$current();
        t1.toString;
        A._asString(t1);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t1) {
          case "minOSVersion":
            t1 = serializers.deserialize$2$specifiedType(value, B.FullType_h8g);
            t1.toString;
            A._asString(t1);
            $$v = result._raw_config$_$v;
            if ($$v != null) {
              result._minOSVersion = $$v.minOSVersion;
              result._raw_config$_$v = null;
            }
            result._minOSVersion = t1;
            break;
        }
      }
      return result._raw_config$_build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_gg4;
    },
    get$wireName() {
      return "IosEnvironment";
    }
  };
  A._$MacOSEnvironmentSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      return ["minOSVersion", serializers.serialize$2$specifiedType(type$.MacOSEnvironment._as(object).minOSVersion, B.FullType_h8g)];
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1, value, $$v,
        result = new A.MacOSEnvironmentBuilder(),
        iterator = J.get$iterator$ax(type$.Iterable_nullable_Object._as(serialized));
      for (; iterator.moveNext$0();) {
        t1 = iterator.get$current();
        t1.toString;
        A._asString(t1);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t1) {
          case "minOSVersion":
            t1 = serializers.deserialize$2$specifiedType(value, B.FullType_h8g);
            t1.toString;
            A._asString(t1);
            $$v = result._raw_config$_$v;
            if ($$v != null) {
              result._minOSVersion = $$v.minOSVersion;
              result._raw_config$_$v = null;
            }
            result._minOSVersion = t1;
            break;
        }
      }
      return result._raw_config$_build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_qpR;
    },
    get$wireName() {
      return "MacOSEnvironment";
    }
  };
  A._$GitHubPackageConfigSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      return ["custom", serializers.serialize$2$specifiedType(type$.GitHubPackageConfig._as(object).custom, B.FullType_MtR)];
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var result, iterator, t1, value, $$v, _$result, t2,
        _s19_ = "GitHubPackageConfig";
      type$.Iterable_nullable_Object._as(serialized);
      result = new A.GitHubPackageConfigBuilder();
      result.get$_raw_config$_$this()._custom = false;
      iterator = J.get$iterator$ax(serialized);
      for (; iterator.moveNext$0();) {
        t1 = iterator.get$current();
        t1.toString;
        A._asString(t1);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t1) {
          case "custom":
            t1 = serializers.deserialize$2$specifiedType(value, B.FullType_MtR);
            t1.toString;
            A._asBool(t1);
            $$v = result._raw_config$_$v;
            if ($$v != null) {
              result._custom = $$v.custom;
              result._raw_config$_$v = null;
            }
            result._custom = t1;
            break;
        }
      }
      _$result = result._raw_config$_$v;
      if (_$result == null) {
        t1 = type$.bool;
        t2 = A.BuiltValueNullFieldError_checkNotNull(result.get$_raw_config$_$this()._custom, _s19_, "custom", t1);
        _$result = new A._$GitHubPackageConfig(t2);
        A.BuiltValueNullFieldError_checkNotNull(t2, _s19_, "custom", t1);
      }
      A.ArgumentError_checkNotNull(_$result, "other", type$.GitHubPackageConfig);
      return result._raw_config$_$v = _$result;
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_yv8;
    },
    get$wireName() {
      return "GitHubPackageConfig";
    }
  };
  A._$Environment.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A._$Environment && this.sdk.$eq(0, other.sdk) && this.flutter.$eq(0, other.flutter);
    },
    get$hashCode(_) {
      var t1 = this.sdk,
        t2 = this.flutter;
      return A.$jf(A.$jc(A.$jc(0, t1.get$hashCode(t1)), t2.get$hashCode(t2)));
    }
  };
  A.EnvironmentBuilder.prototype = {
    get$_raw_config$_$this() {
      var _this = this,
        $$v = _this._raw_config$_$v;
      if ($$v != null) {
        _this._sdk = $$v.sdk;
        _this._flutter = $$v.flutter;
        _this._raw_config$_$v = null;
      }
      return _this;
    },
    _raw_config$_build$0() {
      var t1, _$result, t2, t3, _this = this,
        _s11_ = "Environment";
      if (_this.get$_raw_config$_$this()._flutter == null) {
        t1 = $.$get$VersionConstraint_any();
        _this.get$_raw_config$_$this()._flutter = t1;
      }
      _$result = _this._raw_config$_$v;
      if (_$result == null) {
        t1 = type$.VersionConstraint;
        t2 = A.BuiltValueNullFieldError_checkNotNull(_this.get$_raw_config$_$this()._sdk, _s11_, "sdk", t1);
        t3 = A.BuiltValueNullFieldError_checkNotNull(_this.get$_raw_config$_$this()._flutter, _s11_, "flutter", t1);
        _$result = new A._$Environment(t2, t3);
        A.BuiltValueNullFieldError_checkNotNull(t2, _s11_, "sdk", t1);
        A.BuiltValueNullFieldError_checkNotNull(t3, _s11_, "flutter", t1);
      }
      A.ArgumentError_checkNotNull(_$result, "other", type$.Environment);
      return _this._raw_config$_$v = _$result;
    }
  };
  A._$PlatformEnvironment.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof A._$PlatformEnvironment && _this.android.$eq(0, other.android) && _this.ios.$eq(0, other.ios) && _this.macOS.$eq(0, other.macOS);
    },
    get$hashCode(_) {
      var t1 = this.android,
        t2 = this.ios,
        t3 = this.macOS;
      return A.$jf(A.$jc(A.$jc(A.$jc(0, t1.get$hashCode(t1)), t2.get$hashCode(t2)), t3.get$hashCode(t3)));
    },
    toString$0(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("PlatformEnvironment"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "android", this.android);
      t2.add$2(t1, "ios", this.ios);
      t2.add$2(t1, "macOS", this.macOS);
      return t2.toString$0(t1);
    }
  };
  A.PlatformEnvironmentBuilder.prototype = {
    get$android() {
      var t1 = this.get$_raw_config$_$this(),
        t2 = t1._android;
      return t2 == null ? t1._android = new A.AndroidEnvironmentBuilder() : t2;
    },
    get$ios() {
      var t1 = this.get$_raw_config$_$this(),
        t2 = t1._ios;
      return t2 == null ? t1._ios = new A.IosEnvironmentBuilder() : t2;
    },
    get$macOS() {
      var t1 = this.get$_raw_config$_$this(),
        t2 = t1._macOS;
      return t2 == null ? t1._macOS = new A.MacOSEnvironmentBuilder() : t2;
    },
    get$_raw_config$_$this() {
      var t1, t2, _this = this, _s5_ = "other",
        $$v = _this._raw_config$_$v;
      if ($$v != null) {
        t1 = $$v.android;
        t2 = new A.AndroidEnvironmentBuilder();
        A.ArgumentError_checkNotNull(t1, _s5_, type$.AndroidEnvironment);
        t2._raw_config$_$v = t1;
        _this._android = t2;
        t2 = $$v.ios;
        t1 = new A.IosEnvironmentBuilder();
        A.ArgumentError_checkNotNull(t2, _s5_, type$.IosEnvironment);
        t1._raw_config$_$v = t2;
        _this._ios = t1;
        t1 = $$v.macOS;
        t2 = new A.MacOSEnvironmentBuilder();
        A.ArgumentError_checkNotNull(t1, _s5_, type$.MacOSEnvironment);
        t2._raw_config$_$v = t1;
        _this._macOS = t2;
        _this._raw_config$_$v = null;
      }
      return _this;
    },
    _raw_config$_build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, exception, _this = this,
        _s19_ = "PlatformEnvironment",
        _$result = null;
      try {
        _$result0 = _this._raw_config$_$v;
        if (_$result0 == null) {
          t1 = _this.get$android()._raw_config$_build$0();
          t2 = _this.get$ios()._raw_config$_build$0();
          t3 = _this.get$macOS()._raw_config$_build$0();
          _$result0 = new A._$PlatformEnvironment(t1, t2, t3);
          A.BuiltValueNullFieldError_checkNotNull(t1, _s19_, "android", type$.AndroidEnvironment);
          A.BuiltValueNullFieldError_checkNotNull(t2, _s19_, "ios", type$.IosEnvironment);
          A.BuiltValueNullFieldError_checkNotNull(t3, _s19_, "macOS", type$.MacOSEnvironment);
        }
        _$result = _$result0;
      } catch (exception) {
        _$failedField = A._Cell$named("_$failedField");
        try {
          _$failedField.__late_helper$_value = "android";
          _this.get$android()._raw_config$_build$0();
          _$failedField.__late_helper$_value = "ios";
          _this.get$ios()._raw_config$_build$0();
          _$failedField.__late_helper$_value = "macOS";
          _this.get$macOS()._raw_config$_build$0();
        } catch (exception) {
          e = A.unwrapException(exception);
          t1 = A.BuiltValueNestedFieldError$(_s19_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw A.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.PlatformEnvironment;
      t2 = t1._as(_$result);
      A.ArgumentError_checkNotNull(t2, "other", t1);
      _this._raw_config$_$v = t2;
      return _$result;
    }
  };
  A._$AndroidEnvironment.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A._$AndroidEnvironment && this.minSdkVersion === other.minSdkVersion;
    },
    get$hashCode(_) {
      return A.$jf(A.$jc(0, B.JSString_methods.get$hashCode(this.minSdkVersion)));
    }
  };
  A.AndroidEnvironmentBuilder.prototype = {
    get$_raw_config$_$this() {
      var _this = this,
        $$v = _this._raw_config$_$v;
      if ($$v != null) {
        _this._minSdkVersion = $$v.minSdkVersion;
        _this._raw_config$_$v = null;
      }
      return _this;
    },
    _raw_config$_build$0() {
      var t1, t2,
        _s18_ = "AndroidEnvironment",
        _s13_ = "minSdkVersion",
        _$result = this._raw_config$_$v;
      if (_$result == null) {
        t1 = type$.String;
        t2 = A.BuiltValueNullFieldError_checkNotNull(this.get$_raw_config$_$this()._minSdkVersion, _s18_, _s13_, t1);
        _$result = new A._$AndroidEnvironment(t2);
        A.BuiltValueNullFieldError_checkNotNull(t2, _s18_, _s13_, t1);
      }
      A.ArgumentError_checkNotNull(_$result, "other", type$.AndroidEnvironment);
      return this._raw_config$_$v = _$result;
    }
  };
  A._$IosEnvironment.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A._$IosEnvironment && this.minOSVersion === other.minOSVersion;
    },
    get$hashCode(_) {
      return A.$jf(A.$jc(0, B.JSString_methods.get$hashCode(this.minOSVersion)));
    }
  };
  A.IosEnvironmentBuilder.prototype = {
    get$_raw_config$_$this() {
      var _this = this,
        $$v = _this._raw_config$_$v;
      if ($$v != null) {
        _this._minOSVersion = $$v.minOSVersion;
        _this._raw_config$_$v = null;
      }
      return _this;
    },
    _raw_config$_build$0() {
      var t1, t2,
        _s14_ = "IosEnvironment",
        _s12_ = "minOSVersion",
        _$result = this._raw_config$_$v;
      if (_$result == null) {
        t1 = type$.String;
        t2 = A.BuiltValueNullFieldError_checkNotNull(this.get$_raw_config$_$this()._minOSVersion, _s14_, _s12_, t1);
        _$result = new A._$IosEnvironment(t2);
        A.BuiltValueNullFieldError_checkNotNull(t2, _s14_, _s12_, t1);
      }
      A.ArgumentError_checkNotNull(_$result, "other", type$.IosEnvironment);
      return this._raw_config$_$v = _$result;
    }
  };
  A._$MacOSEnvironment.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A._$MacOSEnvironment && this.minOSVersion === other.minOSVersion;
    },
    get$hashCode(_) {
      return A.$jf(A.$jc(0, B.JSString_methods.get$hashCode(this.minOSVersion)));
    }
  };
  A.MacOSEnvironmentBuilder.prototype = {
    get$_raw_config$_$this() {
      var _this = this,
        $$v = _this._raw_config$_$v;
      if ($$v != null) {
        _this._minOSVersion = $$v.minOSVersion;
        _this._raw_config$_$v = null;
      }
      return _this;
    },
    _raw_config$_build$0() {
      var t1, t2,
        _s16_ = "MacOSEnvironment",
        _s12_ = "minOSVersion",
        _$result = this._raw_config$_$v;
      if (_$result == null) {
        t1 = type$.String;
        t2 = A.BuiltValueNullFieldError_checkNotNull(this.get$_raw_config$_$this()._minOSVersion, _s16_, _s12_, t1);
        _$result = new A._$MacOSEnvironment(t2);
        A.BuiltValueNullFieldError_checkNotNull(t2, _s16_, _s12_, t1);
      }
      A.ArgumentError_checkNotNull(_$result, "other", type$.MacOSEnvironment);
      return this._raw_config$_$v = _$result;
    }
  };
  A._$GitHubPackageConfig.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      return other instanceof A._$GitHubPackageConfig && this.custom === other.custom;
    },
    get$hashCode(_) {
      return A.$jf(A.$jc(0, B.JSBool_methods.get$hashCode(this.custom)));
    }
  };
  A.GitHubPackageConfigBuilder.prototype = {
    get$_raw_config$_$this() {
      var _this = this,
        $$v = _this._raw_config$_$v;
      if ($$v != null) {
        _this._custom = $$v.custom;
        _this._raw_config$_$v = null;
      }
      return _this;
    }
  };
  A._$RawPubspecConfigFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      return new A.RawPubspecConfig($$checkedConvert.call$1$2("dependencies", new A._$RawPubspecConfigFromJson__closure(), type$.Map_String_Dependency), $$checkedConvert.call$1$2("environment", new A._$RawPubspecConfigFromJson__closure0(), type$.Environment), $$checkedConvert.call$1$2("aft", new A._$RawPubspecConfigFromJson__closure1(), type$.nullable_RawAftConfig));
    },
    $signature: 83
  };
  A._$RawPubspecConfigFromJson__closure.prototype = {
    call$1(v) {
      return v == null ? B.Map_empty2 : A.parseDeps(type$.nullable_Map_dynamic_dynamic._as(v));
    },
    $signature: 22
  };
  A._$RawPubspecConfigFromJson__closure0.prototype = {
    call$1(v) {
      var t1 = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object);
      t1 = $.$get$aftSerializers().deserializeWith$1$2($.$get$_$environmentSerializer(), t1, type$.Environment);
      t1.toString;
      return t1;
    },
    $signature: 85
  };
  A._$RawPubspecConfigFromJson__closure1.prototype = {
    call$1(v) {
      return v == null ? null : A._$RawAftConfigFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object));
    },
    $signature: 86
  };
  A._$RawAftConfigFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_IY4, null);
      return new A.RawAftConfig($$checkedConvert.call$1$2("platforms", new A._$RawAftConfigFromJson__closure(), type$.nullable_PlatformEnvironment), $$checkedConvert.call$1$2("ignore", new A._$RawAftConfigFromJson__closure0(), type$.List_String), $$checkedConvert.call$1$2("components", new A._$RawAftConfigFromJson__closure1(), type$.List_RawAftComponent), $$checkedConvert.call$1$2("scripts", new A._$RawAftConfigFromJson__closure2(), type$.Map_String_AftScript), $$checkedConvert.call$1$2("github", new A._$RawAftConfigFromJson__closure3(), type$.nullable_GitHubPackageConfig));
    },
    $signature: 87
  };
  A._$RawAftConfigFromJson__closure.prototype = {
    call$1(v) {
      var t1;
      if (v == null)
        t1 = null;
      else {
        t1 = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object);
        t1 = $.$get$aftSerializers().deserializeWith$1$2($.$get$_$platformEnvironmentSerializer(), t1, type$.PlatformEnvironment);
        t1.toString;
      }
      return t1;
    },
    $signature: 88
  };
  A._$RawAftConfigFromJson__closure0.prototype = {
    call$1(v) {
      var t1;
      type$.nullable_List_dynamic._as(v);
      if (v == null)
        t1 = null;
      else {
        t1 = J.map$1$1$ax(v, new A._$RawAftConfigFromJson___closure1(), type$.String);
        t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
      }
      return t1 == null ? B.List_empty0 : t1;
    },
    $signature: 55
  };
  A._$RawAftConfigFromJson___closure1.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 19
  };
  A._$RawAftConfigFromJson__closure1.prototype = {
    call$1(v) {
      var t1;
      type$.nullable_List_dynamic._as(v);
      if (v == null)
        t1 = null;
      else {
        t1 = J.map$1$1$ax(v, new A._$RawAftConfigFromJson___closure0(), type$.RawAftComponent);
        t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
      }
      return t1 == null ? B.List_empty3 : t1;
    },
    $signature: 91
  };
  A._$RawAftConfigFromJson___closure0.prototype = {
    call$1(e) {
      return A._$RawAftComponentFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(e), type$.String, type$.nullable_Object));
    },
    $signature: 92
  };
  A._$RawAftConfigFromJson__closure2.prototype = {
    call$1(v) {
      var t1;
      type$.nullable_Map_dynamic_dynamic._as(v);
      t1 = v == null ? null : v.map$2$1(0, new A._$RawAftConfigFromJson___closure(), type$.String, type$.AftScript);
      return t1 == null ? B.Map_empty5 : t1;
    },
    $signature: 93
  };
  A._$RawAftConfigFromJson___closure.prototype = {
    call$2(k, e) {
      return new A.MapEntry(A._asString(k), A._$AftScriptFromJson(A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(e), type$.String, type$.nullable_Object)), type$.MapEntry_String_AftScript);
    },
    $signature: 94
  };
  A._$RawAftConfigFromJson__closure3.prototype = {
    call$1(v) {
      var t1;
      if (v == null)
        t1 = null;
      else {
        t1 = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(v), type$.String, type$.nullable_Object);
        t1 = $.$get$aftSerializers().deserializeWith$1$2($.$get$_$gitHubPackageConfigSerializer(), t1, type$.GitHubPackageConfig);
        t1.toString;
      }
      return t1;
    },
    $signature: 95
  };
  A._$RawAftConfigToJson_closure.prototype = {
    call$1(e) {
      return A._$RawAftComponentToJson(type$.RawAftComponent._as(e));
    },
    $signature: 96
  };
  A._$RawAftConfigToJson_closure0.prototype = {
    call$2(k, e) {
      return new A.MapEntry(A._asString(k), A._$AftScriptToJson(type$.AftScript._as(e)), type$.MapEntry_of_String_and_Map_of_String_and_nullable_Object);
    },
    $signature: 97
  };
  A._$RawAftComponentFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_name_summary_packages_propagate, null);
      return new A.RawAftComponent($$checkedConvert.call$1$2("name", new A._$RawAftComponentFromJson__closure(), type$.String), $$checkedConvert.call$1$2("summary", new A._$RawAftComponentFromJson__closure0(), type$.nullable_String), $$checkedConvert.call$1$2("packages", new A._$RawAftComponentFromJson__closure1(), type$.List_String), $$checkedConvert.call$1$2("propagate", new A._$RawAftComponentFromJson__closure2(), type$.VersionPropagation));
    },
    $signature: 98
  };
  A._$RawAftComponentFromJson__closure.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$RawAftComponentFromJson__closure0.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$RawAftComponentFromJson__closure1.prototype = {
    call$1(v) {
      var t1 = J.map$1$1$ax(type$.List_dynamic._as(v), new A._$RawAftComponentFromJson___closure(), type$.String);
      return A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
    },
    $signature: 55
  };
  A._$RawAftComponentFromJson___closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 19
  };
  A._$RawAftComponentFromJson__closure2.prototype = {
    call$1(v) {
      var t1 = A.$enumDecodeNullable(B.Map_gv0sl, v, type$.VersionPropagation, type$.String);
      return t1 == null ? B.VersionPropagation_1 : t1;
    },
    $signature: 48
  };
  A._$AftScriptFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_Kd3, null);
      return new A.AftScript($$checkedConvert.call$1$2("run", new A._$AftScriptFromJson__closure(), type$.String), $$checkedConvert.call$1$2("description", new A._$AftScriptFromJson__closure0(), type$.nullable_String), $$checkedConvert.call$1$2("from", new A._$AftScriptFromJson__closure1(), type$.PackageSelector), $$checkedConvert.call$1$2("fail-fast", new A._$AftScriptFromJson__closure2(), type$.bool));
    },
    $signature: 100
  };
  A._$AftScriptFromJson__closure.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$AftScriptFromJson__closure0.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$AftScriptFromJson__closure1.prototype = {
    call$1(v) {
      return v == null ? B.C__DevelopmentPackageSelector : B.C_PackageSelectorConverter.fromJson$1(v);
    },
    $signature: 56
  };
  A._$AftScriptFromJson__closure2.prototype = {
    call$1(v) {
      A._asBoolQ(v);
      return v === true;
    },
    $signature: 32
  };
  A._AftScript_Object_AWSSerializable.prototype = {};
  A._AftScript_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._AndroidEnvironment_Object_AWSSerializable.prototype = {};
  A._AndroidEnvironment_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._Environment_Object_AWSSerializable.prototype = {};
  A._Environment_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._GitHubPackageConfig_Object_AWSSerializable.prototype = {};
  A._GitHubPackageConfig_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._IosEnvironment_Object_AWSSerializable.prototype = {};
  A._IosEnvironment_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._MacOSEnvironment_Object_AWSSerializable.prototype = {};
  A._MacOSEnvironment_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._RawAftComponent_Object_AWSSerializable.prototype = {};
  A._RawAftComponent_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A._RawAftConfig_Object_AWSSerializable.prototype = {};
  A._RawAftConfig_Object_AWSSerializable_AWSDebuggable.prototype = {};
  A.JsonSerializer.prototype = {
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return this.fromJson.call$1(type$.Map_of_String_and_nullable_Object._as($.$get$JsonSerializer__jsonPlugin().afterSerialize$2(serialized, specifiedType)));
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    serialize$3$specifiedType(serializers, object, specifiedType) {
      return this.$ti._precomputed1._as(object).toJson$0();
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    get$types() {
      return A._setArrayType([A.createRuntimeType(this.$ti._precomputed1)], type$.JSArray_Type);
    },
    get$wireName() {
      return A.createRuntimeType(this.$ti._precomputed1).toString$0(0);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1
  };
  A.VersionConstraintSerializer.prototype = {
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return this.$ti._precomputed1._as(A.VersionConstraint_VersionConstraint$parse(A._asString(serialized)));
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    serialize$3$specifiedType(serializers, object, specifiedType) {
      return this.$ti._precomputed1._as(object).toString$0(0);
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    get$types() {
      return A._setArrayType([B.Type_Version_MPT, B.Type_VersionConstraint_dvx, B.Type_VersionRange_aqJ], type$.JSArray_Type);
    },
    get$wireName() {
      return "VersionConstraint";
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1
  };
  A._$aftSerializers_closure.prototype = {
    call$0() {
      return A.MapBuilder_MapBuilder(type$.String, type$.PackageInfo);
    },
    $signature: 103
  };
  A._$aftSerializers_closure0.prototype = {
    call$0() {
      return A.MapBuilder_MapBuilder(type$.String, type$.VersionConstraint);
    },
    $signature: 57
  };
  A._$aftSerializers_closure1.prototype = {
    call$0() {
      return A.ListBuilder_ListBuilder(B.List_empty, type$.String);
    },
    $signature: 105
  };
  A._$aftSerializers_closure2.prototype = {
    call$0() {
      return A.MapBuilder_MapBuilder(type$.String, type$.AftComponent);
    },
    $signature: 106
  };
  A._$aftSerializers_closure3.prototype = {
    call$0() {
      return A.MapBuilder_MapBuilder(type$.String, type$.AftScript);
    },
    $signature: 107
  };
  A.Deputy.prototype = {
    _listDependencyGroups$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_Group),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, t5, t6, t7, t8, t9, latestVersion, groups;
      var $async$_listDependencyGroups$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              groups = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.GroupBuilder);
              A.dfs($async$self.repo.getPackageGraph$1$includeDevDependencies(true), new A.Deputy__listDependencyGroups_closure($async$self, groups), type$.PackageInfo);
              t1 = groups.get$values(groups), t2 = A._instanceType(t1), t2 = t2._eval$1("@<1>")._bind$1(t2._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t3 = type$._Future_nullable_Version, t4 = type$.nullable_Version, t5 = type$.Future_nullable_Version, t6 = $async$self.versionResolver, t2 = t2._rest[1];
            case 3:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              t7 = t1.__internal$_current;
              if (t7 == null)
                t7 = t2._as(t7);
              t8 = t7.get$_$this()._packageName;
              t8.toString;
              t8 = t6.latestVersion$1(t8);
              if (!t5._is(t8)) {
                t4._as(t8);
                t9 = new A._Future($.Zone__current, t3);
                t9._state = 8;
                t9._resultOrListeners = t8;
                t8 = t9;
              }
              $async$goto = 5;
              return A._asyncAwait(t8, $async$_listDependencyGroups$0);
            case 5:
              // returning from await.
              latestVersion = $async$result;
              if (latestVersion == null)
                throw A.wrapException(A.StateError$("No version info found for package: " + A.S(t7.get$packageName())));
              t7.get$_$this()._latestVersion = latestVersion;
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              t1 = groups.get$values(groups);
              t2 = A._instanceType(t1);
              t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("Group(Iterable.E)")._as(new A.Deputy__listDependencyGroups_closure0()), t2._eval$1("Iterable.E"), type$.Group);
              $async$returnValue = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("Iterable.E"));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_listDependencyGroups$0, $async$completer);
    },
    _proposeUpdates$1(dependencyGroups) {
      return this._proposeUpdates$body$Deputy(type$.List_Group._as(dependencyGroups));
    },
    _proposeUpdates$body$Deputy(dependencyGroups) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_VersionConstraint),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, t5, t6, t7, _0_0, globalConstraint, t8, updatedGlobalConstraint, value, t9, value0, result, t10, packageName, updatedConstraint, dependencyType, t11, proposedUpdates;
      var $async$_proposeUpdates$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              proposedUpdates = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.VersionConstraint);
              for (t1 = J.get$iterator$ax(dependencyGroups), t2 = $async$self.repo, t3 = t2.aftConfig.allPackages._map$_map, t4 = $async$self.versionResolver, t5 = type$.JSArray_SourceEdit, t6 = type$.YamlNode; t1.moveNext$0();) {
                t7 = t1.get$current();
                _0_0 = t7.globalConstraint;
                if (_0_0 != null) {
                  globalConstraint = _0_0;
                  t8 = true;
                } else {
                  globalConstraint = null;
                  t8 = false;
                }
                if (t8) {
                  t8 = t7.packageName;
                  updatedGlobalConstraint = t4.updateFor$3(t8, globalConstraint, t7.latestVersion);
                  if (updatedGlobalConstraint != null) {
                    proposedUpdates.$indexSet(0, t8, updatedGlobalConstraint);
                    value = t2.__Repo_rootPubspecEditor_FI;
                    if (value === $) {
                      value = t2.__Repo_rootPubspec_FI;
                      if (value === $) {
                        t9 = A.DirectoryX_get_pubspec(t2.get$rootDir());
                        t9.toString;
                        t2.__Repo_rootPubspec_FI !== $ && A.throwLateFieldADI("rootPubspec");
                        t2.__Repo_rootPubspec_FI = t9;
                        value = t9;
                      }
                      value0 = value.__PubspecInfo_pubspecYamlEditor_FI;
                      if (value0 === $) {
                        t9 = value.pubspecYaml;
                        result = new A.YamlEditor(A._setArrayType([], t5), t9, A.loadYamlDocument(t9, null, false, null).contents, A.LinkedHashSet_LinkedHashSet$_empty(t6));
                        result._initialize$0();
                        value.__PubspecInfo_pubspecYamlEditor_FI !== $ && A.throwLateFieldADI("pubspecYamlEditor");
                        value.__PubspecInfo_pubspecYamlEditor_FI = result;
                        value = result;
                      } else
                        value = value0;
                      t2.__Repo_rootPubspecEditor_FI !== $ && A.throwLateFieldADI("rootPubspecEditor");
                      value = t2.__Repo_rootPubspecEditor_FI = value;
                    }
                    value.update$2(["dependencies", t8], updatedGlobalConstraint.toString$0(0));
                  }
                }
                for (t8 = t7.dependentPackages._map$_map, t8 = t8.get$entries(t8), t8 = t8.get$iterator(t8), t9 = t7.packageName, t7 = t7.latestVersion; t8.moveNext$0();) {
                  t10 = t8.get$current();
                  packageName = t10.key;
                  updatedConstraint = t4.updateFor$3(t9, t10.value, t7);
                  if (updatedConstraint == null)
                    continue;
                  t10 = t3.$index(0, packageName);
                  t10.toString;
                  t10 = t10.pubspecInfo;
                  dependencyType = t10.pubspec.dependencies.containsKey$1(t9) ? B.DependencyType_dependencies_0_dependency : B.DependencyType_dev_dependencies_1_devDependency;
                  if (proposedUpdates.$index(0, t9) == null)
                    proposedUpdates.$indexSet(0, t9, updatedConstraint);
                  value = t10.__PubspecInfo_pubspecYamlEditor_FI;
                  if (value === $) {
                    t11 = t10.pubspecYaml;
                    result = new A.YamlEditor(A._setArrayType([], t5), t11, A.loadYamlDocument(t11, null, false, null).contents, A.LinkedHashSet_LinkedHashSet$_empty(t6));
                    result._initialize$0();
                    t10.__PubspecInfo_pubspecYamlEditor_FI !== $ && A.throwLateFieldADI("pubspecYamlEditor");
                    t10.__PubspecInfo_pubspecYamlEditor_FI = result;
                    value = result;
                  }
                  value.update$2([dependencyType.key, t9], updatedConstraint.toString$0(0));
                }
              }
              $async$returnValue = proposedUpdates;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_proposeUpdates$1, $async$completer);
    },
    _commitUpdates$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t2, t3, t4, t5, t6, t7, t8, value, t9, result, _i, t10, t11, t1;
      var $async$_commitUpdates$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A._setArrayType([], type$.JSArray_Record_2_String_and_YamlEditor);
              for (t2 = $async$self.repo, t3 = t2.aftConfig.allPackages._map$_map, t3 = t3.get$values(t3), t3 = t3.get$iterator(t3), t4 = type$.SourceEdit, t5 = type$.JSArray_SourceEdit, t6 = type$.YamlNode; t3.moveNext$0();) {
                t7 = t3.get$current();
                t8 = t7.pubspecInfo;
                value = t8.__PubspecInfo_pubspecYamlEditor_FI;
                if (value === $) {
                  t9 = t8.pubspecYaml;
                  result = new A.YamlEditor(A._setArrayType([], t5), t9, A.loadYamlDocument(t9, null, false, null).contents, A.LinkedHashSet_LinkedHashSet$_empty(t6));
                  result._initialize$0();
                  t8.__PubspecInfo_pubspecYamlEditor_FI !== $ && A.throwLateFieldADI("pubspecYamlEditor");
                  t8.__PubspecInfo_pubspecYamlEditor_FI = result;
                  value = result;
                }
                t8 = A.List_List$of(value._edits, true, t4).length;
                if (t8 !== 0)
                  t1.push(new A._Record_2(t7.path, value));
              }
              if (A.List_List$of(t2.get$rootPubspecEditor()._edits, true, t4).length !== 0)
                t1.push(new A._Record_2(A._Uri__Uri$file(t2.get$rootDir().path, $.$get$Platform_isWindows()).toFilePath$0(), t2.get$rootPubspecEditor()));
              t3 = t1.length;
              if (t3 === 0) {
                // goto return
                $async$goto = 1;
                break;
              }
              for (t4 = type$.Path, t5 = type$.FS, t2 = t2.fileSystem, t6 = type$.nullable_FS, t7 = type$.nullable_Path, _i = 0; _i < t1.length; t1.length === t3 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
                t8 = t1[_i];
                t9 = A.join(t2.getPath$1(t8._0), "pubspec.yaml");
                if (A.FileStat_statSync(t9).type !== B.FileSystemEntityType_0)
                  throw A.wrapException(A.StateError$("Expected pubspec at: " + t9));
                t8 = t8._1._yaml;
                t10 = $._fs;
                t10 = t5._as(t10 == null ? $._fs = t6._as(self.require("fs")) : t10);
                t11 = $._path;
                J.writeFileSync$2$x(t10, J.resolve$1$x(t4._as(t11 == null ? $._path = t7._as(self.require("path")) : t11), t9), t8);
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_commitUpdates$0, $async$completer);
    },
    scanAndUpdate$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Map_String_VersionConstraint),
        $async$returnValue, $async$self = this, updates;
      var $async$scanAndUpdate$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 4;
              return A._asyncAwait($async$self._listDependencyGroups$0(), $async$scanAndUpdate$0);
            case 4:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait($async$self._proposeUpdates$1($async$result), $async$scanAndUpdate$0);
            case 3:
              // returning from await.
              updates = $async$result;
              if (updates.get$isEmpty(updates)) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 5;
              return A._asyncAwait($async$self._commitUpdates$0(), $async$scanAndUpdate$0);
            case 5:
              // returning from await.
              $async$returnValue = updates;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$scanAndUpdate$0, $async$completer);
    }
  };
  A.Deputy__listDependencyGroups_closure.prototype = {
    call$1($package) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _0_2, dependency, version, t9;
      type$.PackageInfo._as($package);
      t1 = $package.pubspecInfo.pubspec;
      t2 = A.LinkedHashMap_LinkedHashMap$of(t1.dependencies, type$.String, type$.Dependency);
      t2.addAll$1(0, t1.devDependencies);
      t1 = this.$this;
      t2.removeWhere$1(0, new A.Deputy__listDependencyGroups__closure(t1));
      for (t2 = t2.get$entries(t2), t2 = t2.get$iterator(t2), t3 = $package.name, t1 = t1.repo.aftConfig.dependencies._map$_map, t4 = type$.nullable_VersionConstraint, t5 = this.groups, t6 = type$.HostedDependency, t7 = type$.MapBuilder_String_VersionConstraint; t2.moveNext$0();) {
        t8 = t2.get$current();
        _0_2 = A._InitializedCell$named("#0#2", new A.Deputy__listDependencyGroups__closure0(t8));
        dependency = t8.key;
        t6._as(_0_2._readFinal$0());
        version = t6._as(_0_2._readFinal$0()).version;
        if (version.$eq(0, $.$get$VersionConstraint_any()))
          continue;
        t8 = t5.$index(0, dependency);
        if (t8 == null) {
          t8 = new A.GroupBuilder();
          t5.$indexSet(0, dependency, t8);
        }
        t8.get$_$this()._packageName = dependency;
        t9 = t4._as(t1.$index(0, dependency));
        t8.get$_$this()._globalConstraint = t9;
        t8 = t8.get$_$this();
        t9 = t8._dependentPackages;
        if (t9 == null) {
          t9 = new A.MapBuilder(null, $, null, t7);
          t9.replace$1(B.Map_empty3);
          t8.set$_dependentPackages(t9);
          t8 = t9;
        } else
          t8 = t9;
        t9 = t8.$ti;
        t9._precomputed1._as(t3);
        t9._rest[1]._as(version);
        t8._checkKey$1(t3);
        t8._checkValue$1(version);
        t8.get$_safeMap().$indexSet(0, t3, version);
      }
    },
    $signature: 109
  };
  A.Deputy__listDependencyGroups__closure.prototype = {
    call$2(pkg, dep) {
      A._asString(pkg);
      type$.Dependency._as(dep);
      return this.$this.repo.aftConfig.allPackages._map$_map.containsKey$1(pkg) || !(dep instanceof A.HostedDependency);
    },
    $signature: 77
  };
  A.Deputy__listDependencyGroups__closure0.prototype = {
    call$0() {
      return this._0_0.value;
    },
    $signature: 27
  };
  A.Deputy__listDependencyGroups_closure0.prototype = {
    call$1(group) {
      return type$.GroupBuilder._as(group)._build$0();
    },
    $signature: 111
  };
  A.Group.prototype = {
    toJson$0() {
      return type$.Map_of_String_and_nullable_Object._as($.$get$_serializers().serializeWith$1$2($.$get$_$groupSerializer(), this, type$.Group));
    }
  };
  A._$_serializers_closure.prototype = {
    call$0() {
      return A.MapBuilder_MapBuilder(type$.String, type$.VersionConstraint);
    },
    $signature: 57
  };
  A._$GroupSerializer.prototype = {
    serialize$3$specifiedType(serializers, object, specifiedType) {
      var result, value;
      type$.Group._as(object);
      result = ["packageName", serializers.serialize$2$specifiedType(object.packageName, B.FullType_h8g), "latestVersion", serializers.serialize$2$specifiedType(object.latestVersion, B.FullType_NWH), "dependentPackages", serializers.serialize$2$specifiedType(object.dependentPackages, B.FullType_0)];
      value = object.globalConstraint;
      if (value != null) {
        result.push("globalConstraint");
        result.push(serializers.serialize$2$specifiedType(value, B.FullType_0AN));
      }
      return result;
    },
    serialize$2(serializers, object) {
      return this.serialize$3$specifiedType(serializers, object, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1, t2, t3, t4, value, t5,
        result = new A.GroupBuilder(),
        iterator = J.get$iterator$ax(type$.Iterable_nullable_Object._as(serialized));
      for (t1 = type$.MapBuilder_String_VersionConstraint, t2 = type$.nullable_VersionConstraint, t3 = type$.Version; iterator.moveNext$0();) {
        t4 = iterator.get$current();
        t4.toString;
        A._asString(t4);
        iterator.moveNext$0();
        value = iterator.get$current();
        switch (t4) {
          case "packageName":
            t4 = serializers.deserialize$2$specifiedType(value, B.FullType_h8g);
            t4.toString;
            A._asString(t4);
            result.get$_$this()._packageName = t4;
            break;
          case "latestVersion":
            t4 = serializers.deserialize$2$specifiedType(value, B.FullType_NWH);
            t4.toString;
            t3._as(t4);
            result.get$_$this()._latestVersion = t4;
            break;
          case "globalConstraint":
            t4 = t2._as(serializers.deserialize$2$specifiedType(value, B.FullType_0AN));
            result.get$_$this()._globalConstraint = t4;
            break;
          case "dependentPackages":
            t4 = result.get$_$this();
            t5 = t4._dependentPackages;
            if (t5 == null) {
              t5 = new A.MapBuilder(null, $, null, t1);
              t5.replace$1(B.Map_empty3);
              t4.set$_dependentPackages(t5);
              t4 = t5;
            } else
              t4 = t5;
            t5 = serializers.deserialize$2$specifiedType(value, B.FullType_0);
            t5.toString;
            t4.replace$1(t5);
            break;
        }
      }
      return result._build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return B.List_6dc;
    },
    get$wireName() {
      return "Group";
    }
  };
  A._$Group.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof A._$Group && _this.packageName === other.packageName && _this.latestVersion.$eq(0, other.latestVersion) && J.$eq$(_this.globalConstraint, other.globalConstraint) && _this.dependentPackages.$eq(0, other.dependentPackages);
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.latestVersion,
        t2 = _this.dependentPackages;
      return A.$jf(A.$jc(A.$jc(A.$jc(A.$jc(0, B.JSString_methods.get$hashCode(_this.packageName)), t1.get$hashCode(t1)), J.get$hashCode$(_this.globalConstraint)), t2.get$hashCode(t2)));
    },
    toString$0(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("Group"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "packageName", _this.packageName);
      t2.add$2(t1, "latestVersion", _this.latestVersion);
      t2.add$2(t1, "globalConstraint", _this.globalConstraint);
      t2.add$2(t1, "dependentPackages", _this.dependentPackages);
      return t2.toString$0(t1);
    }
  };
  A.GroupBuilder.prototype = {
    get$packageName() {
      return this.get$_$this()._packageName;
    },
    get$dependentPackages() {
      var t1 = this.get$_$this(),
        t2 = t1._dependentPackages;
      if (t2 == null) {
        t2 = A.MapBuilder_MapBuilder(type$.String, type$.VersionConstraint);
        t1.set$_dependentPackages(t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    get$_$this() {
      var t1, t2, _this = this,
        $$v = _this._$v;
      if ($$v != null) {
        _this._packageName = $$v.packageName;
        _this._latestVersion = $$v.latestVersion;
        _this._globalConstraint = $$v.globalConstraint;
        t1 = $$v.dependentPackages;
        t2 = t1.$ti;
        t2._eval$1("_BuiltMap<1,2>")._as(t1);
        _this.set$_dependentPackages(new A.MapBuilder(t1._mapFactory, t1._map$_map, t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("MapBuilder<1,2>")));
        _this._$v = null;
      }
      return _this;
    },
    _build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, t4, t5, t6, exception, _this = this, _s5_ = "Group",
        _s11_ = "packageName",
        _s13_ = "latestVersion",
        _s17_ = "dependentPackages",
        _$result = null;
      try {
        _$result0 = _this._$v;
        if (_$result0 == null) {
          t1 = type$.String;
          t2 = A.BuiltValueNullFieldError_checkNotNull(_this.get$_$this()._packageName, _s5_, _s11_, t1);
          t3 = type$.Version;
          t4 = A.BuiltValueNullFieldError_checkNotNull(_this.get$_$this()._latestVersion, _s5_, _s13_, t3);
          t5 = _this.get$_$this()._globalConstraint;
          t6 = _this.get$dependentPackages().build$0();
          _$result0 = new A._$Group(t2, t4, t5, t6);
          A.BuiltValueNullFieldError_checkNotNull(t2, _s5_, _s11_, t1);
          A.BuiltValueNullFieldError_checkNotNull(t4, _s5_, _s13_, t3);
          A.BuiltValueNullFieldError_checkNotNull(t6, _s5_, _s17_, type$.BuiltMap_String_VersionConstraint);
        }
        _$result = _$result0;
      } catch (exception) {
        _$failedField = A._Cell$named("_$failedField");
        try {
          _$failedField.__late_helper$_value = _s17_;
          _this.get$dependentPackages().build$0();
        } catch (exception) {
          e = A.unwrapException(exception);
          t1 = A.BuiltValueNestedFieldError$(_s5_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw A.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.Group;
      t2 = t1._as(_$result);
      A.ArgumentError_checkNotNull(t2, "other", t1);
      _this._$v = t2;
      return _$result;
    },
    set$_dependentPackages(_dependentPackages) {
      this._dependentPackages = type$.nullable_MapBuilder_String_VersionConstraint._as(_dependentPackages);
    }
  };
  A._Group_Object_AWSSerializable.prototype = {};
  A.GitDir.prototype = {
    runCommand$1(args) {
      return A.RunGit_runGit(this.processManager, type$.List_String._as(args), this.path, true);
    }
  };
  A.RunGit__throwIfProcessFailed_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return A._asString(v).length === 0;
    },
    $signature: 59
  };
  A.RunGit__throwIfProcessFailed_closure0.prototype = {
    call$1(e) {
      type$.MapEntry_String_String._as(e);
      return A.S(e.key) + "\n" + A.S(e.value);
    },
    $signature: 113
  };
  A.PackageFlavor.prototype = {
    _enumToString$0() {
      return "PackageFlavor." + this._core$_name;
    }
  };
  A.PubVersionInfo.prototype = {
    get$latestVersion() {
      var t1 = this.allVersions,
        t2 = A._arrayInstanceType(t1);
      return A.IterableExtension_get_lastOrNull(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.PubVersionInfo_latestVersion_closure()), t2._eval$1("WhereIterable<1>")), type$.Version);
    },
    get$latestPrerelease() {
      var t1 = this.allVersions,
        t2 = A._arrayInstanceType(t1);
      return A.IterableExtension_get_lastOrNull(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.PubVersionInfo_latestPrerelease_closure()), t2._eval$1("WhereIterable<1>")), type$.Version);
    }
  };
  A.PubVersionInfo_latestVersion_closure.prototype = {
    call$1(version) {
      return type$.Version._as(version).preRelease.length === 0;
    },
    $signature: 60
  };
  A.PubVersionInfo_latestPrerelease_closure.prototype = {
    call$1(version) {
      return type$.Version._as(version).preRelease.length !== 0;
    },
    $signature: 60
  };
  A.DependencyType.prototype = {
    _enumToString$0() {
      return "DependencyType." + this._core$_name;
    }
  };
  A.Repo.prototype = {
    get$rootDir() {
      var t1, _this = this,
        value = _this.__Repo_rootDir_FI;
      if (value === $) {
        t1 = _this.fileSystem.getPath$1(_this.aftConfig.rootDirectory);
        _this.__Repo_rootDir_FI !== $ && A.throwLateFieldADI("rootDir");
        value = _this.__Repo_rootDir_FI = new A.Directory(t1);
      }
      return value;
    },
    get$rootPubspecEditor() {
      var t1, result, _this = this,
        value = _this.__Repo_rootPubspecEditor_FI;
      if (value === $) {
        value = _this.__Repo_rootPubspec_FI;
        if (value === $) {
          t1 = A.DirectoryX_get_pubspec(_this.get$rootDir());
          t1.toString;
          _this.__Repo_rootPubspec_FI !== $ && A.throwLateFieldADI("rootPubspec");
          _this.__Repo_rootPubspec_FI = t1;
          value = t1;
        }
        result = value.get$pubspecYamlEditor();
        _this.__Repo_rootPubspecEditor_FI !== $ && A.throwLateFieldADI("rootPubspecEditor");
        _this.__Repo_rootPubspecEditor_FI = result;
        value = result;
      }
      return value;
    },
    getPackageGraph$1$includeDevDependencies(includeDevDependencies) {
      var t2, t3, t4, t5, t6, t7, t8,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.PackageInfo, type$.List_PackageInfo);
      for (t2 = this.aftConfig.allPackages._map$_map, t2 = t2.get$values(t2), t2 = t2.get$iterator(t2), t3 = type$.WhereTypeIterable_PackageInfo, t4 = t3._eval$1("Iterable.E"), t5 = type$.String; t2.moveNext$0();) {
        t6 = t2.get$current();
        t7 = t6.pubspecInfo.pubspec;
        t8 = t7.dependencies;
        t8 = A.List_List$of(t8.get$keys(t8), true, t5);
        t7 = t7.devDependencies;
        B.JSArray_methods.addAll$1(t8, t7.get$keys(t7));
        t7 = A._arrayInstanceType(t8);
        t1.$indexSet(0, t6, A.List_List$of(new A.WhereTypeIterable(new A.MappedListIterable(t8, t7._eval$1("PackageInfo?(1)")._as(new A.Repo_getPackageGraph_closure(this)), t7._eval$1("MappedListIterable<1,PackageInfo?>")), t3), true, t4));
      }
      return new A.UnmodifiableMapView(t1, type$.UnmodifiableMapView_of_PackageInfo_and_List_PackageInfo);
    }
  };
  A.Repo_getPackageGraph_closure.prototype = {
    call$1(packageName) {
      return this.$this.aftConfig.allPackages._map$_map.$index(0, A._asString(packageName));
    },
    $signature: 28
  };
  A.dfs_search.prototype = {
    call$2(node, edges) {
      var t2, t3, edge, t4, _this = this,
        t1 = _this.Node;
      t1._as(node);
      t1._eval$1("List<0>")._as(edges);
      t1 = _this.visited;
      t1.add$1(0, node);
      _this.visit.call$1(node);
      for (t2 = J.get$iterator$ax(edges), t3 = _this.graph._map; t2.moveNext$0();) {
        edge = t2.get$current();
        if (!t1.contains$1(0, edge)) {
          t4 = t3.$index(0, edge);
          t4.toString;
          _this.call$2(edge, t4);
        }
      }
    },
    $signature() {
      return this.Node._eval$1("~(0,List<0>)");
    }
  };
  A.VersionResolver.prototype = {
    updateFor$3($package, currentConstraint, latestVersion) {
      var lowerBound, includeLowerBound, upperBound, includeUpperBound, isBreakingChange, t1, _0_4, _1_0, _1_1, _1_3, _1_4, _1_6, _1_8, _1_12, _1_14, t2, t3, _null = null,
        _s29_ = "Breaking change detected for ",
        _s22_ = " (current constraint: ";
      if (currentConstraint instanceof A.Version) {
        if (latestVersion.$eq(0, currentConstraint))
          return _null;
        if (latestVersion.compareTo$1(0, currentConstraint.get$nextBreaking()) >= 0 && true) {
          this.logger.warn$1(0, _s29_ + $package + ": " + latestVersion.toString$0(0) + _s22_ + currentConstraint.toString$0(0) + ")");
          return _null;
        }
        return latestVersion;
      }
      type$.VersionRange._as(currentConstraint);
      lowerBound = currentConstraint.get$min();
      includeLowerBound = currentConstraint.get$includeMin();
      upperBound = currentConstraint.get$max();
      includeUpperBound = currentConstraint.get$includeMax();
      if (lowerBound == null || upperBound == null)
        throw A.wrapException(A.ArgumentError$value(lowerBound, "lowerBound", "Constaints without a lower or upper bound are not supported"));
      if (includeUpperBound ? latestVersion.compareTo$1(0, upperBound) <= 0 : latestVersion.compareTo$1(0, upperBound) < 0)
        return _null;
      isBreakingChange = latestVersion.compareTo$1(0, upperBound.get$nextBreaking()) >= 0;
      if (isBreakingChange && true) {
        this.logger.warn$1(0, _s29_ + $package + ": " + latestVersion.toString$0(0) + _s22_ + currentConstraint.toString$0(0) + ")");
        return _null;
      }
      if (currentConstraint.$eq(0, A.CompatibleWithVersionRange$(lowerBound)))
        return A.CompatibleWithVersionRange$(latestVersion);
      t1 = upperBound.major - lowerBound.major;
      _0_4 = A._InitializedCell$named("#0#4", new A.VersionResolver_updateFor_closure(new A._Record_2(t1, upperBound.minor - lowerBound.minor)));
      $label0$0: {
        if (t1 > 0) {
          t1 = B._VersionWindow_3;
          break $label0$0;
        }
        if (1 === _0_4._readFinal$0()) {
          t1 = B._VersionWindow_1;
          break $label0$0;
        }
        t1 = _0_4._readFinal$0();
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 1) {
          t1 = B._VersionWindow_2;
          break $label0$0;
        }
        t1 = B._VersionWindow_0;
        break $label0$0;
      }
      _1_0 = new A._Record_2_isBreaking(t1, isBreakingChange);
      _1_1 = A._InitializedCell$named("#1#1", new A.VersionResolver_updateFor_closure0(_1_0));
      _1_3 = A._InitializedCell$named("#1#3", new A.VersionResolver_updateFor_closure1(_1_1));
      _1_4 = A._InitializedCell$named("#1#4", new A.VersionResolver_updateFor_closure2(_1_0));
      _1_6 = A._InitializedCell$named("#1#6", new A.VersionResolver_updateFor_closure3(_1_4));
      _1_8 = A._InitializedCell$named("#1#8", new A.VersionResolver_updateFor_closure4(_1_4));
      _1_12 = A._InitializedCell$named("#1#12", new A.VersionResolver_updateFor_closure5(_1_1));
      _1_14 = A._InitializedCell$named("#1#14", new A.VersionResolver_updateFor_closure6(_1_1));
      if (A.boolConversionCheck(_1_3._readFinal$0()) && A.boolConversionCheck(_1_6._readFinal$0()))
        return A.VersionRange_VersionRange(false, includeUpperBound, includeLowerBound, A.Version_Version(latestVersion.major + 1, 0, 0, _null), lowerBound);
      if (A.boolConversionCheck(_1_3._readFinal$0()) && A.boolConversionCheck(_1_8._readFinal$0()))
        return A.VersionRange_VersionRange(false, includeUpperBound, includeLowerBound, latestVersion, lowerBound);
      if (B._VersionWindow_1 === _1_1._readFinal$0()) {
        t1 = latestVersion.major;
        t2 = latestVersion.minor;
        t3 = A.Version_Version(t1, t2, 0, _null);
        return A.VersionRange_VersionRange(false, includeUpperBound, includeLowerBound, A.Version_Version(t1, t2 + 1, 0, _null), t3);
      }
      if (A.boolConversionCheck(_1_12._readFinal$0()) && A.boolConversionCheck(_1_6._readFinal$0())) {
        t1 = latestVersion.major;
        t2 = A.Version_Version(t1, 0, 0, _null);
        return A.VersionRange_VersionRange(false, includeUpperBound, includeLowerBound, A.Version_Version(t1, latestVersion.minor + 1, 0, _null), t2);
      }
      if (A.boolConversionCheck(_1_12._readFinal$0()) && A.boolConversionCheck(_1_8._readFinal$0()))
        return A.VersionRange_VersionRange(false, includeUpperBound, includeLowerBound, latestVersion, lowerBound);
      if (A.boolConversionCheck(_1_14._readFinal$0()) && A.boolConversionCheck(_1_6._readFinal$0()))
        return A.VersionRange_VersionRange(false, true, true, latestVersion, latestVersion);
      if (A.boolConversionCheck(_1_14._readFinal$0()) && A.boolConversionCheck(_1_8._readFinal$0()))
        return A.VersionRange_VersionRange(false, true, includeLowerBound, latestVersion, lowerBound);
    }
  };
  A.VersionResolver_updateFor_closure.prototype = {
    call$0() {
      return this._0_0._1;
    },
    $signature: 33
  };
  A.VersionResolver_updateFor_closure0.prototype = {
    call$0() {
      return this._1_0._0;
    },
    $signature: 116
  };
  A.VersionResolver_updateFor_closure1.prototype = {
    call$0() {
      return B._VersionWindow_3 === this._1_1._readFinal$0();
    },
    $signature: 15
  };
  A.VersionResolver_updateFor_closure2.prototype = {
    call$0() {
      return this._1_0._1;
    },
    $signature: 15
  };
  A.VersionResolver_updateFor_closure3.prototype = {
    call$0() {
      return true === this._1_4._readFinal$0();
    },
    $signature: 15
  };
  A.VersionResolver_updateFor_closure4.prototype = {
    call$0() {
      return false === this._1_4._readFinal$0();
    },
    $signature: 15
  };
  A.VersionResolver_updateFor_closure5.prototype = {
    call$0() {
      return B._VersionWindow_2 === this._1_1._readFinal$0();
    },
    $signature: 15
  };
  A.VersionResolver_updateFor_closure6.prototype = {
    call$0() {
      return B._VersionWindow_0 === this._1_1._readFinal$0();
    },
    $signature: 15
  };
  A.PubVersionResolver.prototype = {
    _resolveVersionInfo$1($package) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_PubVersionInfo),
        $async$returnValue, $async$self = this, body, versions, semvers, semver, uri, t1, t2, t3, t4, t5, t6, t7, request, resp;
      var $async$_resolveVersionInfo$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              uri = A.Uri_parse("https://pub.dev/api/packages/" + $package);
              t1 = uri.get$scheme();
              t2 = uri.get$host(uri);
              t3 = uri.get$hasPort() ? uri.get$port(uri) : null;
              t4 = uri.get$path(uri);
              t5 = uri.get$hasQuery() ? uri.get$queryParametersAll() : null;
              t6 = type$.String;
              t7 = A.CaseInsensitiveMap$(B.Map_6pV0v, t6);
              request = new A.AWSHttpRequest(B.List_empty1, B.AWSHttpMethod_0, t1, t2, t3, t4, t5, t7, true, 5);
              $async$goto = 3;
              return A._asyncAwait(request.send$0(0).get$response(), $async$_resolveVersionInfo$1);
            case 3:
              // returning from await.
              resp = $async$result;
              t1 = B.Utf8Codec_false.decodeStream$1(resp._splitter == null ? resp._aws_http_response$_body : resp.split$0(0));
              $async$goto = 4;
              return A._asyncAwait(type$.Future_String._is(t1) ? t1 : A._Future$value(A._asString(t1), t6), $async$_resolveVersionInfo$1);
            case 4:
              // returning from await.
              body = $async$result;
              t1 = resp.statusCode;
              if (t1 === 404) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              if (t1 !== 200)
                throw A.wrapException(A.AWSHttpException_AWSHttpException(request, body));
              versions = type$.nullable_List_nullable_Object._as(type$.Map_of_String_and_nullable_Object._as(B.C_JsonCodec.decode$2$reviver(body, null)).$index(0, "versions"));
              if (versions == null)
                versions = [];
              semvers = A._setArrayType([], type$.JSArray_Version);
              for (t1 = J.get$iterator$ax(versions), t2 = type$.Map_dynamic_dynamic, t3 = type$.nullable_Object; t1.moveNext$0();) {
                semver = A._asStringQ(t2._as(t1.get$current()).cast$2$0(0, t6, t3).$index(0, "version"));
                if (semver == null)
                  continue;
                B.JSArray_methods.add$1(semvers, A.Version_Version$parse(semver));
              }
              B.JSArray_methods.sort$0(semvers);
              t1 = new A.PubVersionInfo(semvers);
              $async$self._cache.$indexSet(0, $package, t1);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_resolveVersionInfo$1, $async$completer);
    },
    latestVersion$1($package) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Version),
        $async$returnValue, $async$self = this, t2, _0_0, latestPrerelease, t3, _1_0, latestVersion, t1, versionInfo;
      var $async$latestVersion$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._cache;
              versionInfo = t1.$index(0, $package);
              $async$goto = versionInfo == null && !t1.containsKey$1($package) ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait($async$self._resolveVersionInfo$1($package), $async$latestVersion$1);
            case 5:
              // returning from await.
              versionInfo = $async$result;
            case 4:
              // join
              t1 = A._setArrayType([], type$.JSArray_Version);
              t2 = versionInfo == null;
              _0_0 = t2 ? null : versionInfo.get$latestPrerelease();
              if (_0_0 != null) {
                latestPrerelease = _0_0;
                t3 = true;
              } else {
                latestPrerelease = null;
                t3 = false;
              }
              if (t3)
                t1.push(latestPrerelease);
              _1_0 = t2 ? null : versionInfo.get$latestVersion();
              if (_1_0 != null) {
                latestVersion = _1_0;
                t2 = true;
              } else {
                latestVersion = null;
                t2 = false;
              }
              if (t2)
                t1.push(latestVersion);
              t2 = type$.Version;
              $async$returnValue = A.maxBy(t1, new A.PubVersionResolver_latestVersion_closure(), t2, t2);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$latestVersion$1, $async$completer);
    }
  };
  A.PubVersionResolver_latestVersion_closure.prototype = {
    call$1(v) {
      return type$.Version._as(v);
    },
    $signature: 118
  };
  A._VersionWindow.prototype = {
    _enumToString$0() {
      return "_VersionWindow." + this._core$_name;
    }
  };
  A.AsyncMemoizer.prototype = {};
  A.collectBytes_closure.prototype = {
    call$2(_, result) {
      type$.StreamSubscription_List_int._as(_);
      return type$.Future_Uint8List._as(result);
    },
    $signature: 119
  };
  A._collectBytes_closure.prototype = {
    call$0() {
      this.completer.complete$1(this.bytes.takeBytes$0());
    },
    $signature: 0
  };
  A.CancelableOperation.prototype = {
    valueOrCancellation$0() {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        t3 = new A._Future(t2, t1._eval$1("_Future<1?>")),
        completer = new A._SyncCompleter(t3, t1._eval$1("_SyncCompleter<1?>")),
        t4 = this._cancelable_operation$_completer,
        t5 = t4._inner;
      t5 = t5 == null ? null : t5.future;
      t2 = t5 == null ? new A._Future(t2, t1._eval$1("_Future<1>")) : t5;
      t5 = completer.get$completeError();
      t2.then$1$2$onError(0, t1._eval$1("~([1?/])")._as(completer.get$complete()), t5, type$.void);
      t4 = t4._cancelCompleter;
      if (t4 != null)
        t4.future.then$1$2$onError(0, new A.CancelableOperation_valueOrCancellation_closure(completer, null), t5, type$.Null);
      return t3;
    },
    then$1$2$onError(_, onValue, onError, $R) {
      this.$ti._bind$1($R)._eval$1("1/(2)")._as(onValue);
      $R._eval$1("0/(Object,StackTrace)?")._as(onError);
      return this.thenOperation$1$4$onCancel$onError$propagateCancel(new A.CancelableOperation_then_closure(this, onValue, $R), null, new A.CancelableOperation_then_closure0(onError, $R), true, $R);
    },
    thenOperation$1$4$onCancel$onError$propagateCancel(onValue, onCancel, onError, propagateCancel, $R) {
      var completer, t1, t2, t3, _this = this;
      _this.$ti._bind$1($R)._eval$1("~(2,CancelableCompleter<1>)")._as(onValue);
      $R._eval$1("~(Object,StackTrace,CancelableCompleter<0>)?")._as(onError);
      $R._eval$1("~(CancelableCompleter<0>)?")._as(onCancel);
      completer = A.CancelableCompleter$(_this.get$cancel(_this), $R);
      t1 = _this._cancelable_operation$_completer;
      t2 = t1._inner;
      if (t2 != null) {
        t2 = t2.future;
        t3 = onError == null ? completer.get$completeError() : new A.CancelableOperation_thenOperation_closure(completer, onError);
        t2.then$1$2$onError(0, new A.CancelableOperation_thenOperation_closure0(_this, completer, onValue), t3, type$.void);
      }
      t1 = t1._cancelCompleter;
      if (t1 != null) {
        t1 = t1.future;
        t1.whenComplete$1(onCancel == null ? completer.get$_cancelable_operation$_cancel() : new A.CancelableOperation_thenOperation_closure1(completer, onCancel));
      }
      return completer.get$operation();
    },
    cancel$0(_) {
      return this._cancelable_operation$_completer._cancelable_operation$_cancel$0();
    }
  };
  A.CancelableOperation_valueOrCancellation_closure.prototype = {
    call$1(_) {
      this.completer.complete$1(this.cancellationValue);
    },
    $signature: 35
  };
  A.CancelableOperation_then_closure.prototype = {
    call$2(value, completer) {
      this.$this.$ti._precomputed1._as(value);
      this.R._eval$1("CancelableCompleter<0>")._as(completer).complete$1(this.onValue.call$1(value));
    },
    $signature() {
      return this.$this.$ti._bind$1(this.R)._eval$1("Null(2,CancelableCompleter<1>)");
    }
  };
  A.CancelableOperation_then_closure0.prototype = {
    call$3(error, stackTrace, completer) {
      this.R._eval$1("CancelableCompleter<0>")._as(completer).complete$1(this.onError.call$2(error, stackTrace));
    },
    $signature() {
      return this.R._eval$1("Null(Object,StackTrace,CancelableCompleter<0>)");
    }
  };
  A.CancelableOperation_thenOperation_closure0.prototype = {
    call$1(value) {
      return this.$call$body$CancelableOperation_thenOperation_closure(this.$this.$ti._precomputed1._as(value));
    },
    $call$body$CancelableOperation_thenOperation_closure(value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, error, stack, t2, exception, t1, $async$exception;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.completer;
              if (t1._inner == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              t2 = $async$self.onValue.call$2(value, t1);
              $async$goto = 7;
              return A._asyncAwait(t2 instanceof A._Future ? t2 : A._Future$value(t2, type$.void), $async$call$1);
            case 7:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              error = A.unwrapException($async$exception);
              stack = A.getTraceFromException($async$exception);
              t1.completeError$2(error, stack);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature() {
      return this.$this.$ti._eval$1("Future<~>(1)");
    }
  };
  A.CancelableOperation_thenOperation_closure.prototype = {
    call$2(error, stack) {
      return this.$call$body$CancelableOperation_thenOperation_closure0(type$.Object._as(error), type$.StackTrace._as(stack));
    },
    $call$body$CancelableOperation_thenOperation_closure0(error, stack) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, error2, stack2, t2, exception, t1, $async$exception;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.completer;
              if (t1._inner == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              t2 = $async$self.onError.call$3(error, stack, t1);
              $async$goto = 7;
              return A._asyncAwait(t2 instanceof A._Future ? t2 : A._Future$value(t2, type$.void), $async$call$2);
            case 7:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              error2 = A.unwrapException($async$exception);
              stack2 = A.getTraceFromException($async$exception);
              t2 = error === error2 ? stack : stack2;
              t1.completeError$2(error2, t2);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 122
  };
  A.CancelableOperation_thenOperation_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, error, stack, t2, exception, t1, $async$exception;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.completer;
              if (t1._inner == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$handler = 4;
              t2 = $async$self.onCancel.call$1(t1);
              $async$goto = 7;
              return A._asyncAwait(t2 instanceof A._Future ? t2 : A._Future$value(t2, type$.void), $async$call$0);
            case 7:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              error = A.unwrapException($async$exception);
              stack = A.getTraceFromException($async$exception);
              t1.completeError$2(error, stack);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 12
  };
  A.CancelableCompleter.prototype = {
    get$operation() {
      var result, _this = this,
        value = _this.__CancelableCompleter_operation_FI;
      if (value === $) {
        result = new A.CancelableOperation(_this, _this.$ti._eval$1("CancelableOperation<1>"));
        value !== $ && A.throwLateFieldADI("operation");
        _this.set$__CancelableCompleter_operation_FI(result);
        value = result;
      }
      return value;
    },
    complete$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (!_this._mayComplete)
        throw A.wrapException(A.StateError$("Operation already completed"));
      _this._mayComplete = false;
      if (!t1._eval$1("Future<1>")._is(value)) {
        t1 = _this._completeNow$0();
        if (t1 != null)
          t1.complete$1(value);
        return;
      }
      if (_this._inner == null) {
        A.FutureExtensions_ignore(value, t1._precomputed1);
        return;
      }
      value.then$1$2$onError(0, new A.CancelableCompleter_complete_closure(_this), new A.CancelableCompleter_complete_closure0(_this), type$.Null);
    },
    _completeNow$0() {
      var inner = this._inner;
      if (inner == null)
        return null;
      this._cancelCompleter = null;
      return inner;
    },
    completeError$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (!this._mayComplete)
        throw A.wrapException(A.StateError$("Operation already completed"));
      this._mayComplete = false;
      t1 = this._completeNow$0();
      if (t1 != null)
        t1.completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    _cancelable_operation$_cancel$0() {
      var onCancel, _this = this,
        cancelCompleter = _this._cancelCompleter;
      if (cancelCompleter == null)
        return A.Future_Future$value(null, type$.void);
      if (_this._inner != null) {
        _this.set$_inner(null);
        onCancel = _this._cancelable_operation$_onCancel;
        cancelCompleter.complete$1(onCancel == null ? null : A.Future_Future$sync(onCancel, type$.void));
      }
      return cancelCompleter.future;
    },
    set$_inner(_inner) {
      this._inner = this.$ti._eval$1("Completer<1>?")._as(_inner);
    },
    set$__CancelableCompleter_operation_FI(__CancelableCompleter_operation_FI) {
      this.__CancelableCompleter_operation_FI = this.$ti._eval$1("CancelableOperation<1>")._as(__CancelableCompleter_operation_FI);
    }
  };
  A.CancelableCompleter_complete_closure.prototype = {
    call$1(result) {
      var t1 = this.$this;
      t1.$ti._precomputed1._as(result);
      t1 = t1._completeNow$0();
      if (t1 != null)
        t1.complete$1(result);
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A.CancelableCompleter_complete_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this._completeNow$0();
      if (t1 != null)
        t1.completeError$2(error, stackTrace);
    },
    $signature: 13
  };
  A.DelegatingStreamSubscription.prototype = {
    onData$1(handleData) {
      this._stream_subscription$_source.onData$1(this.$ti._eval$1("~(1)?")._as(handleData));
    },
    onError$1(handleError) {
      this._stream_subscription$_source.onError$1(handleError);
    },
    onDone$1(handleDone) {
      this._stream_subscription$_source.onDone$1(type$.nullable_void_Function._as(handleDone));
    },
    pause$1(_, resumeFuture) {
      this._stream_subscription$_source.pause$1(0, resumeFuture);
    },
    pause$0($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0(_) {
      this._stream_subscription$_source.resume$0(0);
    },
    cancel$0(_) {
      return this._stream_subscription$_source.cancel$0(0);
    },
    $isStreamSubscription: 1
  };
  A.FutureGroup.prototype = {
    add$1(_, task) {
      var t1, index, _this = this;
      _this.$ti._eval$1("Future<1>")._as(task);
      if (_this._closed)
        throw A.wrapException(A.StateError$("The FutureGroup is closed."));
      t1 = _this._future_group$_values;
      index = t1.length;
      B.JSArray_methods.add$1(t1, null);
      ++_this._future_group$_pending;
      task.then$1$1(0, new A.FutureGroup_add_closure(_this, index), type$.Null).catchError$1(new A.FutureGroup_add_closure0(_this));
    },
    $isSink: 1
  };
  A.FutureGroup_add_closure.prototype = {
    call$1(value) {
      var t3, t4,
        t1 = this.$this,
        t2 = t1.$ti;
      t2._precomputed1._as(value);
      t3 = t1._completer;
      if ((t3.future._state & 30) !== 0)
        return null;
      --t1._future_group$_pending;
      t4 = t1._future_group$_values;
      B.JSArray_methods.$indexSet(t4, this.index, value);
      if (t1._future_group$_pending !== 0)
        return null;
      if (!t1._closed)
        return null;
      t1 = t2._eval$1("WhereTypeIterable<1>");
      t3.complete$1(A.List_List$of(new A.WhereTypeIterable(t4, t1), true, t1._eval$1("Iterable.E")));
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A.FutureGroup_add_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this._completer;
      if ((t1.future._state & 30) !== 0)
        return null;
      t1.completeError$2(error, stackTrace);
    },
    $signature: 13
  };
  A.ErrorResult.prototype = {
    complete$1(completer) {
      completer.completeError$2(this.error, this.stackTrace);
    },
    addTo$1(sink) {
      sink.addError$2(this.error, this.stackTrace);
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.error) ^ A.Primitives_objectHashCode(this.stackTrace) ^ 492929599) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ErrorResult && J.$eq$(this.error, other.error) && this.stackTrace === other.stackTrace;
    },
    $isResult: 1
  };
  A.ValueResult.prototype = {
    complete$1(completer) {
      this.$ti._eval$1("Completer<1>")._as(completer).complete$1(this.value);
    },
    addTo$1(sink) {
      this.$ti._eval$1("EventSink<1>")._as(sink).add$1(0, this.value);
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.value) ^ 842997089) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ValueResult && J.$eq$(this.value, other.value);
    },
    $isResult: 1
  };
  A.StreamQueue.prototype = {
    cancel$0(_) {
      var t1, _this = this;
      if (_this._stream_queue$_isClosed)
        A.throwExpression(A.StateError$("Already cancelled"));
      _this._stream_queue$_isClosed = true;
      t1 = new A._Future($.Zone__current, type$._Future_void);
      _this._addRequest$1(new A._CancelRequest(new A._AsyncCompleter(t1, type$._AsyncCompleter_void), _this, _this.$ti._eval$1("_CancelRequest<1>")));
      return t1;
    },
    _updateRequests$0() {
      var t1, t2, t3, t4, t5, _this = this;
      for (t1 = _this._requestQueue, t2 = _this._eventQueue, t3 = t1.$ti._precomputed1; !t1.get$isEmpty(t1);) {
        t4 = t1._collection$_head;
        if (t4 === t1._collection$_tail)
          A.throwExpression(A.IterableElementError_noElement());
        t5 = t1._collection$_table;
        if (!(t4 < t5.length))
          return A.ioore(t5, t4);
        t4 = t5[t4];
        if (t4 == null)
          t4 = t3._as(t4);
        if (t4.update$2(t2, _this._stream_queue$_isDone))
          t1.removeFirst$0();
        else
          return;
      }
      if (!_this._stream_queue$_isDone)
        _this._stream_queue$_subscription.pause$0(0);
    },
    _extractStream$0() {
      var subscription, wasPaused, _this = this, _null = null;
      if (_this._stream_queue$_isDone)
        return new A._EmptyStream(_this.$ti._eval$1("_EmptyStream<1>"));
      _this._stream_queue$_isDone = true;
      subscription = _this._stream_queue$_subscription;
      if (subscription == null)
        return _this._stream_queue$_source;
      _this.set$_stream_queue$_subscription(_null);
      wasPaused = subscription.get$isPaused(subscription);
      subscription.pause$0(0);
      subscription.onData$1(_null);
      subscription.onError$1(_null);
      subscription.onDone$1(_null);
      if (wasPaused)
        subscription.resume$0(0);
      return new A.SubscriptionStream(subscription, _this.$ti._eval$1("SubscriptionStream<1>"));
    },
    _ensureListening$0() {
      var t1, _this = this;
      if (_this._stream_queue$_isDone)
        return;
      t1 = _this._stream_queue$_subscription;
      if (t1 == null)
        _this.set$_stream_queue$_subscription(_this._stream_queue$_source.listen$3$onDone$onError(0, new A.StreamQueue__ensureListening_closure(_this), new A.StreamQueue__ensureListening_closure0(_this), new A.StreamQueue__ensureListening_closure1(_this)));
      else
        t1.resume$0(0);
    },
    _addResult$1(result) {
      var t1, _this = this;
      _this.$ti._eval$1("Result<1>")._as(result);
      ++_this._eventsReceived;
      t1 = _this._eventQueue;
      t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(result));
      _this._updateRequests$0();
    },
    _addRequest$1(request) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventRequest<1>")._as(request);
      t1 = _this._requestQueue;
      if (t1._collection$_head === t1._collection$_tail) {
        if (request.update$2(_this._eventQueue, _this._stream_queue$_isDone))
          return;
        _this._ensureListening$0();
      }
      t1._collection$_add$1(t1.$ti._precomputed1._as(request));
    },
    set$_stream_queue$_subscription(_subscription) {
      this._stream_queue$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A.StreamQueue__ensureListening_closure.prototype = {
    call$1(data) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t1._addResult$1(new A.ValueResult(t2._precomputed1._as(data), t2._eval$1("ValueResult<1>")));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  A.StreamQueue__ensureListening_closure1.prototype = {
    call$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this.$this._addResult$1(new A.ErrorResult(error, stackTrace));
    },
    $signature: 13
  };
  A.StreamQueue__ensureListening_closure0.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.set$_stream_queue$_subscription(null);
      t1._stream_queue$_isDone = true;
      t1._updateRequests$0();
    },
    $signature: 0
  };
  A._NextRequest.prototype = {
    update$2(events, isDone) {
      this.$ti._eval$1("QueueList<Result<1>>")._as(events);
      if (!events.get$isEmpty(events)) {
        events.removeFirst$0().complete$1(this._stream_queue$_completer);
        return true;
      }
      if (isDone) {
        this._stream_queue$_completer.completeError$2(new A.StateError("No elements"), A.StackTrace_current());
        return true;
      }
      return false;
    },
    $is_EventRequest: 1
  };
  A._CancelRequest.prototype = {
    update$2(events, isDone) {
      var t1, t2;
      this.$ti._eval$1("QueueList<Result<1>>")._as(events);
      t1 = this._streamQueue;
      t2 = this._stream_queue$_completer;
      if (t1._stream_queue$_isDone)
        t2.complete$0();
      else {
        t1._ensureListening$0();
        t2.complete$1(t1._extractStream$0().listen$1(0, null).cancel$0(0));
      }
      return true;
    },
    $is_EventRequest: 1
  };
  A._HasNextRequest.prototype = {
    update$2(events, isDone) {
      this.$ti._eval$1("QueueList<Result<1>>")._as(events);
      if (!events.get$isEmpty(events)) {
        this._stream_queue$_completer.complete$1(true);
        return true;
      }
      if (isDone) {
        this._stream_queue$_completer.complete$1(false);
        return true;
      }
      return false;
    },
    $is_EventRequest: 1
  };
  A.StreamSplitter.prototype = {
    split$0(_) {
      var t1, t2, _i, _this = this,
        controller = A.StreamController_StreamController(null, _this.get$_onListen(), _this.get$_stream_splitter$_onPause(), _this.get$_stream_splitter$_onResume(), false, _this.$ti._precomputed1);
      controller.set$onCancel(new A.StreamSplitter_split_closure(_this, controller));
      for (t1 = _this._stream_splitter$_buffer, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].addTo$1(controller);
      if (_this._stream_splitter$_isDone)
        _this._closeGroup.add$1(0, controller.close$0(0));
      else
        _this._controllers.add$1(0, controller);
      return new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>"));
    },
    _onListen$0() {
      var t1, _this = this;
      if (_this._stream_splitter$_isDone)
        return;
      t1 = _this._stream_splitter$_subscription;
      if (t1 != null)
        t1.resume$0(0);
      else
        _this.set$_stream_splitter$_subscription(_this._stream_splitter$_stream.listen$3$onDone$onError(0, _this.get$_stream_splitter$_onData(), _this.get$_stream_splitter$_onDone(), _this.get$_stream_splitter$_onError()));
    },
    _stream_splitter$_onPause$0() {
      if (!this._controllers.every$1(0, new A.StreamSplitter__onPause_closure(this)))
        return;
      this._stream_splitter$_subscription.pause$0(0);
    },
    _stream_splitter$_onResume$0() {
      this._stream_splitter$_subscription.resume$0(0);
    },
    _stream_splitter$_onCancel$1(controller) {
      var t1 = this._controllers;
      t1.remove$1(0, controller);
      if (t1._collection$_length !== 0)
        return;
      this._stream_splitter$_subscription.pause$0(0);
    },
    _stream_splitter$_onData$1(data) {
      var t2, t3,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      B.JSArray_methods.add$1(this._stream_splitter$_buffer, new A.ValueResult(data, t1._eval$1("ValueResult<1>")));
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        (t3 == null ? t2._as(t3) : t3).add$1(0, data);
      }
    },
    _stream_splitter$_onError$2(error, stackTrace) {
      var t1, t2, t3;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      B.JSArray_methods.add$1(this._stream_splitter$_buffer, new A.ErrorResult(error, stackTrace));
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        (t3 == null ? t2._as(t3) : t3).addError$2(error, stackTrace);
      }
    },
    _stream_splitter$_onDone$0() {
      var t1, t2, t3, t4;
      this._stream_splitter$_isDone = true;
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = this._closeGroup, t3 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t4 = t1._collection$_current;
        t2.add$1(0, (t4 == null ? t3._as(t4) : t4).close$0(0));
      }
    },
    set$_stream_splitter$_subscription(_subscription) {
      this._stream_splitter$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A.StreamSplitter_split_closure.prototype = {
    call$0() {
      return this.$this._stream_splitter$_onCancel$1(this.controller);
    },
    $signature: 0
  };
  A.StreamSplitter__onPause_closure.prototype = {
    call$1(controller) {
      this.$this.$ti._eval$1("StreamController<1>")._as(controller);
      return controller.get$isPaused(controller);
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(StreamController<1>)");
    }
  };
  A.SubscriptionStream.prototype = {
    listen$4$cancelOnError$onDone$onError(_, onData, cancelOnError, onDone, onError) {
      var subscription, result,
        t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      subscription = this._subscription_stream$_source;
      if (subscription == null)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      this.set$_subscription_stream$_source(null);
      result = true === cancelOnError ? new A._CancelOnErrorSubscriptionWrapper(subscription, t1._eval$1("_CancelOnErrorSubscriptionWrapper<1>")) : subscription;
      result.onData$1(onData);
      result.onError$1(onError);
      result.onDone$1(onDone);
      subscription.resume$0(0);
      return result;
    },
    listen$1($receiver, onData) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, null, null);
    },
    listen$3$onDone$onError($receiver, onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError($receiver, onData, null, onDone, onError);
    },
    set$_subscription_stream$_source(_source) {
      this._subscription_stream$_source = this.$ti._eval$1("StreamSubscription<1>?")._as(_source);
    }
  };
  A._CancelOnErrorSubscriptionWrapper.prototype = {
    onError$1(handleError) {
      this.super$DelegatingStreamSubscription$onError(new A._CancelOnErrorSubscriptionWrapper_onError_closure(this, handleError));
    }
  };
  A._CancelOnErrorSubscriptionWrapper_onError_closure.prototype = {
    call$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this.$this.super$DelegatingStreamSubscription$cancel(0).whenComplete$1(new A._CancelOnErrorSubscriptionWrapper_onError__closure(this.handleError, error, stackTrace));
    },
    $signature: 44
  };
  A._CancelOnErrorSubscriptionWrapper_onError__closure.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.handleError;
      if (type$.dynamic_Function_dynamic_dynamic._is(t1))
        t1.call$2(_this.error, _this.stackTrace);
      else if (t1 != null)
        type$.dynamic_Function_dynamic._as(t1).call$1(_this.error);
    },
    $signature: 3
  };
  A.CaseInsensitiveMap.prototype = {};
  A.AWSHttpException.prototype = {
    toString$0(_) {
      var t1 = this.uri.toString$0(0),
        t2 = A.S(this.underlyingException);
      return this.method._core$_name.toUpperCase() + " " + t1 + " failed" + (": " + t2);
    },
    $isException: 1
  };
  A.CancellationException.prototype = {
    toString$0(_) {
      var t1 = this.operationId;
      return "The operation was cancelled" + (t1 == null ? "" : " (" + t1 + ")");
    },
    $isException: 1
  };
  A.AlpnProtocol.prototype = {
    _enumToString$0() {
      return "AlpnProtocol." + this._core$_name;
    }
  };
  A.SupportedProtocols.prototype = {
    _enumToString$0() {
      return "SupportedProtocols." + this._core$_name;
    }
  };
  A.AWSHttpClient.prototype = {};
  A.AWSHttpClient_onBadCertificate_closure.prototype = {
    call$3(_, __, ___) {
      return false;
    },
    $signature: 123
  };
  A.AWSHttpClientImpl.prototype = {
    _send$7$abortController$cancelTrigger$completer$logger$request$requestProgressController$responseProgressController(abortController, cancelTrigger, completer, logger, request, requestProgressController, responseProgressController) {
      var t1 = type$.StreamController_int;
      t1._as(requestProgressController);
      t1._as(responseProgressController);
      return this._send$body$AWSHttpClientImpl(abortController, cancelTrigger, type$.CancelableCompleter_AWSBaseHttpResponse._as(completer), logger, request, requestProgressController, responseProgressController);
    },
    _send$body$AWSHttpClientImpl(abortController, cancelTrigger, completer, logger, request, requestProgressController, responseProgressController) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, redirect, stream, body, resp, streamView, bodyController, streamedResponse, e, st, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, controller, progressController, exception, t1, $async$exception, $async$temp1, $async$temp2;
      var $async$_send$7$abortController$cancelTrigger$completer$logger$request$requestProgressController$responseProgressController = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = {};
              t1.onCancel = null;
              t2 = cancelTrigger.future;
              t2.then$1$1(0, new A.AWSHttpClientImpl__send_closure(t1, logger), type$.void);
              t1.onCancel = new A.AWSHttpClientImpl__send_closure0(abortController);
              redirect = null;
              if (request.maxRedirects === 0)
                redirect = B.RequestRedirect_2;
              else
                redirect = B.RequestRedirect_1;
              $async$handler = 4;
              t1.requestBytesRead = 0;
              t3 = type$.List_int;
              stream = A.TakeUntil_takeUntil(A.Tap_tap(request.get$body(), new A.AWSHttpClientImpl__send_closure1(t1, requestProgressController), new A.AWSHttpClientImpl__send_closure2(cancelTrigger, logger, requestProgressController), t3), t2, t3);
              body = null;
              $async$goto = request.scheme === "http" || B.JSArray_methods.contains$1(B.List_E8w, B.AlpnProtocol_0_http1_1) ? 7 : 9;
              break;
            case 7:
              // then
              $async$temp1 = Uint8Array;
              $async$temp2 = A;
              $async$goto = 10;
              return A._asyncAwait(A.collectBytes(stream), $async$_send$7$abortController$cancelTrigger$completer$logger$request$requestProgressController$responseProgressController);
            case 10:
              // returning from await.
              body = new $async$temp1($async$temp2._ensureNativeList($async$result));
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              body = stream;
            case 8:
              // join
              if (completer._inner == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = request.get$uri().get$_text();
              t4 = request.method;
              body = body;
              t5 = type$.JavaScriptObject;
              t6 = t5._as(abortController.signal);
              t7 = redirect;
              if (t4 === B.AWSHttpMethod_0 || t4 === B.AWSHttpMethod_1)
                body = null;
              if (type$.Stream_List_int._is(body))
                body = A.StreamToReadableStream_asReadableStream(body);
              t8 = B.RequestCache_0.get$jsValue();
              t9 = B.RequestCredentials_0.get$jsValue();
              t10 = B.RequestMode_0.get$jsValue();
              t11 = B.RequestDestination_0.get$jsValue();
              t7 = t7.get$jsValue();
              t12 = self.undefined;
              t13 = A.jsify(request.headers);
              t14 = self.undefined;
              t15 = self.undefined;
              if (t6 == null)
                t6 = self.undefined;
              t16 = body == null ? self.undefined : body;
              $async$goto = 11;
              return A._asyncAwait(A.promiseToFuture(self.fetch(t2, t5._as({cache: t8, credentials: t9, mode: t10, destination: t11, redirect: t7, referrer: t12, headers: t13, integrity: t14, duplex: "half", signal: t6, keepalive: t15, method: t4._core$_name.toUpperCase(), body: t16})), t5), $async$_send$7$abortController$cancelTrigger$completer$logger$request$requestProgressController$responseProgressController);
            case 11:
              // returning from await.
              resp = $async$result;
              t5 = resp;
              t16 = $.$get$_responseStreams();
              A.Expando__checkType(t5);
              t4 = t16._jsWeakMap.get(t5);
              if (t4 == null) {
                t2 = type$.nullable_JavaScriptObject._as(t5.body);
                if (t2 == null)
                  t2 = null;
                else {
                  t4 = $.$get$_readableStreamViews();
                  A.Expando__checkType(t2);
                  t6 = t4._jsWeakMap.get(t2);
                  if (t6 == null) {
                    controller = A.StreamController_StreamController(null, null, null, null, true, t3);
                    progressController = A.StreamController_StreamController$broadcast(true, type$.int);
                    t6 = A._instanceType(controller);
                    t7 = A._instanceType(progressController);
                    A.ReadableStreamView__pipeFrom(t2, new A._StreamSinkWrapper(controller, t6._eval$1("_StreamSinkWrapper<1>")), new A._StreamSinkWrapper(progressController, t7._eval$1("_StreamSinkWrapper<1>")));
                    t6 = new A.ReadableStreamView(new A._BroadcastStream(progressController, t7._eval$1("_BroadcastStream<1>")), new A._ControllerStream(controller, t6._eval$1("_ControllerStream<1>")));
                    t4.$indexSet(0, t2, t6);
                    t2 = t6;
                  } else
                    t2 = t6;
                }
                if (t2 == null)
                  t2 = B.ReadableStreamView__EmptyStream__EmptyStream;
                t16.$indexSet(0, t5, t2);
              } else
                t2 = t4;
              streamView = t2;
              bodyController = A.StreamController_StreamController(new A.AWSHttpClientImpl__send_closure3(logger, cancelTrigger), null, null, null, true, t3);
              t1.onCancel = new A.AWSHttpClientImpl__send_closure4(bodyController, responseProgressController);
              A.StreamForward_forward(streamView.progress, responseProgressController, true, type$.int);
              A.StreamForward_forward(streamView, bodyController, true, t3);
              t2 = A._asInt(resp.status);
              t4 = A.PropsResponse_get_headers(resp);
              t5 = bodyController;
              t3 = A.Tap_tap(new A._ControllerStream(t5, A.instanceType(t5)._eval$1("_ControllerStream<1>")), null, new A.AWSHttpClientImpl__send_closure5(t1, cancelTrigger, logger, responseProgressController), t3);
              A.CaseInsensitiveMap$(t4, type$.String);
              streamedResponse = new A.AWSStreamedHttpResponse(t3, t2);
              completer.complete$1(streamedResponse);
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              completer.completeError$2(A.AWSHttpException_AWSHttpException(request, e), st);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_send$7$abortController$cancelTrigger$completer$logger$request$requestProgressController$responseProgressController, $async$completer);
    },
    send$2$onCancel(_, request, onCancel) {
      var abortController, t1, requestProgressController, responseProgressController, cancelTrigger, t2, completer, operation;
      type$.nullable_void_Function._as(onCancel);
      abortController = type$.JavaScriptObject._as(new self.AbortController());
      t1 = type$.int;
      requestProgressController = A.StreamController_StreamController$broadcast(false, t1);
      responseProgressController = A.StreamController_StreamController$broadcast(false, t1);
      cancelTrigger = new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void);
      t1 = new A.AWSHttpClientImpl_send_wrappedOnCancel(cancelTrigger, abortController, requestProgressController, responseProgressController, onCancel);
      t2 = type$.AWSBaseHttpResponse;
      completer = A.CancelableCompleter$(t1, t2);
      operation = A.AWSHttpOperation$(completer.get$operation(), t1, new A._BroadcastStream(requestProgressController, A._instanceType(requestProgressController)._eval$1("_BroadcastStream<1>")), new A._BroadcastStream(responseProgressController, A._instanceType(responseProgressController)._eval$1("_BroadcastStream<1>")), t2);
      this._send$7$abortController$cancelTrigger$completer$logger$request$requestProgressController$responseProgressController(abortController, cancelTrigger, completer, A.AWSLogger_AWSLogger(A.AWSLoggerMixin.prototype.get$logger.call(operation)._logger.get$fullName() + "." + operation.id), request, requestProgressController, responseProgressController).catchError$1(new A.AWSHttpClientImpl_send_closure(completer, request));
      B.JSArray_methods.add$1(this._openConnections, new A._WeakReferenceWrapper(new WeakRef(operation), type$._WeakReferenceWrapper_Cancelable));
      return operation;
    },
    close$0(_) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$next = [], $async$self = this, openConnection, t1, t2, _i, t3;
      var $async$close$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                for (t1 = $async$self._openConnections, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
                  openConnection = t1[_i];
                  t3 = openConnection._weakRef.deref();
                  if (t3 != null)
                    J.cancel$0$z(t3);
                }
              } finally {
                B.JSArray_methods.clear$0($async$self._openConnections);
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$close$0, $async$completer);
    }
  };
  A.AWSHttpClientImpl__send_closure.prototype = {
    call$1(_) {
      var t1;
      this.logger.verbose$1("Canceling request");
      t1 = this._box_0.onCancel;
      if (t1 != null)
        t1.call$0();
    },
    $signature: 35
  };
  A.AWSHttpClientImpl__send_closure0.prototype = {
    call$0() {
      this.abortController.abort();
    },
    $signature: 0
  };
  A.AWSHttpClientImpl__send_closure1.prototype = {
    call$1(chunk) {
      var t1, requestBytesRead;
      type$.List_int._as(chunk);
      t1 = this._box_0;
      requestBytesRead = t1.requestBytesRead + J.get$length$asx(chunk);
      t1.requestBytesRead = requestBytesRead;
      this.requestProgressController.add$1(0, requestBytesRead);
    },
    $signature: 29
  };
  A.AWSHttpClientImpl__send_closure2.prototype = {
    call$0() {
      if ((this.cancelTrigger.future._state & 30) === 0)
        this.logger.verbose$1("Request sent");
      this.requestProgressController.close$0(0);
    },
    $signature: 0
  };
  A.AWSHttpClientImpl__send_closure3.prototype = {
    call$0() {
      this.logger.verbose$1("Subscription canceled");
      var t1 = this.cancelTrigger;
      if ((t1.future._state & 30) === 0)
        t1.complete$0();
    },
    $signature: 3
  };
  A.AWSHttpClientImpl__send_closure4.prototype = {
    call$0() {
      var t1 = this.bodyController;
      if ((t1._state & 4) === 0) {
        t1.addError$1(B.CancellationException_null);
        t1.close$0(0);
      }
      this.responseProgressController.close$0(0);
    },
    $signature: 0
  };
  A.AWSHttpClientImpl__send_closure5.prototype = {
    call$0() {
      var _this = this;
      if ((_this.cancelTrigger.future._state & 30) === 0)
        _this.logger.verbose$1("Response received");
      _this._box_0.onCancel = null;
      _this.responseProgressController.close$0(0);
    },
    $signature: 0
  };
  A.AWSHttpClientImpl_send_wrappedOnCancel.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.cancelTrigger;
      if ((t1.future._state & 30) !== 0)
        return null;
      _this.abortController.abort();
      _this.requestProgressController.close$0(0);
      _this.responseProgressController.close$0(0);
      t1.complete$0();
      t1 = _this.onCancel.call$0();
      return t1;
    },
    $signature: 0
  };
  A.AWSHttpClientImpl_send_closure.prototype = {
    call$2(e, st) {
      return this.completer.completeError$1(A.AWSHttpException_AWSHttpException(this.request, type$.Object._as(e)));
    },
    $signature: 124
  };
  A.AWSHttpMethod.prototype = {
    _enumToString$0() {
      return "AWSHttpMethod." + this._core$_name;
    }
  };
  A.AWSHttpOperation.prototype = {
    get$response() {
      return this.response$body$AWSHttpOperation(this.$ti._precomputed1);
    },
    response$body$AWSHttpOperation($async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, result;
      var $async$get$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.operation;
              $async$goto = 3;
              return A._asyncAwait(t1.valueOrCancellation$0(), $async$get$response);
            case 3:
              // returning from await.
              result = $async$result;
              if (!$async$self.$ti._precomputed1._is(result) || t1._cancelable_operation$_completer._inner == null)
                throw A.wrapException(new A.CancellationException($async$self.id));
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$get$response, $async$completer);
    },
    get$runtimeTypeName() {
      return "AWSHttpOperation";
    }
  };
  A._AWSHttpOperation_AWSOperation_AWSProgressOperation.prototype = {};
  A.AWSBaseHttpRequest.prototype = {
    get$uri() {
      var result, _this = this,
        value = _this.__AWSBaseHttpRequest_uri_FI;
      if (value === $) {
        result = A._Uri__Uri(_this.host, _this.path, null, _this.port, _this._queryParameters, _this.scheme, null);
        _this.__AWSBaseHttpRequest_uri_FI !== $ && A.throwLateFieldADI("uri");
        _this.__AWSBaseHttpRequest_uri_FI = result;
        value = result;
      }
      return value;
    },
    send$0(_) {
      var useClient = A.AWSHttpClientImpl$(),
        t1 = new A.AWSBaseHttpRequest_send_closeClient(null, useClient),
        awsOperation = useClient.send$2$onCancel(0, this, t1),
        t2 = type$.AWSBaseHttpResponse;
      return A.AWSHttpOperation$(awsOperation.operation.then$1$2$onError(0, new A.AWSBaseHttpRequest_send_closure(t1), new A.AWSBaseHttpRequest_send_closure0(t1), t2), new A.AWSBaseHttpRequest_send_closure1(t1, null), awsOperation.requestProgress, awsOperation.responseProgress, t2);
    },
    toString$0(_) {
      return this.get$uri().get$_text();
    },
    $isStreamSplitter: 1
  };
  A.AWSBaseHttpRequest_send_closeClient.prototype = {
    call$0() {
      this.useClient.close$0(0);
    },
    $signature: 0
  };
  A.AWSBaseHttpRequest_send_closure.prototype = {
    call$1(resp) {
      var t1;
      type$.AWSBaseHttpResponse._as(resp);
      t1 = resp._splitter == null ? resp._aws_http_response$_body : resp.split$0(0);
      A.Tap_tap(t1, null, this.closeClient, type$.List_int);
      return resp;
    },
    $signature: 125
  };
  A.AWSBaseHttpRequest_send_closure0.prototype = {
    call$2(e, st) {
      this.closeClient.call$0();
      A.Error_throwWithStackTrace(e, st);
    },
    $signature: 126
  };
  A.AWSBaseHttpRequest_send_closure1.prototype = {
    call$0() {
      this.closeClient.call$0();
      return null;
    },
    $signature: 0
  };
  A.AWSHttpRequest.prototype = {
    get$body() {
      return B.C__EmptyStream;
    }
  };
  A.AWSBaseHttpResponse.prototype = {$isStreamSplitter: 1};
  A.AWSStreamedHttpResponse.prototype = {
    split$0(_) {
      var t1, _this = this;
      ++_this.debugNumSplits;
      t1 = _this._splitter;
      if (t1 == null) {
        t1 = new A.StreamSplitter(_this._aws_http_response$_body, A._setArrayType([], type$.JSArray_Result_List_int), A.LinkedHashSet_LinkedHashSet$_empty(type$.StreamController_List_int), new A.FutureGroup(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_List_dynamic), type$._AsyncCompleter_List_dynamic), [], type$.FutureGroup_dynamic), type$.StreamSplitter_List_int);
        _this.set$_splitter(t1);
      }
      return t1.split$0(0);
    },
    set$_splitter(_splitter) {
      this._splitter = type$.nullable_StreamSplitter_List_int._as(_splitter);
    }
  };
  A.JSEnum.prototype = {
    get$jsValue() {
      var t1 = this._core$_name;
      switch (t1) {
        case "default$":
          return self.undefined;
        default:
          return A.StringRecase_get_paramCase(t1);
      }
    }
  };
  A.RequestCache.prototype = {
    _enumToString$0() {
      return "RequestCache." + this._core$_name;
    }
  };
  A.RequestCredentials.prototype = {
    _enumToString$0() {
      return "RequestCredentials." + this._core$_name;
    }
  };
  A.RequestRedirect.prototype = {
    _enumToString$0() {
      return "RequestRedirect." + this._core$_name;
    }
  };
  A.RequestDestination.prototype = {
    _enumToString$0() {
      return "RequestDestination." + this._core$_name;
    }
  };
  A.RequestMode.prototype = {
    _enumToString$0() {
      return "RequestMode." + this._core$_name;
    }
  };
  A.PropsResponse_get_headers_closure.prototype = {
    call$3(value, key, _) {
      var t1, t2;
      A._asString(value);
      A._asString(key);
      type$.JavaScriptObject._as(_);
      t1 = this.headers;
      t2 = t1.$ti;
      t1._base.$indexSet(0, t2._eval$1("DelegatingMap.K")._as(key), t2._eval$1("DelegatingMap.V")._as(value));
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 127
  };
  A._RequestCache__Enum_JSEnum.prototype = {};
  A._RequestCredentials__Enum_JSEnum.prototype = {};
  A._RequestDestination__Enum_JSEnum.prototype = {};
  A._RequestMode__Enum_JSEnum.prototype = {};
  A._RequestRedirect__Enum_JSEnum.prototype = {};
  A.Promise_fromFuture_staticInteropFactoryStub_closure.prototype = {
    call$2(resolve, reject) {
      return this.$call$body$Promise_fromFuture_staticInteropFactoryStub_closure(this.T._eval$1("~(0)")._as(resolve), type$.void_Function_Object._as(reject));
    },
    $call$body$Promise_fromFuture_staticInteropFactoryStub_closure(resolve, reject) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$currentError, $async$self = this, e, exception, $async$exception, $async$temp1;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              $async$temp1 = resolve;
              $async$goto = 6;
              return A._asyncAwait($async$self.future, $async$call$2);
            case 6:
              // returning from await.
              $async$temp1.call$1($async$result);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              reject.call$1(e);
              if (!$async$self.captureError)
                throw $async$exception;
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    $signature() {
      return this.T._eval$1("Future<~>(~(0),~(Object))");
    }
  };
  A.UnderlyingSource__staticInteropFactoryStub_closure.prototype = {
    call$1(controller) {
      return A.Promise_fromFuture_staticInteropFactoryStub(this.pull.call$1(type$.JavaScriptObject._as(controller)), type$.void);
    },
    $signature: 128
  };
  A.ReadableStreamType.prototype = {
    _enumToString$0() {
      return "ReadableStreamType." + this._core$_name;
    }
  };
  A.ReadableStreamReaderMode.prototype = {
    _enumToString$0() {
      return "ReadableStreamReaderMode." + this._core$_name;
    }
  };
  A.ReadableStreamView.prototype = {};
  A.StreamToReadableStream_asReadableStream_closure.prototype = {
    call$1(controller) {
      return this.$call$body$StreamToReadableStream_asReadableStream_closure(type$.JavaScriptObject._as(controller));
    },
    $call$body$StreamToReadableStream_asReadableStream_closure(controller) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, chunk, e, st, t2, t3, exception, t1, $async$exception, $async$temp1;
      var $async$call$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.queue;
              if (t1._stream_queue$_isClosed)
                A.throwExpression(A.StateError$("Already cancelled"));
              t2 = t1.$ti;
              t3 = new A._Future($.Zone__current, type$._Future_bool);
              t1._addRequest$1(new A._HasNextRequest(new A._AsyncCompleter(t3, type$._AsyncCompleter_bool), t2._eval$1("_HasNextRequest<1>")));
              $async$temp1 = A;
              $async$goto = 5;
              return A._asyncAwait(t3, $async$call$1);
            case 5:
              // returning from await.
              $async$goto = !$async$temp1.boolConversionCheck($async$result) ? 3 : 4;
              break;
            case 3:
              // then
              t1 = t1.cancel$0(0);
              $async$goto = 6;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.dynamic), $async$call$1);
            case 6:
              // returning from await.
              controller.close();
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              $async$handler = 8;
              if (t1._stream_queue$_isClosed)
                A.throwExpression(A.StateError$("Already cancelled"));
              t3 = new A._Future($.Zone__current, t2._eval$1("_Future<1>"));
              t1._addRequest$1(new A._NextRequest(new A._AsyncCompleter(t3, t2._eval$1("_AsyncCompleter<1>")), t2._eval$1("_NextRequest<1>")));
              $async$goto = 11;
              return A._asyncAwait(t3, $async$call$1);
            case 11:
              // returning from await.
              chunk = $async$result;
              controller.enqueue(new Uint8Array(A._ensureNativeList(chunk)));
              $async$handler = 2;
              // goto after finally
              $async$goto = 10;
              break;
            case 8:
              // catch
              $async$handler = 7;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              t1 = t1.cancel$0(0);
              $async$goto = 12;
              return A._asyncAwait(t1 instanceof A._Future ? t1 : A._Future$value(t1, type$.dynamic), $async$call$1);
            case 12:
              // returning from await.
              A.scheduleMicrotask(new A.StreamToReadableStream_asReadableStream__closure(controller));
              throw $async$exception;
              // goto after finally
              $async$goto = 10;
              break;
            case 7:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 10:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 129
  };
  A.StreamToReadableStream_asReadableStream__closure.prototype = {
    call$0() {
      var exception;
      try {
        this.controller.close();
      } catch (exception) {
      }
    },
    $signature: 0
  };
  A._ReadableStreamReaderMode__Enum_JSEnum.prototype = {};
  A._ReadableStreamType__Enum_JSEnum.prototype = {};
  A.AWSLogger.prototype = {
    get$_aws_logger$_parent() {
      var t1 = this._logger.parent;
      return $.AWSLogger_activeLoggers.$index(0, t1 == null ? null : t1.get$fullName());
    },
    _pluginAlreadyRegistered$1(pluginType) {
      var loggerInstance = "AWSLogger(" + this._logger.get$fullName() + ")";
      throw A.wrapException(A.StateError$('A plugin of type "' + pluginType + '" is already registered to "' + loggerInstance + '" in the same logging hierarchy. Unregister the existing plugin from "' + loggerInstance + '" first and then register the new plugin.'));
    },
    getPlugin$1$0($Plugin) {
      var t2, registeredPlugin,
        t1 = type$.AWSLoggerPlugin;
      A.checkTypeBound($Plugin, t1, "Plugin", "getPlugin");
      t2 = this._subscriptions;
      registeredPlugin = $Plugin._eval$1("0?")._as(A.IterableExtension_firstWhereOrNull(new A.LinkedHashMapKeyIterable(t2, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterable<1>")), new A.AWSLogger_getPlugin_closure($Plugin), t1));
      if (registeredPlugin == null) {
        t1 = this.get$_aws_logger$_parent();
        t1 = t1 == null ? null : t1.getPlugin$1$0($Plugin);
      } else
        t1 = registeredPlugin;
      return t1;
    },
    registerPlugin$1$1(plugin, $T) {
      var t1, t2, _this = this;
      A.checkTypeBound($T, type$.AWSLoggerPlugin, "T", "registerPlugin");
      $T._as(plugin);
      if (_this.getPlugin$1$0($T) != null || B.JSArray_methods.any$1(_this._children, new A.AWSLogger_registerPlugin_hasPlugin($T)))
        _this._pluginAlreadyRegistered$1(A._rtiToString(A.createRuntimeType($T)._rti, null));
      t1 = _this._logger._getStream$0();
      t2 = t1.$ti;
      _this._subscriptions.$indexSet(0, plugin, new A._MapStream(t2._eval$1("LogEntry(Stream.T)")._as(new A.AWSLogger_registerPlugin_closure()), t1, t2._eval$1("_MapStream<Stream.T,LogEntry>")).listen$1(0, plugin.get$handleLogEntry()));
    },
    unregisterAllPlugins$0() {
      var t1, t2, t3, t4;
      for (t1 = this._subscriptions, t2 = t1.get$values(t1), t3 = A._instanceType(t2), t3 = t3._eval$1("@<1>")._bind$1(t3._rest[1]), t2 = new A.MappedIterator(J.get$iterator$ax(t2.__internal$_iterable), t2._f, t3._eval$1("MappedIterator<1,2>")), t3 = t3._rest[1]; t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        (t4 == null ? t3._as(t4) : t4).cancel$0(0);
      }
      t1.clear$0(0);
    },
    verbose$1(message) {
      this._logger.log$4(0, B.Level_FINER_400, message, null, null);
    },
    warn$1(_, message) {
      this._logger.log$4(0, B.Level_WARNING_900, message, null, null);
    },
    get$runtimeTypeName() {
      return "AWSLogger";
    }
  };
  A.AWSLogger_getPlugin_closure.prototype = {
    call$1(element) {
      return A.getRuntimeTypeOfDartObject(type$.AWSLoggerPlugin._as(element)) === A.createRuntimeType(this.Plugin);
    },
    $signature: 62
  };
  A.AWSLogger_registerPlugin_hasPlugin.prototype = {
    call$1(logger) {
      var t1;
      type$.AWSLogger._as(logger);
      t1 = logger._subscriptions;
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).any$1(0, new A.AWSLogger_registerPlugin_hasPlugin_closure(this.T)) || B.JSArray_methods.any$1(logger._children, this);
    },
    $signature: 131
  };
  A.AWSLogger_registerPlugin_hasPlugin_closure.prototype = {
    call$1(element) {
      return A.getRuntimeTypeOfDartObject(type$.AWSLoggerPlugin._as(element)) === A.createRuntimeType(this.T);
    },
    $signature: 62
  };
  A.AWSLogger_registerPlugin_closure.prototype = {
    call$1(record) {
      var t1;
      type$.LogRecord._as(record);
      t1 = A.LevelConversion_get_logLevel(record.level);
      return new A.LogEntry(t1, record.message, record.loggerName, record.time.toUtc$0(), record.error, record.stackTrace);
    },
    $signature: 132
  };
  A.AWSLoggerMixin.prototype = {
    get$logger() {
      return A.AWSLogger_AWSLogger(A.AWSLogger_AWSLogger("AWS")._logger.get$fullName() + ".AWSHttpOperation");
    }
  };
  A._AWSLogger_Object_AWSDebuggable.prototype = {};
  A.LogEntry.prototype = {
    get$props() {
      var _this = this;
      return [_this.level, _this.message, _this.loggerName, _this.time, _this.error, _this.stackTrace];
    },
    get$runtimeTypeName() {
      return "LogEntry";
    }
  };
  A._LogEntry_Object_AWSEquatable.prototype = {};
  A._LogEntry_Object_AWSEquatable_AWSDebuggable.prototype = {};
  A.LogLevel.prototype = {
    _enumToString$0() {
      return "LogLevel." + this._core$_name;
    },
    compareTo$1(_, other) {
      return this.index - type$.LogLevel._as(other).index;
    },
    toString$0(_) {
      return this._core$_name;
    },
    $isComparable: 1
  };
  A.SimpleLogPrinter.prototype = {
    handleLogEntry$1(logEntry) {
      A.print(A.SimpleLogPrinter_formatLogEntry(type$.LogEntry._as(logEntry)));
    },
    $isAWSLoggerPlugin: 1
  };
  A.AWSOperation.prototype = {
    cancel$0(_) {
      var t4,
        t1 = this._cancelMemo,
        t2 = t1.$ti,
        t3 = t2._eval$1("1/()")._as(new A.AWSOperation_cancel_closure(this));
      t1 = t1._async_memoizer$_completer;
      t4 = t1.future;
      if ((t4._state & 30) === 0)
        t1.complete$1(A.Future_Future$sync(t3, t2._precomputed1));
      return t4;
    },
    $isCancelable: 1
  };
  A.AWSOperation_cancel_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1.operation._cancelable_operation$_completer;
              if (t2._inner == null || t2._cancelCompleter == null) {
                A.AWSLogger_AWSLogger(A.AWSLoggerMixin.prototype.get$logger.call(t1)._logger.get$fullName() + "." + t1.id).verbose$1("Operation complete. Calling onCancel...");
                t1 = t1._aws_operation$_onCancel.call$0();
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              A.AWSLogger_AWSLogger(A.AWSLoggerMixin.prototype.get$logger.call(t1)._logger.get$fullName() + "." + t1.id).verbose$1("Operation canceled.");
              $async$returnValue = t2._cancelable_operation$_cancel$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 12
  };
  A._AWSOperation_Object_AWSDebuggable.prototype = {};
  A._AWSOperation_Object_AWSDebuggable_AWSLoggerMixin.prototype = {};
  A.AWSProgressOperation.prototype = {};
  A.AWSDebuggable.prototype = {
    toString$0(_) {
      var toJson, t1, props, _this = this;
      $label0$0: {
        if (type$.AWSSerializable_nullable_Object._is(_this)) {
          toJson = _this.get$toJson();
          t1 = true;
        } else {
          toJson = null;
          t1 = false;
        }
        if (t1) {
          t1 = _this.get$runtimeTypeName() + " " + A._JsonStringStringifier_stringify(toJson.call$0(), null, "  ");
          break $label0$0;
        }
        if (type$.AWSEquatable_AWSEquatable_nullable_Object._is(_this)) {
          props = _this.get$props();
          t1 = true;
        } else {
          props = null;
          t1 = false;
        }
        if (t1) {
          t1 = _this.get$runtimeTypeName() + " " + A.S(props);
          break $label0$0;
        }
        t1 = "Instance of " + _this.get$runtimeTypeName();
        break $label0$0;
      }
      return t1;
    }
  };
  A.AWSEquatable.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other)
        t1 = A._instanceType(this)._eval$1("AWSEquatable.T")._is(other) && B.C_DeepCollectionEquality.equals$2(0, this.get$props(), other.get$props());
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return B.C_DeepCollectionEquality.hash$1(this.get$props());
    }
  };
  A.StringRecase_get_paramCase_closure.prototype = {
    call$1(word) {
      return A._asString(word).toLowerCase();
    },
    $signature: 23
  };
  A.StringRecase_groupIntoWords_closure.prototype = {
    call$1(m) {
      return A.S(m.group$1(0, 1)) + " v" + A.S(m.group$1(0, 2));
    },
    $signature: 14
  };
  A.StringRecase_groupIntoWords_closure0.prototype = {
    call$1(m) {
      return A.S(m.group$1(0, 1)) + " V" + A.S(m.group$1(0, 2));
    },
    $signature: 14
  };
  A.StringRecase_groupIntoWords_closure1.prototype = {
    call$0() {
      return new A._SyncStarIterable(this.$call$body$StringRecase_groupIntoWords_closure(), type$._SyncStarIterable_String);
    },
    $call$body$StringRecase_groupIntoWords_closure() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3;
        return function $async$call$0($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._box_0;
                t2 = $.$get$StringRecase__camelCasedWords().allMatches$1(0, t1.result);
                t3 = A._instanceType(t2);
                $async$goto = 2;
                return $async$iterator._yieldStar$1(A.MappedIterable_MappedIterable(t2, t3._eval$1("String(Iterable.E)")._as(new A.StringRecase_groupIntoWords__closure(t1)), t3._eval$1("Iterable.E"), type$.String));
              case 2:
                // after yield
                $async$goto = 3;
                return $async$iterator._async$_current = B.JSString_methods.substring$1(t1.result, t1.start), 1;
              case 3:
                // after yield
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    $signature: 134
  };
  A.StringRecase_groupIntoWords__closure.prototype = {
    call$1(match) {
      var end = type$.RegExpMatch._as(match)._match.index + 1,
        t1 = this._box_0,
        substr = B.JSString_methods.substring$2(t1.result, t1.start, end);
      t1.start = end;
      return substr;
    },
    $signature: 135
  };
  A.StringRecase_groupIntoWords_closure2.prototype = {
    call$1(m) {
      return A.S(m.group$1(0, 1)) + " " + A.S(m.group$1(0, 2));
    },
    $signature: 14
  };
  A.StringRecase_groupIntoWords_closure3.prototype = {
    call$1(m) {
      return A.S(m.group$1(0, 1)) + " " + A.S(m.group$1(0, 2));
    },
    $signature: 14
  };
  A.AWSSerializable.prototype = {};
  A.StreamForward_forward_closure.prototype = {
    call$1($event) {
      var t1;
      this.T._as($event);
      t1 = this.controller;
      if (!t1.get$isClosed())
        t1.add$1(0, $event);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A.StreamForward_forward_closure1.prototype = {
    call$2(e, st) {
      var t1;
      type$.Object._as(e);
      type$.StackTrace._as(st);
      t1 = this.controller;
      if (!t1.get$isClosed())
        t1.addError$2(e, st);
    },
    $signature: 13
  };
  A.StreamForward_forward_closure0.prototype = {
    call$0() {
      this.controller.close$0(0);
      this.completer.complete$0();
    },
    $signature: 0
  };
  A.CopyOnWriteList.prototype = {
    get$length(_) {
      return J.get$length$asx(this._copy_on_write_list$_list);
    },
    $index(_, index) {
      return J.$index$asx(this._copy_on_write_list$_list, index);
    },
    cast$1$0(_, $T) {
      return new A.CopyOnWriteList(true, J.cast$1$0$ax(this._copy_on_write_list$_list, $T), $T._eval$1("CopyOnWriteList<0>"));
    },
    contains$1(_, element) {
      return J.contains$1$asx(this._copy_on_write_list$_list, element);
    },
    elementAt$1(_, index) {
      return J.elementAt$1$ax(this._copy_on_write_list$_list, index);
    },
    get$first(_) {
      return J.get$first$ax(this._copy_on_write_list$_list);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._copy_on_write_list$_list);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._copy_on_write_list$_list);
    },
    get$iterator(_) {
      return J.get$iterator$ax(this._copy_on_write_list$_list);
    },
    join$1(_, separator) {
      return J.join$1$ax(this._copy_on_write_list$_list, separator);
    },
    get$last(_) {
      return J.get$last$ax(this._copy_on_write_list$_list);
    },
    map$1$1(_, f, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(f);
      return J.map$1$1$ax(this._copy_on_write_list$_list, f, $T);
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    get$single(_) {
      return J.get$single$ax(this._copy_on_write_list$_list);
    },
    skip$1(_, count) {
      return J.skip$1$ax(this._copy_on_write_list$_list, count);
    },
    sublist$2(_, start, end) {
      return J.sublist$2$ax(this._copy_on_write_list$_list, start, end);
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $indexSet(_, index, element) {
      this.$ti._precomputed1._as(element);
      this._maybeCopyBeforeWrite$0();
      J.$indexSet$ax(this._copy_on_write_list$_list, index, element);
    },
    add$1(_, value) {
      this.$ti._precomputed1._as(value);
      this._maybeCopyBeforeWrite$0();
      J.add$1$ax(this._copy_on_write_list$_list, value);
    },
    sort$1(_, compare) {
      this.$ti._eval$1("int(1,1)?")._as(compare);
      this._maybeCopyBeforeWrite$0();
      J.sort$1$ax(this._copy_on_write_list$_list, compare);
    },
    toString$0(_) {
      return J.toString$0$(this._copy_on_write_list$_list);
    },
    _maybeCopyBeforeWrite$0() {
      var _this = this;
      if (!_this._copyBeforeWrite)
        return;
      _this._copyBeforeWrite = false;
      _this.set$_copy_on_write_list$_list(A.List_List$from(_this._copy_on_write_list$_list, true, _this.$ti._precomputed1));
    },
    set$_copy_on_write_list$_list(_list) {
      this._copy_on_write_list$_list = this.$ti._eval$1("List<1>")._as(_list);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.hashObjects_closure.prototype = {
    call$2(h, i) {
      return A._combine(A._asInt(h), J.get$hashCode$(i));
    },
    $signature: 136
  };
  A.BuiltList.prototype = {
    get$hashCode(_) {
      var t1 = this._list$_hashCode;
      return t1 == null ? this._list$_hashCode = A.hashObjects(this._list) : t1;
    },
    $eq(_, other) {
      var t1, t2, i, t3, t4, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A._BuiltList))
        return false;
      t1 = other._list;
      t2 = _this._list;
      if (t1.length !== t2.length)
        return false;
      if (other.get$hashCode(other) !== _this.get$hashCode(_this))
        return false;
      for (i = 0; t3 = t2.length, i !== t3; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t4 = t1[i];
        if (!(i < t3))
          return A.ioore(t2, i);
        if (!J.$eq$(t4, t2[i]))
          return false;
      }
      return true;
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this._list, "[", "]");
    },
    get$length(_) {
      return this._list.length;
    },
    get$iterator(_) {
      var t1 = this._list;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    map$1$1(_, f, $T) {
      var t1 = this._list,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._bind$1($T)._eval$1("1(2)")._as(this.$ti._bind$1($T)._eval$1("1(2)")._as(f)), t2._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    contains$1(_, element) {
      return B.JSArray_methods.contains$1(this._list, element);
    },
    join$1(_, separator) {
      return B.JSArray_methods.join$1(this._list, separator);
    },
    get$isEmpty(_) {
      return this._list.length === 0;
    },
    get$isNotEmpty(_) {
      return this._list.length !== 0;
    },
    skip$1(_, n) {
      var t1 = this._list;
      return A.SubListIterable$(t1, n, null, A._arrayInstanceType(t1)._precomputed1);
    },
    get$first(_) {
      return B.JSArray_methods.get$first(this._list);
    },
    get$last(_) {
      return B.JSArray_methods.get$last(this._list);
    },
    get$single(_) {
      return B.JSArray_methods.get$single(this._list);
    },
    elementAt$1(_, index) {
      var t1 = this._list;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isIterable: 1
  };
  A._BuiltList.prototype = {
    _list$_maybeCheckForNull$0() {
      var t1, t2, _i;
      if (!(!$.$get$isSoundMode() && !this.$ti._precomputed1._is(null)))
        return;
      for (t1 = this._list, t2 = t1.length, _i = 0; _i < t2; ++_i)
        if (t1[_i] == null)
          throw A.wrapException(A.ArgumentError$("iterable contained invalid element: null", null));
    }
  };
  A.ListBuilder.prototype = {
    build$0() {
      var t1, t2, t3, _this = this;
      if (_this._listOwner == null) {
        t1 = _this.__ListBuilder__list_A;
        t1 === $ && A.throwLateFieldNI("_list");
        t2 = _this.$ti;
        t3 = t2._eval$1("_BuiltList<1>");
        t3 = t3._as(new A._BuiltList(t1, t3));
        _this.set$__ListBuilder__list_A(t2._eval$1("List<1>")._as(t1));
        _this.set$_listOwner(t3);
      }
      t1 = _this._listOwner;
      t1.toString;
      return t1;
    },
    replace$1(iterable) {
      var _this = this,
        t1 = _this.$ti,
        t2 = t1._eval$1("_BuiltList<1>"),
        t3 = t1._eval$1("List<1>");
      if (t2._is(iterable)) {
        t2._as(iterable);
        _this.set$__ListBuilder__list_A(t3._as(iterable._list));
        _this.set$_listOwner(iterable);
      } else {
        _this.set$__ListBuilder__list_A(t3._as(A.List_List$from(iterable, true, t1._precomputed1)));
        _this.set$_listOwner(null);
      }
    },
    get$length(_) {
      var t1 = this.__ListBuilder__list_A;
      t1 === $ && A.throwLateFieldNI("_list");
      return t1.length;
    },
    addAll$1(_, iterable) {
      var safeList, lengthBefore, i, t2, exception,
        t1 = this.$ti;
      t1._eval$1("Iterable<1>")._as(iterable);
      safeList = this.get$_safeList();
      lengthBefore = J.get$length$asx(safeList);
      J.addAll$1$ax(safeList, iterable);
      if (!(!$.$get$isSoundMode() && !t1._precomputed1._is(null)))
        return;
      try {
        i = lengthBefore;
        t1 = t1._precomputed1;
        while (!J.$eq$(i, J.get$length$asx(safeList))) {
          if (t1._as(J.$index$asx(safeList, i)) == null)
            A.throwExpression(A.ArgumentError$("null element", null));
          t2 = i;
          if (typeof t2 !== "number")
            return t2.$add();
          i = t2 + 1;
        }
      } catch (exception) {
        J.removeRange$2$ax(safeList, lengthBefore, J.get$length$asx(safeList));
        throw exception;
      }
    },
    map$1(_, f) {
      var t2, t3, t4, t5, result, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1(1)")._as(f);
      t2 = _this.__ListBuilder__list_A;
      t2 === $ && A.throwLateFieldNI("_list");
      t3 = t1._precomputed1;
      t4 = A._arrayInstanceType(t2);
      t5 = t4._eval$1("@<1>")._bind$1(t3)._eval$1("MappedListIterable<1,2>");
      result = A.List_List$of(new A.MappedListIterable(t2, t4._bind$1(t3)._eval$1("1(2)")._as(f), t5), true, t5._eval$1("ListIterable.E"));
      _this._list$_maybeCheckElements$1(result);
      _this.set$__ListBuilder__list_A(t1._eval$1("List<1>")._as(result));
      _this.set$_listOwner(null);
    },
    get$_safeList() {
      var t1, t2, _this = this;
      if (_this._listOwner != null) {
        t1 = _this.__ListBuilder__list_A;
        t1 === $ && A.throwLateFieldNI("_list");
        t2 = _this.$ti;
        _this.set$__ListBuilder__list_A(t2._eval$1("List<1>")._as(A.List_List$from(t1, true, t2._precomputed1)));
        _this.set$_listOwner(null);
      }
      t1 = _this.__ListBuilder__list_A;
      t1 === $ && A.throwLateFieldNI("_list");
      return t1;
    },
    _list$_maybeCheckElements$1(elements) {
      var t2, _i,
        t1 = this.$ti;
      t1._eval$1("Iterable<1>")._as(elements);
      if (!(!$.$get$isSoundMode() && !t1._precomputed1._is(null)))
        return;
      for (t2 = elements.length, t1 = t1._precomputed1, _i = 0; _i < t2; ++_i)
        if (t1._as(elements[_i]) == null)
          A.throwExpression(A.ArgumentError$("null element", null));
    },
    set$__ListBuilder__list_A(__ListBuilder__list_A) {
      this.__ListBuilder__list_A = this.$ti._eval$1("List<1>")._as(__ListBuilder__list_A);
    },
    set$_listOwner(_listOwner) {
      this._listOwner = this.$ti._eval$1("_BuiltList<1>?")._as(_listOwner);
    }
  };
  A.BuiltListMultimap.prototype = {
    get$hashCode(_) {
      var t2, _this = this,
        t1 = _this._list_multimap$_hashCode;
      if (t1 == null) {
        t1 = _this._list_multimap$_map;
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
        t2 = A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(t1, t2), t2._eval$1("int(Iterable.E)")._as(new A.BuiltListMultimap_hashCode_closure(_this)), t2._eval$1("Iterable.E"), type$.int);
        t2 = A.List_List$of(t2, false, A._instanceType(t2)._eval$1("Iterable.E"));
        B.JSArray_methods.sort$0(t2);
        t2 = _this._list_multimap$_hashCode = A.hashObjects(t2);
        t1 = t2;
      }
      return t1;
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, key, result, t6, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A._BuiltListMultimap))
        return false;
      t1 = other._list_multimap$_map;
      t2 = _this._list_multimap$_map;
      if (t1.__js_helper$_length !== t2.__js_helper$_length)
        return false;
      if (other.get$hashCode(other) !== _this.get$hashCode(_this))
        return false;
      for (t3 = _this.get$keys(_this), t4 = t3.__js_helper$_map, t3 = A.LinkedHashMapKeyIterator$(t4, t4._modifications, t3.$ti._precomputed1), t4 = other._emptyList, t5 = _this._emptyList; t3.moveNext$0();) {
        key = t3.__js_helper$_current;
        result = t1.$index(0, key);
        t6 = result == null ? t4 : result;
        result = t2.$index(0, key);
        if (!t6.$eq(0, result == null ? t5 : result))
          return false;
      }
      return true;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._list_multimap$_map);
    },
    get$keys(_) {
      var t1, _this = this;
      if (_this._list_multimap$_keys == null) {
        t1 = _this._list_multimap$_map;
        _this.set$_list_multimap$_keys(new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")));
      }
      t1 = _this._list_multimap$_keys;
      t1.toString;
      return t1;
    },
    get$length(_) {
      return this._list_multimap$_map.__js_helper$_length;
    },
    set$_list_multimap$_keys(_keys) {
      this._list_multimap$_keys = this.$ti._eval$1("Iterable<1>?")._as(_keys);
    }
  };
  A.BuiltListMultimap_BuiltListMultimap_closure.prototype = {
    call$1(k) {
      return this.multimap.$index(0, k);
    },
    $signature: 8
  };
  A.BuiltListMultimap_hashCode_closure.prototype = {
    call$1(key) {
      var t2,
        t1 = this.$this;
      t1.$ti._precomputed1._as(key);
      t2 = J.get$hashCode$(key);
      t1 = J.get$hashCode$(t1._list_multimap$_map.$index(0, key));
      return A._finish(A._combine(A._combine(0, B.JSInt_methods.get$hashCode(t2)), B.JSInt_methods.get$hashCode(t1)));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1)");
    }
  };
  A._BuiltListMultimap.prototype = {
    _BuiltListMultimap$copy$2(keys, lookup, $K, $V) {
      var t1, t2, t3, key;
      for (t1 = keys.get$iterator(keys), t2 = this._list_multimap$_map, t3 = type$.Iterable_dynamic; t1.moveNext$0();) {
        key = t1.get$current();
        if ($K._is(key))
          t2.$indexSet(0, key, A.BuiltList_BuiltList$from(t3._as(lookup.call$1(key)), $V));
        else
          throw A.wrapException(A.ArgumentError$("map contained invalid key: " + A.S(key), null));
      }
    }
  };
  A.ListMultimapBuilder.prototype = {
    build$0() {
      var t1, key, t2, t3, t4, t5, builtList, _this = this,
        _s9_ = "_builtMap";
      if (_this._list_multimap$_builtMapOwner == null) {
        t1 = _this.__ListMultimapBuilder__builderMap_A;
        t1 === $ && A.throwLateFieldNI("_builderMap");
        t1 = A.LinkedHashMapKeyIterator$(t1, t1._modifications, A._instanceType(t1)._precomputed1);
        for (; t1.moveNext$0();) {
          key = t1.__js_helper$_current;
          t2 = _this.__ListMultimapBuilder__builderMap_A.$index(0, key);
          if (t2._listOwner == null) {
            t3 = t2.__ListBuilder__list_A;
            t3 === $ && A.throwLateFieldNI("_list");
            t4 = A._instanceType(t2);
            t5 = t4._eval$1("_BuiltList<1>");
            t5 = t5._as(new A._BuiltList(t3, t5));
            t2.set$__ListBuilder__list_A(t4._eval$1("List<1>")._as(t3));
            t2.set$_listOwner(t5);
          }
          builtList = t2._listOwner;
          t2 = builtList._list.length;
          t3 = _this.__ListMultimapBuilder__builtMap_A;
          if (t2 === 0) {
            t3 === $ && A.throwLateFieldNI(_s9_);
            t3.remove$1(0, key);
          } else {
            t3 === $ && A.throwLateFieldNI(_s9_);
            t3.$indexSet(0, key, builtList);
          }
        }
        t1 = _this.__ListMultimapBuilder__builtMap_A;
        t1 === $ && A.throwLateFieldNI(_s9_);
        t2 = _this.$ti;
        t3 = t2._rest[1];
        _this.set$_list_multimap$_builtMapOwner(new A._BuiltListMultimap(t1, A.BuiltList_BuiltList$from(B.List_empty, t3), t2._eval$1("@<1>")._bind$1(t3)._eval$1("_BuiltListMultimap<1,2>")));
      }
      t1 = _this._list_multimap$_builtMapOwner;
      t1.toString;
      return t1;
    },
    replace$1(multimap) {
      this._list_multimap$_setWithCopyAndCheck$2(multimap.get$keys(multimap), new A.ListMultimapBuilder_replace_closure(multimap));
    },
    _list_multimap$_getValuesBuilder$1(key) {
      var t2, result, builtValues, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t2 = _this.__ListMultimapBuilder__builderMap_A;
      t2 === $ && A.throwLateFieldNI("_builderMap");
      result = t2.$index(0, key);
      if (result == null) {
        t2 = _this.__ListMultimapBuilder__builtMap_A;
        t2 === $ && A.throwLateFieldNI("_builtMap");
        builtValues = t2.$index(0, key);
        result = builtValues == null ? A.ListBuilder_ListBuilder(B.List_empty, t1._rest[1]) : A.ListBuilder_ListBuilder(builtValues, builtValues.$ti._precomputed1);
        _this.__ListMultimapBuilder__builderMap_A.$indexSet(0, key, result);
      }
      return result;
    },
    _list_multimap$_setWithCopyAndCheck$2(keys, lookup) {
      var t1, t2, t3, t4, t5, t6, key, t7, value, t8, t9, t10, t11, _this = this, _null = null;
      _this.set$_list_multimap$_builtMapOwner(_null);
      t1 = _this.$ti;
      t2 = t1._precomputed1;
      t3 = t1._eval$1("BuiltList<2>");
      t4 = t1._eval$1("Map<1,BuiltList<2>>");
      _this.set$__ListMultimapBuilder__builtMap_A(t4._as(A.LinkedHashMap_LinkedHashMap$_empty(t2, t3)));
      _this.set$__ListMultimapBuilder__builderMap_A(t1._eval$1("Map<1,ListBuilder<2>>")._as(A.LinkedHashMap_LinkedHashMap$_empty(t2, t1._eval$1("ListBuilder<2>"))));
      for (t5 = keys.get$iterator(keys), t6 = type$.Iterable_dynamic, t1 = t1._rest[1]; t5.moveNext$0();) {
        key = t5.get$current();
        if (t2._is(key))
          for (t7 = J.get$iterator$ax(t6._as(lookup.call$1(key))); t7.moveNext$0();) {
            value = t7.get$current();
            if (t1._is(value)) {
              t2._as(key);
              t1._as(value);
              if (_this._list_multimap$_builtMapOwner != null) {
                t8 = _this.__ListMultimapBuilder__builtMap_A;
                t8 === $ && A.throwLateFieldNI("_builtMap");
                _this.set$__ListMultimapBuilder__builtMap_A(t4._as(A.LinkedHashMap_LinkedHashMap$from(t8, t2, t3)));
                _this.set$_list_multimap$_builtMapOwner(_null);
              }
              _this._list_multimap$_checkKey$1(key);
              _this._list_multimap$_checkValue$1(value);
              t8 = _this._list_multimap$_getValuesBuilder$1(key);
              t9 = t8.$ti;
              t10 = t9._precomputed1;
              t10._as(value);
              if (!$.$get$isSoundMode() && !t10._is(null))
                if (value == null)
                  A.throwExpression(A.ArgumentError$("null element", _null));
              if (t8._listOwner != null) {
                t11 = t8.__ListBuilder__list_A;
                t11 === $ && A.throwLateFieldNI("_list");
                t8.set$__ListBuilder__list_A(t9._eval$1("List<1>")._as(A.List_List$from(t11, true, t10)));
                t8.set$_listOwner(_null);
              }
              t8 = t8.__ListBuilder__list_A;
              t8 === $ && A.throwLateFieldNI("_list");
              B.JSArray_methods.add$1(t8, value);
            } else
              throw A.wrapException(A.ArgumentError$("map contained invalid value: " + A.S(value) + ", for key " + A.S(key), _null));
          }
        else
          throw A.wrapException(A.ArgumentError$("map contained invalid key: " + A.S(key), _null));
      }
    },
    _list_multimap$_checkKey$1(key) {
      var t1 = this.$ti._precomputed1;
      t1._as(key);
      if ($.$get$isSoundMode())
        return;
      if (t1._is(null))
        return;
      if (key == null)
        throw A.wrapException(A.ArgumentError$("null key", null));
    },
    _list_multimap$_checkValue$1(value) {
      var t1 = this.$ti._rest[1];
      t1._as(value);
      if ($.$get$isSoundMode())
        return;
      if (t1._is(null))
        return;
      if (value == null)
        throw A.wrapException(A.ArgumentError$("null value", null));
    },
    set$__ListMultimapBuilder__builtMap_A(__ListMultimapBuilder__builtMap_A) {
      this.__ListMultimapBuilder__builtMap_A = this.$ti._eval$1("Map<1,BuiltList<2>>")._as(__ListMultimapBuilder__builtMap_A);
    },
    set$_list_multimap$_builtMapOwner(_builtMapOwner) {
      this._list_multimap$_builtMapOwner = this.$ti._eval$1("_BuiltListMultimap<1,2>?")._as(_builtMapOwner);
    },
    set$__ListMultimapBuilder__builderMap_A(__ListMultimapBuilder__builderMap_A) {
      this.__ListMultimapBuilder__builderMap_A = this.$ti._eval$1("Map<1,ListBuilder<2>>")._as(__ListMultimapBuilder__builderMap_A);
    }
  };
  A.ListMultimapBuilder_replace_closure.prototype = {
    call$1(k) {
      return this.multimap.$index(0, k);
    },
    $signature: 8
  };
  A.BuiltMap.prototype = {
    get$hashCode(_) {
      var t2, _this = this,
        t1 = _this._map$_hashCode;
      if (t1 == null) {
        t1 = _this._map$_map;
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
        t2 = A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(t1, t2), t2._eval$1("int(Iterable.E)")._as(new A.BuiltMap_hashCode_closure(_this)), t2._eval$1("Iterable.E"), type$.int);
        t2 = A.List_List$of(t2, false, A._instanceType(t2)._eval$1("Iterable.E"));
        B.JSArray_methods.sort$0(t2);
        t2 = _this._map$_hashCode = A.hashObjects(t2);
        t1 = t2;
      }
      return t1;
    },
    $eq(_, other) {
      var t1, t2, t3, t4, key, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A._BuiltMap))
        return false;
      t1 = other._map$_map;
      t2 = _this._map$_map;
      if (t1.__js_helper$_length !== t2.__js_helper$_length)
        return false;
      if (other.get$hashCode(other) !== _this.get$hashCode(_this))
        return false;
      for (t3 = _this.get$keys(_this), t4 = t3.__js_helper$_map, t3 = A.LinkedHashMapKeyIterator$(t4, t4._modifications, t3.$ti._precomputed1); t3.moveNext$0();) {
        key = t3.__js_helper$_current;
        if (!J.$eq$(t1.$index(0, key), t2.$index(0, key)))
          return false;
      }
      return true;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._map$_map);
    },
    get$keys(_) {
      var t1, _this = this;
      if (_this._map$_keys == null) {
        t1 = _this._map$_map;
        _this.set$_map$_keys(new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")));
      }
      t1 = _this._map$_keys;
      t1.toString;
      return t1;
    },
    get$length(_) {
      return this._map$_map.__js_helper$_length;
    },
    map$1(_, f) {
      var t1 = type$.dynamic;
      return new A._BuiltMap(null, this._map$_map.map$2$1(0, this.$ti._eval$1("MapEntry<@,@>(1,2)")._as(f), t1, t1), type$._BuiltMap_dynamic_dynamic);
    },
    set$_map$_keys(_keys) {
      this._map$_keys = this.$ti._eval$1("Iterable<1>?")._as(_keys);
    }
  };
  A.BuiltMap_BuiltMap_closure.prototype = {
    call$1(k) {
      return this.map.$index(0, k);
    },
    $signature: 8
  };
  A.BuiltMap_hashCode_closure.prototype = {
    call$1(key) {
      var t2,
        t1 = this.$this;
      t1.$ti._precomputed1._as(key);
      t2 = J.get$hashCode$(key);
      t1 = J.get$hashCode$(t1._map$_map.$index(0, key));
      return A._finish(A._combine(A._combine(0, B.JSInt_methods.get$hashCode(t2)), B.JSInt_methods.get$hashCode(t1)));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1)");
    }
  };
  A._BuiltMap.prototype = {
    _BuiltMap$copyAndCheckTypes$2(keys, lookup, $K, $V) {
      var t1, t2, key, value;
      for (t1 = keys.get$iterator(keys), t2 = this._map$_map; t1.moveNext$0();) {
        key = t1.get$current();
        if ($K._is(key)) {
          value = lookup.call$1(key);
          if ($V._is(value))
            t2.$indexSet(0, key, value);
          else
            throw A.wrapException(A.ArgumentError$("map contained invalid value: " + A.S(value), null));
        } else
          throw A.wrapException(A.ArgumentError$("map contained invalid key: " + A.S(key), null));
      }
    }
  };
  A.MapBuilder.prototype = {
    build$0() {
      var t1, t2, _this = this;
      if (_this._mapOwner == null) {
        t1 = _this.__MapBuilder__map_A;
        t1 === $ && A.throwLateFieldNI("_map");
        t2 = _this.$ti;
        _this.set$_mapOwner(new A._BuiltMap(_this._mapFactory, t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("_BuiltMap<1,2>")));
      }
      t1 = _this._mapOwner;
      t1.toString;
      return t1;
    },
    replace$1(map) {
      var replacement, _this = this,
        t1 = _this.$ti,
        t2 = t1._eval$1("_BuiltMap<1,2>");
      if (t2._is(map) && true) {
        t2._as(map);
        _this.set$_mapOwner(map);
        _this.set$__MapBuilder__map_A(t1._eval$1("Map<1,2>")._as(map._map$_map));
      } else if (map instanceof A._BuiltMap) {
        replacement = _this._createMap$0();
        map._map$_map.forEach$1(0, map.$ti._eval$1("~(1,2)")._as(new A.MapBuilder_replace_closure(_this, replacement)));
        t1._eval$1("Map<1,2>")._as(replacement);
        _this.set$_mapOwner(null);
        _this.set$__MapBuilder__map_A(replacement);
      } else if (type$.Map_dynamic_dynamic._is(map)) {
        replacement = _this._createMap$0();
        map.forEach$1(0, new A.MapBuilder_replace_closure0(_this, replacement));
        t1._eval$1("Map<1,2>")._as(replacement);
        _this.set$_mapOwner(null);
        _this.set$__MapBuilder__map_A(replacement);
      } else
        throw A.wrapException(A.ArgumentError$("expected Map or BuiltMap, got " + J.get$runtimeType$(map).toString$0(0), null));
    },
    $indexSet(_, key, value) {
      var _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      _this._checkKey$1(key);
      _this._checkValue$1(value);
      _this.get$_safeMap().$indexSet(0, key, value);
    },
    get$length(_) {
      var t1 = this.__MapBuilder__map_A;
      t1 === $ && A.throwLateFieldNI("_map");
      return t1.__js_helper$_length;
    },
    addAll$1(_, other) {
      var _this = this;
      _this.$ti._eval$1("Map<1,2>")._as(other);
      _this._checkKeys$1(other.get$keys(other));
      _this._checkValues$1(other.get$values(other));
      _this.get$_safeMap().addAll$1(0, other);
    },
    get$_safeMap() {
      var t1, t2, _this = this;
      if (_this._mapOwner != null) {
        t1 = _this._createMap$0();
        t2 = _this.__MapBuilder__map_A;
        t2 === $ && A.throwLateFieldNI("_map");
        t1.addAll$1(0, t2);
        _this.set$__MapBuilder__map_A(_this.$ti._eval$1("Map<1,2>")._as(t1));
        _this.set$_mapOwner(null);
      }
      t1 = _this.__MapBuilder__map_A;
      t1 === $ && A.throwLateFieldNI("_map");
      return t1;
    },
    _createMap$0() {
      var t1 = this.$ti;
      return A.LinkedHashMap_LinkedHashMap$_empty(t1._precomputed1, t1._rest[1]);
    },
    _checkKey$1(key) {
      var t1 = this.$ti._precomputed1;
      t1._as(key);
      if ($.$get$isSoundMode())
        return;
      if (t1._is(null))
        return;
      if (key == null)
        throw A.wrapException(A.ArgumentError$("null key", null));
    },
    _checkKeys$1(keys) {
      var t1 = this.$ti;
      t1._eval$1("Iterable<1>")._as(keys);
      if ($.$get$isSoundMode())
        return;
      if (t1._precomputed1._is(null))
        return;
      for (t1 = keys.get$iterator(keys); t1.moveNext$0();)
        this._checkKey$1(t1.get$current());
    },
    _checkValue$1(value) {
      var t1 = this.$ti._rest[1];
      t1._as(value);
      if ($.$get$isSoundMode())
        return;
      if (t1._is(null))
        return;
      if (value == null)
        throw A.wrapException(A.ArgumentError$("null value", null));
    },
    _checkValues$1(values) {
      var t1 = this.$ti;
      t1._eval$1("Iterable<2>")._as(values);
      if ($.$get$isSoundMode())
        return;
      if (t1._rest[1]._is(null))
        return;
      for (t1 = values.get$iterator(values); t1.moveNext$0();)
        this._checkValue$1(t1.get$current());
    },
    set$__MapBuilder__map_A(__MapBuilder__map_A) {
      this.__MapBuilder__map_A = this.$ti._eval$1("Map<1,2>")._as(__MapBuilder__map_A);
    },
    set$_mapOwner(_mapOwner) {
      this._mapOwner = this.$ti._eval$1("_BuiltMap<1,2>?")._as(_mapOwner);
    }
  };
  A.MapBuilder_replace_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      this.replacement.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    $signature: 16
  };
  A.MapBuilder_replace_closure0.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      this.replacement.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    $signature: 16
  };
  A.BuiltSet.prototype = {
    get$hashCode(_) {
      var t2, t3, _this = this,
        t1 = _this._set$_hashCode;
      if (t1 == null) {
        t1 = _this._set$_set;
        t2 = A._instanceType(t1);
        t3 = t2._eval$1("EfficientLengthMappedIterable<1,int>");
        t3 = A.List_List$of(new A.EfficientLengthMappedIterable(t1, t2._eval$1("int(1)")._as(new A.BuiltSet_hashCode_closure(_this)), t3), false, t3._eval$1("Iterable.E"));
        B.JSArray_methods.sort$0(t3);
        t3 = _this._set$_hashCode = A.hashObjects(t3);
        t1 = t3;
      }
      return t1;
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A._BuiltSet))
        return false;
      t1 = _this._set$_set;
      if (other._set$_set._collection$_length !== t1._collection$_length)
        return false;
      if (other.get$hashCode(other) !== _this.get$hashCode(_this))
        return false;
      return t1.containsAll$1(other);
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this._set$_set, "{", "}");
    },
    get$length(_) {
      return this._set$_set._collection$_length;
    },
    get$iterator(_) {
      var t1 = this._set$_set;
      return A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1);
    },
    map$1$1(_, f, $T) {
      var t1 = this._set$_set,
        t2 = A._instanceType(t1);
      return new A.EfficientLengthMappedIterable(t1, t2._bind$1($T)._eval$1("1(2)")._as(this.$ti._bind$1($T)._eval$1("1(2)")._as(f)), t2._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    map$1($receiver, f) {
      return this.map$1$1($receiver, f, type$.dynamic);
    },
    contains$1(_, element) {
      return this._set$_set.contains$1(0, element);
    },
    join$1(_, separator) {
      return this._set$_set.join$1(0, separator);
    },
    get$isEmpty(_) {
      return this._set$_set._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._set$_set._collection$_length !== 0;
    },
    skip$1(_, n) {
      var t1 = this._set$_set;
      return A.SkipIterable_SkipIterable(t1, n, A._instanceType(t1)._precomputed1);
    },
    get$first(_) {
      var t1 = this._set$_set;
      return t1.get$first(t1);
    },
    get$last(_) {
      var t1 = this._set$_set;
      return t1.get$last(t1);
    },
    get$single(_) {
      var t1 = this._set$_set;
      return t1.get$single(t1);
    },
    elementAt$1(_, index) {
      return this._set$_set.elementAt$1(0, index);
    },
    $isIterable: 1
  };
  A.BuiltSet_hashCode_closure.prototype = {
    call$1(e) {
      return J.get$hashCode$(this.$this.$ti._precomputed1._as(e));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1)");
    }
  };
  A._BuiltSet.prototype = {
    _maybeCheckForNull$0() {
      var t1, t2, element;
      if (!(!$.$get$isSoundMode() && !this.$ti._precomputed1._is(null)))
        return;
      for (t1 = this._set$_set, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        element = t1._collection$_current;
        if ((element == null ? t2._as(element) : element) == null)
          throw A.wrapException(A.ArgumentError$("iterable contained invalid element: null", null));
      }
    }
  };
  A.SetBuilder.prototype = {
    build$0() {
      var t1, _this = this;
      if (_this._setOwner == null) {
        t1 = _this.__SetBuilder__set_A;
        t1 === $ && A.throwLateFieldNI("_set");
        _this.set$_setOwner(new A._BuiltSet(_this._setFactory, t1, _this.$ti._eval$1("_BuiltSet<1>")));
      }
      t1 = _this._setOwner;
      t1.toString;
      return t1;
    },
    replace$1(iterable) {
      var t1, t2, t3, element, _this = this,
        set = _this._createSet$0();
      for (t1 = J.get$iterator$ax(iterable), t2 = _this.$ti, t3 = t2._precomputed1; t1.moveNext$0();) {
        element = t1.get$current();
        if (t3._is(element))
          set.add$1(0, element);
        else
          throw A.wrapException(A.ArgumentError$("iterable contained invalid element: " + A.S(element), null));
      }
      t2._eval$1("Set<1>")._as(set);
      _this.set$_setOwner(null);
      _this.set$__SetBuilder__set_A(set);
    },
    get$length(_) {
      var t1 = this.__SetBuilder__set_A;
      t1 === $ && A.throwLateFieldNI("_set");
      return t1._collection$_length;
    },
    map$1(_, f) {
      var result, t2, t3, t4, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1(1)")._as(f);
      result = _this._createSet$0();
      t2 = _this.__SetBuilder__set_A;
      t2 === $ && A.throwLateFieldNI("_set");
      t3 = t1._precomputed1;
      t4 = A._instanceType(t2);
      result.addAll$1(0, new A.EfficientLengthMappedIterable(t2, t4._bind$1(t3)._eval$1("1(2)")._as(f), t4._eval$1("@<1>")._bind$1(t3)._eval$1("EfficientLengthMappedIterable<1,2>")));
      _this._maybeCheckElements$1(result);
      t1._eval$1("Set<1>")._as(result);
      _this.set$_setOwner(null);
      _this.set$__SetBuilder__set_A(result);
    },
    get$_safeSet() {
      var t1, t2, _this = this;
      if (_this._setOwner != null) {
        t1 = _this._createSet$0();
        t2 = _this.__SetBuilder__set_A;
        t2 === $ && A.throwLateFieldNI("_set");
        t1.addAll$1(0, t2);
        _this.set$__SetBuilder__set_A(_this.$ti._eval$1("Set<1>")._as(t1));
        _this.set$_setOwner(null);
      }
      t1 = _this.__SetBuilder__set_A;
      t1 === $ && A.throwLateFieldNI("_set");
      return t1;
    },
    _createSet$0() {
      return A.LinkedHashSet_LinkedHashSet$_empty(this.$ti._precomputed1);
    },
    _maybeCheckElements$1(elements) {
      var t2, t3, element,
        t1 = this.$ti;
      t1._eval$1("Iterable<1>")._as(elements);
      if (!(!$.$get$isSoundMode() && !t1._precomputed1._is(null)))
        return;
      for (t2 = A._LinkedHashSetIterator$(elements, elements._collection$_modifications, A._instanceType(elements)._precomputed1), t1 = t1._precomputed1, t3 = t2.$ti._precomputed1; t2.moveNext$0();) {
        element = t2._collection$_current;
        if (t1._as(element == null ? t3._as(element) : element) == null)
          A.throwExpression(A.ArgumentError$("null element", null));
      }
    },
    set$__SetBuilder__set_A(__SetBuilder__set_A) {
      this.__SetBuilder__set_A = this.$ti._eval$1("Set<1>")._as(__SetBuilder__set_A);
    },
    set$_setOwner(_setOwner) {
      this._setOwner = this.$ti._eval$1("_BuiltSet<1>?")._as(_setOwner);
    }
  };
  A.BuiltSetMultimap.prototype = {
    get$hashCode(_) {
      var t2, _this = this,
        t1 = _this._set_multimap$_hashCode;
      if (t1 == null) {
        t1 = _this._set_multimap$_map;
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
        t2 = A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(t1, t2), t2._eval$1("int(Iterable.E)")._as(new A.BuiltSetMultimap_hashCode_closure(_this)), t2._eval$1("Iterable.E"), type$.int);
        t2 = A.List_List$of(t2, false, A._instanceType(t2)._eval$1("Iterable.E"));
        B.JSArray_methods.sort$0(t2);
        t2 = _this._set_multimap$_hashCode = A.hashObjects(t2);
        t1 = t2;
      }
      return t1;
    },
    $eq(_, other) {
      var t1, t2, t3, t4, t5, key, result, t6, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A._BuiltSetMultimap))
        return false;
      t1 = other._set_multimap$_map;
      t2 = _this._set_multimap$_map;
      if (t1.__js_helper$_length !== t2.__js_helper$_length)
        return false;
      if (other.get$hashCode(other) !== _this.get$hashCode(_this))
        return false;
      for (t3 = _this.get$keys(_this), t4 = t3.__js_helper$_map, t3 = A.LinkedHashMapKeyIterator$(t4, t4._modifications, t3.$ti._precomputed1), t4 = other._emptySet, t5 = _this._emptySet; t3.moveNext$0();) {
        key = t3.__js_helper$_current;
        result = t1.$index(0, key);
        t6 = result == null ? t4 : result;
        result = t2.$index(0, key);
        if (!t6.$eq(0, result == null ? t5 : result))
          return false;
      }
      return true;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._set_multimap$_map);
    },
    get$keys(_) {
      var t1, _this = this;
      if (_this._set_multimap$_keys == null) {
        t1 = _this._set_multimap$_map;
        _this.set$_set_multimap$_keys(new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")));
      }
      t1 = _this._set_multimap$_keys;
      t1.toString;
      return t1;
    },
    get$length(_) {
      return this._set_multimap$_map.__js_helper$_length;
    },
    set$_set_multimap$_keys(_keys) {
      this._set_multimap$_keys = this.$ti._eval$1("Iterable<1>?")._as(_keys);
    }
  };
  A.BuiltSetMultimap_hashCode_closure.prototype = {
    call$1(key) {
      var t2,
        t1 = this.$this;
      t1.$ti._precomputed1._as(key);
      t2 = J.get$hashCode$(key);
      t1 = J.get$hashCode$(t1._set_multimap$_map.$index(0, key));
      return A._finish(A._combine(A._combine(0, B.JSInt_methods.get$hashCode(t2)), B.JSInt_methods.get$hashCode(t1)));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1)");
    }
  };
  A._BuiltSetMultimap.prototype = {};
  A.SetMultimapBuilder.prototype = {
    build$0() {
      var t1, key, t2, t3, t4, builtSet, _this = this,
        _s9_ = "_builtMap";
      if (_this._builtMapOwner == null) {
        t1 = _this.__SetMultimapBuilder__builderMap_A;
        t1 === $ && A.throwLateFieldNI("_builderMap");
        t1 = A.LinkedHashMapKeyIterator$(t1, t1._modifications, A._instanceType(t1)._precomputed1);
        for (; t1.moveNext$0();) {
          key = t1.__js_helper$_current;
          t2 = _this.__SetMultimapBuilder__builderMap_A.$index(0, key);
          if (t2._setOwner == null) {
            t3 = t2._setFactory;
            t4 = t2.__SetBuilder__set_A;
            t4 === $ && A.throwLateFieldNI("_set");
            t2.set$_setOwner(new A._BuiltSet(t3, t4, A._instanceType(t2)._eval$1("_BuiltSet<1>")));
          }
          builtSet = t2._setOwner;
          t2 = builtSet._set$_set._collection$_length;
          t3 = _this.__SetMultimapBuilder__builtMap_A;
          if (t2 === 0) {
            t3 === $ && A.throwLateFieldNI(_s9_);
            t3.remove$1(0, key);
          } else {
            t3 === $ && A.throwLateFieldNI(_s9_);
            t3.$indexSet(0, key, builtSet);
          }
        }
        t1 = _this.__SetMultimapBuilder__builtMap_A;
        t1 === $ && A.throwLateFieldNI(_s9_);
        t2 = _this.$ti;
        t3 = t2._rest[1];
        _this.set$_builtMapOwner(new A._BuiltSetMultimap(t1, A.BuiltSet_BuiltSet$from(B.List_empty, t3), t2._eval$1("@<1>")._bind$1(t3)._eval$1("_BuiltSetMultimap<1,2>")));
      }
      t1 = _this._builtMapOwner;
      t1.toString;
      return t1;
    },
    replace$1(multimap) {
      this._setWithCopyAndCheck$2(multimap.get$keys(multimap), new A.SetMultimapBuilder_replace_closure(multimap));
    },
    _getValuesBuilder$1(key) {
      var t2, result, builtValues, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t2 = _this.__SetMultimapBuilder__builderMap_A;
      t2 === $ && A.throwLateFieldNI("_builderMap");
      result = t2.$index(0, key);
      if (result == null) {
        t2 = _this.__SetMultimapBuilder__builtMap_A;
        t2 === $ && A.throwLateFieldNI("_builtMap");
        builtValues = t2.$index(0, key);
        if (builtValues == null)
          result = A.SetBuilder_SetBuilder(t1._rest[1]);
        else {
          t1 = builtValues.$ti;
          t1._eval$1("_BuiltSet<1>")._as(builtValues);
          result = new A.SetBuilder(builtValues._setFactory, builtValues._set$_set, builtValues, t1._eval$1("SetBuilder<1>"));
        }
        _this.__SetMultimapBuilder__builderMap_A.$indexSet(0, key, result);
      }
      return result;
    },
    _setWithCopyAndCheck$2(keys, lookup) {
      var t1, t2, t3, t4, t5, t6, key, t7, value, t8, t9, _this = this, _null = null;
      _this.set$_builtMapOwner(_null);
      t1 = _this.$ti;
      t2 = t1._precomputed1;
      t3 = t1._eval$1("BuiltSet<2>");
      t4 = t1._eval$1("Map<1,BuiltSet<2>>");
      _this.set$__SetMultimapBuilder__builtMap_A(t4._as(A.LinkedHashMap_LinkedHashMap$_empty(t2, t3)));
      _this.set$__SetMultimapBuilder__builderMap_A(t1._eval$1("Map<1,SetBuilder<2>>")._as(A.LinkedHashMap_LinkedHashMap$_empty(t2, t1._eval$1("SetBuilder<2>"))));
      for (t5 = keys.get$iterator(keys), t6 = type$.Iterable_dynamic, t1 = t1._rest[1]; t5.moveNext$0();) {
        key = t5.get$current();
        if (t2._is(key))
          for (t7 = J.get$iterator$ax(t6._as(lookup.call$1(key))); t7.moveNext$0();) {
            value = t7.get$current();
            if (t1._is(value)) {
              t2._as(key);
              t1._as(value);
              if (_this._builtMapOwner != null) {
                t8 = _this.__SetMultimapBuilder__builtMap_A;
                t8 === $ && A.throwLateFieldNI("_builtMap");
                _this.set$__SetMultimapBuilder__builtMap_A(t4._as(A.LinkedHashMap_LinkedHashMap$from(t8, t2, t3)));
                _this.set$_builtMapOwner(_null);
              }
              _this._set_multimap$_checkKey$1(key);
              _this._set_multimap$_checkValue$1(value);
              t8 = _this._getValuesBuilder$1(key);
              t9 = t8.$ti._precomputed1;
              t9._as(value);
              if (!$.$get$isSoundMode() && !t9._is(null))
                if (value == null)
                  A.throwExpression(A.ArgumentError$("null element", _null));
              t8.get$_safeSet().add$1(0, value);
            } else
              throw A.wrapException(A.ArgumentError$("map contained invalid value: " + A.S(value) + ", for key " + A.S(key), _null));
          }
        else
          throw A.wrapException(A.ArgumentError$("map contained invalid key: " + A.S(key), _null));
      }
    },
    _set_multimap$_checkKey$1(key) {
      var t1 = this.$ti._precomputed1;
      t1._as(key);
      if ($.$get$isSoundMode())
        return;
      if (t1._is(null))
        return;
      if (key == null)
        throw A.wrapException(A.ArgumentError$("invalid key: " + A.S(key), null));
    },
    _set_multimap$_checkValue$1(value) {
      var t1 = this.$ti._rest[1];
      t1._as(value);
      if ($.$get$isSoundMode())
        return;
      if (t1._is(null))
        return;
      if (value == null)
        throw A.wrapException(A.ArgumentError$("invalid value: " + A.S(value), null));
    },
    set$__SetMultimapBuilder__builtMap_A(__SetMultimapBuilder__builtMap_A) {
      this.__SetMultimapBuilder__builtMap_A = this.$ti._eval$1("Map<1,BuiltSet<2>>")._as(__SetMultimapBuilder__builtMap_A);
    },
    set$_builtMapOwner(_builtMapOwner) {
      this._builtMapOwner = this.$ti._eval$1("_BuiltSetMultimap<1,2>?")._as(_builtMapOwner);
    },
    set$__SetMultimapBuilder__builderMap_A(__SetMultimapBuilder__builderMap_A) {
      this.__SetMultimapBuilder__builderMap_A = this.$ti._eval$1("Map<1,SetBuilder<2>>")._as(__SetMultimapBuilder__builderMap_A);
    }
  };
  A.SetMultimapBuilder_replace_closure.prototype = {
    call$1(k) {
      return this.multimap.$index(0, k);
    },
    $signature: 8
  };
  A.newBuiltValueToStringHelper_closure.prototype = {
    call$1(className) {
      var t1 = new A.StringBuffer(""),
        t2 = "" + className;
      t1._contents = t2;
      t1._contents = t2 + " {\n";
      $._indentingBuiltValueToStringHelperIndent = $._indentingBuiltValueToStringHelperIndent + 2;
      return new A.IndentingBuiltValueToStringHelper(t1);
    },
    $signature: 137
  };
  A.IndentingBuiltValueToStringHelper.prototype = {
    add$2(_, field, value) {
      var t1, t2;
      if (value != null) {
        t1 = this._result;
        t1.toString;
        t2 = t1._contents += B.JSString_methods.$mul(" ", $._indentingBuiltValueToStringHelperIndent);
        t2 += field;
        t1._contents = t2;
        t1._contents = t2 + "=";
        t2 = t1._contents += A.S(value);
        t1._contents = t2 + ",\n";
      }
    },
    toString$0(_) {
      var t2, stringResult,
        t1 = $._indentingBuiltValueToStringHelperIndent - 2;
      $._indentingBuiltValueToStringHelperIndent = t1;
      t2 = this._result;
      t2.toString;
      t1 = t2._contents += B.JSString_methods.$mul(" ", t1);
      t2._contents = t1 + "}";
      stringResult = J.toString$0$(this._result);
      this._result = null;
      return stringResult;
    }
  };
  A.BuiltValueNullFieldError.prototype = {
    toString$0(_) {
      return 'Tried to construct class "' + this.type + '" with null for non-nullable field "' + this.field + '".';
    }
  };
  A.BuiltValueNestedFieldError.prototype = {
    toString$0(_) {
      return 'Tried to build class "' + this.type + '" but nested builder for field "' + this.field + '" threw: ' + this.error;
    }
  };
  A.JsonObject.prototype = {
    toString$0(_) {
      return J.toString$0$(this.get$value());
    }
  };
  A.BoolJsonObject.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.BoolJsonObject))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSBool_methods.get$hashCode(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.ListJsonObject.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.ListJsonObject))
        return false;
      return B.C_DeepCollectionEquality.equals$2(0, this.value, other.value);
    },
    get$hashCode(_) {
      return B.C_DeepCollectionEquality.hash$1(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.MapJsonObject.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.MapJsonObject))
        return false;
      return B.C_DeepCollectionEquality.equals$2(0, this.value, other.value);
    },
    get$hashCode(_) {
      return B.C_DeepCollectionEquality.hash$1(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.NumJsonObject.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.NumJsonObject))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSNumber_methods.get$hashCode(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.StringJsonObject.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!(other instanceof A.StringJsonObject))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.Serializers_Serializers_closure.prototype = {
    call$0() {
      return A.ListBuilder_ListBuilder(B.List_empty, type$.Object);
    },
    $signature: 138
  };
  A.Serializers_Serializers_closure0.prototype = {
    call$0() {
      var t1 = type$.Object;
      return A.ListMultimapBuilder_ListMultimapBuilder(t1, t1);
    },
    $signature: 139
  };
  A.Serializers_Serializers_closure1.prototype = {
    call$0() {
      var t1 = type$.Object;
      return A.MapBuilder_MapBuilder(t1, t1);
    },
    $signature: 140
  };
  A.Serializers_Serializers_closure2.prototype = {
    call$0() {
      return A.SetBuilder_SetBuilder(type$.Object);
    },
    $signature: 141
  };
  A.Serializers_Serializers_closure3.prototype = {
    call$0() {
      var t1 = type$.Object;
      return A.SetMultimapBuilder_SetMultimapBuilder(t1, t1);
    },
    $signature: 142
  };
  A.FullType.prototype = {
    $eq(_, other) {
      var t1, t2, t3, t4, i, t5, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof A.FullType))
        return false;
      if (_this.root != other.root)
        return false;
      if (_this.nullable !== other.nullable)
        return false;
      t1 = _this.parameters;
      t2 = t1.length;
      t3 = other.parameters;
      t4 = t3.length;
      if (t2 !== t4)
        return false;
      for (i = 0; i !== t2; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        t5 = t1[i];
        if (!(i < t4))
          return A.ioore(t3, i);
        if (!t5.$eq(0, t3[i]))
          return false;
      }
      return true;
    },
    get$hashCode(_) {
      var t1 = A.hashObjects(this.parameters);
      t1 = A._finish(A._combine(A._combine(0, J.get$hashCode$(this.root)), B.JSInt_methods.get$hashCode(t1)));
      return t1 ^ (this.nullable ? 1768878041 : 0);
    },
    toString$0(_) {
      var t2,
        t1 = this.root;
      if (t1 == null)
        t1 = "unspecified";
      else {
        t2 = this.parameters;
        t1 = t2.length === 0 ? A.FullType__getRawName(t1) : A.FullType__getRawName(t1) + "<" + B.JSArray_methods.join$1(t2, ", ") + ">";
        t1 += this.nullable ? "?" : "";
      }
      return t1;
    }
  };
  A.DeserializationError.prototype = {
    toString$0(_) {
      return "Deserializing to '" + this.type.toString$0(0) + "' failed due to: " + this.error.toString$0(0);
    }
  };
  A.BigIntSerializer.prototype = {
    serialize$3$specifiedType(serializers, bigInt, specifiedType) {
      return type$.BigInt._as(bigInt).toString$0(0);
    },
    serialize$2(serializers, bigInt) {
      return this.serialize$3$specifiedType(serializers, bigInt, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var result;
      A._asString(serialized);
      result = A._BigIntImpl__tryParse(serialized, null);
      if (result == null)
        A.throwExpression(A.FormatException$("Could not parse BigInt", serialized, null));
      return result;
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "BigInt";
    }
  };
  A.BoolSerializer.prototype = {
    serialize$3$specifiedType(serializers, boolean, specifiedType) {
      return A._asBool(boolean);
    },
    serialize$2(serializers, boolean) {
      return this.serialize$3$specifiedType(serializers, boolean, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return A._asBool(serialized);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "bool";
    }
  };
  A.BuiltJsonSerializers.prototype = {
    deserializeWith$1$2(serializer, serialized, $T) {
      return $T._eval$1("0?")._as(this.deserialize$2$specifiedType(serialized, new A.FullType(B.JSArray_methods.get$first($T._eval$1("Serializer<0>")._as(serializer).get$types()), B.List_empty2, false)));
    },
    serializeWith$1$2(serializer, object, $T) {
      $T._eval$1("Serializer<0>")._as(serializer);
      return this.serialize$2$specifiedType($T._eval$1("0?")._as(object), new A.FullType(J.get$first$ax(serializer.get$types()), B.List_empty2, false));
    },
    serialize$2$specifiedType(object, specifiedType) {
      var t1, t2, t3, t4, t5, t6, result;
      for (t1 = this.serializerPlugins._list, t2 = A._arrayInstanceType(t1), t3 = t2._eval$1("ArrayIterator<1>"), t4 = new J.ArrayIterator(t1, t1.length, t3), t5 = specifiedType.root, t2 = t2._precomputed1; t4.moveNext$0();) {
        t6 = t4._current;
        if (t6 == null)
          t2._as(t6);
        if ($.$get$StandardJsonPlugin__unsupportedTypes()._set$_set.contains$1(0, t5))
          A.throwExpression(A.ArgumentError$("Standard JSON cannot serialize type " + A.S(t5) + ".", null));
      }
      result = this._serialize$2(object, specifiedType);
      for (t1 = new J.ArrayIterator(t1, t1.length, t3); t1.moveNext$0();) {
        t3 = t1._current;
        result = (t3 == null ? t2._as(t3) : t3).afterSerialize$2(result, specifiedType);
      }
      return result;
    },
    serialize$1(object) {
      return this.serialize$2$specifiedType(object, B.FullType_null_List_empty_false);
    },
    _serialize$2(object, specifiedType) {
      var serializer, result, _this = this,
        _s62_ = string$.serial,
        t1 = specifiedType.root;
      if (t1 == null) {
        t1 = J.getInterceptor$(object);
        serializer = _this.serializerForType$1(t1.get$runtimeType(object));
        if (serializer == null)
          throw A.wrapException(A.StateError$("No serializer for '" + t1.get$runtimeType(object).toString$0(0) + "'."));
        if (type$.StructuredSerializer_dynamic._is(serializer)) {
          result = [serializer.get$wireName()];
          B.JSArray_methods.addAll$1(result, serializer.serialize$2(_this, object));
          return result;
        } else if (type$.PrimitiveSerializer_dynamic._is(serializer))
          return object == null ? [serializer.get$wireName(), null] : A._setArrayType([serializer.get$wireName(), serializer.serialize$2(_this, object)], type$.JSArray_Object);
        else
          throw A.wrapException(A.StateError$(_s62_));
      } else {
        serializer = _this.serializerForType$1(t1);
        if (serializer == null)
          return _this.serialize$1(object);
        if (type$.StructuredSerializer_dynamic._is(serializer))
          return object == null ? null : J.toList$0$ax(serializer.serialize$3$specifiedType(_this, object, specifiedType));
        else if (type$.PrimitiveSerializer_dynamic._is(serializer))
          return object == null ? null : serializer.serialize$3$specifiedType(_this, object, specifiedType);
        else
          throw A.wrapException(A.StateError$(_s62_));
      }
    },
    deserialize$2$specifiedType(object, specifiedType) {
      var t1, t2, t3, t4, transformedObject, t5, result;
      for (t1 = this.serializerPlugins._list, t2 = A._arrayInstanceType(t1), t3 = t2._eval$1("ArrayIterator<1>"), t4 = new J.ArrayIterator(t1, t1.length, t3), t2 = t2._precomputed1, transformedObject = object; t4.moveNext$0();) {
        t5 = t4._current;
        transformedObject = (t5 == null ? t2._as(t5) : t5).beforeDeserialize$2(transformedObject, specifiedType);
      }
      result = this._deserialize$3(object, transformedObject, specifiedType);
      for (t1 = new J.ArrayIterator(t1, t1.length, t3); t1.moveNext$0();) {
        t3 = t1._current;
        if (t3 == null)
          t2._as(t3);
      }
      return result;
    },
    deserialize$1(object) {
      return this.deserialize$2$specifiedType(object, B.FullType_null_List_empty_false);
    },
    _deserialize$3(objectBeforePlugins, object, specifiedType) {
      var serializer, error, primitive, error0, serializer0, error1, error2, wireName, exception, _this = this,
        _s19_ = "No serializer for '",
        _s62_ = string$.serial,
        t1 = specifiedType.root;
      if (t1 == null) {
        type$.List_nullable_Object._as(object);
        t1 = J.getInterceptor$ax(object);
        wireName = A._asString(t1.get$first(object));
        serializer = _this._wireNameToSerializer._map$_map.$index(0, wireName);
        if (serializer == null)
          throw A.wrapException(A.StateError$(_s19_ + wireName + "'."));
        if (type$.StructuredSerializer_dynamic._is(serializer))
          try {
            t1 = serializer.deserialize$2(_this, t1.sublist$1(object, 1));
            return t1;
          } catch (exception) {
            t1 = A.unwrapException(exception);
            if (type$.Error._is(t1)) {
              error = t1;
              throw A.wrapException(A.DeserializationError_DeserializationError(object, specifiedType, error));
            } else
              throw exception;
          }
        else if (type$.PrimitiveSerializer_dynamic._is(serializer))
          try {
            primitive = t1.$index(object, 1);
            t1 = primitive == null ? null : serializer.deserialize$2(_this, primitive);
            return t1;
          } catch (exception) {
            t1 = A.unwrapException(exception);
            if (type$.Error._is(t1)) {
              error0 = t1;
              throw A.wrapException(A.DeserializationError_DeserializationError(object, specifiedType, error0));
            } else
              throw exception;
          }
        else
          throw A.wrapException(A.StateError$(_s62_));
      } else {
        serializer0 = _this.serializerForType$1(t1);
        if (serializer0 == null)
          if (type$.List_dynamic._is(object) && typeof J.get$first$ax(object) == "string")
            return _this.deserialize$1(objectBeforePlugins);
          else
            throw A.wrapException(A.StateError$(_s19_ + t1.toString$0(0) + "'."));
        if (type$.StructuredSerializer_dynamic._is(serializer0))
          try {
            t1 = object == null ? null : serializer0.deserialize$3$specifiedType(_this, type$.Iterable_nullable_Object._as(object), specifiedType);
            return t1;
          } catch (exception) {
            t1 = A.unwrapException(exception);
            if (type$.Error._is(t1)) {
              error1 = t1;
              throw A.wrapException(A.DeserializationError_DeserializationError(object, specifiedType, error1));
            } else
              throw exception;
          }
        else if (type$.PrimitiveSerializer_dynamic._is(serializer0))
          try {
            t1 = object == null ? null : serializer0.deserialize$3$specifiedType(_this, object, specifiedType);
            return t1;
          } catch (exception) {
            t1 = A.unwrapException(exception);
            if (type$.Error._is(t1)) {
              error2 = t1;
              throw A.wrapException(A.DeserializationError_DeserializationError(object, specifiedType, error2));
            } else
              throw exception;
          }
        else
          throw A.wrapException(A.StateError$(_s62_));
      }
    },
    serializerForType$1(type) {
      var t1 = this._typeToSerializer._map$_map.$index(0, type);
      return t1 == null ? this._typeNameToSerializer._map$_map.$index(0, A._getRawName(type)) : t1;
    },
    newBuilder$1(fullType) {
      var t1,
        builderFactory = this.builderFactories._map$_map.$index(0, fullType);
      if (builderFactory == null)
        this._throwMissingBuilderFactory$1(fullType);
      t1 = builderFactory.call$0();
      return t1 == null ? type$.Object._as(t1) : t1;
    },
    _throwMissingBuilderFactory$1(fullType) {
      throw A.wrapException(A.StateError$("No builder factory for " + fullType.toString$0(0) + ". Fix by adding one, see SerializersBuilder.addBuilderFactory."));
    },
    toBuilder$0() {
      var t3, t4, t5, t6, t7, t8, t9, _this = this,
        t1 = _this._typeToSerializer,
        t2 = t1.$ti;
      t2._eval$1("_BuiltMap<1,2>")._as(t1);
      t3 = _this._wireNameToSerializer;
      t4 = t3.$ti;
      t4._eval$1("_BuiltMap<1,2>")._as(t3);
      t5 = _this._typeNameToSerializer;
      t6 = t5.$ti;
      t6._eval$1("_BuiltMap<1,2>")._as(t5);
      t7 = _this.builderFactories;
      t8 = t7.$ti;
      t8._eval$1("_BuiltMap<1,2>")._as(t7);
      t9 = _this.serializerPlugins;
      return new A.BuiltJsonSerializersBuilder(new A.MapBuilder(t1._mapFactory, t1._map$_map, t1, t2._eval$1("@<1>")._bind$1(t2._rest[1])._eval$1("MapBuilder<1,2>")), new A.MapBuilder(t3._mapFactory, t3._map$_map, t3, t4._eval$1("@<1>")._bind$1(t4._rest[1])._eval$1("MapBuilder<1,2>")), new A.MapBuilder(t5._mapFactory, t5._map$_map, t5, t6._eval$1("@<1>")._bind$1(t6._rest[1])._eval$1("MapBuilder<1,2>")), new A.MapBuilder(t7._mapFactory, t7._map$_map, t7, t8._eval$1("@<1>")._bind$1(t8._rest[1])._eval$1("MapBuilder<1,2>")), A.ListBuilder_ListBuilder(t9, t9.$ti._precomputed1));
    },
    $isSerializers: 1
  };
  A.BuiltJsonSerializersBuilder.prototype = {
    add$1(_, serializer) {
      var t1, t2, t3, t4, t5, t6, $name, genericsStart, t7;
      if (!type$.StructuredSerializer_dynamic._is(serializer) && !type$.PrimitiveSerializer_dynamic._is(serializer))
        throw A.wrapException(A.ArgumentError$(string$.serial, null));
      this._wireNameToSerializer.$indexSet(0, serializer.get$wireName(), serializer);
      for (t1 = J.get$iterator$ax(serializer.get$types()), t2 = this._typeToSerializer, t3 = t2.$ti, t4 = t3._precomputed1, t3 = t3._rest[1], t5 = this._typeNameToSerializer; t1.moveNext$0();) {
        t6 = t1.get$current();
        t4._as(t6);
        t3._as(serializer);
        t2._checkKey$1(t6);
        t2._checkValue$1(serializer);
        t2.get$_safeMap().$indexSet(0, t6, serializer);
        $name = t6.toString$0(0);
        genericsStart = B.JSString_methods.indexOf$1($name, "<");
        t6 = genericsStart === -1 ? $name : B.JSString_methods.substring$2($name, 0, genericsStart);
        t7 = t5.$ti;
        t7._precomputed1._as(t6);
        t7._rest[1]._as(serializer);
        t5._checkKey$1(t6);
        t5._checkValue$1(serializer);
        t5.get$_safeMap().$indexSet(0, t6, serializer);
      }
    },
    addBuilderFactory$2(types, $function) {
      var t2, t3,
        t1 = this._builderFactories;
      t1.$indexSet(0, types, $function);
      t2 = types.root;
      t3 = types.parameters;
      t1.$indexSet(0, !types.nullable ? new A.FullType(t2, t3, true) : new A.FullType(t2, t3, false), $function);
    },
    addPlugin$1(plugin) {
      var t1 = this._plugins,
        t2 = t1.$ti._precomputed1;
      t2._as(plugin);
      !$.$get$isSoundMode() && !t2._is(null);
      B.JSArray_methods.add$1(t1.get$_safeList(), plugin);
    },
    build$0() {
      var _this = this;
      return new A.BuiltJsonSerializers(_this._typeToSerializer.build$0(), _this._wireNameToSerializer.build$0(), _this._typeNameToSerializer.build$0(), _this._builderFactories.build$0(), _this._plugins.build$0());
    }
  };
  A.BuiltListMultimapSerializer.prototype = {
    serialize$3$specifiedType(serializers, builtListMultimap, specifiedType) {
      var t1, t2, t3, keyType, valueType, result, key, result0, t4, t5, t6, t7;
      type$.BuiltListMultimap_dynamic_dynamic._as(builtListMultimap);
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!serializers.builderFactories._map$_map.containsKey$1(specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = B.FullType_null_List_empty_false;
      else {
        if (1 >= t2)
          return A.ioore(t1, 1);
        valueType = t1[1];
      }
      result = [];
      for (t1 = builtListMultimap.get$keys(builtListMultimap), t2 = t1.__js_helper$_map, t1 = A.LinkedHashMapKeyIterator$(t2, t2._modifications, t1.$ti._precomputed1), t2 = builtListMultimap._list_multimap$_map, t3 = builtListMultimap._emptyList; t1.moveNext$0();) {
        key = t1.__js_helper$_current;
        result.push(serializers.serialize$2$specifiedType(key, keyType));
        result0 = t2.$index(0, key);
        t4 = result0 == null ? t3 : result0;
        t5 = t4._list;
        t6 = A._arrayInstanceType(t5);
        t7 = t6._eval$1("MappedListIterable<1,Object?>");
        result.push(A.List_List$of(new A.MappedListIterable(t5, t6._eval$1("Object?(1)")._as(t4.$ti._eval$1("Object?(1)")._as(new A.BuiltListMultimapSerializer_serialize_closure(serializers, valueType))), t7), true, t7._eval$1("ListIterable.E")));
      }
      return result;
    },
    serialize$2(serializers, builtListMultimap) {
      return this.serialize$3$specifiedType(serializers, builtListMultimap, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var isUnderspecified, t2, t3, t4, keyType, valueType, result, t5, t6, t7, i, key, values, t8, value, t9, t10, t11, t12, _null = null,
        t1 = type$.Iterable_nullable_Object;
      t1._as(serialized);
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t2 = specifiedType.parameters;
      t3 = t2.length;
      t4 = t3 === 0;
      if (t4)
        keyType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t3)
          return A.ioore(t2, 0);
        keyType = t2[0];
      }
      if (t4)
        valueType = B.FullType_null_List_empty_false;
      else {
        if (1 >= t3)
          return A.ioore(t2, 1);
        valueType = t2[1];
      }
      if (isUnderspecified) {
        t2 = type$.Object;
        result = A.ListMultimapBuilder_ListMultimapBuilder(t2, t2);
      } else
        result = type$.ListMultimapBuilder_dynamic_dynamic._as(serializers.newBuilder$1(specifiedType));
      t2 = J.getInterceptor$asx(serialized);
      if (B.JSInt_methods.$mod(t2.get$length(serialized), 2) === 1)
        throw A.wrapException(A.ArgumentError$("odd length", _null));
      for (t3 = result.$ti, t4 = t3._precomputed1, t5 = t3._rest[1], t6 = t3._eval$1("BuiltList<2>"), t3 = t3._eval$1("Map<1,BuiltList<2>>"), t7 = type$.nullable_Object, i = 0; i !== t2.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t2.elementAt$1(serialized, i), keyType);
        values = J.map$1$1$ax(t1._as(t2.elementAt$1(serialized, i + 1)), new A.BuiltListMultimapSerializer_deserialize_closure(serializers, valueType), t7);
        for (t8 = values.get$iterator(values); t8.moveNext$0();) {
          value = t8.get$current();
          t4._as(key);
          t5._as(value);
          if (result._list_multimap$_builtMapOwner != null) {
            t9 = result.__ListMultimapBuilder__builtMap_A;
            t9 === $ && A.throwLateFieldNI("_builtMap");
            result.set$__ListMultimapBuilder__builtMap_A(t3._as(A.LinkedHashMap_LinkedHashMap$from(t9, t4, t6)));
            result.set$_list_multimap$_builtMapOwner(_null);
          }
          result._list_multimap$_checkKey$1(key);
          result._list_multimap$_checkValue$1(value);
          t9 = result._list_multimap$_getValuesBuilder$1(key);
          t10 = t9.$ti;
          t11 = t10._precomputed1;
          t11._as(value);
          if (!$.$get$isSoundMode() && !t11._is(null))
            if (value == null)
              A.throwExpression(A.ArgumentError$("null element", _null));
          if (t9._listOwner != null) {
            t12 = t9.__ListBuilder__list_A;
            t12 === $ && A.throwLateFieldNI("_list");
            t9.set$__ListBuilder__list_A(t10._eval$1("List<1>")._as(A.List_List$from(t12, true, t11)));
            t9.set$_listOwner(_null);
          }
          t9 = t9.__ListBuilder__list_A;
          t9 === $ && A.throwLateFieldNI("_list");
          B.JSArray_methods.add$1(t9, value);
        }
      }
      return result.build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "listMultimap";
    }
  };
  A.BuiltListMultimapSerializer_serialize_closure.prototype = {
    call$1(value) {
      return this.serializers.serialize$2$specifiedType(value, this.valueType);
    },
    $signature: 11
  };
  A.BuiltListMultimapSerializer_deserialize_closure.prototype = {
    call$1(value) {
      return this.serializers.deserialize$2$specifiedType(value, this.valueType);
    },
    $signature: 58
  };
  A.BuiltListSerializer.prototype = {
    serialize$3$specifiedType(serializers, builtList, specifiedType) {
      var t1, t2, elementType;
      type$.BuiltList_dynamic._as(builtList);
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!serializers.builderFactories._map$_map.containsKey$1(specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        elementType = t1[0];
      }
      t1 = builtList._list;
      t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("Object?(1)")._as(builtList.$ti._eval$1("Object?(1)")._as(new A.BuiltListSerializer_serialize_closure(serializers, elementType))), t2._eval$1("MappedListIterable<1,Object?>"));
    },
    serialize$2(serializers, builtList) {
      return this.serialize$3$specifiedType(serializers, builtList, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, elementType, result;
      type$.Iterable_dynamic._as(serialized);
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        elementType = t1[0];
      }
      result = isUnderspecified ? A.ListBuilder_ListBuilder(B.List_empty, type$.Object) : type$.ListBuilder_dynamic._as(serializers.newBuilder$1(specifiedType));
      result.replace$1(J.map$1$1$ax(serialized, new A.BuiltListSerializer_deserialize_closure(serializers, elementType), type$.dynamic));
      return result.build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "list";
    }
  };
  A.BuiltListSerializer_serialize_closure.prototype = {
    call$1(item) {
      return this.serializers.serialize$2$specifiedType(item, this.elementType);
    },
    $signature: 11
  };
  A.BuiltListSerializer_deserialize_closure.prototype = {
    call$1(item) {
      return this.serializers.deserialize$2$specifiedType(item, this.elementType);
    },
    $signature: 11
  };
  A.BuiltMapSerializer.prototype = {
    serialize$3$specifiedType(serializers, builtMap, specifiedType) {
      var t1, t2, t3, keyType, valueType, result, key;
      type$.BuiltMap_dynamic_dynamic._as(builtMap);
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!serializers.builderFactories._map$_map.containsKey$1(specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = B.FullType_null_List_empty_false;
      else {
        if (1 >= t2)
          return A.ioore(t1, 1);
        valueType = t1[1];
      }
      result = [];
      for (t1 = builtMap.get$keys(builtMap), t2 = t1.__js_helper$_map, t1 = A.LinkedHashMapKeyIterator$(t2, t2._modifications, t1.$ti._precomputed1), t2 = builtMap._map$_map; t1.moveNext$0();) {
        key = t1.__js_helper$_current;
        result.push(serializers.serialize$2$specifiedType(key, keyType));
        result.push(serializers.serialize$2$specifiedType(t2.$index(0, key), valueType));
      }
      return result;
    },
    serialize$2(serializers, builtMap) {
      return this.serialize$3$specifiedType(serializers, builtMap, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, t3, keyType, valueType, result, i, key, value;
      type$.Iterable_dynamic._as(serialized);
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = B.FullType_null_List_empty_false;
      else {
        if (1 >= t2)
          return A.ioore(t1, 1);
        valueType = t1[1];
      }
      if (isUnderspecified) {
        t1 = type$.Object;
        result = A.MapBuilder_MapBuilder(t1, t1);
      } else
        result = type$.MapBuilder_dynamic_dynamic._as(serializers.newBuilder$1(specifiedType));
      t1 = J.getInterceptor$asx(serialized);
      if (B.JSInt_methods.$mod(t1.get$length(serialized), 2) === 1)
        throw A.wrapException(A.ArgumentError$("odd length", null));
      for (t2 = result.$ti, t3 = t2._precomputed1, t2 = t2._rest[1], i = 0; i !== t1.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i), keyType);
        value = serializers.deserialize$2$specifiedType(t1.elementAt$1(serialized, i + 1), valueType);
        t3._as(key);
        t2._as(value);
        result._checkKey$1(key);
        result._checkValue$1(value);
        result.get$_safeMap().$indexSet(0, key, value);
      }
      return result.build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "map";
    }
  };
  A.BuiltSetMultimapSerializer.prototype = {
    serialize$3$specifiedType(serializers, builtSetMultimap, specifiedType) {
      var t1, t2, t3, keyType, valueType, result, key, result0, t4, t5, t6, t7;
      type$.BuiltSetMultimap_dynamic_dynamic._as(builtSetMultimap);
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!serializers.builderFactories._map$_map.containsKey$1(specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      t3 = t2 === 0;
      if (t3)
        keyType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        keyType = t1[0];
      }
      if (t3)
        valueType = B.FullType_null_List_empty_false;
      else {
        if (1 >= t2)
          return A.ioore(t1, 1);
        valueType = t1[1];
      }
      result = [];
      for (t1 = builtSetMultimap.get$keys(builtSetMultimap), t2 = t1.__js_helper$_map, t1 = A.LinkedHashMapKeyIterator$(t2, t2._modifications, t1.$ti._precomputed1), t2 = builtSetMultimap._set_multimap$_map, t3 = builtSetMultimap._emptySet; t1.moveNext$0();) {
        key = t1.__js_helper$_current;
        result.push(serializers.serialize$2$specifiedType(key, keyType));
        result0 = t2.$index(0, key);
        t4 = result0 == null ? t3 : result0;
        t5 = t4._set$_set;
        t6 = A._instanceType(t5);
        t7 = t6._eval$1("EfficientLengthMappedIterable<1,Object?>");
        result.push(A.List_List$of(new A.EfficientLengthMappedIterable(t5, t6._eval$1("Object?(1)")._as(t4.$ti._eval$1("Object?(1)")._as(new A.BuiltSetMultimapSerializer_serialize_closure(serializers, valueType))), t7), true, t7._eval$1("Iterable.E")));
      }
      return result;
    },
    serialize$2(serializers, builtSetMultimap) {
      return this.serialize$3$specifiedType(serializers, builtSetMultimap, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var isUnderspecified, t2, t3, t4, keyType, valueType, result, t5, t6, i, key, t7, value, t8, t9,
        t1 = type$.Iterable_dynamic;
      t1._as(serialized);
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t2 = specifiedType.parameters;
      t3 = t2.length;
      t4 = t3 === 0;
      if (t4)
        keyType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t3)
          return A.ioore(t2, 0);
        keyType = t2[0];
      }
      if (t4)
        valueType = B.FullType_null_List_empty_false;
      else {
        if (1 >= t3)
          return A.ioore(t2, 1);
        valueType = t2[1];
      }
      if (isUnderspecified) {
        t2 = type$.Object;
        result = A.SetMultimapBuilder_SetMultimapBuilder(t2, t2);
      } else
        result = type$.SetMultimapBuilder_dynamic_dynamic._as(serializers.newBuilder$1(specifiedType));
      t2 = J.getInterceptor$asx(serialized);
      if (B.JSInt_methods.$mod(t2.get$length(serialized), 2) === 1)
        throw A.wrapException(A.ArgumentError$("odd length", null));
      for (t3 = result.$ti, t4 = t3._precomputed1, t5 = t3._rest[1], t6 = t3._eval$1("BuiltSet<2>"), t3 = t3._eval$1("Map<1,BuiltSet<2>>"), i = 0; i !== t2.get$length(serialized); i += 2) {
        key = serializers.deserialize$2$specifiedType(t2.elementAt$1(serialized, i), keyType);
        for (t7 = J.get$iterator$ax(t1._as(J.map$1$ax(t2.elementAt$1(serialized, i + 1), new A.BuiltSetMultimapSerializer_deserialize_closure(serializers, valueType)))); t7.moveNext$0();) {
          value = t7.get$current();
          t4._as(key);
          t5._as(value);
          if (result._builtMapOwner != null) {
            t8 = result.__SetMultimapBuilder__builtMap_A;
            t8 === $ && A.throwLateFieldNI("_builtMap");
            result.set$__SetMultimapBuilder__builtMap_A(t3._as(A.LinkedHashMap_LinkedHashMap$from(t8, t4, t6)));
            result.set$_builtMapOwner(null);
          }
          result._set_multimap$_checkKey$1(key);
          result._set_multimap$_checkValue$1(value);
          t8 = result._getValuesBuilder$1(key);
          t9 = t8.$ti._precomputed1;
          t9._as(value);
          if (!$.$get$isSoundMode() && !t9._is(null))
            if (value == null)
              A.throwExpression(A.ArgumentError$("null element", null));
          t8.get$_safeSet().add$1(0, value);
        }
      }
      return result.build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "setMultimap";
    }
  };
  A.BuiltSetMultimapSerializer_serialize_closure.prototype = {
    call$1(value) {
      return this.serializers.serialize$2$specifiedType(value, this.valueType);
    },
    $signature: 11
  };
  A.BuiltSetMultimapSerializer_deserialize_closure.prototype = {
    call$1(value) {
      return this.serializers.deserialize$2$specifiedType(value, this.valueType);
    },
    $signature: 11
  };
  A.BuiltSetSerializer.prototype = {
    serialize$3$specifiedType(serializers, builtSet, specifiedType) {
      var t1, t2, elementType;
      type$.BuiltSet_dynamic._as(builtSet);
      if (!(specifiedType.root == null || specifiedType.parameters.length === 0))
        if (!serializers.builderFactories._map$_map.containsKey$1(specifiedType))
          serializers._throwMissingBuilderFactory$1(specifiedType);
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        elementType = t1[0];
      }
      t1 = builtSet._set$_set;
      t2 = A._instanceType(t1);
      return new A.EfficientLengthMappedIterable(t1, t2._eval$1("Object?(1)")._as(builtSet.$ti._eval$1("Object?(1)")._as(new A.BuiltSetSerializer_serialize_closure(serializers, elementType))), t2._eval$1("EfficientLengthMappedIterable<1,Object?>"));
    },
    serialize$2(serializers, builtSet) {
      return this.serialize$3$specifiedType(serializers, builtSet, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var isUnderspecified, t1, t2, elementType, result;
      type$.Iterable_dynamic._as(serialized);
      isUnderspecified = specifiedType.root == null || specifiedType.parameters.length === 0;
      t1 = specifiedType.parameters;
      t2 = t1.length;
      if (t2 === 0)
        elementType = B.FullType_null_List_empty_false;
      else {
        if (0 >= t2)
          return A.ioore(t1, 0);
        elementType = t1[0];
      }
      result = isUnderspecified ? A.SetBuilder_SetBuilder(type$.Object) : type$.SetBuilder_dynamic._as(serializers.newBuilder$1(specifiedType));
      result.replace$1(J.map$1$1$ax(serialized, new A.BuiltSetSerializer_deserialize_closure(serializers, elementType), type$.dynamic));
      return result.build$0();
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isStructuredSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "set";
    }
  };
  A.BuiltSetSerializer_serialize_closure.prototype = {
    call$1(item) {
      return this.serializers.serialize$2$specifiedType(item, this.elementType);
    },
    $signature: 11
  };
  A.BuiltSetSerializer_deserialize_closure.prototype = {
    call$1(item) {
      return this.serializers.deserialize$2$specifiedType(item, this.elementType);
    },
    $signature: 11
  };
  A.DateTimeSerializer.prototype = {
    serialize$3$specifiedType(serializers, dateTime, specifiedType) {
      type$.DateTime._as(dateTime);
      if (!dateTime.isUtc)
        throw A.wrapException(A.ArgumentError$value(dateTime, "dateTime", "Must be in utc for serialization."));
      return 1000 * dateTime._value;
    },
    serialize$2(serializers, dateTime) {
      return this.serialize$3$specifiedType(serializers, dateTime, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t2,
        t1 = B.JSNumber_methods.round$0(A._asInt(serialized) / 1000);
      if (Math.abs(t1) <= 864e13)
        t2 = false;
      else
        t2 = true;
      if (t2)
        A.throwExpression(A.ArgumentError$("DateTime is outside valid range: " + t1, null));
      A.checkNotNullable(true, "isUtc", type$.bool);
      return new A.DateTime(t1, true);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "DateTime";
    }
  };
  A.DoubleSerializer.prototype = {
    serialize$3$specifiedType(serializers, aDouble, specifiedType) {
      A._asDouble(aDouble);
      if (isNaN(aDouble))
        return "NaN";
      else if (aDouble == 1 / 0 || aDouble == -1 / 0)
        return B.JSNumber_methods.get$isNegative(aDouble) ? "-INF" : "INF";
      else
        return aDouble;
    },
    serialize$2(serializers, aDouble) {
      return this.serialize$3$specifiedType(serializers, aDouble, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1 = J.getInterceptor$(serialized);
      if (t1.$eq(serialized, "NaN"))
        return 0 / 0;
      else if (t1.$eq(serialized, "-INF"))
        return -1 / 0;
      else if (t1.$eq(serialized, "INF"))
        return 1 / 0;
      else
        return A._asNum(serialized);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "double";
    }
  };
  A.DurationSerializer.prototype = {
    serialize$3$specifiedType(serializers, duration, specifiedType) {
      return type$.Duration._as(duration)._duration;
    },
    serialize$2(serializers, duration) {
      return this.serialize$3$specifiedType(serializers, duration, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return new A.Duration(A._asInt(serialized));
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "Duration";
    }
  };
  A.Int64Serializer.prototype = {
    serialize$3$specifiedType(serializers, int64, specifiedType) {
      return type$.Int64._as(int64)._toRadixString$1(10);
    },
    serialize$2(serializers, int64) {
      return this.serialize$3$specifiedType(serializers, int64, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1 = A.Int64__parseRadix(A._asString(serialized), 10, true);
      t1.toString;
      return t1;
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "Int64";
    }
  };
  A.IntSerializer.prototype = {
    serialize$3$specifiedType(serializers, integer, specifiedType) {
      return A._asInt(integer);
    },
    serialize$2(serializers, integer) {
      return this.serialize$3$specifiedType(serializers, integer, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return A._asInt(serialized);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "int";
    }
  };
  A.JsonObjectSerializer.prototype = {
    serialize$3$specifiedType(serializers, jsonObject, specifiedType) {
      return type$.JsonObject._as(jsonObject).get$value();
    },
    serialize$2(serializers, jsonObject) {
      return this.serialize$3$specifiedType(serializers, jsonObject, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return A.JsonObject_JsonObject(serialized);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "JsonObject";
    }
  };
  A.NullSerializer.prototype = {
    serialize$3$specifiedType(serializers, value, specifiedType) {
      type$.Null._as(value);
      throw A.wrapException(A.UnimplementedError$(null));
    },
    serialize$2(serializers, value) {
      return this.serialize$3$specifiedType(serializers, value, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "Null";
    }
  };
  A.NumSerializer.prototype = {
    serialize$3$specifiedType(serializers, number, specifiedType) {
      A._asNum(number);
      if (isNaN(number))
        return "NaN";
      else if (number == 1 / 0 || number == -1 / 0)
        return B.JSNumber_methods.get$isNegative(number) ? "-INF" : "INF";
      else
        return number;
    },
    serialize$2(serializers, number) {
      return this.serialize$3$specifiedType(serializers, number, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      var t1 = J.getInterceptor$(serialized);
      if (t1.$eq(serialized, "NaN"))
        return 0 / 0;
      else if (t1.$eq(serialized, "-INF"))
        return -1 / 0;
      else if (t1.$eq(serialized, "INF"))
        return 1 / 0;
      else
        return A._asNum(serialized);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "num";
    }
  };
  A.RegExpSerializer.prototype = {
    serialize$3$specifiedType(serializers, value, specifiedType) {
      return type$.RegExp._as(value).pattern;
    },
    serialize$2(serializers, value) {
      return this.serialize$3$specifiedType(serializers, value, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return A.RegExp_RegExp(A._asString(serialized), true, false);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "RegExp";
    }
  };
  A.StringSerializer.prototype = {
    serialize$3$specifiedType(serializers, string, specifiedType) {
      return A._asString(string);
    },
    serialize$2(serializers, string) {
      return this.serialize$3$specifiedType(serializers, string, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return A._asString(serialized);
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "String";
    }
  };
  A.Uint8ListSerializer.prototype = {
    serialize$3$specifiedType(serializers, uint8list, specifiedType) {
      uint8list = type$.Base64Codec._eval$1("Codec.S")._as(type$.Uint8List._as(uint8list));
      return B.C_Base64Codec.get$encoder().convert$1(uint8list);
    },
    serialize$2(serializers, uint8list) {
      return this.serialize$3$specifiedType(serializers, uint8list, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return B.C_Base64Decoder.convert$1(A._asString(serialized));
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    get$types() {
      return A.BuiltList_BuiltList$from([B.Type_Uint8List_WLA], type$.Type);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$wireName() {
      return "UInt8List";
    }
  };
  A.UriSerializer.prototype = {
    serialize$3$specifiedType(serializers, uri, specifiedType) {
      return type$.Uri._as(uri).toString$0(0);
    },
    serialize$2(serializers, uri) {
      return this.serialize$3$specifiedType(serializers, uri, B.FullType_null_List_empty_false);
    },
    deserialize$3$specifiedType(serializers, serialized, specifiedType) {
      return A.Uri_parse(A._asString(serialized));
    },
    deserialize$2(serializers, serialized) {
      return this.deserialize$3$specifiedType(serializers, serialized, B.FullType_null_List_empty_false);
    },
    $isSerializer: 1,
    $isPrimitiveSerializer: 1,
    get$types() {
      return this.types;
    },
    get$wireName() {
      return "Uri";
    }
  };
  A.StandardJsonPlugin.prototype = {
    afterSerialize$2(object, specifiedType) {
      var t1;
      if (type$.List_dynamic._is(object)) {
        t1 = specifiedType.root;
        t1 = t1 !== B.Type_BuiltList_iTR && t1 !== B.Type_BuiltSet_fcN && t1 !== B.Type_JsonObject_gyf;
      } else
        t1 = false;
      if (t1)
        if (specifiedType.root == null)
          return this._toMapWithDiscriminator$1(object);
        else
          return this._toMap$2(object, this._needsEncodedKeys$1(specifiedType));
      else
        return object;
    },
    beforeDeserialize$2(object, specifiedType) {
      var t1;
      if (type$.Map_dynamic_dynamic._is(object) && specifiedType.root !== B.Type_JsonObject_gyf) {
        t1 = specifiedType.root;
        if (t1 == null)
          return this._toListUsingDiscriminator$1(object);
        else
          return this._toList$3$keepNulls(object, this._needsEncodedKeys$1(specifiedType), t1 === B.Type_BuiltMap_qd4);
      } else
        return object;
    },
    _needsEncodedKeys$1(specifiedType) {
      var t1;
      if (specifiedType.root === B.Type_BuiltMap_qd4) {
        t1 = specifiedType.parameters;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0].root !== B.Type_String_k8F;
      } else
        t1 = false;
      return t1;
    },
    _toMap$2(list, needsEncodedKeys) {
      var t1, t2, i, t3, key, value,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.nullable_Object);
      for (t1 = J.getInterceptor$asx(list), t2 = type$.Object, i = 0; i !== B.JSInt_methods._tdivFast$1(t1.get$length(list), 2); ++i) {
        t3 = i * 2;
        key = t1.$index(list, t3);
        value = t1.$index(list, t3 + 1);
        if (needsEncodedKeys)
          t3 = B.C_JsonCodec.encode$1(key == null ? t2._as(key) : key);
        else {
          A._asString(key);
          t3 = key;
        }
        result.$indexSet(0, t3, value);
      }
      return result;
    },
    _toMapWithDiscriminator$1(list) {
      var needToEncodeKeys, i, t3, result, t4, key, value,
        t1 = J.getInterceptor$asx(list),
        type = t1.$index(list, 0),
        t2 = J.getInterceptor$(type);
      if (t2.$eq(type, "list")) {
        t2 = type == null ? type$.Object._as(type) : type;
        return A.LinkedHashMap_LinkedHashMap$_literal(["$", t2, "", t1.sublist$1(list, 1)], type$.String, type$.Object);
      }
      if (t1.get$length(list) === 2)
        return A.LinkedHashMap_LinkedHashMap$_literal(["$", type, "", t1.$index(list, 1)], type$.String, type$.nullable_Object);
      if (t2.$eq(type, "map")) {
        i = 0;
        while (true) {
          if (!(i !== B.JSInt_methods._tdivFast$1(t1.get$length(list) - 1, 2))) {
            needToEncodeKeys = false;
            break;
          }
          if (typeof t1.$index(list, i * 2 + 1) != "string") {
            type = "encoded_map";
            needToEncodeKeys = true;
            break;
          }
          ++i;
        }
      } else
        needToEncodeKeys = false;
      t2 = type == null ? type$.Object._as(type) : type;
      t3 = type$.Object;
      result = A.LinkedHashMap_LinkedHashMap$_literal(["$", t2], type$.String, t3);
      for (i = 0; i !== B.JSInt_methods._tdivFast$1(t1.get$length(list) - 1, 2); ++i) {
        t2 = i * 2;
        t4 = t2 + 1;
        if (needToEncodeKeys) {
          t4 = t1.$index(list, t4);
          key = B.C_JsonCodec.encode$1(t4 == null ? t3._as(t4) : t4);
        } else
          key = A._asString(t1.$index(list, t4));
        value = t1.$index(list, t2 + 2);
        result.$indexSet(0, key, value == null ? t3._as(value) : value);
      }
      return result;
    },
    _toList$3$keepNulls(map, hasEncodedKeys, keepNulls) {
      var nullValueCount, t2, t3, result, t1 = {};
      if (keepNulls)
        nullValueCount = 0;
      else {
        t2 = map.get$values(map);
        t3 = A._instanceType(t2);
        t3 = new A.WhereIterable(t2, t3._eval$1("bool(Iterable.E)")._as(new A.StandardJsonPlugin__toList_closure()), t3._eval$1("WhereIterable<Iterable.E>"));
        nullValueCount = t3.get$length(t3);
      }
      result = A.List_List$filled((map.get$length(map) - nullValueCount) * 2, 0, false, type$.nullable_Object);
      t1.i = 0;
      map.forEach$1(0, new A.StandardJsonPlugin__toList_closure0(t1, this, keepNulls, result, hasEncodedKeys));
      return result;
    },
    _toListUsingDiscriminator$1(map) {
      var t2, result, needToDecodeKeys, t3, nullValueCount, t1 = {},
        type = map.$index(0, "$");
      if (type == null)
        throw A.wrapException(A.ArgumentError$("Unknown type on deserialization. Need either specifiedType or discriminator field.", null));
      t2 = J.getInterceptor$(type);
      if (t2.$eq(type, "list")) {
        t1 = [type];
        B.JSArray_methods.addAll$1(t1, type$.Iterable_dynamic._as(map.$index(0, "")));
        return t1;
      }
      if (map.containsKey$1("")) {
        result = A.List_List$filled(2, 0, false, type$.nullable_Object);
        B.JSArray_methods.$indexSet(result, 0, type);
        B.JSArray_methods.$indexSet(result, 1, map.$index(0, ""));
        return result;
      }
      needToDecodeKeys = t2.$eq(type, "encoded_map");
      if (needToDecodeKeys)
        type = "map";
      t2 = map.get$values(map);
      t3 = A._instanceType(t2);
      t3 = new A.WhereIterable(t2, t3._eval$1("bool(Iterable.E)")._as(new A.StandardJsonPlugin__toListUsingDiscriminator_closure()), t3._eval$1("WhereIterable<Iterable.E>"));
      nullValueCount = t3.get$length(t3);
      result = A.List_List$filled((map.get$length(map) - nullValueCount) * 2 - 1, 0, false, type$.Object);
      B.JSArray_methods.$indexSet(result, 0, type);
      t1.i = 1;
      map.forEach$1(0, new A.StandardJsonPlugin__toListUsingDiscriminator_closure0(t1, this, result, needToDecodeKeys));
      return result;
    },
    $isSerializerPlugin: 1
  };
  A.StandardJsonPlugin__toList_closure.prototype = {
    call$1(value) {
      return value == null;
    },
    $signature: 5
  };
  A.StandardJsonPlugin__toList_closure0.prototype = {
    call$2(key, value) {
      var t1, t2, t3, _this = this;
      if (!_this.keepNulls && value == null)
        return;
      t1 = _this.result;
      t2 = _this._box_0;
      t3 = t2.i;
      B.JSArray_methods.$indexSet(t1, t3, _this.hasEncodedKeys ? B.C_JsonCodec.decode$1(A._asString(key)) : key);
      B.JSArray_methods.$indexSet(t1, t2.i + 1, value);
      t2.i += 2;
    },
    $signature: 16
  };
  A.StandardJsonPlugin__toListUsingDiscriminator_closure.prototype = {
    call$1(value) {
      return value == null;
    },
    $signature: 5
  };
  A.StandardJsonPlugin__toListUsingDiscriminator_closure0.prototype = {
    call$2(key, value) {
      var t1, t2, t3, t4;
      if (J.$eq$(key, "$"))
        return;
      if (value == null)
        return;
      t1 = this.result;
      t2 = this._box_0;
      t3 = t2.i;
      t4 = this.needToDecodeKeys ? B.C_JsonCodec.decode$1(A._asString(key)) : key;
      B.JSArray_methods.$indexSet(t1, t3, t4 == null ? type$.Object._as(t4) : t4);
      t3 = t2.i;
      B.JSArray_methods.$indexSet(t1, t3 + 1, value);
      t2.i += 2;
    },
    $signature: 16
  };
  A.toParsedYamlException_closure.prototype = {
    call$1(k) {
      return J.$eq$(type$.YamlScalar._as(k).get$value(), this.key);
    },
    $signature: 5
  };
  A.toParsedYamlException_closure0.prototype = {
    call$0() {
      return this.yamlMap;
    },
    $signature: 144
  };
  A.ParsedYamlException.prototype = {
    toString$0(_) {
      var t1 = this.yamlNode.get$span().message$1(0, this.message);
      return "ParsedYamlException: " + t1;
    },
    $isException: 1
  };
  A._WrappedYamlException.prototype = {
    toString$0(_) {
      var t1 = this.innerError;
      t1 = t1._span.message$1(0, t1._span_exception$_message);
      return "ParsedYamlException: " + t1;
    },
    $isException: 1
  };
  A.DefaultEquality.prototype = {
    equals$2(_, e1, e2) {
      return J.$eq$(e1, e2);
    },
    hash$1(e) {
      return J.get$hashCode$(e);
    },
    isValidKey$1(o) {
      return true;
    },
    $isEquality: 1
  };
  A.IterableEquality.prototype = {
    equals$2(_, elements1, elements2) {
      var it1, it2, hasNext,
        t1 = this.$ti._eval$1("Iterable<1>?");
      t1._as(elements1);
      t1._as(elements2);
      if (elements1 === elements2)
        return true;
      it1 = J.get$iterator$ax(elements1);
      it2 = J.get$iterator$ax(elements2);
      for (t1 = this._elementEquality; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        if (!t1.equals$2(0, it1.get$current(), it2.get$current()))
          return false;
      }
    },
    hash$1(elements) {
      var t1, t2, hash;
      this.$ti._eval$1("Iterable<1>?")._as(elements);
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, hash = 0; t1.moveNext$0();) {
        hash = hash + t2.hash$1(t1.get$current()) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  A.ListEquality.prototype = {
    equals$2(_, list1, list2) {
      var $length, t2, t3, i,
        t1 = this.$ti._eval$1("List<1>?");
      t1._as(list1);
      t1._as(list2);
      if (list1 === list2)
        return true;
      t1 = J.getInterceptor$asx(list1);
      $length = t1.get$length(list1);
      t2 = J.getInterceptor$asx(list2);
      if ($length !== t2.get$length(list2))
        return false;
      for (t3 = this._elementEquality, i = 0; i < $length; ++i)
        if (!t3.equals$2(0, t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    hash$1(list) {
      var t1, t2, hash, i;
      this.$ti._eval$1("List<1>?")._as(list);
      for (t1 = J.getInterceptor$asx(list), t2 = this._elementEquality, hash = 0, i = 0; i < t1.get$length(list); ++i) {
        hash = hash + t2.hash$1(t1.$index(list, i)) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  A._UnorderedEquality.prototype = {
    equals$2(_, elements1, elements2) {
      var counts, $length, e, count,
        t1 = A._instanceType(this),
        t2 = t1._eval$1("_UnorderedEquality.T?");
      t2._as(elements1);
      t2._as(elements2);
      if (elements1 === elements2)
        return true;
      t2 = this._elementEquality;
      counts = A.HashMap_HashMap(t1._eval$1("bool(_UnorderedEquality.E,_UnorderedEquality.E)")._as(t2.get$equals(t2)), t1._eval$1("int(_UnorderedEquality.E)")._as(t2.get$hash()), t2.get$isValidKey(), t1._eval$1("_UnorderedEquality.E"), type$.int);
      for (t1 = J.get$iterator$ax(elements1), $length = 0; t1.moveNext$0();) {
        e = t1.get$current();
        count = counts.$index(0, e);
        counts.$indexSet(0, e, (count == null ? 0 : count) + 1);
        ++$length;
      }
      for (t1 = J.get$iterator$ax(elements2); t1.moveNext$0();) {
        e = t1.get$current();
        count = counts.$index(0, e);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        counts.$indexSet(0, e, count - 1);
        --$length;
      }
      return $length === 0;
    },
    hash$1(elements) {
      var t1, t2, hash;
      A._instanceType(this)._eval$1("_UnorderedEquality.T?")._as(elements);
      for (t1 = J.get$iterator$ax(elements), t2 = this._elementEquality, hash = 0; t1.moveNext$0();)
        hash = hash + t2.hash$1(t1.get$current()) & 2147483647;
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  A.UnorderedIterableEquality.prototype = {};
  A.SetEquality.prototype = {};
  A._MapEntry.prototype = {
    get$hashCode(_) {
      var t1 = this.equality;
      return 3 * t1._keyEquality.hash$1(this.key) + 7 * t1._valueEquality.hash$1(this.value) & 2147483647;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A._MapEntry) {
        t1 = this.equality;
        t1 = t1._keyEquality.equals$2(0, this.key, other.key) && t1._valueEquality.equals$2(0, this.value, other.value);
      } else
        t1 = false;
      return t1;
    }
  };
  A.MapEquality.prototype = {
    equals$2(_, map1, map2) {
      var equalElementCounts, key, entry, count,
        t1 = this.$ti._eval$1("Map<1,2>?");
      t1._as(map1);
      t1._as(map2);
      if (map1 === map2)
        return true;
      if (map1.get$length(map1) !== map2.get$length(map2))
        return false;
      equalElementCounts = A.HashMap_HashMap(null, null, null, type$._MapEntry, type$.int);
      for (t1 = map1.get$keys(map1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        entry = new A._MapEntry(this, key, map1.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        equalElementCounts.$indexSet(0, entry, (count == null ? 0 : count) + 1);
      }
      for (t1 = map2.get$keys(map2), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        entry = new A._MapEntry(this, key, map2.$index(0, key));
        count = equalElementCounts.$index(0, entry);
        if (count == null || count === 0)
          return false;
        if (typeof count !== "number")
          return count.$sub();
        equalElementCounts.$indexSet(0, entry, count - 1);
      }
      return true;
    },
    hash$1(map) {
      var t2, t3, t4, hash, key, keyHash, t5,
        t1 = this.$ti;
      t1._eval$1("Map<1,2>?")._as(map);
      for (t2 = map.get$keys(map), t2 = t2.get$iterator(t2), t3 = this._keyEquality, t4 = this._valueEquality, t1 = t1._rest[1], hash = 0; t2.moveNext$0();) {
        key = t2.get$current();
        keyHash = t3.hash$1(key);
        t5 = map.$index(0, key);
        hash = hash + 3 * keyHash + 7 * t4.hash$1(t5 == null ? t1._as(t5) : t5) & 2147483647;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    },
    $isEquality: 1
  };
  A.DeepCollectionEquality.prototype = {
    equals$2(_, e1, e2) {
      var _this = this,
        t1 = type$.Set_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new A.SetEquality(_this, type$.SetEquality_dynamic).equals$2(0, e1, e2);
      t1 = type$.Map_dynamic_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new A.MapEquality(_this, _this, type$.MapEquality_dynamic_dynamic).equals$2(0, e1, e2);
      t1 = type$.List_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new A.ListEquality(_this, type$.ListEquality_dynamic).equals$2(0, e1, e2);
      t1 = type$.Iterable_dynamic;
      if (t1._is(e1))
        return t1._is(e2) && new A.IterableEquality(_this, type$.IterableEquality_dynamic).equals$2(0, e1, e2);
      return J.$eq$(e1, e2);
    },
    hash$1(o) {
      var _this = this;
      if (type$.Set_dynamic._is(o))
        return new A.SetEquality(_this, type$.SetEquality_dynamic).hash$1(o);
      if (type$.Map_dynamic_dynamic._is(o))
        return new A.MapEquality(_this, _this, type$.MapEquality_dynamic_dynamic).hash$1(o);
      if (type$.List_dynamic._is(o))
        return new A.ListEquality(_this, type$.ListEquality_dynamic).hash$1(o);
      if (type$.Iterable_dynamic._is(o))
        return new A.IterableEquality(_this, type$.IterableEquality_dynamic).hash$1(o);
      return J.get$hashCode$(o);
    },
    isValidKey$1(o) {
      !type$.Iterable_dynamic._is(o);
      return true;
    },
    $isEquality: 1
  };
  A.QueueList.prototype = {
    add$1(_, element) {
      this._queue_list$_add$1(A._instanceType(this)._eval$1("QueueList.E")._as(element));
    },
    cast$1$0(_, $T) {
      return new A._CastQueueList(this, J.cast$1$0$ax(this._table, $T), -1, -1, A._instanceType(this)._eval$1("@<QueueList.E>")._bind$1($T)._eval$1("_CastQueueList<1,2>"));
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    removeFirst$0() {
      var result, _this = this;
      if (_this.get$_head() === _this.get$_tail())
        throw A.wrapException(A.StateError$("No element"));
      result = J.$index$asx(_this._table, _this.get$_head());
      if (result == null)
        result = A._instanceType(_this)._eval$1("QueueList.E")._as(result);
      J.$indexSet$ax(_this._table, _this.get$_head(), null);
      _this.set$_head((_this.get$_head() + 1 & J.get$length$asx(_this._table) - 1) >>> 0);
      return result;
    },
    get$length(_) {
      return (this.get$_tail() - this.get$_head() & J.get$length$asx(this._table) - 1) >>> 0;
    },
    set$length(_, value) {
      var delta, newTail, t1, t2, _this = this;
      if (value < 0)
        throw A.wrapException(A.RangeError$("Length " + value + " may not be negative."));
      if (value > _this.get$length(_this) && !A._instanceType(_this)._eval$1("QueueList.E")._is(null))
        throw A.wrapException(A.UnsupportedError$("The length can only be increased when the element type is nullable, but the current element type is `" + A.createRuntimeType(A._instanceType(_this)._eval$1("QueueList.E")).toString$0(0) + "`."));
      delta = value - _this.get$length(_this);
      if (delta >= 0) {
        if (J.get$length$asx(_this._table) <= value)
          _this._preGrow$1(value);
        _this.set$_tail((_this.get$_tail() + delta & J.get$length$asx(_this._table) - 1) >>> 0);
        return;
      }
      newTail = _this.get$_tail() + delta;
      t1 = _this._table;
      if (newTail >= 0)
        J.fillRange$3$ax(t1, newTail, _this.get$_tail(), null);
      else {
        newTail += J.get$length$asx(t1);
        J.fillRange$3$ax(_this._table, 0, _this.get$_tail(), null);
        t1 = _this._table;
        t2 = J.getInterceptor$asx(t1);
        t2.fillRange$3(t1, newTail, t2.get$length(t1), null);
      }
      _this.set$_tail(newTail);
    },
    $index(_, index) {
      var t1, _this = this;
      if (index < 0 || index >= _this.get$length(_this))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(_this) + ")."));
      t1 = J.$index$asx(_this._table, (_this.get$_head() + index & J.get$length$asx(_this._table) - 1) >>> 0);
      return t1 == null ? A._instanceType(_this)._eval$1("QueueList.E")._as(t1) : t1;
    },
    $indexSet(_, index, value) {
      var _this = this;
      A._instanceType(_this)._eval$1("QueueList.E")._as(value);
      if (index < 0 || index >= _this.get$length(_this))
        throw A.wrapException(A.RangeError$("Index " + index + " must be in the range [0.." + _this.get$length(_this) + ")."));
      J.$indexSet$ax(_this._table, (_this.get$_head() + index & J.get$length$asx(_this._table) - 1) >>> 0, value);
    },
    _queue_list$_add$1(element) {
      var newTable, split, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("QueueList.E")._as(element);
      J.$indexSet$ax(_this._table, _this.get$_tail(), element);
      _this.set$_tail((_this.get$_tail() + 1 & J.get$length$asx(_this._table) - 1) >>> 0);
      if (_this.get$_head() === _this.get$_tail()) {
        newTable = A.List_List$filled(J.get$length$asx(_this._table) * 2, null, false, t1._eval$1("QueueList.E?"));
        split = J.get$length$asx(_this._table) - _this.get$_head();
        B.JSArray_methods.setRange$4(newTable, 0, split, _this._table, _this.get$_head());
        B.JSArray_methods.setRange$4(newTable, split, split + _this.get$_head(), _this._table, 0);
        _this.set$_head(0);
        _this.set$_tail(J.get$length$asx(_this._table));
        _this.set$_table(newTable);
      }
    },
    _writeToList$1(target) {
      var $length, firstPartSize, _this = this;
      A._instanceType(_this)._eval$1("List<QueueList.E?>")._as(target);
      if (_this.get$_head() <= _this.get$_tail()) {
        $length = _this.get$_tail() - _this.get$_head();
        B.JSArray_methods.setRange$4(target, 0, $length, _this._table, _this.get$_head());
        return $length;
      } else {
        firstPartSize = J.get$length$asx(_this._table) - _this.get$_head();
        B.JSArray_methods.setRange$4(target, 0, firstPartSize, _this._table, _this.get$_head());
        B.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this.get$_tail(), _this._table, 0);
        return _this.get$_tail() + firstPartSize;
      }
    },
    _preGrow$1(newElementCount) {
      var _this = this,
        newTable = A.List_List$filled(A.QueueList__nextPowerOf2(newElementCount + B.JSInt_methods._shrOtherPositive$1(newElementCount, 1)), null, false, A._instanceType(_this)._eval$1("QueueList.E?"));
      _this.set$_tail(_this._writeToList$1(newTable));
      _this.set$_table(newTable);
      _this.set$_head(0);
    },
    set$_table(_table) {
      this._table = A._instanceType(this)._eval$1("List<QueueList.E?>")._as(_table);
    },
    set$_head(_head) {
      this._head = A._asInt(_head);
    },
    set$_tail(_tail) {
      this._tail = A._asInt(_tail);
    },
    $isEfficientLengthIterable: 1,
    $isQueue: 1,
    $isIterable: 1,
    $isList: 1,
    get$_head() {
      return this._head;
    },
    get$_tail() {
      return this._tail;
    }
  };
  A._CastQueueList.prototype = {
    get$_head() {
      return this._queue_list$_delegate.get$_head();
    },
    set$_head(value) {
      this._queue_list$_delegate.set$_head(value);
    },
    get$_tail() {
      return this._queue_list$_delegate.get$_tail();
    },
    set$_tail(value) {
      this._queue_list$_delegate.set$_tail(value);
    }
  };
  A._QueueList_Object_ListMixin.prototype = {};
  A.UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._eval$1("UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("UnmodifiableMapMixin.V")._as(value);
      return A.UnmodifiableMapMixin__throw();
    },
    remove$1(_, key) {
      return A.UnmodifiableMapMixin__throw();
    }
  };
  A.DelegatingMap.prototype = {
    $index(_, key) {
      return this._base.$index(0, key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this._base.$indexSet(0, t1._eval$1("DelegatingMap.K")._as(key), t1._eval$1("DelegatingMap.V")._as(value));
    },
    cast$2$0(_, K2, V2) {
      return this._base.cast$2$0(0, K2, V2);
    },
    containsKey$1(key) {
      return this._base.containsKey$1(key);
    },
    get$entries(_) {
      var t1 = this._base;
      return t1.get$entries(t1);
    },
    forEach$1(_, f) {
      this._base.forEach$1(0, this.$ti._eval$1("~(DelegatingMap.K,DelegatingMap.V)")._as(f));
    },
    get$isEmpty(_) {
      return this._base.__js_helper$_length === 0;
    },
    get$keys(_) {
      var t1 = this._base;
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$length(_) {
      return this._base.__js_helper$_length;
    },
    map$2$1(_, transform, K2, V2) {
      return this._base.map$2$1(0, this.$ti._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(DelegatingMap.K,DelegatingMap.V)")._as(transform), K2, V2);
    },
    map$1($receiver, transform) {
      return this.map$2$1($receiver, transform, type$.dynamic, type$.dynamic);
    },
    get$values(_) {
      var t1 = this._base;
      return t1.get$values(t1);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this._base);
    },
    $isMap: 1
  };
  A.LocalFileSystem.prototype = {
    get$path(_) {
      return A.Context_Context(null, null);
    }
  };
  A.FileSystem.prototype = {
    getPath$1(path) {
      var t1;
      if (typeof path == "string")
        return path;
      else if (type$.Uri._is(path))
        return this.get$path(this).style.pathFromUri$1(A._parseUri(path));
      else {
        t1 = J.get$runtimeType$(path);
        throw A.wrapException(A.ArgumentError$('Invalid type for "path": ' + t1.toString$0(0), null));
      }
    }
  };
  A.Int64.prototype = {
    $eq(_, other) {
      var o, _this = this;
      if (other == null)
        return false;
      if (other instanceof A.Int64)
        o = other;
      else if (A._isInt(other)) {
        if (_this._h === 0 && _this._m === 0)
          return _this._l === other;
        if ((other & 4194303) === other)
          return false;
        o = A.Int64_Int64(other);
      } else
        o = null;
      if (o != null)
        return _this._l === o._l && _this._m === o._m && _this._h === o._h;
      return false;
    },
    compareTo$1(_, other) {
      return this._compareTo$1(other);
    },
    _compareTo$1(other) {
      var o = A.Int64__promote(other),
        t1 = this._h,
        signa = t1 >>> 19,
        t2 = o._h;
      if (signa !== t2 >>> 19)
        return signa === 0 ? 1 : -1;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      t1 = this._m;
      t2 = o._m;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      t1 = this._l;
      t2 = o._l;
      if (t1 > t2)
        return 1;
      else if (t1 < t2)
        return -1;
      return 0;
    },
    get$hashCode(_) {
      var t1 = this._m;
      return (((t1 & 1023) << 22 | this._l) ^ (this._h << 12 | t1 >>> 10 & 4095)) >>> 0;
    },
    toString$0(_) {
      var d00, d10, sign,
        d0 = this._l,
        d1 = this._m,
        d2 = this._h;
      if ((d2 & 524288) !== 0) {
        d0 = 0 - d0;
        d00 = d0 & 4194303;
        d1 = 0 - d1 - (B.JSInt_methods._shrOtherPositive$1(d0, 22) & 1);
        d10 = d1 & 4194303;
        d2 = 0 - d2 - (B.JSInt_methods._shrOtherPositive$1(d1, 22) & 1) & 1048575;
        d1 = d10;
        d0 = d00;
        sign = "-";
      } else
        sign = "";
      return A.Int64__toRadixStringUnsigned(10, d0, d1, d2, sign);
    },
    _toRadixString$1(radix) {
      var d00, d10, sign,
        d0 = this._l,
        d1 = this._m,
        d2 = this._h;
      if ((d2 & 524288) !== 0) {
        d0 = 0 - d0;
        d00 = d0 & 4194303;
        d1 = 0 - d1 - (B.JSInt_methods._shrOtherPositive$1(d0, 22) & 1);
        d10 = d1 & 4194303;
        d2 = 0 - d2 - (B.JSInt_methods._shrOtherPositive$1(d1, 22) & 1) & 1048575;
        d1 = d10;
        d0 = d00;
        sign = "-";
      } else
        sign = "";
      return A.Int64__toRadixStringUnsigned(radix, d0, d1, d2, sign);
    },
    $isComparable: 1
  };
  A.$checkKeys_closure.prototype = {
    call$1(k) {
      return !B.JSArray_methods.contains$1(this.allowedKeys, A._asString(k));
    },
    $signature: 1
  };
  A.$checkKeys_closure0.prototype = {
    call$1(entry) {
      type$.MapEntry_dynamic_dynamic._as(entry);
      return B.JSArray_methods.contains$1(this.disallowNullValues, entry.key) && entry.value == null;
    },
    $signature: 148
  };
  A.$checkKeys_closure1.prototype = {
    call$1(entry) {
      return A._asString(type$.MapEntry_dynamic_dynamic._as(entry).key);
    },
    $signature: 149
  };
  A.BadKeyException.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": " + this.get$message(this);
    },
    $isException: 1,
    map$1($receiver, arg0) {
      return this.map.call$1(arg0);
    }
  };
  A.UnrecognizedKeysException.prototype = {
    get$message(_) {
      return "Unrecognized keys: [" + B.JSArray_methods.join$1(this.unrecognizedKeys, ", ") + "]; supported keys: [" + B.JSArray_methods.join$1(this.allowedKeys, ", ") + "]";
    }
  };
  A.MissingRequiredKeysException.prototype = {};
  A.DisallowedNullValueException.prototype = {
    get$message(_) {
      return "These keys had `null` values, which is not allowed: " + A.S(this.keysWithNullValues);
    }
  };
  A.$checkedCreate_checkedConvert.prototype = {
    call$1$3$readValue(key, convertFunction, readValue, $Q) {
      return A.$checkedConvert(this.map, A._asString(key), $Q._eval$1("0(Object?)")._as(convertFunction), type$.nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as(readValue), $Q);
    },
    call$3$readValue(key, convertFunction, readValue) {
      return this.call$1$3$readValue(key, convertFunction, readValue, type$.dynamic);
    },
    call$2(key, convertFunction) {
      return this.call$1$3$readValue(key, convertFunction, null, type$.dynamic);
    },
    call$1$2(key, convertFunction, $Q) {
      return this.call$1$3$readValue(key, convertFunction, null, $Q);
    },
    "call*": "call$3$readValue",
    $requiredArgCount: 2,
    $defaultValues() {
      return {readValue: null};
    },
    $signature: 150
  };
  A.$checkedCreate_closure.prototype = {
    call$0() {
      return this.$constructor.call$1(this.checkedConvert);
    },
    $signature() {
      return this.T._eval$1("0()");
    }
  };
  A.CheckedFromJsonException.prototype = {
    toString$0(_) {
      var t1 = A._setArrayType(["CheckedFromJsonException"], type$.JSArray_String),
        t2 = this._className;
      if (t2 != null)
        t1.push("Could not create `" + t2 + "`.");
      t2 = this.key;
      if (t2 != null)
        t1.push('There is a problem with "' + t2 + '".');
      t1.push(this.message);
      return B.JSArray_methods.join$1(t1, "\n");
    },
    $isException: 1,
    map$1($receiver, arg0) {
      return this.map.call$1(arg0);
    }
  };
  A.Level.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Level && this.value === other.value;
    },
    compareTo$1(_, other) {
      return this.value - type$.Level._as(other).value;
    },
    get$hashCode(_) {
      return this.value;
    },
    toString$0(_) {
      return this.name;
    },
    $isComparable: 1
  };
  A.LogRecord.prototype = {
    toString$0(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
    }
  };
  A.Logger.prototype = {
    get$fullName() {
      var t1 = this.parent,
        t2 = t1 == null ? null : t1.name.length !== 0,
        t3 = this.name;
      return t2 === true ? t1.get$fullName() + "." + t3 : t3;
    },
    get$level() {
      var effectiveLevel,
        t1 = this.parent;
      if (t1 == null) {
        t1 = this._level;
        t1.toString;
        effectiveLevel = t1;
      } else if (!$.hierarchicalLoggingEnabled) {
        t1 = $.$get$Logger_root()._level;
        t1.toString;
        effectiveLevel = t1;
      } else {
        effectiveLevel = this._level;
        if (effectiveLevel == null)
          effectiveLevel = t1.get$level();
      }
      return effectiveLevel;
    },
    log$4(_, logLevel, message, error, stackTrace) {
      var t2, record, target, _this = this,
        t1 = logLevel.value;
      if (t1 >= _this.get$level().value) {
        if (t1 >= 2000) {
          stackTrace = A.StackTrace_current();
          error = "autogenerated stack trace for " + logLevel.toString$0(0) + " " + message;
        }
        t1 = _this.get$fullName();
        t2 = Date.now();
        $.LogRecord__nextNumber = $.LogRecord__nextNumber + 1;
        record = new A.LogRecord(logLevel, message, t1, new A.DateTime(t2, false), error, stackTrace);
        if (_this.parent == null)
          _this._publish$1(record);
        else if (!$.hierarchicalLoggingEnabled)
          $.$get$Logger_root()._publish$1(record);
        else
          for (target = _this; target != null;) {
            t1 = target._logger$_controller;
            if (t1 != null) {
              A._instanceType(t1)._precomputed1._as(record);
              if (!t1.get$_mayAddEvent())
                A.throwExpression(t1._addEventError$0());
              t1._sendData$1(record);
            }
            target = target.parent;
          }
      }
    },
    _getStream$0() {
      if ($.hierarchicalLoggingEnabled || this.parent == null) {
        var t1 = this._logger$_controller;
        if (t1 == null) {
          t1 = A.StreamController_StreamController$broadcast(true, type$.LogRecord);
          this.set$_logger$_controller(t1);
        }
        return new A._BroadcastStream(t1, A._instanceType(t1)._eval$1("_BroadcastStream<1>"));
      } else
        return $.$get$Logger_root()._getStream$0();
    },
    _publish$1(record) {
      var t1 = this._logger$_controller;
      return t1 == null ? null : t1.add$1(0, record);
    },
    set$_logger$_controller(_controller) {
      this._logger$_controller = type$.nullable_StreamController_LogRecord._as(_controller);
    }
  };
  A.Logger_Logger_closure.prototype = {
    call$0() {
      var dot, $parent, t1,
        thisName = this.name;
      if (B.JSString_methods.startsWith$1(thisName, "."))
        A.throwExpression(A.ArgumentError$("name shouldn't start with a '.'", null));
      if (B.JSString_methods.endsWith$1(thisName, "."))
        A.throwExpression(A.ArgumentError$("name shouldn't end with a '.'", null));
      dot = B.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? A.Logger_Logger("") : null;
      else {
        $parent = A.Logger_Logger(B.JSString_methods.substring$2(thisName, 0, dot));
        thisName = B.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = new A.Logger(thisName, $parent, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Logger));
      if ($parent == null)
        t1._level = B.Level_INFO_800;
      else
        $parent._logger$_children.$indexSet(0, thisName, t1);
      return t1;
    },
    $signature: 151
  };
  A.BufferModule.prototype = {};
  A.BufferConstants.prototype = {};
  A.Buffer.prototype = {};
  A.ConsoleModule.prototype = {};
  A.Console.prototype = {};
  A.DNS.prototype = {};
  A.DNSLookupOptions.prototype = {};
  A.DNSAddress.prototype = {};
  A.Resolver.prototype = {};
  A.EventEmitter.prototype = {};
  A.FS.prototype = {};
  A.FSConstants.prototype = {};
  A.FSWatcher.prototype = {};
  A.ReadStream.prototype = {};
  A.ReadStreamOptions.prototype = {};
  A.WriteStream.prototype = {};
  A.WriteStreamOptions.prototype = {};
  A.FileOptions.prototype = {};
  A.StatOptions.prototype = {};
  A.MkdirOptions.prototype = {};
  A.RmdirOptions.prototype = {};
  A.WatchOptions.prototype = {};
  A.WatchFileOptions.prototype = {};
  A.Stats.prototype = {};
  A.HTTP.prototype = {};
  A.HttpAgent.prototype = {};
  A.HttpAgentOptions.prototype = {};
  A.RequestOptions.prototype = {};
  A.ClientRequest.prototype = {};
  A.HttpServer.prototype = {};
  A.ServerResponse.prototype = {};
  A.IncomingMessage.prototype = {};
  A.Promise0.prototype = {};
  A.Date.prototype = {};
  A.JsError.prototype = {};
  A.Atomics.prototype = {};
  A.Modules.prototype = {};
  A.Module.prototype = {};
  A.Net.prototype = {};
  A.Socket.prototype = {};
  A.NetAddress.prototype = {};
  A.NetServer.prototype = {};
  A.NodeJsError.prototype = {};
  A.JsAssertionError.prototype = {};
  A.JsRangeError.prototype = {};
  A.JsReferenceError.prototype = {};
  A.JsSyntaxError.prototype = {};
  A.JsTypeError.prototype = {};
  A.JsSystemError.prototype = {};
  A.OS.prototype = {};
  A.CPU.prototype = {};
  A.CPUTimes.prototype = {};
  A.OSConstants.prototype = {};
  A.OSSignalConstants.prototype = {};
  A.OSErrorConstants.prototype = {};
  A.OSDLOpenConstants.prototype = {};
  A.Path.prototype = {};
  A.PathObject.prototype = {};
  A.Process0.prototype = {};
  A.CPUUsage.prototype = {};
  A.Release.prototype = {};
  A.StreamModule.prototype = {};
  A.Readable.prototype = {};
  A.Writable.prototype = {};
  A.Duplex.prototype = {};
  A.Transform.prototype = {};
  A.WritableOptions.prototype = {};
  A.ReadableOptions.prototype = {};
  A.Immediate.prototype = {};
  A.Timeout.prototype = {};
  A.TTY.prototype = {};
  A.TTYReadStream.prototype = {};
  A.TTYWriteStream.prototype = {};
  A.Util.prototype = {};
  A.Directory.prototype = {
    _pathToFsEntity$2(path, followLinks) {
      var stat = J.lstatSync$1$x(A.fs(), path),
        t1 = J.getInterceptor$x(stat);
      if (A.boolConversionCheck(t1.isFile$0(stat)))
        return new A.File(path);
      if (A.boolConversionCheck(t1.isDirectory$0(stat)))
        return new A.Directory(path);
      if (A.boolConversionCheck(t1.isSymbolicLink$0(stat)))
        return new A.Link(path);
      throw A.wrapException(A.StateError$('Invalid FileSystemEntity "path".'));
    },
    createTempSync$1(prefix) {
      var t2, fullPrefix,
        t1 = this.path;
      if (t1 === "")
        throw A.wrapException(A.ArgumentError$("Directory.createTemp called with an empty path. To use the system temp directory, use Directory.systemTemp", null));
      if (!B.JSString_methods.endsWith$1(t1, "/"))
        t2 = $.$get$Platform_isWindows() && B.JSString_methods.endsWith$1(t1, "\\");
      else
        t2 = true;
      fullPrefix = t2 ? t1 + prefix : t1 + J.get$sep$x(A.path()) + prefix;
      return new A.Directory(J.mkdtempSync$1$x(A.fs(), fullPrefix));
    },
    listSync$2$followLinks$recursive(followLinks, recursive) {
      var t1 = new A.Directory_listSync_list(this, false, true).call$1(this.path);
      return A.List_List$of(t1, true, A.instanceType(t1)._eval$1("Iterable.E"));
    },
    childDirectory$1(basename) {
      return new A.Directory(A.join(this.path, basename));
    },
    childFile$1(basename) {
      return new A.File(A.join(this.path, basename));
    },
    toString$0(_) {
      return "Directory: '" + this.path + "'";
    },
    $isDirectory0: 1,
    get$path(receiver) {
      return this.path;
    }
  };
  A.Directory_listSync_list.prototype = {
    $call$body$Directory_listSync_list($async$path) {
      var $async$self = this;
      return function() {
        var path = $async$path;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, filePath, entity;
        return function $async$call$1($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = J.get$iterator$ax(J.readdirSync$1$x(A.fs(), path)), t2 = $async$self.$this, t3 = $async$self.followLinks;
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                filePath = A.join(path, A._asStringQ(t1.get$current()));
                entity = t2._pathToFsEntity$2(filePath, t3);
                $async$goto = 4;
                return $async$iterator._async$_current = entity, 1;
              case 4:
                // after yield
                $async$goto = entity instanceof A.Directory ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return $async$iterator._yieldStar$1($async$self.call$1(filePath));
              case 7:
                // after yield
              case 6:
                // join
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    call$1(path) {
      return new A._SyncStarIterable(this.$call$body$Directory_listSync_list(path), type$._SyncStarIterable_FileSystemEntity);
    },
    $signature: 152
  };
  A.File.prototype = {
    createSync$1$recursive(recursive) {
      var fd = J.openSync$2$x(A.fs(), J.resolve$1$x(A.path(), this.path), "w");
      J.closeSync$1$x(A.fs(), fd);
    },
    createSync$0() {
      return this.createSync$1$recursive(false);
    },
    existsSync$0(_) {
      return A.FileStat_statSync(this.path).type === B.FileSystemEntityType_0;
    },
    length$0(_) {
      return A.FileStat_stat(this.path).then$1$1(0, new A.File_length_closure(), type$.int);
    },
    readAsStringSync$1$encoding(encoding) {
      return encoding.decode$1(new Uint8Array(A._ensureNativeList(type$.List_int._as(J.readFileSync$1$x(A.fs(), this.path)))));
    },
    readAsStringSync$0() {
      return this.readAsStringSync$1$encoding(B.Utf8Codec_false);
    },
    toString$0(_) {
      return "File: '" + this.path + "'";
    },
    get$path(receiver) {
      return this.path;
    }
  };
  A.File_length_closure.prototype = {
    call$1(_) {
      return type$.FileStat._as(_).size;
    },
    $signature: 154
  };
  A.NodeFileSystem.prototype = {
    get$path(_) {
      return $.$get$context();
    }
  };
  A.FileSystemEntity0.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": '" + this.get$path(this) + "'";
    },
    get$uri() {
      return A._Uri__Uri$file(this.get$path(this), $.$get$Platform_isWindows());
    },
    $isFileSystemEntity: 1
  };
  A.FileStat.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = _this.type.toString$0(0),
        t2 = _this.changed.toString$0(0),
        t3 = _this.modified.toString$0(0),
        t4 = _this.accessed.toString$0(0),
        permissions = _this.mode & 4095,
        result = [];
      if ((permissions & 2048) !== 0)
        result.push("(suid) ");
      if ((permissions & 1024) !== 0)
        result.push("(guid) ");
      if ((permissions & 512) !== 0)
        result.push("(sticky) ");
      result.push(B.List_2bx[permissions >>> 6 & 7]);
      result.push(B.List_2bx[permissions >>> 3 & 7]);
      result.push(B.List_2bx[permissions & 7]);
      return "FileStat: type " + t1 + "\n          changed " + t2 + "\n          modified " + t3 + "\n          accessed " + t4 + "\n          mode " + B.JSArray_methods.join$0(result) + "\n          size " + _this.size;
    }
  };
  A.FileStat_stat_callback.prototype = {
    call$2(err, stats) {
      var t1 = this.completer;
      if (err == null)
        t1.complete$1(A.FileStat_FileStat$_fromNodeStats(type$.Stats._as(stats)));
      else
        t1.complete$1(A.FileStat$_internalNotFound());
    },
    call$1(err) {
      return this.call$2(err, null);
    },
    "call*": "call$2",
    $requiredArgCount: 1,
    $defaultValues() {
      return [null];
    },
    $signature: 155
  };
  A.Link.prototype = {
    get$path(receiver) {
      return this.path;
    }
  };
  A.Context.prototype = {
    absolute$15(part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15) {
      var t1;
      A._validateArgList("absolute", A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$16(0, t1 == null ? A.current() : t1, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15);
    },
    absolute$1(part1) {
      return this.absolute$15(part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    },
    dirname$1(_, path) {
      var t1, t2,
        parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.removeTrailingSeparators$0();
      t1 = parsed.parts;
      t2 = t1.length;
      if (t2 === 0) {
        t1 = parsed.root;
        return t1 == null ? "." : t1;
      }
      if (t2 === 1) {
        t1 = parsed.root;
        return t1 == null ? "." : t1;
      }
      B.JSArray_methods.removeLast$0(t1);
      t1 = parsed.separators;
      if (0 >= t1.length)
        return A.ioore(t1, -1);
      t1.pop();
      parsed.removeTrailingSeparators$0();
      return parsed.toString$0(0);
    },
    join$16(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16) {
      var parts = A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    join$2($receiver, part1, part2) {
      return this.join$16($receiver, part1, part2, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(parts), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = "" + parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      parsed.set$parts(A.List_List$of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Context_split_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    canonicalize$1(path) {
      var t1, parsed;
      path = this.absolute$1(path);
      t1 = this.style;
      if (t1 !== $.$get$Style_windows() && !this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, t1);
      parsed.normalize$1$canonicalize(0, true);
      return parsed.toString$0(0);
    },
    normalize$1(_, path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0(0);
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var t2, i, start, previous, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (t2 = path.length, i = 0; i < root; ++i) {
            if (!(i < t2))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 47)
              return true;
          }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        if (!(i >= 0))
          return A.ioore(t2, i);
        codeUnit = t2.charCodeAt(i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$2$from(_, path, from) {
      var fromParsed, pathParsed, t2, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = from == null;
      if (t1 && _this.style.rootLength$1(path) <= 0)
        return _this.normalize$1(0, path);
      if (t1) {
        t1 = _this._context$_current;
        from = t1 == null ? A.current() : t1;
      } else
        from = _this.absolute$1(from);
      t1 = _this.style;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(0, path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0(0);
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0(0);
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return A.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(fromParsed.parts.length, "..", false, t2));
      B.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      B.JSArray_methods.insertAll$2(pathParsed.separators, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(B.JSArray_methods.get$last(t1), ".")) {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        B.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    relative$1($receiver, path) {
      return this.relative$2$from($receiver, path, null);
    },
    _isWithinOrEquals$2($parent, child) {
      var relative, t1, parentIsAbsolute, childIsAbsolute, childIsRootRelative, parentIsRootRelative, result, exception, _this = this;
      $parent = A._asString($parent);
      child = A._asString(child);
      t1 = _this.style;
      parentIsAbsolute = t1.rootLength$1(A._asString($parent)) > 0;
      childIsAbsolute = t1.rootLength$1(A._asString(child)) > 0;
      if (parentIsAbsolute && !childIsAbsolute) {
        child = _this.absolute$1(child);
        if (t1.isRootRelative$1($parent))
          $parent = _this.absolute$1($parent);
      } else if (childIsAbsolute && !parentIsAbsolute) {
        $parent = _this.absolute$1($parent);
        if (t1.isRootRelative$1(child))
          child = _this.absolute$1(child);
      } else if (childIsAbsolute && parentIsAbsolute) {
        childIsRootRelative = t1.isRootRelative$1(child);
        parentIsRootRelative = t1.isRootRelative$1($parent);
        if (childIsRootRelative && !parentIsRootRelative)
          child = _this.absolute$1(child);
        else if (parentIsRootRelative && !childIsRootRelative)
          $parent = _this.absolute$1($parent);
      }
      result = _this._isWithinOrEqualsFast$2($parent, child);
      if (result !== B._PathRelation_inconclusive)
        return result;
      relative = null;
      try {
        relative = _this.relative$2$from(0, child, $parent);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.PathException)
          return B._PathRelation_different;
        else
          throw exception;
      }
      if (t1.rootLength$1(A._asString(relative)) > 0)
        return B._PathRelation_different;
      if (J.$eq$(relative, "."))
        return B._PathRelation_equal;
      if (J.$eq$(relative, ".."))
        return B._PathRelation_different;
      return J.get$length$asx(relative) >= 3 && J.startsWith$1$s(relative, "..") && t1.isSeparator$1(J.codeUnitAt$1$s(relative, 2)) ? B._PathRelation_different : B._PathRelation_within;
    },
    _isWithinOrEqualsFast$2($parent, child) {
      var t1, parentRootLength, childRootLength, t2, t3, i, childIndex, parentIndex, lastCodeUnit, lastParentSeparator, parentCodeUnit, childCodeUnit, parentIndex0, t4, direction, _this = this;
      if ($parent === ".")
        $parent = "";
      t1 = _this.style;
      parentRootLength = t1.rootLength$1($parent);
      childRootLength = t1.rootLength$1(child);
      if (parentRootLength !== childRootLength)
        return B._PathRelation_different;
      for (t2 = $parent.length, t3 = child.length, i = 0; i < parentRootLength; ++i) {
        if (!(i < t2))
          return A.ioore($parent, i);
        if (!(i < t3))
          return A.ioore(child, i);
        if (!t1.codeUnitsEqual$2($parent.charCodeAt(i), child.charCodeAt(i)))
          return B._PathRelation_different;
      }
      childIndex = childRootLength;
      parentIndex = parentRootLength;
      lastCodeUnit = 47;
      lastParentSeparator = null;
      while (true) {
        if (!(parentIndex < t2 && childIndex < t3))
          break;
        c$0: {
          if (!(parentIndex >= 0 && parentIndex < t2))
            return A.ioore($parent, parentIndex);
          parentCodeUnit = $parent.charCodeAt(parentIndex);
          if (!(childIndex >= 0 && childIndex < t3))
            return A.ioore(child, childIndex);
          childCodeUnit = child.charCodeAt(childIndex);
          if (t1.codeUnitsEqual$2(parentCodeUnit, childCodeUnit)) {
            if (t1.isSeparator$1(parentCodeUnit))
              lastParentSeparator = parentIndex;
            ++parentIndex;
            ++childIndex;
            lastCodeUnit = parentCodeUnit;
            break c$0;
          }
          if (t1.isSeparator$1(parentCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            parentIndex0 = parentIndex + 1;
            lastParentSeparator = parentIndex;
            parentIndex = parentIndex0;
            break c$0;
          } else if (t1.isSeparator$1(childCodeUnit) && t1.isSeparator$1(lastCodeUnit)) {
            ++childIndex;
            break c$0;
          }
          if (parentCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++parentIndex;
            if (parentIndex === t2)
              break;
            if (!(parentIndex < t2))
              return A.ioore($parent, parentIndex);
            parentCodeUnit = $parent.charCodeAt(parentIndex);
            if (t1.isSeparator$1(parentCodeUnit)) {
              parentIndex0 = parentIndex + 1;
              lastParentSeparator = parentIndex;
              parentIndex = parentIndex0;
              break c$0;
            }
            if (parentCodeUnit === 46) {
              ++parentIndex;
              if (parentIndex !== t2) {
                if (!(parentIndex < t2))
                  return A.ioore($parent, parentIndex);
                t4 = t1.isSeparator$1($parent.charCodeAt(parentIndex));
              } else
                t4 = true;
              if (t4)
                return B._PathRelation_inconclusive;
            }
          }
          if (childCodeUnit === 46 && t1.isSeparator$1(lastCodeUnit)) {
            ++childIndex;
            if (childIndex === t3)
              break;
            if (!(childIndex < t3))
              return A.ioore(child, childIndex);
            childCodeUnit = child.charCodeAt(childIndex);
            if (t1.isSeparator$1(childCodeUnit)) {
              ++childIndex;
              break c$0;
            }
            if (childCodeUnit === 46) {
              ++childIndex;
              if (childIndex !== t3) {
                if (!(childIndex < t3))
                  return A.ioore(child, childIndex);
                t2 = t1.isSeparator$1(child.charCodeAt(childIndex));
                t1 = t2;
              } else
                t1 = true;
              if (t1)
                return B._PathRelation_inconclusive;
            }
          }
          if (_this._pathDirection$2(child, childIndex) !== B._PathDirection_988)
            return B._PathRelation_inconclusive;
          if (_this._pathDirection$2($parent, parentIndex) !== B._PathDirection_988)
            return B._PathRelation_inconclusive;
          return B._PathRelation_different;
        }
      }
      if (childIndex === t3) {
        if (parentIndex !== t2) {
          if (!(parentIndex >= 0 && parentIndex < t2))
            return A.ioore($parent, parentIndex);
          t1 = t1.isSeparator$1($parent.charCodeAt(parentIndex));
        } else
          t1 = true;
        if (t1)
          lastParentSeparator = parentIndex;
        else if (lastParentSeparator == null)
          lastParentSeparator = Math.max(0, parentRootLength - 1);
        direction = _this._pathDirection$2($parent, lastParentSeparator);
        if (direction === B._PathDirection_8Gl)
          return B._PathRelation_equal;
        return direction === B._PathDirection_ZGD ? B._PathRelation_inconclusive : B._PathRelation_different;
      }
      direction = _this._pathDirection$2(child, childIndex);
      if (direction === B._PathDirection_8Gl)
        return B._PathRelation_equal;
      if (direction === B._PathDirection_ZGD)
        return B._PathRelation_inconclusive;
      if (!(childIndex >= 0 && childIndex < t3))
        return A.ioore(child, childIndex);
      return t1.isSeparator$1(child.charCodeAt(childIndex)) || t1.isSeparator$1(lastCodeUnit) ? B._PathRelation_within : B._PathRelation_different;
    },
    _pathDirection$2(path, index) {
      var t1, t2, i, depth, reachedRoot, t3, i0, t4;
      for (t1 = path.length, t2 = this.style, i = index, depth = 0, reachedRoot = false; i < t1;) {
        while (true) {
          if (i < t1) {
            if (!(i >= 0))
              return A.ioore(path, i);
            t3 = t2.isSeparator$1(path.charCodeAt(i));
          } else
            t3 = false;
          if (!t3)
            break;
          ++i;
        }
        if (i === t1)
          break;
        i0 = i;
        while (true) {
          if (i0 < t1) {
            if (!(i0 >= 0))
              return A.ioore(path, i0);
            t3 = !t2.isSeparator$1(path.charCodeAt(i0));
          } else
            t3 = false;
          if (!t3)
            break;
          ++i0;
        }
        t3 = i0 - i;
        if (t3 === 1) {
          if (!(i >= 0 && i < t1))
            return A.ioore(path, i);
          t4 = path.charCodeAt(i) === 46;
        } else
          t4 = false;
        if (!t4) {
          if (t3 === 2) {
            if (!(i >= 0 && i < t1))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 46) {
              t3 = i + 1;
              if (!(t3 < t1))
                return A.ioore(path, t3);
              t3 = path.charCodeAt(t3) === 46;
            } else
              t3 = false;
          } else
            t3 = false;
          if (t3) {
            --depth;
            if (depth < 0)
              break;
            if (depth === 0)
              reachedRoot = true;
          } else
            ++depth;
        }
        if (i0 === t1)
          break;
        i = i0 + 1;
      }
      if (depth < 0)
        return B._PathDirection_ZGD;
      if (depth === 0)
        return B._PathDirection_8Gl;
      if (reachedRoot)
        return B._PathDirection_FIw;
      return B._PathDirection_988;
    },
    toUri$1(path) {
      var t2,
        t1 = this.style;
      if (t1.rootLength$1(path) <= 0)
        return t1.relativePathToUri$1(path);
      else {
        t2 = this._context$_current;
        return t1.absolutePathToUri$1(this.join$2(0, t2 == null ? A.current() : t2, path));
      }
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(0, _this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(0, path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 1
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return A._asString(part).length !== 0;
    },
    $signature: 1
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 156
  };
  A._PathDirection.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A._PathRelation.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    relativePathToUri$1(path) {
      var segments, t2, _null = null,
        t1 = path.length;
      if (t1 === 0)
        return A._Uri__Uri(_null, _null, _null, _null, _null, _null, _null);
      segments = A.Context_Context(_null, this).split$1(0, path);
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (this.isSeparator$1(path.charCodeAt(t2)))
        B.JSArray_methods.add$1(segments, "");
      return A._Uri__Uri(_null, _null, segments, _null, _null, _null, _null);
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      return codeUnit1 === codeUnit2;
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    },
    canonicalizePart$1(part) {
      return part;
    }
  };
  A.ParsedPath.prototype = {
    get$hasTrailingSeparator() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 = J.$eq$(B.JSArray_methods.get$last(t1), "") || !J.$eq$(B.JSArray_methods.get$last(this.separators), "");
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$1$canonicalize(_, canonicalize) {
      var t1, t2, t3, leadingDoubles, _i, part, t4, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, t3 = _this.style, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t4 = J.getInterceptor$(part);
        if (!(t4.$eq(part, ".") || t4.$eq(part, "")))
          if (t4.$eq(part, "..")) {
            t4 = newParts.length;
            if (t4 !== 0) {
              if (0 >= t4)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, canonicalize ? t3.canonicalizePart$1(part) : part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      _this.set$separators(A.List_List$filled(newParts.length + 1, t3.get$separator(), true, type$.String));
      t1 = _this.root;
      if (t1 == null || newParts.length === 0 || !t3.needsSeparator$1(t1))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t1 = _this.root;
      if (t1 != null && t3 === $.$get$Style_windows()) {
        if (canonicalize)
          t1 = _this.root = t1.toLowerCase();
        t1.toString;
        _this.root = A.stringReplaceAllUnchecked(t1, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    normalize$0($receiver) {
      return this.normalize$1$canonicalize($receiver, false);
    },
    toString$0(_) {
      var i, t2, t3, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (i = 0; i < _this.parts.length; ++i, t1 = t3) {
        t2 = _this.separators;
        if (!(i < t2.length))
          return A.ioore(t2, i);
        t2 = A.S(t2[i]);
        t3 = _this.parts;
        if (!(i < t3.length))
          return A.ioore(t3, i);
        t3 = t1 + t2 + A.S(t3[i]);
      }
      t1 += A.S(B.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name(this);
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(path, t2);
        t2 = path.charCodeAt(t2) !== 47;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      if (t1)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path(uri);
        return A._Uri__uriDecode(t1, 0, t1.length, B.Utf8Codec_false, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    absolutePathToUri$1(path) {
      var _null = null,
        parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.parts;
      if (t1.length === 0)
        B.JSArray_methods.addAll$1(t1, A._setArrayType(["", ""], type$.JSArray_String));
      else if (parsed.get$hasTrailingSeparator())
        B.JSArray_methods.add$1(parsed.parts, "");
      return A._Uri__Uri(_null, _null, parsed.parts, _null, _null, "file", _null);
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = path.charCodeAt(i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!A.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      return t1;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    relativePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    absolutePathToUri$1(path) {
      return A.Uri_parse(path);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      t2 = path.charCodeAt(t2);
      return !(t2 === 47 || t2 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      if (path.charCodeAt(0) === 92) {
        if (t1 >= 2) {
          if (1 >= t1)
            return A.ioore(path, 1);
          t2 = path.charCodeAt(1) !== 92;
        } else
          t2 = true;
        if (t2)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(path.charCodeAt(0)))
        return 0;
      if (path.charCodeAt(1) !== 58)
        return 0;
      t1 = path.charCodeAt(2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path(uri);
      if (uri.get$host(uri) === "") {
        if (path.length >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.isDriveLetter(path, 1))
          path = B.JSString_methods.replaceFirst$2(path, "/", "");
      } else
        path = "\\\\" + uri.get$host(uri) + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.Utf8Codec_false, false);
    },
    absolutePathToUri$1(path) {
      var rootParts, t2, _null = null,
        parsed = A.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.root;
      t1.toString;
      if (B.JSString_methods.startsWith$1(t1, "\\\\")) {
        rootParts = new A.WhereIterable(A._setArrayType(t1.split("\\"), type$.JSArray_String), type$.bool_Function_String._as(new A.WindowsStyle_absolutePathToUri_closure()), type$.WhereIterable_String);
        B.JSArray_methods.insert$2(parsed.parts, 0, rootParts.get$last(rootParts));
        if (parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        return A._Uri__Uri(rootParts.get$first(rootParts), _null, parsed.parts, _null, _null, "file", _null);
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          B.JSArray_methods.add$1(parsed.parts, "");
        t1 = parsed.parts;
        t2 = parsed.root;
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "/", "");
        B.JSArray_methods.insert$2(t1, 0, A.stringReplaceAllUnchecked(t2, "\\", ""));
        return A._Uri__Uri(_null, _null, parsed.parts, _null, _null, "file", _null);
      }
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, t2, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      t2 = path2.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        if (!(i < t2))
          return A.ioore(path2, i);
        if (!this.codeUnitsEqual$2(path1.charCodeAt(i), path2.charCodeAt(i)))
          return false;
      }
      return true;
    },
    canonicalizePart$1(part) {
      return part.toLowerCase();
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 1
  };
  A.LocalPlatform.prototype = {
    get$numberOfProcessors() {
      return $.$get$Platform_numberOfProcessors();
    },
    get$pathSeparator() {
      return $.$get$Platform_pathSeparator();
    },
    get$operatingSystem() {
      return $.$get$Platform_operatingSystem();
    },
    get$operatingSystemVersion() {
      return $.$get$Platform_operatingSystemVersion();
    },
    get$localHostname() {
      return $.$get$Platform_localHostname();
    },
    get$environment() {
      return A._Platform_environment();
    },
    get$executable() {
      return A.Platform_executable();
    },
    get$resolvedExecutable() {
      return A.Platform_resolvedExecutable();
    },
    get$script() {
      return A.Platform_script();
    },
    get$executableArguments() {
      return A.Platform_executableArguments();
    },
    get$packageConfig() {
      return $.$get$_Platform_packageConfig();
    },
    get$version(_) {
      return $.$get$Platform_version();
    },
    get$stdinSupportsAnsi() {
      return A.stdin().get$supportsAnsiEscapes();
    },
    get$stdoutSupportsAnsi() {
      return A.stdout().get$supportsAnsiEscapes();
    },
    get$localeName() {
      return A.Platform_localeName0();
    }
  };
  A.Platform.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.get$numberOfProcessors(),
        t2 = _this.get$pathSeparator(),
        t3 = _this.get$operatingSystem(),
        t4 = _this.get$operatingSystemVersion(),
        t5 = _this.get$localHostname(),
        t6 = _this.get$environment(),
        t7 = _this.get$executable(),
        t8 = _this.get$resolvedExecutable(),
        t9 = _this.get$script().get$_text(),
        t10 = _this.get$executableArguments(),
        t11 = _this.get$packageConfig(),
        t12 = _this.get$version(_this);
      _this.get$stdinSupportsAnsi();
      _this.get$stdoutSupportsAnsi();
      return A._JsonStringStringifier_stringify(A.LinkedHashMap_LinkedHashMap$_literal(["numberOfProcessors", t1, "pathSeparator", t2, "operatingSystem", t3, "operatingSystemVersion", t4, "localHostname", t5, "environment", t6, "executable", t7, "resolvedExecutable", t8, "script", t9, "executableArguments", t10, "packageConfig", t11, "version", t12, "stdinSupportsAnsi", false, "stdoutSupportsAnsi", false, "localeName", _this.get$localeName()], type$.String, type$.dynamic), null, "  ");
    }
  };
  A.LocalProcessManager.prototype = {$isProcessManager: 1};
  A.Version.prototype = {
    get$min() {
      return this;
    },
    get$max() {
      return this;
    },
    get$includeMin() {
      return true;
    },
    get$includeMax() {
      return true;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof A.Version && _this.major === other.major && _this.minor === other.minor && _this.patch === other.patch && B.IterableEquality_DefaultEquality.equals$2(0, _this.preRelease, other.preRelease) && B.IterableEquality_DefaultEquality.equals$2(0, _this.build, other.build);
    },
    get$hashCode(_) {
      var _this = this;
      return (_this.major ^ _this.minor ^ _this.patch ^ B.IterableEquality_DefaultEquality.hash$1(_this.preRelease) ^ B.IterableEquality_DefaultEquality.hash$1(_this.build)) >>> 0;
    },
    get$nextBreaking() {
      var t1 = this.major;
      if (t1 === 0)
        return A.Version_Version(t1, this.minor + 1, 0, null);
      return A.Version_Version(t1 + 1, 0, 0, null);
    },
    compareTo$1(_, other) {
      var t1, t2, t3, comparison, _this = this;
      type$.VersionRange._as(other);
      if (other instanceof A.Version) {
        t1 = _this.major;
        t2 = other.major;
        if (t1 !== t2)
          return B.JSInt_methods.compareTo$1(t1, t2);
        t1 = _this.minor;
        t2 = other.minor;
        if (t1 !== t2)
          return B.JSInt_methods.compareTo$1(t1, t2);
        t1 = _this.patch;
        t2 = other.patch;
        if (t1 !== t2)
          return B.JSInt_methods.compareTo$1(t1, t2);
        t1 = _this.preRelease;
        t2 = t1.length === 0;
        if (t2 && other.preRelease.length !== 0)
          return 1;
        t3 = other.preRelease;
        if (t3.length === 0 && !t2)
          return -1;
        comparison = _this._compareLists$2(t1, t3);
        if (comparison !== 0)
          return comparison;
        t1 = _this.build;
        t2 = t1.length === 0;
        if (t2 && other.build.length !== 0)
          return -1;
        t3 = other.build;
        if (t3.length === 0 && !t2)
          return 1;
        return _this._compareLists$2(t1, t3);
      } else
        return -other.compareTo$1(0, _this);
    },
    toString$0(_) {
      return this._version$_text;
    },
    _compareLists$2(a, b) {
      var i, t2, aPart, bPart,
        t1 = type$.List_Object;
      t1._as(a);
      t1._as(b);
      for (i = 0; t1 = a.length, t2 = b.length, i < Math.max(t1, t2); ++i) {
        aPart = i < t1 ? a[i] : null;
        bPart = i < t2 ? b[i] : null;
        if (J.$eq$(aPart, bPart))
          continue;
        if (aPart == null)
          return -1;
        if (bPart == null)
          return 1;
        if (typeof aPart == "number")
          if (typeof bPart == "number")
            return B.JSNumber_methods.compareTo$1(aPart, bPart);
          else
            return -1;
        else if (typeof bPart == "number")
          return 1;
        else {
          A._asString(aPart);
          A._asString(bPart);
          if (aPart === bPart)
            t1 = 0;
          else
            t1 = aPart < bPart ? -1 : 1;
          return t1;
        }
      }
      return 0;
    },
    $isComparable: 1,
    $isVersionConstraint: 1,
    $isVersionRange: 1
  };
  A.Version__splitParts_closure.prototype = {
    call$1(part) {
      var t1;
      A._asString(part);
      t1 = A.Primitives_parseInt(part, null);
      return t1 == null ? part : t1;
    },
    $signature: 157
  };
  A.VersionConstraint_VersionConstraint$parse_skipWhitespace.prototype = {
    call$0() {
      var t1 = this._box_0;
      t1.text = B.JSString_methods.trim$0(t1.text);
    },
    $signature: 0
  };
  A.VersionConstraint_VersionConstraint$parse_matchVersion.prototype = {
    call$0() {
      var t1 = this._box_0,
        version = $.$get$startVersion().firstMatch$1(t1.text);
      if (version == null)
        return null;
      t1.text = B.JSString_methods.substring$1(t1.text, version.get$end(version));
      t1 = version._match;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t1 = t1[0];
      t1.toString;
      return A.Version_Version$parse(t1);
    },
    $signature: 158
  };
  A.VersionConstraint_VersionConstraint$parse_matchComparison.prototype = {
    call$0() {
      var t2, op, version, _this = this, _null = null,
        t1 = _this._box_0,
        comparison = $.$get$startComparison().firstMatch$1(t1.text);
      if (comparison == null)
        return _null;
      t2 = comparison._match;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      op = t2[0];
      t1.text = B.JSString_methods.substring$1(t1.text, comparison.get$end(comparison));
      _this.skipWhitespace.call$0();
      version = _this.matchVersion.call$0();
      if (version == null)
        throw A.wrapException(A.FormatException$('Expected version number after "' + A.S(op) + '" in "' + _this.originalText + '", got "' + t1.text + '".', _null, _null));
      switch (op) {
        case "<=":
          return A.VersionRange_VersionRange(false, true, false, version, _null);
        case "<":
          return A.VersionRange_VersionRange(true, false, false, version, _null);
        case ">=":
          return A.VersionRange_VersionRange(false, false, true, _null, version);
        case ">":
          return A.VersionRange_VersionRange(false, false, false, _null, version);
      }
      op.toString;
      throw A.wrapException(A.UnsupportedError$(op));
    },
    $signature: 159
  };
  A.VersionConstraint_VersionConstraint$parse_matchCompatibleWith.prototype = {
    call$0() {
      var version, _this = this, _null = null,
        t1 = _this._box_0,
        t2 = t1.text;
      if (!B.JSString_methods.startsWith$1(t2, "^"))
        return _null;
      t1.text = B.JSString_methods.substring$1(t2, 1);
      _this.skipWhitespace.call$0();
      version = _this.matchVersion.call$0();
      if (version == null)
        throw A.wrapException(A.FormatException$('Expected version number after "^" in "' + _this.originalText + '", got "' + t1.text + '".', _null, _null));
      if (t1.text.length !== 0)
        throw A.wrapException(A.FormatException$('Cannot include other constraints with "^" constraint in "' + _this.originalText + '".', _null, _null));
      return A.CompatibleWithVersionRange$(version);
    },
    $signature: 160
  };
  A._EmptyVersion.prototype = {
    toString$0(_) {
      return "<empty>";
    },
    $isVersionConstraint: 1
  };
  A.VersionRange.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!type$.VersionRange._is(other))
        return false;
      return J.$eq$(_this.min, other.get$min()) && J.$eq$(_this.max, other.get$max()) && _this.includeMin === other.get$includeMin() && _this.includeMax === other.get$includeMax();
    },
    get$hashCode(_) {
      var _this = this,
        t1 = J.get$hashCode$(_this.min),
        t2 = J.get$hashCode$(_this.max),
        t3 = _this.includeMin ? 519018 : 218159,
        t4 = _this.includeMax ? 519018 : 218159;
      return (t1 ^ t2 * 3 ^ t3 * 5 ^ t4 * 7) >>> 0;
    },
    compareTo$1(_, other) {
      var t1, t2, result, _this = this;
      type$.VersionRange._as(other);
      t1 = _this.min;
      if (t1 == null) {
        if (other.get$min() == null)
          return _this._compareMax$1(other);
        return -1;
      } else if (other.get$min() == null)
        return 1;
      t2 = other.get$min();
      t2.toString;
      result = t1.compareTo$1(0, t2);
      if (result !== 0)
        return result;
      t1 = _this.includeMin;
      if (t1 !== other.get$includeMin())
        return t1 ? -1 : 1;
      return _this._compareMax$1(other);
    },
    _compareMax$1(other) {
      var t2, result,
        t1 = this.max;
      if (t1 == null) {
        if (other.get$max() == null)
          return 0;
        return 1;
      } else if (other.get$max() == null)
        return -1;
      t2 = other.get$max();
      t2.toString;
      result = t1.compareTo$1(0, t2);
      if (result !== 0)
        return result;
      t1 = this.includeMax;
      if (t1 !== other.get$includeMax())
        return t1 ? 1 : -1;
      return 0;
    },
    toString$0(_) {
      var t3, max, t4, t5, minIsPreReleaseOfMax, _this = this,
        min = _this.min,
        t1 = min == null,
        t2 = !t1;
      if (t2) {
        t3 = _this.includeMin ? ">=" : ">";
        t3 = "" + t3 + min.toString$0(0);
      } else
        t3 = "";
      max = _this.max;
      t4 = max == null;
      if (!t4) {
        if (t2)
          t3 += " ";
        if (_this.includeMax)
          t2 = t3 + "<=" + max.toString$0(0);
        else {
          t3 += "<";
          t5 = max.preRelease;
          if (t5.length === 1 && J.$eq$(B.JSArray_methods.get$first(t5), 0))
            t2 = t3 + ("" + max.major + "." + max.minor + "." + max.patch);
          else {
            t3 += max.toString$0(0);
            minIsPreReleaseOfMax = t2 && min.preRelease.length !== 0 && A.equalsWithoutPreRelease(min, max);
            t2 = t5.length === 0 && max.build.length === 0 && !minIsPreReleaseOfMax ? t3 + "-\u221e" : t3;
          }
        }
      } else
        t2 = t3;
      t1 = t1 && t4 ? t2 + "any" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isComparable: 1,
    $isVersionConstraint: 1,
    get$min() {
      return this.min;
    },
    get$max() {
      return this.max;
    },
    get$includeMin() {
      return this.includeMin;
    },
    get$includeMax() {
      return this.includeMax;
    }
  };
  A.CompatibleWithVersionRange.prototype = {
    toString$0(_) {
      return "^" + A.S(this.min);
    }
  };
  A.parseDeps_closure.prototype = {
    call$2(k, v) {
      var key, value, e, exception, t1;
      A._asString(k);
      key = k;
      value = null;
      try {
        value = A._fromJson(v, k);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.CheckedFromJsonException) {
          e = t1;
          if (!type$.YamlMap._is(e.map)) {
            t1 = e._className;
            t1.toString;
            throw A.wrapException(A.CheckedFromJsonException$(this.source, key, t1, e.message, false));
          }
          throw exception;
        } else
          throw exception;
      }
      if (value == null)
        throw A.wrapException(A.CheckedFromJsonException$(this.source, key, "Pubspec", "Not a valid dependency value.", false));
      return new A.MapEntry(key, value, type$.MapEntry_String_Dependency);
    },
    $signature: 161
  };
  A._fromJson_closure.prototype = {
    call$1(key) {
      return A._asString(key) !== "version";
    },
    $signature: 1
  };
  A._fromJson_closure1.prototype = {
    call$1(k) {
      return !B.JSArray_methods.contains$1(B.List_sdk_git_path_hosted, A._asString(k));
    },
    $signature: 1
  };
  A._fromJson_closure0.prototype = {
    call$0() {
      var key, hosted, _this = this,
        t1 = _this.firstUnrecognizedKey;
      if (t1 != null)
        throw A.wrapException(A.UnrecognizedKeysException$(A._setArrayType([t1], type$.JSArray_String), _this.data, B.List_sdk_git_path_hosted));
      t1 = _this.matchedKeys;
      if (t1.length > 1)
        throw A.wrapException(A.CheckedFromJsonException$(_this.data, t1[1], "Dependency", "A dependency may only have one source.", false));
      key = B.JSArray_methods.get$single(t1);
      switch (key) {
        case "git":
          return A.GitDependency_GitDependency$fromData(_this.data.$index(0, key));
        case "path":
          return A.PathDependency_PathDependency$fromData(_this.data.$index(0, key));
        case "sdk":
          return A._$SdkDependencyFromJson(_this.data);
        case "hosted":
          hosted = A._$HostedDependencyFromJson(_this.data);
          return hosted;
      }
      throw A.wrapException(A.StateError$("There is a bug in pubspec_parse."));
    },
    $signature: 27
  };
  A.Dependency.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": " + this.get$_info();
    }
  };
  A.SdkDependency.prototype = {
    get$_info() {
      return this.sdk;
    }
  };
  A.GitDependency.prototype = {
    get$_info() {
      return "url@" + this.url.toString$0(0);
    }
  };
  A.PathDependency.prototype = {
    get$_info() {
      return "path@" + this.path;
    }
  };
  A.HostedDependency.prototype = {
    get$_info() {
      return this.version.toString$0(0);
    }
  };
  A.HostedDetails.prototype = {};
  A._$SdkDependencyFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      var t1, t2;
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      t1 = $$checkedConvert.call$1$2("sdk", new A._$SdkDependencyFromJson__closure(), type$.String);
      t2 = $$checkedConvert.call$1$2("version", new A._$SdkDependencyFromJson__closure0(), type$.nullable_VersionConstraint);
      return new A.SdkDependency(t1, t2 == null ? $.$get$VersionConstraint_any() : t2);
    },
    $signature: 244
  };
  A._$SdkDependencyFromJson__closure.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$SdkDependencyFromJson__closure0.prototype = {
    call$1(v) {
      A._asStringQ(v);
      return v == null ? $.$get$VersionConstraint_any() : A.VersionConstraint_VersionConstraint$parse(v);
    },
    $signature: 76
  };
  A._$GitDependencyFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      var t1;
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      t1 = type$.nullable_String;
      return new A.GitDependency($$checkedConvert.call$1$2("url", new A._$GitDependencyFromJson__closure(), type$.Uri), $$checkedConvert.call$1$2("ref", new A._$GitDependencyFromJson__closure0(), t1), $$checkedConvert.call$1$2("path", new A._$GitDependencyFromJson__closure1(), t1));
    },
    $signature: 164
  };
  A._$GitDependencyFromJson__closure.prototype = {
    call$1(v) {
      var t1;
      A._asString(v);
      t1 = A._tryParseScpUri(v);
      return t1 == null ? A.Uri_parse(v) : t1;
    },
    $signature: 50
  };
  A._$GitDependencyFromJson__closure0.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$GitDependencyFromJson__closure1.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$HostedDependencyFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      var t1, t2;
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_version_hosted, B.List_hosted);
      t1 = $$checkedConvert.call$1$2("version", new A._$HostedDependencyFromJson__closure(), type$.nullable_VersionConstraint);
      t2 = $$checkedConvert.call$1$2("hosted", new A._$HostedDependencyFromJson__closure0(), type$.nullable_HostedDetails);
      return new A.HostedDependency(t1 == null ? $.$get$VersionConstraint_any() : t1, t2);
    },
    $signature: 165
  };
  A._$HostedDependencyFromJson__closure.prototype = {
    call$1(v) {
      A._asStringQ(v);
      return v == null ? $.$get$VersionConstraint_any() : A.VersionConstraint_VersionConstraint$parse(v);
    },
    $signature: 76
  };
  A._$HostedDependencyFromJson__closure0.prototype = {
    call$1(v) {
      return v == null ? null : A.HostedDetails_HostedDetails$fromJson(v);
    },
    $signature: 166
  };
  A._$HostedDetailsFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      A.$checkKeys(this.json, B.List_name_url, B.List_url);
      $$checkedConvert.call$1$2("name", new A._$HostedDetailsFromJson__closure(), type$.nullable_String);
      return new A.HostedDetails($$checkedConvert.call$1$2("url", new A._$HostedDetailsFromJson__closure0(), type$.nullable_Uri));
    },
    $signature: 167
  };
  A._$HostedDetailsFromJson__closure.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$HostedDetailsFromJson__closure0.prototype = {
    call$1(v) {
      var t1;
      A._asStringQ(v);
      if (v == null)
        t1 = null;
      else {
        t1 = A._tryParseScpUri(v);
        if (t1 == null)
          t1 = A.Uri_parse(v);
      }
      return t1;
    },
    $signature: 38
  };
  A.Pubspec.prototype = {
    Pubspec$18$author$authors$dependencies$dependencyOverrides$description$devDependencies$documentation$environment$flutter$funding$homepage$issueTracker$publishTo$repository$screenshots$topics$version($name, author, authors, dependencies, dependencyOverrides, description, devDependencies, documentation, environment, flutter, funding, homepage, issueTracker, publishTo, repository, screenshots, topics, version) {
      var targetUri, e, exception, t2,
        t1 = this.name;
      if (t1.length === 0)
        throw A.wrapException(A.ArgumentError$value(t1, "name", '"name" cannot be empty.'));
      t1 = this.publishTo;
      if (t1 != null && t1 !== "none")
        try {
          t1.toString;
          targetUri = A.Uri_parse(t1);
          if (!(targetUri.isScheme$1("http") || targetUri.isScheme$1("https")))
            throw A.wrapException(B.FormatException_kUZ);
        } catch (exception) {
          t2 = A.unwrapException(exception);
          if (type$.FormatException._is(t2)) {
            e = t2;
            throw A.wrapException(A.ArgumentError$value(t1, "publishTo", J.get$message$z(e)));
          } else
            throw exception;
        }
    }
  };
  A.Pubspec_Pubspec$parse_closure.prototype = {
    call$1(map) {
      map.toString;
      return A.Pubspec_Pubspec$fromJson(map, this.lenient);
    },
    $signature: 169
  };
  A._environmentMap_closure.prototype = {
    call$2(k, value) {
      var constraint, e, exception, t1,
        _s17_ = "VersionConstraint",
        key = A._asString(k);
      if (J.$eq$(key, "dart"))
        throw A.wrapException(A.CheckedFromJsonException$(this.source, "dart", _s17_, 'Use "sdk" to for Dart SDK constraints.', true));
      constraint = null;
      if (value == null)
        constraint = null;
      else if (typeof value == "string") {
        try {
          constraint = A.VersionConstraint_VersionConstraint$parse(value);
        } catch (exception) {
          t1 = A.unwrapException(exception);
          if (type$.FormatException._is(t1)) {
            e = t1;
            throw A.wrapException(A.CheckedFromJsonException$(this.source, key, "Pubspec", J.get$message$z(e), false));
          } else
            throw exception;
        }
        return new A.MapEntry(key, constraint, type$.MapEntry_of_String_and_nullable_VersionConstraint);
      } else
        throw A.wrapException(A.CheckedFromJsonException$(this.source, key, _s17_, "`" + A.S(value) + "` is not a String.", false));
      return new A.MapEntry(key, constraint, type$.MapEntry_of_String_and_nullable_VersionConstraint);
    },
    $signature: 170
  };
  A._$PubspecFromJson_closure.prototype = {
    call$1($$checkedConvert) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, val;
      type$.A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String._as($$checkedConvert);
      t1 = type$.String;
      t2 = $$checkedConvert.call$1$2("name", new A._$PubspecFromJson__closure(), t1);
      t3 = $$checkedConvert.call$1$2("version", new A._$PubspecFromJson__closure0(), type$.nullable_Version);
      t4 = type$.nullable_String;
      t5 = $$checkedConvert.call$1$2("publish_to", new A._$PubspecFromJson__closure1(), t4);
      t6 = $$checkedConvert.call$1$2("author", new A._$PubspecFromJson__closure2(), t4);
      t7 = type$.nullable_List_String;
      t8 = $$checkedConvert.call$1$2("authors", new A._$PubspecFromJson__closure3(), t7);
      t9 = $$checkedConvert.call$1$2("environment", new A._$PubspecFromJson__closure4(), type$.nullable_Map_of_String_and_nullable_VersionConstraint);
      t10 = $$checkedConvert.call$1$2("homepage", new A._$PubspecFromJson__closure5(), t4);
      t11 = type$.nullable_Uri;
      t12 = $$checkedConvert.call$1$2("repository", new A._$PubspecFromJson__closure6(), t11);
      t11 = $$checkedConvert.call$1$2("issue_tracker", new A._$PubspecFromJson__closure7(), t11);
      t13 = $$checkedConvert.call$1$2("funding", new A._$PubspecFromJson__closure8(), type$.nullable_List_Uri);
      t7 = $$checkedConvert.call$1$2("topics", new A._$PubspecFromJson__closure9(), t7);
      t14 = $$checkedConvert.call$1$2("screenshots", new A._$PubspecFromJson__closure10(), type$.nullable_List_Screenshot);
      t15 = $$checkedConvert.call$1$2("documentation", new A._$PubspecFromJson__closure11(), t4);
      t4 = $$checkedConvert.call$1$2("description", new A._$PubspecFromJson__closure12(), t4);
      t16 = type$.nullable_Map_String_Dependency;
      t17 = $$checkedConvert.call$1$2("dependencies", new A._$PubspecFromJson__closure13(), t16);
      t18 = $$checkedConvert.call$1$2("dev_dependencies", new A._$PubspecFromJson__closure14(), t16);
      t16 = $$checkedConvert.call$1$2("dependency_overrides", new A._$PubspecFromJson__closure15(), t16);
      t19 = $$checkedConvert.call$1$2("flutter", new A._$PubspecFromJson__closure16(), type$.nullable_Map_String_dynamic);
      t1 = A.LinkedHashSet_LinkedHashSet$_empty(t1);
      if (t6 != null)
        t1.add$1(0, t6);
      if (t8 != null)
        t1.addAll$1(0, t8);
      A.List_List$of(t1, true, t1.$ti._precomputed1);
      t1 = t9 == null ? B.Map_empty1 : t9;
      t20 = t17 == null ? B.Map_empty2 : t17;
      t21 = t18 == null ? B.Map_empty2 : t18;
      val = new A.Pubspec(t2, t3, t4, t10, t5, t12, t11, t1, t20, t21, t16 == null ? B.Map_empty2 : t16, t19);
      val.Pubspec$18$author$authors$dependencies$dependencyOverrides$description$devDependencies$documentation$environment$flutter$funding$homepage$issueTracker$publishTo$repository$screenshots$topics$version(t2, t6, t8, t17, t16, t4, t18, t15, t9, t19, t13, t10, t11, t5, t12, t14, t7, t3);
      return val;
    },
    $signature: 171
  };
  A._$PubspecFromJson__closure.prototype = {
    call$1(v) {
      return A._asString(v);
    },
    $signature: 7
  };
  A._$PubspecFromJson__closure0.prototype = {
    call$1(v) {
      A._asStringQ(v);
      return v == null ? null : A.Version_Version$parse(v);
    },
    $signature: 172
  };
  A._$PubspecFromJson__closure1.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$PubspecFromJson__closure2.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$PubspecFromJson__closure3.prototype = {
    call$1(v) {
      var t1;
      type$.nullable_List_dynamic._as(v);
      if (v == null)
        t1 = null;
      else {
        t1 = J.map$1$1$ax(v, new A._$PubspecFromJson___closure2(), type$.String);
        t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
      }
      return t1;
    },
    $signature: 65
  };
  A._$PubspecFromJson___closure2.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 19
  };
  A._$PubspecFromJson__closure4.prototype = {
    call$1(v) {
      return A._environmentMap(type$.nullable_Map_dynamic_dynamic._as(v));
    },
    $signature: 174
  };
  A._$PubspecFromJson__closure5.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$PubspecFromJson__closure6.prototype = {
    call$1(v) {
      return v == null ? null : A.Uri_parse(A._asString(v));
    },
    $signature: 38
  };
  A._$PubspecFromJson__closure7.prototype = {
    call$1(v) {
      return v == null ? null : A.Uri_parse(A._asString(v));
    },
    $signature: 38
  };
  A._$PubspecFromJson__closure8.prototype = {
    call$1(v) {
      var t1;
      type$.nullable_List_dynamic._as(v);
      if (v == null)
        t1 = null;
      else {
        t1 = J.map$1$1$ax(v, new A._$PubspecFromJson___closure1(), type$.Uri);
        t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
      }
      return t1;
    },
    $signature: 175
  };
  A._$PubspecFromJson___closure1.prototype = {
    call$1(e) {
      return A.Uri_parse(A._asString(e));
    },
    $signature: 243
  };
  A._$PubspecFromJson__closure9.prototype = {
    call$1(v) {
      var t1;
      type$.nullable_List_dynamic._as(v);
      if (v == null)
        t1 = null;
      else {
        t1 = J.map$1$1$ax(v, new A._$PubspecFromJson___closure0(), type$.String);
        t1 = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("ListIterable.E"));
      }
      return t1;
    },
    $signature: 65
  };
  A._$PubspecFromJson___closure0.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 19
  };
  A._$PubspecFromJson__closure10.prototype = {
    call$1(v) {
      return A.parseScreenshots(type$.nullable_List_dynamic._as(v));
    },
    $signature: 177
  };
  A._$PubspecFromJson__closure11.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$PubspecFromJson__closure12.prototype = {
    call$1(v) {
      return A._asStringQ(v);
    },
    $signature: 4
  };
  A._$PubspecFromJson__closure13.prototype = {
    call$1(v) {
      return A.parseDeps(type$.nullable_Map_dynamic_dynamic._as(v));
    },
    $signature: 22
  };
  A._$PubspecFromJson__closure14.prototype = {
    call$1(v) {
      return A.parseDeps(type$.nullable_Map_dynamic_dynamic._as(v));
    },
    $signature: 22
  };
  A._$PubspecFromJson__closure15.prototype = {
    call$1(v) {
      return A.parseDeps(type$.nullable_Map_dynamic_dynamic._as(v));
    },
    $signature: 22
  };
  A._$PubspecFromJson__closure16.prototype = {
    call$1(v) {
      type$.nullable_Map_dynamic_dynamic._as(v);
      return v == null ? null : v.map$2$1(0, new A._$PubspecFromJson___closure(), type$.String, type$.dynamic);
    },
    $signature: 178
  };
  A._$PubspecFromJson___closure.prototype = {
    call$2(k, e) {
      return new A.MapEntry(A._asString(k), e, type$.MapEntry_String_dynamic);
    },
    $signature: 179
  };
  A.Screenshot.prototype = {};
  A.mapStackTrace_closure.prototype = {
    call$1(trace) {
      var _this = this;
      return A.Trace_Trace$from(A.mapStackTrace(_this.sourceMap, type$.Trace._as(trace), _this.minified, _this.packageMap, _this.sdkRoot));
    },
    $signature: 180
  };
  A.mapStackTrace_closure0.prototype = {
    call$1(frame) {
      var line, column, span, sourceUrl, t1, t2, t3, t4;
      type$.Frame._as(frame);
      line = frame.get$line();
      if (line == null)
        return null;
      column = frame.get$column();
      if (column == null)
        column = 0;
      span = this.sourceMap.spanFor$3$uri(line - 1, column - 1, frame.get$uri().toString$0(0));
      if (span == null)
        return null;
      sourceUrl = J.toString$0$(span.get$sourceUrl(span));
      t1 = this.sdkLib;
      if (t1 != null && $.$get$url()._isWithinOrEquals$2(t1, sourceUrl) === B._PathRelation_within)
        sourceUrl = "dart:" + $.$get$url().relative$2$from(0, sourceUrl, t1);
      t1 = A.Uri_parse(sourceUrl);
      t2 = span.get$start(span).get$line();
      t3 = span.get$start(span).get$column();
      t4 = frame.get$member();
      t4.toString;
      t4 = A._prettifyMember(t4);
      return new A.Frame(t1, t2 + 1, t3 + 1, t4);
    },
    $signature: 181
  };
  A._prettifyMember_closure.prototype = {
    call$1(match) {
      return B.JSString_methods.$mul(".<fn>", match.$index(0, 1).length);
    },
    $signature: 14
  };
  A._prettifyMember_closure0.prototype = {
    call$1(match) {
      var t1 = match.$index(0, 1);
      t1.toString;
      return t1 + ".";
    },
    $signature: 14
  };
  A.Mapping.prototype = {};
  A.MultiSectionMapping.prototype = {
    MultiSectionMapping$fromJson$3$mapUrl(sections, otherMaps, mapUrl) {
      var t1, t2, t3, t4, t5, t6, offset, line, column, url, map, _null = null;
      for (t1 = J.get$iterator$ax(J.cast$1$0$ax(sections, type$.Map_dynamic_dynamic)), t2 = this._maps, t3 = this._lineStart, t4 = this._columnStart, t5 = type$.nullable_Map_dynamic_dynamic; t1.moveNext$0();) {
        t6 = t1.get$current();
        offset = t5._as(t6.$index(0, "offset"));
        if (offset == null)
          throw A.wrapException(A.FormatException$("section missing offset", _null, _null));
        line = A._asIntQ(offset.$index(0, "line"));
        if (line == null)
          throw A.wrapException(A.FormatException$("offset missing line", _null, _null));
        column = A._asIntQ(offset.$index(0, "column"));
        if (column == null)
          throw A.wrapException(A.FormatException$("offset missing column", _null, _null));
        B.JSArray_methods.add$1(t3, line);
        B.JSArray_methods.add$1(t4, column);
        url = A._asStringQ(t6.$index(0, "url"));
        map = t5._as(t6.$index(0, "map"));
        t6 = url != null;
        if (t6 && map != null)
          throw A.wrapException(A.FormatException$("section can't use both url and map entries", _null, _null));
        else if (t6) {
          t6 = A.FormatException$("section contains refers to " + url + ', but no map was given for it. Make sure a map is passed in "otherMaps"', _null, _null);
          throw A.wrapException(t6);
        } else if (map != null)
          B.JSArray_methods.add$1(t2, A.parseJson(map, mapUrl, otherMaps));
        else
          throw A.wrapException(A.FormatException$("section missing url or map", _null, _null));
      }
      if (t3.length === 0)
        throw A.wrapException(A.FormatException$("expected at least one section", _null, _null));
    },
    _indexFor$2(line, column) {
      var t1, t2, t3, t4, i, t5;
      for (t1 = this._lineStart, t2 = t1.length, t3 = this._columnStart, t4 = t3.length, i = 0; i < t2; ++i) {
        t5 = t1[i];
        if (line < t5)
          return i - 1;
        if (line === t5) {
          if (!(i < t4))
            return A.ioore(t3, i);
          t5 = column < t3[i];
        } else
          t5 = false;
        if (t5)
          return i - 1;
      }
      return t2 - 1;
    },
    spanFor$4$files$uri(line, column, files, uri) {
      var t2, t3, _this = this,
        index = _this._indexFor$2(line, column),
        t1 = _this._maps;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      t1 = t1[index];
      t2 = _this._lineStart;
      if (!(index < t2.length))
        return A.ioore(t2, index);
      t2 = t2[index];
      t3 = _this._columnStart;
      if (!(index < t3.length))
        return A.ioore(t3, index);
      return t1.spanFor$3$files(line - t2, column - t3[index], files);
    },
    spanFor$3$uri(line, column, uri) {
      return this.spanFor$4$files$uri(line, column, null, uri);
    },
    spanFor$3$files(line, column, files) {
      return this.spanFor$4$files$uri(line, column, files, null);
    },
    toString$0(_) {
      var t2, t3, t4, i, t5, t6, _this = this,
        t1 = A.getRuntimeTypeOfDartObject(_this).toString$0(0) + " : [";
      for (t2 = _this._lineStart, t3 = _this._columnStart, t4 = _this._maps, i = 0; i < t2.length; ++i, t1 = t6) {
        t5 = t2[i];
        if (!(i < t3.length))
          return A.ioore(t3, i);
        t6 = t3[i];
        if (!(i < t4.length))
          return A.ioore(t4, i);
        t6 = t1 + "(" + t5 + "," + t6 + ":" + t4[i].toString$0(0) + ")";
      }
      t1 += "]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.SingleMapping.prototype = {
    SingleMapping$fromJson$2$mapUrl(map, mapUrl) {
      var t3, source, tokenizer, entries, t4, t5, t6, line, column, srcUrlId, srcLine, srcColumn, srcNameId, t7, _this = this,
        _s14_ = "sourcesContent",
        _null = null,
        sourcesContent = map.$index(0, _s14_) == null ? B.List_empty4 : A.List_List$from(type$.List_dynamic._as(map.$index(0, _s14_)), true, type$.nullable_String),
        t1 = _this.files,
        t2 = _this.urls,
        i = 0;
      while (true) {
        t3 = t2.length;
        if (!(i < t3 && i < sourcesContent.length))
          break;
        c$0: {
          if (!(i < sourcesContent.length))
            return A.ioore(sourcesContent, i);
          source = sourcesContent[i];
          if (source == null)
            break c$0;
          if (!(i < t3))
            return A.ioore(t2, i);
          B.JSArray_methods.$indexSet(t1, i, A.SourceFile$fromString(source, t2[i]));
        }
        ++i;
      }
      t1 = A._asString(map.$index(0, "mappings"));
      t3 = t1.length;
      tokenizer = new A._MappingTokenizer(t1, t3);
      t1 = type$.JSArray_TargetEntry;
      entries = A._setArrayType([], t1);
      t4 = _this.names;
      t5 = t3 - 1;
      t3 = t3 > 0;
      t6 = _this.lines;
      line = 0;
      column = 0;
      srcUrlId = 0;
      srcLine = 0;
      srcColumn = 0;
      srcNameId = 0;
      while (true) {
        if (!(tokenizer.index < t5 && t3))
          break;
        c$1: {
          if (tokenizer.get$nextKind().isNewLine) {
            if (entries.length !== 0) {
              B.JSArray_methods.add$1(t6, new A.TargetLineEntry(line, entries));
              entries = A._setArrayType([], t1);
            }
            ++line;
            ++tokenizer.index;
            column = 0;
            break c$1;
          }
          if (tokenizer.get$nextKind().isNewSegment)
            throw A.wrapException(_this._segmentError$2(0, line));
          column += A.decodeVlq(tokenizer);
          t7 = tokenizer.get$nextKind();
          if (!(!t7.isNewLine && !t7.isNewSegment && !t7.isEof))
            B.JSArray_methods.add$1(entries, new A.TargetEntry(column, _null, _null, _null, _null));
          else {
            srcUrlId += A.decodeVlq(tokenizer);
            if (srcUrlId >= t2.length)
              throw A.wrapException(A.StateError$("Invalid source url id. " + A.S(_this.targetUrl) + ", " + line + ", " + srcUrlId));
            t7 = tokenizer.get$nextKind();
            if (!(!t7.isNewLine && !t7.isNewSegment && !t7.isEof))
              throw A.wrapException(_this._segmentError$2(2, line));
            srcLine += A.decodeVlq(tokenizer);
            t7 = tokenizer.get$nextKind();
            if (!(!t7.isNewLine && !t7.isNewSegment && !t7.isEof))
              throw A.wrapException(_this._segmentError$2(3, line));
            srcColumn += A.decodeVlq(tokenizer);
            t7 = tokenizer.get$nextKind();
            if (!(!t7.isNewLine && !t7.isNewSegment && !t7.isEof))
              B.JSArray_methods.add$1(entries, new A.TargetEntry(column, srcUrlId, srcLine, srcColumn, _null));
            else {
              srcNameId += A.decodeVlq(tokenizer);
              if (srcNameId >= t4.length)
                throw A.wrapException(A.StateError$("Invalid name id: " + A.S(_this.targetUrl) + ", " + line + ", " + srcNameId));
              B.JSArray_methods.add$1(entries, new A.TargetEntry(column, srcUrlId, srcLine, srcColumn, srcNameId));
            }
          }
          if (tokenizer.get$nextKind().isNewSegment)
            ++tokenizer.index;
        }
      }
      if (entries.length !== 0)
        B.JSArray_methods.add$1(t6, new A.TargetLineEntry(line, entries));
      map.forEach$1(0, new A.SingleMapping$fromJson_closure(_this));
    },
    toJson$0() {
      var t1, t2, line, column, srcLine, srcColumn, srcUrlId, srcNameId, first, _i, entry, nextLine, i, t3, t4, _i0, segment, column0, t5, newUrlId, t6, t7, srcNameId0, result, _this = this,
        buff = new A.StringBuffer("");
      for (t1 = _this.lines, t2 = t1.length, line = 0, column = 0, srcLine = 0, srcColumn = 0, srcUrlId = 0, srcNameId = 0, first = true, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        entry = t1[_i];
        nextLine = entry.line;
        if (nextLine > line) {
          for (i = line; i < nextLine; ++i)
            buff._contents += ";";
          line = nextLine;
          column = 0;
          first = true;
        }
        for (t3 = entry.entries, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i0, column = column0, first = false) {
          segment = t3[_i0];
          if (!first)
            buff._contents += ",";
          column0 = segment.column;
          t5 = A.encodeVlq(column0 - column);
          t5 = A.StringBuffer__writeAll(buff._contents, t5, "");
          buff._contents = t5;
          newUrlId = segment.sourceUrlId;
          if (newUrlId == null)
            continue;
          t5 = A.StringBuffer__writeAll(t5, A.encodeVlq(newUrlId - srcUrlId), "");
          buff._contents = t5;
          t6 = segment.sourceLine;
          t6.toString;
          t5 = A.StringBuffer__writeAll(t5, A.encodeVlq(t6 - srcLine), "");
          buff._contents = t5;
          t7 = segment.sourceColumn;
          t7.toString;
          t5 = A.StringBuffer__writeAll(t5, A.encodeVlq(t7 - srcColumn), "");
          buff._contents = t5;
          srcNameId0 = segment.sourceNameId;
          if (srcNameId0 == null) {
            srcUrlId = newUrlId;
            srcColumn = t7;
            srcLine = t6;
            continue;
          }
          buff._contents = A.StringBuffer__writeAll(t5, A.encodeVlq(srcNameId0 - srcNameId), "");
          srcNameId = srcNameId0;
          srcUrlId = newUrlId;
          srcColumn = t7;
          srcLine = t6;
        }
      }
      t1 = _this.sourceRoot;
      if (t1 == null)
        t1 = "";
      t2 = buff._contents;
      result = A.LinkedHashMap_LinkedHashMap$_literal(["version", 3, "sourceRoot", t1, "sources", _this.urls, "names", _this.names, "mappings", t2.charCodeAt(0) == 0 ? t2 : t2], type$.String, type$.dynamic);
      t1 = _this.targetUrl;
      if (t1 != null)
        result.$indexSet(0, "file", t1);
      _this.extensions.forEach$1(0, new A.SingleMapping_toJson_closure(result));
      return result;
    },
    _segmentError$2(seen, line) {
      return new A.StateError("Invalid entry in sourcemap, expected 1, 4, or 5 values, but got " + seen + ".\ntargeturl: " + A.S(this.targetUrl) + ", line: " + line);
    },
    _findLine$1(line) {
      var t2,
        t1 = this.lines,
        index = A.binarySearch(t1, new A.SingleMapping__findLine_closure(line), type$.TargetLineEntry);
      if (index <= 0)
        t1 = null;
      else {
        t2 = index - 1;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      }
      return t1;
    },
    _findColumn$3(line, column, lineEntry) {
      var entries, index, t1;
      if (lineEntry == null || lineEntry.entries.length === 0)
        return null;
      if (lineEntry.line !== line)
        return B.JSArray_methods.get$last(lineEntry.entries);
      entries = lineEntry.entries;
      index = A.binarySearch(entries, new A.SingleMapping__findColumn_closure(column), type$.TargetEntry);
      if (index <= 0)
        t1 = null;
      else {
        t1 = index - 1;
        if (!(t1 < entries.length))
          return A.ioore(entries, t1);
        t1 = entries[t1];
      }
      return t1;
    },
    spanFor$4$files$uri(line, column, files, uri) {
      var sourceUrlId, t1, url, sourceNameId, t2, start, t3, _this = this,
        entry = _this._findColumn$3(line, column, _this._findLine$1(line));
      if (entry == null)
        return null;
      sourceUrlId = entry.sourceUrlId;
      if (sourceUrlId == null)
        return null;
      t1 = _this.urls;
      if (sourceUrlId >>> 0 !== sourceUrlId || sourceUrlId >= t1.length)
        return A.ioore(t1, sourceUrlId);
      url = t1[sourceUrlId];
      t1 = _this.sourceRoot;
      if (t1 != null)
        url = t1 + url;
      sourceNameId = entry.sourceNameId;
      t1 = _this._mapUrl;
      t1 = t1 == null ? null : t1.resolve$1(0, url);
      if (t1 == null)
        t1 = url;
      t2 = entry.sourceLine;
      start = A.SourceLocation$(0, entry.sourceColumn, t2, t1);
      if (sourceNameId != null) {
        t1 = _this.names;
        if (sourceNameId >>> 0 !== sourceNameId || sourceNameId >= t1.length)
          return A.ioore(t1, sourceNameId);
        t1 = t1[sourceNameId];
        t2 = t1.length;
        t2 = A.SourceLocation$(start.offset + t2, start.column + t2, start.line, start.sourceUrl);
        t3 = new A.SourceMapSpan(true, start, t2, t1);
        t3.SourceSpanBase$3(start, t2, t1);
        return t3;
      } else
        return A.SourceMapSpan$(start, start, "", false);
    },
    spanFor$3$uri(line, column, uri) {
      return this.spanFor$4$files$uri(line, column, null, uri);
    },
    spanFor$3$files(line, column, files) {
      return this.spanFor$4$files$uri(line, column, files, null);
    },
    toString$0(_) {
      var _this = this,
        t1 = A.getRuntimeTypeOfDartObject(_this).toString$0(0) + " : [" + "targetUrl: " + A.S(_this.targetUrl) + ", sourceRoot: " + A.S(_this.sourceRoot) + ", urls: " + A.S(_this.urls) + ", names: " + A.S(_this.names) + ", lines: " + A.S(_this.lines) + "]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.SingleMapping$fromJson_closure.prototype = {
    call$2($name, value) {
      A._asString($name);
      if (B.JSString_methods.startsWith$1($name, "x_"))
        this.$this.extensions.$indexSet(0, $name, value);
    },
    $signature: 26
  };
  A.SingleMapping_toJson_closure.prototype = {
    call$2($name, value) {
      this.result.$indexSet(0, A._asString($name), value);
      return value;
    },
    $signature: 26
  };
  A.SingleMapping__findLine_closure.prototype = {
    call$1(e) {
      return type$.TargetLineEntry._as(e).line > this.line;
    },
    $signature: 182
  };
  A.SingleMapping__findColumn_closure.prototype = {
    call$1(e) {
      return type$.TargetEntry._as(e).column > this.column;
    },
    $signature: 183
  };
  A.TargetLineEntry.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + ": " + this.line + " " + A.S(this.entries);
    }
  };
  A.TargetEntry.prototype = {
    toString$0(_) {
      var _this = this;
      return A.getRuntimeTypeOfDartObject(_this).toString$0(0) + ": (" + _this.column + ", " + A.S(_this.sourceUrlId) + ", " + A.S(_this.sourceLine) + ", " + A.S(_this.sourceColumn) + ", " + A.S(_this.sourceNameId) + ")";
    }
  };
  A._MappingTokenizer.prototype = {
    moveNext$0() {
      return ++this.index < this._parser0$_length;
    },
    get$current() {
      var t1 = this.index,
        t2 = t1 >= 0 && t1 < this._parser0$_length,
        t3 = this._internal;
      if (t2) {
        if (!(t1 >= 0 && t1 < t3.length))
          return A.ioore(t3, t1);
        t1 = t3[t1];
      } else
        t1 = A.throwExpression(new A.IndexError(t3.length, true, t1, null, "Index out of range"));
      return t1;
    },
    get$hasTokens() {
      var t1 = this._parser0$_length;
      return this.index < t1 - 1 && t1 > 0;
    },
    get$nextKind() {
      var t1, t2, next;
      if (!this.get$hasTokens())
        return B._TokenKind_false_false_true;
      t1 = this._internal;
      t2 = this.index + 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      next = t1[t2];
      if (next === ";")
        return B._TokenKind_true_false_false;
      if (next === ",")
        return B._TokenKind_false_true_false;
      return B._TokenKind_false_false_false;
    },
    toString$0(_) {
      var t1, t2, i, exception, _this = this,
        buff = new A.StringBuffer("");
      for (t1 = _this._internal, t2 = t1.length, i = 0; i < _this.index; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        buff._contents += t1[i];
      }
      buff._contents += "\x1b[31m";
      try {
        buff._contents += _this.get$current();
      } catch (exception) {
        if (!type$.RangeError._is(A.unwrapException(exception)))
          throw exception;
      }
      buff._contents += "\x1b[0m";
      for (i = _this.index + 1; i < t2; ++i) {
        if (!(i >= 0))
          return A.ioore(t1, i);
        buff._contents += t1[i];
      }
      buff._contents += " (" + _this.index + ")";
      t1 = buff._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isIterator: 1
  };
  A._TokenKind.prototype = {};
  A.SourceMapSpan.prototype = {};
  A._digits_closure.prototype = {
    call$0() {
      var i,
        map = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int);
      for (i = 0; i < 64; ++i)
        map.$indexSet(0, string$.ABCDEF[i], i);
      return map;
    },
    $signature: 184
  };
  A.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (!(j < t2))
              return A.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          B.JSArray_methods.add$1(t3, i + 1);
      }
    },
    span$2(start, end) {
      return A._FileSpan$(this, start, end);
    },
    getLine$1(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + string$.x20must_ + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < B.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= B.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1(offset) {
      var t2, t3, t4,
        t1 = this._cachedLine;
      if (t1 == null)
        return false;
      t2 = this._lineStarts;
      t3 = t2.length;
      if (t1 >>> 0 !== t1 || t1 >= t3)
        return A.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      if (!(t1 >= t3 - 1)) {
        t4 = t1 + 1;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (!(t1 >= t3 - 2)) {
        t4 = t1 + 2;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + B.JSInt_methods._tdivFast$1(max - min, 2);
        if (!(half >= 0 && half < t2))
          return A.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line, t1, lineStart, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      t1 = _this._lineStarts;
      if (!(line >= 0 && line < t1.length))
        return A.ioore(t1, line);
      lineStart = t1[line];
      if (lineStart > offset)
        throw A.wrapException(A.RangeError$("Line " + line + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$2(line, column) {
      var t1, t2, result, t3;
      if (line < 0)
        throw A.wrapException(A.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw A.wrapException(A.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    },
    getOffset$1(line) {
      return this.getOffset$2(line, null);
    }
  };
  A.FileLocation.prototype = {
    get$sourceUrl(_) {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    FileLocation$_$2(file, offset) {
      var t2,
        t1 = this.offset;
      if (t1 < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + t1 + "."));
      else {
        t2 = this.file;
        if (t1 > t2._decodedChars.length)
          throw A.wrapException(A.RangeError$("Offset " + t1 + string$.x20must_ + t2.get$length(t2) + "."));
      }
    },
    pointSpan$0() {
      var t1 = this.offset;
      return A._FileSpan$(this.file, t1, t1);
    },
    get$offset() {
      return this.offset;
    }
  };
  A._FileSpan.prototype = {
    get$sourceUrl(_) {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._file$_start;
    },
    get$start(_) {
      return A.FileLocation$_(this.file, this._file$_start);
    },
    get$end(_) {
      return A.FileLocation$_(this.file, this._end);
    },
    get$text() {
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
    },
    get$context() {
      var _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0)
          return endLine === t1._lineStarts.length - 1 ? "" : A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(endLine), t1.getOffset$1(endLine + 1)), 0, null);
      } else
        endOffset = endLine === t1._lineStarts.length - 1 ? t1._decodedChars.length : t1.getOffset$1(endLine + 1);
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    _FileSpan$3(file, _start, _end) {
      var t3,
        t1 = this._end,
        t2 = this._file$_start;
      if (t1 < t2)
        throw A.wrapException(A.ArgumentError$("End " + t1 + " must come after start " + t2 + ".", null));
      else {
        t3 = this.file;
        if (t1 > t3._decodedChars.length)
          throw A.wrapException(A.RangeError$("End " + t1 + string$.x20must_ + t3.get$length(t3) + "."));
        else if (t2 < 0)
          throw A.wrapException(A.RangeError$("Start may not be negative, was " + t2 + "."));
      }
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      if (!(other instanceof A._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = B.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? B.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!type$.FileSpan._is(other))
        return _this.super$SourceSpanMixin$$eq(0, other);
      if (!(other instanceof A._FileSpan))
        return _this.super$SourceSpanMixin$$eq(0, other) && J.$eq$(_this.file.url, other.get$sourceUrl(other));
      return _this._file$_start === other._file$_start && _this._end === other._end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode(_) {
      return A.Object_hash(this._file$_start, this._end, this.file.url, B.C_SentinelValue);
    },
    expand$1(_, other) {
      var start, _this = this,
        t1 = _this.file;
      if (!J.$eq$(t1.url, other.file.url))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(_this.get$sourceUrl(_this)) + '" and  "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      start = Math.min(_this._file$_start, other._file$_start);
      return A._FileSpan$(t1, start, Math.max(_this._end, other._end));
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  A.Highlighter.prototype = {
    highlight$0() {
      var t2, highlightsByColumn, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, index, primaryIdx, primary, _i, _this = this, _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(B.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      highlightsByColumn = A.List_List$filled(t2, _null, false, type$.nullable__Highlight);
      for (t3 = _this._highlighter$_buffer, t2 = t2 !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!J.$eq$(t5, t6)) {
            _this._writeSidebar$1$end("\u2575");
            t3._contents += "\n";
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t3._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = A._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>"), t7 = new A.ReversedListIterable(t5, t6), t7 = new A.ListIterator(t7, t7.get$length(t7), t6._eval$1("ListIterator<ListIterable.E>")), t6 = t6._eval$1("ListIterable.E"), t8 = line.number, t9 = line.text; t7.moveNext$0();) {
          t10 = t7.__internal$_current;
          if (t10 == null)
            t10 = t6._as(t10);
          t11 = t10.span;
          if (t11.get$start(t11).get$line() !== t11.get$end(t11).get$line() && t11.get$start(t11).get$line() === t8 && _this._isOnlyWhitespace$1(B.JSString_methods.substring$2(t9, 0, t11.get$start(t11).get$column()))) {
            index = B.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              A.throwExpression(A.ArgumentError$(A.S(highlightsByColumn) + " contains no null elements.", _null));
            B.JSArray_methods.$indexSet(highlightsByColumn, index, t10);
          }
        }
        _this._writeSidebar$1$line(t8);
        t3._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t2)
          t3._contents += " ";
        primaryIdx = B.JSArray_methods.indexWhere$1(t5, new A.Highlighter_highlight_closure());
        if (primaryIdx === -1)
          primary = _null;
        else {
          if (!(primaryIdx >= 0 && primaryIdx < t5.length))
            return A.ioore(t5, primaryIdx);
          primary = t5[primaryIdx];
        }
        t6 = primary != null;
        if (t6) {
          t7 = primary.span;
          t10 = t7.get$start(t7).get$line() === t8 ? t7.get$start(t7).get$column() : 0;
          _this._writeHighlightedText$4$color(t9, t10, t7.get$end(t7).get$line() === t8 ? t7.get$end(t7).get$column() : t9.length, t4);
        } else
          _this._writeText$1(t9);
        t3._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t6 = t5.length, _i = 0; _i < t6; ++_i) {
          t5[_i].toString;
          continue;
        }
      }
      _this._writeSidebar$1$end("\u2575");
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var _this = this;
      if (!_this._multipleFiles || !type$.Uri._is(url))
        _this._writeSidebar$1$end("\u2577");
      else {
        _this._writeSidebar$1$end("\u250c");
        _this._colorize$1$2$color(new A.Highlighter__writeFileStart_closure(_this), "\x1b[34m", type$.void);
        _this._highlighter$_buffer._contents += " " + $.$get$context().prettyUri$1(url);
      }
      _this._highlighter$_buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, t5, t6, foundCurrent, _i, highlight, t7, startLine, t8, endLine, _this = this, _box_0 = {};
      type$.List_nullable__Highlight._as(highlightsByColumn);
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = null;
      else
        currentColor = _this._primaryColor;
      for (t2 = highlightsByColumn.length, t3 = type$.Null, t4 = _this._primaryColor, t1 = !t1, t5 = _this._highlighter$_buffer, t6 = type$.void, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t7 = highlight == null;
        if (t7)
          startLine = null;
        else {
          t8 = highlight.span;
          startLine = t8.get$start(t8).get$line();
        }
        if (t7)
          endLine = null;
        else {
          t8 = highlight.span;
          endLine = t8.get$end(t8).get$line();
        }
        if (t1 && highlight === current) {
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor, t3);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor, t3);
        else if (t7)
          if (_box_0.openedOnThisLine)
            _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor, t6);
          else
            t5._contents += " ";
        else
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t4, t3);
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(B.JSString_methods.substring$2(text, 0, startColumn));
      _this._colorize$1$2$color(new A.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color, type$.void);
      _this._writeText$1(B.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var color, t1, t2, coversWholeLine, _this = this;
      type$.List_nullable__Highlight._as(highlightsByColumn);
      color = _this._primaryColor;
      t1 = highlight.span;
      if (t1.get$start(t1).get$line() === t1.get$end(t1).get$line()) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure(_this, line, highlight), color, type$.int));
      } else {
        t2 = line.number;
        if (t1.get$start(t1).get$line() === t2) {
          if (B.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          A.replaceFirstNull(highlightsByColumn, highlight, type$._Highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure0(_this, line, highlight), color, type$.void);
          t1._contents += "\n";
        } else if (t1.get$end(t1).get$line() === t2) {
          coversWholeLine = t1.get$end(t1).get$column() === line.text.length;
          if (coversWholeLine && true) {
            A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
            return;
          }
          _this._writeSidebar$0();
          _this._highlighter$_buffer._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure1(_this, coversWholeLine, line, highlight), color, type$.int));
          A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t1 = beginning ? 0 : 1,
        t2 = this._highlighter$_buffer;
      t1 = t2._contents += B.JSString_methods.$mul("\u2500", 1 + column + this._countTabs$1(B.JSString_methods.substring$2(line.text, 0, column + t1)) * 3);
      t2._contents = t1 + "^";
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeLabel$3(highlight, highlightsByColumn, underlineLength) {
      type$.List_nullable__Highlight._as(highlightsByColumn);
      this._highlighter$_buffer._contents += "\n";
      return;
    },
    _writeText$1(text) {
      var t1, t2, t3, t4;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListBase.E>")), t3 = this._highlighter$_buffer, t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t2._as(t4);
        if (t4 === 9)
          t3._contents += B.JSString_methods.$mul(" ", 4);
        else
          t3._contents += A.Primitives_stringFromCharCode(t4);
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = B.JSInt_methods.toString$0(line + 1);
      this._colorize$1$2$color(new A.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m", type$.Null);
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === 9)
          ++count;
      }
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(t1), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3 !== 32 && t3 !== 9)
          return false;
      }
      return true;
    },
    _colorize$1$2$color(callback, color, $T) {
      var t1, result;
      $T._eval$1("0()")._as(callback);
      t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._highlighter$_buffer._contents += color;
      result = callback.call$0();
      if (t1 && color != null)
        this._highlighter$_buffer._contents += "\x1b[0m";
      return result;
    }
  };
  A.Highlighter_closure.prototype = {
    call$0() {
      return this.color;
    },
    $signature: 185
  };
  A.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = type$._Line._as(line).highlights,
        t2 = A._arrayInstanceType(t1);
      t2 = new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Highlighter$___closure()), t2._eval$1("WhereIterable<1>"));
      return t2.get$length(t2);
    },
    $signature: 186
  };
  A.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      return t1.get$start(t1).get$line() !== t1.get$end(t1).get$line();
    },
    $signature: 39
  };
  A.Highlighter$__closure0.prototype = {
    call$1(line) {
      return type$._Line._as(line).url;
    },
    $signature: 188
  };
  A.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      t1 = t1.get$sourceUrl(t1);
      return t1 == null ? new A.Object() : t1;
    },
    $signature: 189
  };
  A.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      var t1 = type$._Highlight;
      return t1._as(highlight1).span.compareTo$1(0, t1._as(highlight2).span);
    },
    $signature: 190
  };
  A.Highlighter__collateLines_closure1.prototype = {
    call$1(entry) {
      var url, highlightsForFile, lines, t1, t2, t3, t4, context, t5, linesBeforeSpan, lineNumber, _i, line, activeHighlights, highlightIndex, oldHighlightLength, t6, t7;
      type$.MapEntry_of_Object_and_List__Highlight._as(entry);
      url = entry.key;
      highlightsForFile = entry.value;
      lines = A._setArrayType([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current().span;
        context = t4.get$context();
        t5 = A.findLineStart(context, t4.get$text(), t4.get$start(t4).get$column());
        t5.toString;
        t5 = B.JSString_methods.allMatches$1("\n", B.JSString_methods.substring$2(context, 0, t5));
        linesBeforeSpan = t5.get$length(t5);
        lineNumber = t4.get$start(t4).get$line() - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > B.JSArray_methods.get$last(lines).number)
            B.JSArray_methods.add$1(lines, new A._Line(line, lineNumber, url, A._setArrayType([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = A._setArrayType([], t3);
      for (t2 = lines.length, t3 = type$.bool_Function__Highlight, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = t3._as(new A.Highlighter__collateLines__closure(line));
        if (!!activeHighlights.fixed$length)
          A.throwExpression(A.UnsupportedError$("removeWhere"));
        B.JSArray_methods._removeWhere$2(activeHighlights, t4, true);
        oldHighlightLength = activeHighlights.length;
        for (t4 = t1.skip$1(highlightsForFile, highlightIndex), t5 = A._instanceType(t4), t4 = new A.ListIterator(t4, t4.get$length(t4), t5._eval$1("ListIterator<ListIterable.E>")), t5 = t5._eval$1("ListIterable.E"); t4.moveNext$0();) {
          t6 = t4.__internal$_current;
          if (t6 == null)
            t6 = t5._as(t6);
          t7 = t6.span;
          if (t7.get$start(t7).get$line() > line.number)
            break;
          B.JSArray_methods.add$1(activeHighlights, t6);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        B.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 191
  };
  A.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      return t1.get$end(t1).get$line() < this.line.number;
    },
    $signature: 39
  };
  A.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      type$._Highlight._as(highlight);
      return true;
    },
    $signature: 39
  };
  A.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += B.JSString_methods.$mul("\u2500", 2) + ">";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = this.startLine === this.line.number ? "\u250c" : "\u2514";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 3
  };
  A.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = this.highlight == null ? "\u2500" : "\u253c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 3
  };
  A.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += "\u2500";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var t2, t3, _this = this,
        t1 = _this._box_0,
        vertical = t1.openedOnThisLine ? "\u253c" : "\u2502";
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor, type$.Null);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = t2._primaryColor;
        } else {
          if (_this.endLine === t3) {
            t3 = _this.highlight.span;
            t2 = t3.get$end(t3).get$column() === t2.text.length;
          } else
            t2 = false;
          t3 = _this.$this;
          if (t2)
            t3._highlighter$_buffer._contents += "\u2514";
          else
            t3._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor, type$.Null);
        }
      }
    },
    $signature: 3
  };
  A.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 3
  };
  A.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 3
  };
  A.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(B.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents,
        t4 = this.highlight.span,
        startColumn = t4.get$start(t4).get$column(),
        endColumn = t4.get$end(t4).get$column();
      t4 = this.line.text;
      tabsBefore = t1._countTabs$1(B.JSString_methods.substring$2(t4, 0, startColumn));
      tabsInside = t1._countTabs$1(B.JSString_methods.substring$2(t4, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t2._contents += B.JSString_methods.$mul(" ", startColumn);
      t2 = t2._contents += B.JSString_methods.$mul("^", Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
      return t2.length - t3.length;
    },
    $signature: 33
  };
  A.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      var t1 = this.highlight.span;
      return this.$this._writeArrow$2(this.line, t1.get$start(t1).get$column());
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var t4, _this = this,
        t1 = _this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents;
      if (_this.coversWholeLine)
        t2._contents += B.JSString_methods.$mul("\u2500", 3);
      else {
        t4 = _this.highlight.span;
        t1._writeArrow$3$beginning(_this.line, Math.max(t4.get$end(t4).get$column() - 1, 0), false);
      }
      return t2._contents.length - t3.length;
    },
    $signature: 33
  };
  A.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t1 = t2._contents += B.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t3 = this.end;
      t2._contents = t1 + (t3 == null ? "\u2502" : t3);
    },
    $signature: 3
  };
  A._Highlight.prototype = {
    toString$0(_) {
      var t1 = this.span;
      t1 = "" + "primary " + ("" + t1.get$start(t1).get$line() + ":" + t1.get$start(t1).get$column() + "-" + t1.get$end(t1).get$line() + ":" + t1.get$end(t1).get$column());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._Highlight_closure.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = this.span;
      if (!(type$.SourceSpanWithContext._is(t1) && A.findLineStart(t1.get$context(), t1.get$text(), t1.get$start(t1).get$column()) != null)) {
        t2 = A.SourceLocation$(t1.get$start(t1).get$offset(), 0, 0, t1.get$sourceUrl(t1));
        t3 = t1.get$end(t1).get$offset();
        t4 = t1.get$sourceUrl(t1);
        t5 = A.countCodeUnits(t1.get$text(), 10);
        t1 = A.SourceSpanWithContext$(t2, A.SourceLocation$(t3, A._Highlight__lastLineLength(t1.get$text()), t5, t4), t1.get$text(), t1.get$text());
      }
      return A._Highlight__normalizeEndOfLine(A._Highlight__normalizeTrailingNewline(A._Highlight__normalizeNewlines(t1)));
    },
    $signature: 192
  };
  A._Line.prototype = {
    toString$0(_) {
      return "" + this.number + ': "' + this.text + '" (' + B.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  A.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var t1;
      type$.SourceLocation._as(other);
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.sourceUrl, other.get$sourceUrl(other)) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 = A.getRuntimeTypeOfDartObject(_this).toString$0(0),
        source = _this.sourceUrl;
      return "<" + t1 + ": " + _this.offset + " " + (A.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    get$sourceUrl(receiver) {
      return this.sourceUrl;
    },
    get$offset() {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    }
  };
  A.SourceLocationMixin.prototype = {
    distance$1(other) {
      var _this = this;
      if (!J.$eq$(_this.file.url, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(_this.get$sourceUrl(_this)) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return Math.abs(_this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var _this = this;
      type$.SourceLocation._as(other);
      if (!J.$eq$(_this.file.url, other.get$sourceUrl(other)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(_this.get$sourceUrl(_this)) + '" and "' + A.S(other.get$sourceUrl(other)) + "\" don't match.", null));
      return _this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.file.url, other.get$sourceUrl(other)) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = A.getRuntimeTypeOfDartObject(this).toString$0(0),
        t2 = this.offset,
        t3 = this.file,
        source = t3.url;
      return "<" + t1 + ": " + t2 + " " + (A.S(source == null ? "unknown source" : source) + ":" + (t3.getLine$1(t2) + 1) + ":" + (t3.getColumn$1(t2) + 1)) + ">";
    },
    $isComparable: 1,
    $isSourceLocation: 1
  };
  A.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(t1), t2.get$sourceUrl(t2)))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t2.get$sourceUrl(t2)) + '" and  "' + A.S(t1.get$sourceUrl(t1)) + "\" don't match.", null));
      else if (t1.get$offset() < t2.get$offset())
        throw A.wrapException(A.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + ".", null));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw A.wrapException(A.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long.", null));
      }
    },
    get$start(receiver) {
      return this.start;
    },
    get$end(receiver) {
      return this.end;
    },
    get$text() {
      return this.text;
    }
  };
  A.SourceSpanException.prototype = {
    get$message(_) {
      return this._span_exception$_message;
    },
    toString$0(_) {
      return "Error on " + this._span.message$2$color(0, this._span_exception$_message, null);
    },
    $isException: 1
  };
  A.SourceSpanFormatException.prototype = {
    get$offset() {
      var t1 = this._span;
      t1 = t1.get$start(t1).get$offset();
      return t1;
    },
    $isFormatException: 1
  };
  A.SourceSpanMixin.prototype = {
    get$sourceUrl(_) {
      var t1 = this.get$start(this);
      return t1.get$sourceUrl(t1);
    },
    get$length(_) {
      var _this = this;
      return _this.get$end(_this).get$offset() - _this.get$start(_this).get$offset();
    },
    compareTo$1(_, other) {
      var result, _this = this;
      type$.SourceSpan._as(other);
      result = _this.get$start(_this).compareTo$1(0, other.get$start(other));
      return result === 0 ? _this.get$end(_this).compareTo$1(0, other.get$end(other)) : result;
    },
    message$2$color(_, message, color) {
      var t2, highlight, _this = this,
        t1 = "" + ("line " + (_this.get$start(_this).get$line() + 1) + ", column " + (_this.get$start(_this).get$column() + 1));
      if (_this.get$sourceUrl(_this) != null) {
        t2 = _this.get$sourceUrl(_this);
        t2 = t1 + (" of " + $.$get$context().prettyUri$1(t2));
        t1 = t2;
      }
      t1 += ": " + message;
      highlight = _this.highlight$1$color(color);
      if (highlight.length !== 0)
        t1 = t1 + "\n" + highlight;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    message$1($receiver, message) {
      return this.message$2$color($receiver, message, null);
    },
    highlight$1$color(color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return A.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return type$.SourceSpan._is(other) && _this.get$start(_this).$eq(0, other.get$start(other)) && _this.get$end(_this).$eq(0, other.get$end(other));
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(_this.get$start(_this), _this.get$end(_this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "<" + A.getRuntimeTypeOfDartObject(_this).toString$0(0) + ": from " + _this.get$start(_this).toString$0(0) + " to " + _this.get$end(_this).toString$0(0) + ' "' + _this.get$text() + '">';
    },
    $isComparable: 1,
    $isSourceSpan: 1
  };
  A.SourceSpanWithContext.prototype = {
    get$context() {
      return this._context;
    }
  };
  A.Chain.prototype = {
    toTrace$0() {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return A.Trace$(new A.ExpandIterable(t1, t2._eval$1("Iterable<Frame>(1)")._as(new A.Chain_toTrace_closure()), t2._eval$1("ExpandIterable<1,Frame>")), null);
    },
    toString$0(_) {
      var t1 = this.traces,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT0, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$1(0, string$.x3d_____);
    },
    $isStackTrace: 1,
    get$traces() {
      return this.traces;
    }
  };
  A.Chain_capture_closure.prototype = {
    call$0() {
      var error, stackTrace, t1, exception;
      try {
        t1 = this.callback.call$0();
        return t1;
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        $.Zone__current.handleUncaughtError$2(error, stackTrace);
        this.T._as(null);
        return null;
      }
    },
    $signature() {
      return this.T._eval$1("0()");
    }
  };
  A.Chain_Chain$parse_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 1
  };
  A.Chain_toTrace_closure.prototype = {
    call$1(trace) {
      return type$.Trace._as(trace).get$frames();
    },
    $signature: 194
  };
  A.Chain_toString_closure0.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Chain_toString__closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT0, type$.int);
    },
    $signature: 195
  };
  A.Chain_toString__closure0.prototype = {
    call$1(frame) {
      return type$.Frame._as(frame).get$location().length;
    },
    $signature: 66
  };
  A.Chain_toString_closure.prototype = {
    call$1(trace) {
      var t1 = type$.Trace._as(trace).get$frames(),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Chain_toString__closure(this.longest)), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $signature: 197
  };
  A.Chain_toString__closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      return B.JSString_methods.padRight$1(frame.get$location(), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 67
  };
  A.Frame.prototype = {
    get$library() {
      var t1 = this.uri;
      if (t1.get$scheme() === "data")
        return "data:...";
      return $.$get$context().prettyUri$1(t1);
    },
    get$location() {
      var t2, _this = this,
        t1 = _this.line;
      if (t1 == null)
        return _this.get$library();
      t2 = _this.column;
      if (t2 == null)
        return _this.get$library() + " " + A.S(t1);
      return _this.get$library() + " " + A.S(t1) + ":" + A.S(t2);
    },
    toString$0(_) {
      return this.get$location() + " in " + A.S(this.member);
    },
    get$uri() {
      return this.uri;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    },
    get$member() {
      return this.member;
    }
  };
  A.Frame_Frame$parseVM_closure.prototype = {
    call$0() {
      var match, t2, t3, member, uri, lineAndColumn, line, _null = null,
        t1 = this.frame;
      if (t1 === "...")
        return new A.Frame(A._Uri__Uri(_null, _null, _null, _null, _null, _null, _null), _null, _null, "...");
      match = $.$get$_vmFrame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null, _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      t3 = $.$get$_asyncBody();
      t2 = A.stringReplaceAllUnchecked(t2, t3, "<async>");
      member = A.stringReplaceAllUnchecked(t2, "<anonymous closure>", "<fn>");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t3 = t2;
      t3.toString;
      if (B.JSString_methods.startsWith$1(t3, "<data:"))
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      lineAndColumn = t1[3].split(":");
      t1 = lineAndColumn.length;
      line = t1 > 1 ? A.int_parse(lineAndColumn[1], _null) : _null;
      return new A.Frame(uri, line, t1 > 2 ? A.int_parse(lineAndColumn[2], _null) : _null, member);
    },
    $signature: 20
  };
  A.Frame_Frame$parseV8_closure.prototype = {
    call$0() {
      var t2, t3, t4, _null = null, _s4_ = "<fn>",
        t1 = this.frame,
        match = $.$get$_v8Frame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null, _null, _null), t1);
      t1 = new A.Frame_Frame$parseV8_closure_parseLocation(t1);
      t2 = match._match;
      t3 = t2.length;
      if (2 >= t3)
        return A.ioore(t2, 2);
      t4 = t2[2];
      if (t4 != null) {
        t3 = t4;
        t3.toString;
        t2 = t2[1];
        t2.toString;
        t2 = A.stringReplaceAllUnchecked(t2, "<anonymous>", _s4_);
        t2 = A.stringReplaceAllUnchecked(t2, "Anonymous function", _s4_);
        return t1.call$2(t3, A.stringReplaceAllUnchecked(t2, "(anonymous function)", _s4_));
      } else {
        if (3 >= t3)
          return A.ioore(t2, 3);
        t2 = t2[3];
        t2.toString;
        return t1.call$2(t2, _s4_);
      }
    },
    $signature: 20
  };
  A.Frame_Frame$parseV8_closure_parseLocation.prototype = {
    call$2($location, member) {
      var t2, urlMatch, uri, line, columnMatch, _null = null,
        t1 = $.$get$_v8EvalLocation(),
        evalMatch = t1.firstMatch$1($location);
      for (; evalMatch != null; $location = t2) {
        t2 = evalMatch._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t2 = t2[1];
        t2.toString;
        evalMatch = t1.firstMatch$1(t2);
      }
      if ($location === "native")
        return new A.Frame(A.Uri_parse("native"), _null, _null, member);
      urlMatch = $.$get$_v8UrlLocation().firstMatch$1($location);
      if (urlMatch == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null, _null, _null), this.frame);
      t1 = urlMatch._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      line = A.int_parse(t2, _null);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      columnMatch = t1[3];
      return new A.Frame(uri, line, columnMatch != null ? A.int_parse(columnMatch, _null) : _null, member);
    },
    $signature: 200
  };
  A.Frame_Frame$_parseFirefoxEval_closure.prototype = {
    call$0() {
      var t2, member, uri, line, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxEvalLocation().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null, _null, _null), t1);
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      t2.toString;
      member = A.stringReplaceAllUnchecked(t2, "/<", "");
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      t2.toString;
      uri = A.Frame__uriOrPathToUri(t2);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t1 = t1[3];
      t1.toString;
      line = A.int_parse(t1, _null);
      return new A.Frame(uri, line, _null, member.length === 0 || member === "anonymous" ? "<fn>" : member);
    },
    $signature: 20
  };
  A.Frame_Frame$parseFirefox_closure.prototype = {
    call$0() {
      var t2, t3, t4, uri, member, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxSafariFrame().firstMatch$1(t1);
      if (match == null)
        return new A.UnparsedFrame(A._Uri__Uri(_null, "unparsed", _null, _null, _null, _null, _null), t1);
      t2 = match._match;
      if (3 >= t2.length)
        return A.ioore(t2, 3);
      t3 = t2[3];
      t4 = t3;
      t4.toString;
      if (B.JSString_methods.contains$1(t4, " line "))
        return A.Frame_Frame$_parseFirefoxEval(t1);
      t1 = t3;
      t1.toString;
      uri = A.Frame__uriOrPathToUri(t1);
      t1 = t2.length;
      if (1 >= t1)
        return A.ioore(t2, 1);
      member = t2[1];
      if (member != null) {
        if (2 >= t1)
          return A.ioore(t2, 2);
        t1 = t2[2];
        t1.toString;
        t1 = B.JSString_methods.allMatches$1("/", t1);
        member += B.JSArray_methods.join$0(A.List_List$filled(t1.get$length(t1), ".<fn>", false, type$.String));
        if (member === "")
          member = "<fn>";
        member = B.JSString_methods.replaceFirst$2(member, $.$get$_initialDot(), "");
      } else
        member = "<fn>";
      if (4 >= t2.length)
        return A.ioore(t2, 4);
      t1 = t2[4];
      if (t1 === "")
        line = _null;
      else {
        t1 = t1;
        t1.toString;
        line = A.int_parse(t1, _null);
      }
      if (5 >= t2.length)
        return A.ioore(t2, 5);
      t1 = t2[5];
      if (t1 == null || t1 === "")
        column = _null;
      else {
        t1 = t1;
        t1.toString;
        column = A.int_parse(t1, _null);
      }
      return new A.Frame(uri, line, column, member);
    },
    $signature: 20
  };
  A.Frame_Frame$parseFriendly_closure.prototype = {
    call$0() {
      var t2, uri, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_friendlyFrame().firstMatch$1(t1);
      if (match == null)
        throw A.wrapException(A.FormatException$("Couldn't parse package:stack_trace stack trace line '" + t1 + "'.", _null, _null));
      t1 = match._match;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t2 = t1[1];
      if (t2 === "data:...")
        uri = A.Uri_Uri$dataFromString("");
      else {
        t2 = t2;
        t2.toString;
        uri = A.Uri_parse(t2);
      }
      if (uri.get$scheme() === "") {
        t2 = $.$get$context();
        uri = t2.toUri$1(A.absolute(t2.style.pathFromUri$1(A._parseUri(uri))));
      }
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      t2 = t1[2];
      if (t2 == null)
        line = _null;
      else {
        t2 = t2;
        t2.toString;
        line = A.int_parse(t2, _null);
      }
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      t2 = t1[3];
      if (t2 == null)
        column = _null;
      else {
        t2 = t2;
        t2.toString;
        column = A.int_parse(t2, _null);
      }
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      return new A.Frame(uri, line, column, t1[4]);
    },
    $signature: 20
  };
  A.LazyChain.prototype = {
    get$_chain() {
      var result, _this = this,
        value = _this.__LazyChain__chain_FI;
      if (value === $) {
        result = _this._lazy_chain$_thunk.call$0();
        _this.__LazyChain__chain_FI !== $ && A.throwLateFieldADI("_chain");
        _this.__LazyChain__chain_FI = result;
        value = result;
      }
      return value;
    },
    get$traces() {
      return this.get$_chain().get$traces();
    },
    toTrace$0() {
      return new A.LazyTrace(this.get$_chain().get$toTrace());
    },
    toString$0(_) {
      return this.get$_chain().toString$0(0);
    },
    $isStackTrace: 1,
    $isChain: 1
  };
  A.LazyTrace.prototype = {
    get$_lazy_trace$_trace() {
      var result, _this = this,
        value = _this.__LazyTrace__trace_FI;
      if (value === $) {
        result = _this._thunk.call$0();
        _this.__LazyTrace__trace_FI !== $ && A.throwLateFieldADI("_trace");
        _this.__LazyTrace__trace_FI = result;
        value = result;
      }
      return value;
    },
    get$frames() {
      return this.get$_lazy_trace$_trace().get$frames();
    },
    toString$0(_) {
      return this.get$_lazy_trace$_trace().toString$0(0);
    },
    $isStackTrace: 1,
    $isTrace: 1
  };
  A.StackZoneSpecification.prototype = {
    chainFor$1(trace) {
      var previous, t2, t1 = {};
      t1.trace = trace;
      if (type$.Chain._is(trace))
        return trace;
      A.Expando__checkType(trace);
      previous = this._chains._jsWeakMap.get(trace);
      if (previous == null)
        previous = this._currentNode;
      if (previous == null) {
        t2 = type$.Trace;
        if (t2._is(trace))
          return new A.Chain(A.List_List$unmodifiable(A._setArrayType([trace], type$.JSArray_Trace), t2));
        return new A.LazyChain(new A.StackZoneSpecification_chainFor_closure(t1));
      } else
        return new A._Node(A.Trace_Trace$from(!type$.Trace._is(trace) ? t1.trace = new A.LazyTrace(new A.StackZoneSpecification_chainFor_closure0(this, trace)) : trace), previous).toChain$0();
    },
    _registerCallback$1$4($self, $parent, zone, f, $R) {
      var t1, t2;
      $R._eval$1("0()")._as(f);
      if (J.$eq$($.Zone__current.$index(0, $.$get$StackZoneSpecification_disableKey()), true))
        return $parent.registerCallback$1$2(zone, f, $R);
      t1 = this._currentTrace$1(2);
      t2 = this._currentNode;
      return $parent.registerCallback$1$2(zone, new A.StackZoneSpecification__registerCallback_closure(this, f, new A._Node(A.Trace_Trace$from(t1), t2), $R), $R);
    },
    _registerCallback$4($self, $parent, zone, f) {
      return this._registerCallback$1$4($self, $parent, zone, f, type$.dynamic);
    },
    _registerUnaryCallback$2$4($self, $parent, zone, f, $R, $T) {
      var t1, t2;
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      if (J.$eq$($.Zone__current.$index(0, $.$get$StackZoneSpecification_disableKey()), true))
        return $parent.registerUnaryCallback$2$2(zone, f, $R, $T);
      t1 = this._currentTrace$1(2);
      t2 = this._currentNode;
      return $parent.registerUnaryCallback$2$2(zone, new A.StackZoneSpecification__registerUnaryCallback_closure(this, f, new A._Node(A.Trace_Trace$from(t1), t2), $T, $R), $R, $T);
    },
    _registerUnaryCallback$4($self, $parent, zone, f) {
      return this._registerUnaryCallback$2$4($self, $parent, zone, f, type$.dynamic, type$.dynamic);
    },
    _registerBinaryCallback$3$4($self, $parent, zone, f, $R, T1, T2) {
      var t1, t2;
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      if (J.$eq$($.Zone__current.$index(0, $.$get$StackZoneSpecification_disableKey()), true))
        return $parent.registerBinaryCallback$3$2(zone, f, $R, T1, T2);
      t1 = this._currentTrace$1(2);
      t2 = this._currentNode;
      return $parent.registerBinaryCallback$3$2(zone, new A.StackZoneSpecification__registerBinaryCallback_closure(this, f, new A._Node(A.Trace_Trace$from(t1), t2), T1, T2, $R), $R, T1, T2);
    },
    _registerBinaryCallback$4($self, $parent, zone, f) {
      return this._registerBinaryCallback$3$4($self, $parent, zone, f, type$.dynamic, type$.dynamic, type$.dynamic);
    },
    _handleUncaughtError$5($self, $parent, zone, error, stackTrace) {
      var stackChain, newError, newStackTrace, t2, t3, exception,
        t1 = type$.Object;
      t1._as(error);
      t2 = type$.StackTrace;
      t2._as(stackTrace);
      if (J.$eq$($.Zone__current.$index(0, $.$get$StackZoneSpecification_disableKey()), true)) {
        $parent._delegationTarget._processUncaughtError$3(zone, error, stackTrace);
        return;
      }
      stackChain = this.chainFor$1(stackTrace);
      t3 = this._stack_zone_specification$_onError;
      if (t3 == null) {
        $parent._delegationTarget._processUncaughtError$3(zone, error, t2._as(stackChain));
        return;
      }
      try {
        $self.get$parent($self).runBinary$3$3(t3, error, stackChain, type$.void, t1, type$.Chain);
      } catch (exception) {
        newError = A.unwrapException(exception);
        newStackTrace = A.getTraceFromException(exception);
        t3 = $parent._delegationTarget;
        if (newError === error)
          t3._processUncaughtError$3(zone, error, t2._as(stackChain));
        else
          t3._processUncaughtError$3(zone, t1._as(newError), t2._as(newStackTrace));
      }
    },
    _errorCallback$5($self, $parent, zone, error, stackTrace) {
      var t1, t2, t3, asyncError, _this = this;
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if (J.$eq$($.Zone__current.$index(0, $.$get$StackZoneSpecification_disableKey()), true))
        return $parent.errorCallback$3(zone, error, stackTrace);
      if (stackTrace == null) {
        t1 = _this._currentTrace$1(3);
        t2 = _this._currentNode;
        stackTrace = new A._Node(A.Trace_Trace$from(t1), t2).toChain$0();
      } else {
        t1 = _this._chains;
        A.Expando__checkType(stackTrace);
        if (t1._jsWeakMap.get(stackTrace) == null) {
          t2 = _this._currentTrace$1(3);
          t3 = _this._currentNode;
          t1.$indexSet(0, stackTrace, new A._Node(A.Trace_Trace$from(t2), t3));
        }
      }
      asyncError = $parent.errorCallback$3(zone, error, stackTrace);
      return asyncError == null ? A.AsyncError$(error, stackTrace) : asyncError;
    },
    _run$1$2(f, node, $T) {
      var previousNode, stackTrace, t1, exception, t2, _this = this;
      $T._eval$1("0()")._as(f);
      previousNode = _this._currentNode;
      _this._currentNode = node;
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        stackTrace = A.getTraceFromException(exception);
        t1 = _this._chains;
        t2 = type$.Object._as(stackTrace);
        A.Expando__checkType(t2);
        if (t1._jsWeakMap.get(t2) == null)
          t1.$indexSet(0, stackTrace, node);
        throw exception;
      } finally {
        _this.set$_currentNode(previousNode);
      }
    },
    _currentTrace$1(level) {
      return new A.LazyTrace(new A.StackZoneSpecification__currentTrace_closure(this, A.StackTrace_current(), level));
    },
    _trimVMChain$1(trace) {
      var text = trace.toString$0(0),
        index = B.JSString_methods.indexOf$1(text, $.$get$vmChainGap());
      return index === -1 ? text : B.JSString_methods.substring$2(text, 0, index);
    },
    set$_currentNode(_currentNode) {
      this._currentNode = type$.nullable__Node._as(_currentNode);
    }
  };
  A.StackZoneSpecification_chainFor_closure.prototype = {
    call$0() {
      return A.Chain_Chain$parse(this._box_0.trace.toString$0(0));
    },
    $signature: 206
  };
  A.StackZoneSpecification_chainFor_closure0.prototype = {
    call$0() {
      return A.Trace_Trace$parse(this.$this._trimVMChain$1(this.original));
    },
    $signature: 17
  };
  A.StackZoneSpecification__registerCallback_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._run$1$2(_this.f, _this.node, _this.R);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A.StackZoneSpecification__registerUnaryCallback_closure.prototype = {
    call$1(arg) {
      var _this = this,
        t1 = _this.R;
      return _this.$this._run$1$2(new A.StackZoneSpecification__registerUnaryCallback__closure(_this.f, _this.T._as(arg), t1), _this.node, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T)._eval$1("1(2)");
    }
  };
  A.StackZoneSpecification__registerUnaryCallback__closure.prototype = {
    call$0() {
      return this.f.call$1(this.arg);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A.StackZoneSpecification__registerBinaryCallback_closure.prototype = {
    call$2(arg1, arg2) {
      var _this = this,
        t1 = _this.R;
      return _this.$this._run$1$2(new A.StackZoneSpecification__registerBinaryCallback__closure(_this.f, _this.T1._as(arg1), _this.T2._as(arg2), t1), _this.node, t1);
    },
    $signature() {
      return this.R._eval$1("@<0>")._bind$1(this.T1)._bind$1(this.T2)._eval$1("1(2,3)");
    }
  };
  A.StackZoneSpecification__registerBinaryCallback__closure.prototype = {
    call$0() {
      return this.f.call$2(this.arg1, this.arg2);
    },
    $signature() {
      return this.R._eval$1("0()");
    }
  };
  A.StackZoneSpecification__currentTrace_closure.prototype = {
    call$0() {
      var text = this.$this._trimVMChain$1(this.stackTrace),
        t1 = A.Trace_Trace$parse(text).frames;
      return A.Trace$(A.SubListIterable$(t1, this.level + 2, null, A._arrayInstanceType(t1)._precomputed1), text);
    },
    $signature: 17
  };
  A._Node.prototype = {
    toChain$0() {
      var node,
        nodes = A._setArrayType([], type$.JSArray_Trace);
      for (node = this; node != null;) {
        B.JSArray_methods.add$1(nodes, node.trace);
        node = node.previous;
      }
      return new A.Chain(A.List_List$unmodifiable(nodes, type$.Trace));
    }
  };
  A.Trace.prototype = {
    toString$0(_) {
      var t1 = this.frames,
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Trace_toString_closure(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.Trace_toString_closure0()), t2._eval$1("MappedListIterable<1,int>")).fold$1$2(0, 0, B.CONSTANT0, type$.int))), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    $isStackTrace: 1,
    get$frames() {
      return this.frames;
    }
  };
  A.Trace_Trace$from_closure.prototype = {
    call$0() {
      return A.Trace_Trace$parse(this.trace.toString$0(0));
    },
    $signature: 17
  };
  A.Trace__parseVM_closure.prototype = {
    call$1(line) {
      return A._asString(line).length !== 0;
    },
    $signature: 1
  };
  A.Trace$parseV8_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), $.$get$_v8TraceLine());
    },
    $signature: 1
  };
  A.Trace$parseJSCore_closure.prototype = {
    call$1(line) {
      return A._asString(line) !== "\tat ";
    },
    $signature: 1
  };
  A.Trace$parseFirefox_closure.prototype = {
    call$1(line) {
      A._asString(line);
      return line.length !== 0 && line !== "[native code]";
    },
    $signature: 1
  };
  A.Trace$parseFriendly_closure.prototype = {
    call$1(line) {
      return !B.JSString_methods.startsWith$1(A._asString(line), "=====");
    },
    $signature: 1
  };
  A.Trace_toString_closure0.prototype = {
    call$1(frame) {
      return type$.Frame._as(frame).get$location().length;
    },
    $signature: 66
  };
  A.Trace_toString_closure.prototype = {
    call$1(frame) {
      type$.Frame._as(frame);
      if (frame instanceof A.UnparsedFrame)
        return frame.toString$0(0) + "\n";
      return B.JSString_methods.padRight$1(frame.get$location(), this.longest) + "  " + A.S(frame.get$member()) + "\n";
    },
    $signature: 67
  };
  A.UnparsedFrame.prototype = {
    toString$0(_) {
      return this.member;
    },
    $isFrame: 1,
    get$uri() {
      return this.uri;
    },
    get$line() {
      return null;
    },
    get$column() {
      return null;
    },
    get$location() {
      return "unparsed";
    },
    get$member() {
      return this.member;
    }
  };
  A.TransformByHandlers_transformByHandlers_closure.prototype = {
    call$0() {
      var t2, t3, t4, _this = this, t1 = {};
      t1.valuesDone = false;
      t2 = _this._this;
      t3 = _this.controller;
      t4 = _this._box_1;
      t4.subscription = t2.listen$3$onDone$onError(0, new A.TransformByHandlers_transformByHandlers__closure(_this.handleData, t3, _this.S), new A.TransformByHandlers_transformByHandlers__closure0(t1, _this.handleDone, t3), new A.TransformByHandlers_transformByHandlers__closure1(_this.handleError, t3));
      if (!t2.get$isBroadcast()) {
        t2 = t4.subscription;
        t3.set$onPause(t2.get$pause(t2));
        t2 = t4.subscription;
        t3.set$onResume(t2.get$resume(t2));
      }
      t3.set$onCancel(new A.TransformByHandlers_transformByHandlers__closure2(t4, t1));
    },
    $signature: 0
  };
  A.TransformByHandlers_transformByHandlers__closure.prototype = {
    call$1(value) {
      return this.handleData.call$2(this.S._as(value), this.controller);
    },
    $signature() {
      return this.S._eval$1("~(0)");
    }
  };
  A.TransformByHandlers_transformByHandlers__closure1.prototype = {
    call$2(error, stackTrace) {
      this.handleError.call$3(type$.Object._as(error), type$.StackTrace._as(stackTrace), this.controller);
    },
    $signature: 13
  };
  A.TransformByHandlers_transformByHandlers__closure0.prototype = {
    call$0() {
      this._box_0.valuesDone = true;
      this.handleDone.call$1(this.controller);
    },
    $signature: 0
  };
  A.TransformByHandlers_transformByHandlers__closure2.prototype = {
    call$0() {
      var t1 = this._box_1,
        toCancel = t1.subscription;
      t1.subscription = null;
      if (!this._box_0.valuesDone)
        return toCancel.cancel$0(0);
      return null;
    },
    $signature: 72
  };
  A.TakeUntil_takeUntil_closure.prototype = {
    call$1(_) {
      var t1 = this._box_0;
      if (t1.isDone)
        return;
      t1.isDone = true;
      t1 = t1.subscription;
      if (t1 != null)
        t1.cancel$0(0);
      this.controller.close$0(0);
    },
    $signature: 35
  };
  A.TakeUntil_takeUntil_closure0.prototype = {
    call$0() {
      var t2, t3, _this = this,
        t1 = _this._box_0;
      if (t1.isDone)
        return;
      t2 = _this._this;
      t3 = _this.controller;
      t1.subscription = t2.listen$3$onDone$onError(0, _this.T._eval$1("~(0)")._as(t3.get$add(t3)), new A.TakeUntil_takeUntil__closure(t1, t3), t3.get$addError());
      if (!t2.get$isBroadcast()) {
        t2 = t1.subscription;
        t3.set$onPause(t2.get$pause(t2));
        t2 = t1.subscription;
        t3.set$onResume(t2.get$resume(t2));
      }
      t3.set$onCancel(new A.TakeUntil_takeUntil__closure0(t1));
    },
    $signature: 0
  };
  A.TakeUntil_takeUntil__closure.prototype = {
    call$0() {
      var t1 = this._box_0;
      if (t1.isDone)
        return;
      t1.isDone = true;
      this.controller.close$0(0);
    },
    $signature: 0
  };
  A.TakeUntil_takeUntil__closure0.prototype = {
    call$0() {
      var t2,
        t1 = this._box_0;
      if (t1.isDone)
        return null;
      t2 = t1.subscription;
      t2.toString;
      t1.subscription = null;
      return t2.cancel$0(0);
    },
    $signature: 72
  };
  A.Tap_tap_closure.prototype = {
    call$2(value, sink) {
      var exception,
        t1 = this.T;
      t1._as(value);
      t1._eval$1("EventSink<0>")._as(sink);
      try {
        t1 = this.onValue;
        if (t1 != null)
          t1.call$1(value);
      } catch (exception) {
      }
      sink.add$1(0, value);
    },
    $signature() {
      return this.T._eval$1("~(0,EventSink<0>)");
    }
  };
  A.Tap_tap_closure1.prototype = {
    call$3(error, stackTrace, sink) {
      var exception;
      this.T._eval$1("EventSink<0>")._as(sink);
      try {
      } catch (exception) {
      }
      sink.addError$2(error, stackTrace);
    },
    $signature() {
      return this.T._eval$1("~(Object,StackTrace,EventSink<0>)");
    }
  };
  A.Tap_tap_closure0.prototype = {
    call$1(sink) {
      var exception;
      this.T._eval$1("EventSink<0>")._as(sink);
      try {
        this.onDone.call$0();
      } catch (exception) {
      }
      sink.close$0(0);
    },
    $signature() {
      return this.T._eval$1("~(EventSink<0>)");
    }
  };
  A.EagerSpanScanner.prototype = {
    _adjustLineAndColumn$1(character) {
      var t1, _this = this;
      if (character !== 10)
        t1 = character === 13 && _this.peekChar$0() !== 10;
      else
        t1 = true;
      if (t1) {
        ++_this._line;
        _this._column = 0;
      } else {
        t1 = _this._column;
        _this._column = t1 + (character >= 65536 && character <= 1114111 ? 2 : 1);
      }
    },
    scan$1(pattern) {
      var t1, firstMatch, newlines, t2, _this = this;
      if (!_this.super$StringScanner$scan(pattern))
        return false;
      t1 = _this.get$lastMatch();
      firstMatch = t1.pattern;
      newlines = _this._newlinesIn$1(firstMatch);
      t1 = _this._line;
      t2 = newlines.length;
      _this._line = t1 + t2;
      t1 = firstMatch.length;
      if (t2 === 0)
        _this._column += t1;
      else
        _this._column = t1 - J.get$end$z(B.JSArray_methods.get$last(newlines));
      return true;
    },
    _newlinesIn$1(text) {
      var t1 = $.$get$_newlineRegExp().allMatches$1(0, text),
        newlines = A.List_List$of(t1, true, A._instanceType(t1)._eval$1("Iterable.E"));
      if (this.peekChar$1(-1) === 13 && this.peekChar$0() === 10)
        B.JSArray_methods.removeLast$0(newlines);
      return newlines;
    }
  };
  A._EagerSpanScannerState.prototype = {$isLineScannerState: 1};
  A.StringScannerException.prototype = {};
  A.SpanScanner.prototype = {
    get$emptySpan() {
      var t1 = A.FileLocation$_(this._sourceFile, this._position),
        t2 = t1.offset;
      return A._FileSpan$(t1.file, t2, t2);
    },
    spanFrom$2(startState, endState) {
      var endPosition = endState == null ? this._position : endState.position;
      return this._sourceFile.span$2(startState.position, endPosition);
    },
    spanFrom$1(startState) {
      return this.spanFrom$2(startState, null);
    },
    matches$1(pattern) {
      var t1, t2, _this = this;
      if (!_this.super$StringScanner$matches(pattern))
        return false;
      t1 = _this._position;
      t2 = _this.get$lastMatch();
      _this._sourceFile.span$2(t1, t2.start + t2.pattern.length);
      return true;
    },
    error$3$length$position(_, message, $length, position) {
      var match, t2, _this = this,
        t1 = _this.string;
      A.validateErrorArgs(t1, null, position, $length);
      match = position == null && $length == null ? _this.get$lastMatch() : null;
      if (position == null)
        position = match == null ? _this._position : match.start;
      if ($length == null)
        if (match == null)
          $length = 0;
        else {
          t2 = match.start;
          $length = t2 + match.pattern.length - t2;
        }
      throw A.wrapException(A.StringScannerException$(message, _this._sourceFile.span$2(position, position + $length), t1));
    },
    error$2$length($receiver, message, $length) {
      return this.error$3$length$position($receiver, message, $length, null);
    },
    error$1($receiver, message) {
      return this.error$3$length$position($receiver, message, null, null);
    }
  };
  A.StringScanner.prototype = {
    get$lastMatch() {
      var _this = this;
      if (_this._position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    readChar$0() {
      var t3, _this = this,
        t1 = _this.string,
        t2 = t1.length;
      if (_this._position === t2)
        _this._fail$1("more input");
      t3 = _this._position++;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
      return t1.charCodeAt(t3);
    },
    peekChar$1(offset) {
      var index, t1;
      if (offset == null)
        offset = 0;
      index = this._position + offset;
      if (index < 0 || index >= this.string.length)
        return null;
      t1 = this.string;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1.charCodeAt(index);
    },
    peekChar$0() {
      return this.peekChar$1(null);
    },
    scan$1(pattern) {
      var t1, _this = this,
        success = _this.matches$1(pattern);
      if (success) {
        t1 = _this._lastMatch;
        _this._lastMatchPosition = _this._position = t1.start + t1.pattern.length;
      }
      return success;
    },
    expect$1(pattern) {
      var t1, $name;
      if (this.scan$1(pattern))
        return;
      t1 = A.stringReplaceAllUnchecked(pattern, "\\", "\\\\");
      $name = '"' + A.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
      this._fail$1($name);
    },
    matches$1(pattern) {
      var _this = this,
        t1 = B.JSString_methods.matchAsPrefix$2(pattern, _this.string, _this._position);
      _this._lastMatch = t1;
      _this._lastMatchPosition = _this._position;
      return t1 != null;
    },
    substring$1(_, start) {
      var end = this._position;
      return B.JSString_methods.substring$2(this.string, start, end);
    },
    _fail$1($name) {
      this.error$3$length$position(0, "expected " + $name + ".", 0, this._position);
    }
  };
  A.Uuid.prototype = {
    get$_uuid$_state() {
      var t2,
        t1 = $.$get$Uuid__stateExpando();
      A.Expando__checkType(this);
      t2 = t1._jsWeakMap.get(this);
      if (t2 == null) {
        t2 = A.LinkedHashMap_LinkedHashMap$_literal(["seedBytes", null, "node", null, "clockSeq", null, "mSecs", 0, "nSecs", 0, "hasInitV1", false, "hasInitV4", false], type$.String, type$.dynamic);
        t1.$indexSet(0, this, t2);
        t1 = t2;
      } else
        t1 = t2;
      return t1;
    },
    _initV4$0() {
      var _s9_ = "hasInitV4",
        t1 = this.get$_uuid$_state().$index(0, _s9_);
      t1.toString;
      if (!A._asBool(t1)) {
        t1 = this.get$_uuid$_state();
        t1.$indexSet(0, "globalRNG", A.uuid_util_UuidUtil_mathRNG$closure());
        this.get$_uuid$_state().$indexSet(0, _s9_, true);
      }
    }
  };
  A._DeepEquals.prototype = {
    equals$2(_, obj1, obj2) {
      var t1, t2, t3, t4, i, t5, t6, loop1, loop2, _this = this;
      obj1 = obj1;
      obj2 = obj2;
      t1 = type$.YamlScalar;
      if (t1._is(obj1))
        obj1 = obj1.get$value();
      if (t1._is(obj2))
        obj2 = obj2.get$value();
      for (t1 = _this._parents1, t2 = t1.length, t3 = _this._parents2, t4 = t3.length, i = 0; i < t2; ++i) {
        t5 = obj1;
        t6 = t1[i];
        loop1 = t5 == null ? t6 == null : t5 === t6;
        t6 = obj2;
        if (!(i < t4))
          return A.ioore(t3, i);
        t5 = t3[i];
        loop2 = t6 == null ? t5 == null : t6 === t5;
        if (loop1 && loop2)
          return true;
        if (loop1 || loop2)
          return false;
      }
      B.JSArray_methods.add$1(t1, obj1);
      B.JSArray_methods.add$1(t3, obj2);
      try {
        t2 = type$.List_dynamic;
        if (t2._is(obj1) && t2._is(obj2)) {
          t2 = _this._listEquals$2(obj1, obj2);
          return t2;
        } else {
          t2 = type$.Map_dynamic_dynamic;
          if (t2._is(obj1) && t2._is(obj2)) {
            t2 = _this._mapEquals$2(obj1, obj2);
            return t2;
          } else if (typeof obj1 == "number" && typeof obj2 == "number") {
            t2 = _this._numEquals$2(obj1, obj2);
            return t2;
          } else {
            t2 = J.$eq$(obj1, obj2);
            return t2;
          }
        }
      } finally {
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t3.length)
          return A.ioore(t3, -1);
        t3.pop();
      }
    },
    _listEquals$2(list1, list2) {
      var i,
        t1 = J.getInterceptor$asx(list1),
        t2 = J.getInterceptor$asx(list2);
      if (t1.get$length(list1) !== t2.get$length(list2))
        return false;
      for (i = 0; i < t1.get$length(list1); ++i)
        if (!this.equals$2(0, t1.$index(list1, i), t2.$index(list2, i)))
          return false;
      return true;
    },
    _mapEquals$2(map1, map2) {
      var t1, key;
      if (map1.get$length(map1) !== map2.get$length(map2))
        return false;
      for (t1 = map1.get$keys(map1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        if (!map2.containsKey$1(key))
          return false;
        if (!this.equals$2(0, map1.$index(0, key), map2.$index(0, key)))
          return false;
      }
      return true;
    },
    _numEquals$2(n1, n2) {
      if (isNaN(n1) && isNaN(n2))
        return true;
      return n1 === n2;
    }
  };
  A.deepHashCode_deepHashCodeInner.prototype = {
    call$1(value) {
      var equality, t1, t2, t3, t4, deepHashCodeInner = this;
      if (B.JSArray_methods.any$1(deepHashCodeInner.parents, new A.deepHashCode_deepHashCodeInner_closure(value)))
        return -1;
      B.JSArray_methods.add$1(deepHashCodeInner.parents, value);
      try {
        if (type$.Map_dynamic_dynamic._is(value)) {
          equality = B.UnorderedIterableEquality_DefaultEquality;
          t1 = value.get$keys(value);
          t2 = type$.dynamic;
          t1 = equality.hash$1(t1.map$1$1(t1, deepHashCodeInner, t2));
          t3 = value.get$values(value);
          t4 = A._instanceType(t3);
          t2 = equality.hash$1(A.MappedIterable_MappedIterable(t3, t4._eval$1("@(Iterable.E)")._as(deepHashCodeInner), t4._eval$1("Iterable.E"), t2));
          return t1 ^ t2;
        } else if (type$.Iterable_dynamic._is(value)) {
          t1 = B.IterableEquality_DefaultEquality0.hash$1(J.map$1$1$ax(value, A.equality__deepHashCode$closure(), type$.dynamic));
          return t1;
        } else if (type$.YamlScalar._is(value)) {
          t1 = J.get$hashCode$(value.get$value());
          return t1;
        } else {
          t1 = J.get$hashCode$(value);
          return t1;
        }
      } finally {
        t1 = deepHashCodeInner.parents;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
    },
    $signature: 10
  };
  A.deepHashCode_deepHashCodeInner_closure.prototype = {
    call$1($parent) {
      var t1 = this.value;
      return $parent == null ? t1 == null : $parent === t1;
    },
    $signature: 5
  };
  A.Event.prototype = {
    toString$0(_) {
      return this.type._enumToString$0();
    },
    get$type(receiver) {
      return this.type;
    },
    get$span() {
      return this.span;
    }
  };
  A.DocumentStartEvent.prototype = {
    get$type(_) {
      return B.EventType_2;
    },
    toString$0(_) {
      return "DOCUMENT_START";
    },
    $isEvent: 1,
    get$span() {
      return this.span;
    }
  };
  A.DocumentEndEvent.prototype = {
    get$type(_) {
      return B.EventType_3;
    },
    toString$0(_) {
      return "DOCUMENT_END";
    },
    $isEvent: 1,
    get$span() {
      return this.span;
    }
  };
  A.AliasEvent.prototype = {
    get$type(_) {
      return B.EventType_4;
    },
    toString$0(_) {
      return "ALIAS " + this.name;
    },
    $isEvent: 1,
    get$span() {
      return this.span;
    }
  };
  A._ValueEvent.prototype = {
    toString$0(_) {
      var _this = this,
        t1 = _this.get$type(_this).toString$0(0);
      if (_this.get$anchor() != null)
        t1 += " &" + A.S(_this.get$anchor());
      if (_this.get$tag() != null)
        t1 += " " + A.S(_this.get$tag());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isEvent: 1
  };
  A.ScalarEvent.prototype = {
    get$type(_) {
      return B.EventType_5;
    },
    toString$0(_) {
      return this.super$_ValueEvent$toString(0) + ' "' + this.value + '"';
    },
    get$span() {
      return this.span;
    },
    get$anchor() {
      return this.anchor;
    },
    get$tag() {
      return this.tag;
    }
  };
  A.SequenceStartEvent.prototype = {
    get$type(_) {
      return B.EventType_6;
    },
    get$span() {
      return this.span;
    },
    get$anchor() {
      return this.anchor;
    },
    get$tag() {
      return this.tag;
    }
  };
  A.MappingStartEvent.prototype = {
    get$type(_) {
      return B.EventType_8;
    },
    get$span() {
      return this.span;
    },
    get$anchor() {
      return this.anchor;
    },
    get$tag() {
      return this.tag;
    }
  };
  A.EventType.prototype = {
    _enumToString$0() {
      return "EventType." + this._core$_name;
    }
  };
  A.Loader.prototype = {
    load$0(_) {
      var $event, contents, _this = this,
        t1 = _this._parser;
      if (t1._parser$_state === B._State_END)
        return null;
      $event = t1.parse$0(0);
      if ($event.get$type($event) === B.EventType_1) {
        _this._loader$_span = _this._loader$_span.expand$1(0, $event.get$span());
        return null;
      }
      type$.DocumentStartEvent._as($event);
      contents = _this._loadNode$1(t1.parse$0(0));
      t1 = $event.span.expand$1(0, type$.DocumentEndEvent._as(t1.parse$0(0)).span);
      _this._loader$_span = _this._loader$_span.expand$1(0, t1);
      _this._loader$_aliases.clear$0(0);
      return new A.YamlDocument(contents, t1);
    },
    _loadNode$1(firstEvent) {
      var t1, node, _this = this;
      switch (firstEvent.get$type(firstEvent).index) {
        case 4:
          return _this._loadAlias$1(type$.AliasEvent._as(firstEvent));
        case 5:
          type$.ScalarEvent._as(firstEvent);
          t1 = firstEvent.tag;
          if (t1 === "!")
            node = new A.YamlScalar(firstEvent.value, firstEvent.style, firstEvent.span);
          else if (t1 != null)
            node = _this._parseByTag$1(firstEvent);
          else {
            node = _this._tryParseScalar$1(firstEvent);
            if (node == null)
              node = new A.YamlScalar(firstEvent.value, firstEvent.style, firstEvent.span);
          }
          _this._registerAnchor$2(firstEvent.anchor, node);
          return node;
        case 6:
          return _this._loadSequence$1(type$.SequenceStartEvent._as(firstEvent));
        case 8:
          return _this._loadMapping$1(type$.MappingStartEvent._as(firstEvent));
        default:
          throw A.wrapException(A.StateError$("Unreachable"));
      }
    },
    _registerAnchor$2(anchor, node) {
      if (anchor == null)
        return;
      this._loader$_aliases.$indexSet(0, anchor, node);
    },
    _loadAlias$1($event) {
      var alias = this._loader$_aliases.$index(0, $event.name);
      if (alias != null)
        return alias;
      throw A.wrapException(A.YamlException$("Undefined alias.", $event.span));
    },
    _loadSequence$1(firstEvent) {
      var children, node, t2, $event,
        t1 = firstEvent.tag;
      if (t1 !== "!" && t1 != null && t1 !== "tag:yaml.org,2002:seq")
        throw A.wrapException(A.YamlException$("Invalid tag for sequence.", firstEvent.span));
      children = A._setArrayType([], type$.JSArray_YamlNode);
      t1 = firstEvent.span;
      node = new A.YamlList(new A.UnmodifiableListView(children, type$.UnmodifiableListView_YamlNode), firstEvent.style, t1);
      this._registerAnchor$2(firstEvent.anchor, node);
      t2 = this._parser;
      $event = t2.parse$0(0);
      for (; $event.get$type($event) !== B.EventType_7;) {
        B.JSArray_methods.add$1(children, this._loadNode$1($event));
        $event = t2.parse$0(0);
      }
      node._yaml_node$_span = t1.expand$1(0, $event.get$span());
      return node;
    },
    _loadMapping$1(firstEvent) {
      var children, node, t2, $event, key, value, _this = this,
        t1 = firstEvent.tag;
      if (t1 !== "!" && t1 != null && t1 !== "tag:yaml.org,2002:map")
        throw A.wrapException(A.YamlException$("Invalid tag for mapping.", firstEvent.span));
      children = A.LinkedHashMap_LinkedHashMap(A.equality__deepEquals$closure(), A.equality__deepHashCode$closure(), type$.dynamic, type$.YamlNode);
      t1 = firstEvent.span;
      node = new A.YamlMap(new A.UnmodifiableMapView(children, type$.UnmodifiableMapView_dynamic_YamlNode), firstEvent.style, t1);
      _this._registerAnchor$2(firstEvent.anchor, node);
      t2 = _this._parser;
      $event = t2.parse$0(0);
      for (; $event.get$type($event) !== B.EventType_9;) {
        key = _this._loadNode$1($event);
        value = _this._loadNode$1(t2.parse$0(0));
        if (children.containsKey$1(key))
          throw A.wrapException(A.YamlException$("Duplicate mapping key.", key._yaml_node$_span));
        children.$indexSet(0, key, value);
        $event = t2.parse$0(0);
      }
      node._yaml_node$_span = t1.expand$1(0, $event.get$span());
      return node;
    },
    _parseByTag$1(scalar) {
      var result, _this = this,
        t1 = scalar.tag;
      switch (t1) {
        case "tag:yaml.org,2002:null":
          result = _this._parseNull$1(scalar);
          if (result != null)
            return result;
          throw A.wrapException(A.YamlException$("Invalid null scalar.", scalar.span));
        case "tag:yaml.org,2002:bool":
          result = _this._parseBool$1(scalar);
          if (result != null)
            return result;
          throw A.wrapException(A.YamlException$("Invalid bool scalar.", scalar.span));
        case "tag:yaml.org,2002:int":
          result = _this._parseNumber$2$allowFloat(scalar, false);
          if (result != null)
            return result;
          throw A.wrapException(A.YamlException$("Invalid int scalar.", scalar.span));
        case "tag:yaml.org,2002:float":
          result = _this._parseNumber$2$allowInt(scalar, false);
          if (result != null)
            return result;
          throw A.wrapException(A.YamlException$("Invalid float scalar.", scalar.span));
        case "tag:yaml.org,2002:str":
          return new A.YamlScalar(scalar.value, scalar.style, scalar.span);
        default:
          throw A.wrapException(A.YamlException$("Undefined tag: " + A.S(t1) + ".", scalar.span));
      }
    },
    _tryParseScalar$1(scalar) {
      var firstChar, _this = this, _null = null,
        t1 = scalar.value,
        $length = t1.length;
      if ($length === 0)
        return new A.YamlScalar(_null, scalar.style, scalar.span);
      if (0 >= $length)
        return A.ioore(t1, 0);
      firstChar = t1.charCodeAt(0);
      switch (firstChar) {
        case 46:
        case 43:
        case 45:
          return _this._parseNumber$1(scalar);
        case 110:
        case 78:
          return $length === 4 ? _this._parseNull$1(scalar) : _null;
        case 116:
        case 84:
          return $length === 4 ? _this._parseBool$1(scalar) : _null;
        case 102:
        case 70:
          return $length === 5 ? _this._parseBool$1(scalar) : _null;
        case 126:
          return $length === 1 ? new A.YamlScalar(_null, scalar.style, scalar.span) : _null;
        default:
          if (firstChar >= 48 && firstChar <= 57)
            return _this._parseNumber$1(scalar);
          return _null;
      }
    },
    _parseNull$1(scalar) {
      switch (scalar.value) {
        case "":
        case "null":
        case "Null":
        case "NULL":
        case "~":
          return new A.YamlScalar(null, scalar.style, scalar.span);
        default:
          return null;
      }
    },
    _parseBool$1(scalar) {
      switch (scalar.value) {
        case "true":
        case "True":
        case "TRUE":
          return new A.YamlScalar(true, scalar.style, scalar.span);
        case "false":
        case "False":
        case "FALSE":
          return new A.YamlScalar(false, scalar.style, scalar.span);
        default:
          return null;
      }
    },
    _parseNumber$3$allowFloat$allowInt(scalar, allowFloat, allowInt) {
      var value = this._parseNumberValue$3$allowFloat$allowInt(scalar.value, allowFloat, allowInt);
      return value == null ? null : new A.YamlScalar(value, scalar.style, scalar.span);
    },
    _parseNumber$1(scalar) {
      return this._parseNumber$3$allowFloat$allowInt(scalar, true, true);
    },
    _parseNumber$2$allowFloat(scalar, allowFloat) {
      return this._parseNumber$3$allowFloat$allowInt(scalar, allowFloat, true);
    },
    _parseNumber$2$allowInt(scalar, allowInt) {
      return this._parseNumber$3$allowFloat$allowInt(scalar, true, allowInt);
    },
    _parseNumberValue$3$allowFloat$allowInt(contents, allowFloat, allowInt) {
      var firstChar, value, secondChar, t2, result, t3, _null = null,
        t1 = contents.length;
      if (0 >= t1)
        return A.ioore(contents, 0);
      firstChar = contents.charCodeAt(0);
      if (allowInt && t1 === 1) {
        value = firstChar - 48;
        return value >= 0 && value <= 9 ? value : _null;
      }
      if (1 >= t1)
        return A.ioore(contents, 1);
      secondChar = contents.charCodeAt(1);
      if (allowInt && firstChar === 48) {
        if (secondChar === 120)
          return A.Primitives_parseInt(contents, _null);
        if (secondChar === 111)
          return A.Primitives_parseInt(B.JSString_methods.substring$1(contents, 2), 8);
      }
      if (!(firstChar >= 48 && firstChar <= 57))
        t2 = (firstChar === 43 || firstChar === 45) && secondChar >= 48 && secondChar <= 57;
      else
        t2 = true;
      if (t2) {
        result = allowInt ? A.Primitives_parseInt(contents, 10) : _null;
        return allowFloat ? result == null ? A.Primitives_parseDouble(contents) : result : result;
      }
      if (!allowFloat)
        return _null;
      t2 = firstChar === 46;
      if (!(t2 && secondChar >= 48 && secondChar <= 57))
        t3 = (firstChar === 45 || firstChar === 43) && secondChar === 46;
      else
        t3 = true;
      if (t3) {
        if (t1 === 5)
          switch (contents) {
            case "+.inf":
            case "+.Inf":
            case "+.INF":
              return 1 / 0;
            case "-.inf":
            case "-.Inf":
            case "-.INF":
              return -1 / 0;
          }
        return A.Primitives_parseDouble(contents);
      }
      if (t1 === 4 && t2)
        switch (contents) {
          case ".inf":
          case ".Inf":
          case ".INF":
            return 1 / 0;
          case ".nan":
          case ".NaN":
          case ".NAN":
            return 0 / 0;
        }
      return _null;
    }
  };
  A.NullSpan.prototype = {
    get$end(_) {
      return this.start;
    },
    get$start(receiver) {
      return this.start;
    },
    get$text() {
      return "";
    }
  };
  A.Parser.prototype = {
    parse$0(_) {
      var $event, error, t1, exception;
      try {
        if (this._parser$_state === B._State_END) {
          t1 = A.StateError$("No more events.");
          throw A.wrapException(t1);
        }
        $event = this._stateMachine$0();
        return $event;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StringScannerException) {
          error = t1;
          throw A.wrapException(A.YamlException$(error._span_exception$_message, error._span));
        } else
          throw exception;
      }
    },
    _stateMachine$0() {
      var token, t1, t2, _this = this;
      switch (_this._parser$_state) {
        case B._State_STREAM_START:
          token = _this._parser$_scanner.scan$0();
          _this._parser$_state = B._State_DOCUMENT_START;
          return new A.Event(B.EventType_0, token.get$span());
        case B._State_DOCUMENT_START:
          return _this._parseDocumentStart$0();
        case B._State_DOCUMENT_CONTENT:
          return _this._parseDocumentContent$0();
        case B._State_DOCUMENT_END:
          return _this._parseDocumentEnd$0();
        case B._State_BLOCK_NODE:
          return _this._parseNode$1$block(true);
        case B._State_p8I:
          return _this._parseNode$2$block$indentlessSequence(true, true);
        case B._State_FLOW_NODE:
          return _this._parseNode$0();
        case B._State_BLOCK_SEQUENCE_FIRST_ENTRY:
          _this._parser$_scanner.scan$0();
          return _this._parseBlockSequenceEntry$0();
        case B._State_BLOCK_SEQUENCE_ENTRY:
          return _this._parseBlockSequenceEntry$0();
        case B._State_INDENTLESS_SEQUENCE_ENTRY:
          return _this._parseIndentlessSequenceEntry$0();
        case B._State_BLOCK_MAPPING_FIRST_KEY:
          _this._parser$_scanner.scan$0();
          return _this._parseBlockMappingKey$0();
        case B._State_BLOCK_MAPPING_KEY:
          return _this._parseBlockMappingKey$0();
        case B._State_BLOCK_MAPPING_VALUE:
          return _this._parseBlockMappingValue$0();
        case B._State_FLOW_SEQUENCE_FIRST_ENTRY:
          return _this._parseFlowSequenceEntry$1$first(true);
        case B._State_FLOW_SEQUENCE_ENTRY:
          return _this._parseFlowSequenceEntry$0();
        case B._State_oBX:
          return _this._parseFlowSequenceEntryMappingKey$0();
        case B._State_hJ6:
          return _this._parseFlowSequenceEntryMappingValue$0();
        case B._State_h3t:
          _this._parser$_state = B._State_FLOW_SEQUENCE_ENTRY;
          t1 = _this._parser$_scanner.peek$0().get$span();
          t1 = A.FileLocation$_(t1.file, t1._file$_start);
          t2 = t1.offset;
          return new A.Event(B.EventType_9, A._FileSpan$(t1.file, t2, t2));
        case B._State_FLOW_MAPPING_FIRST_KEY:
          return _this._parseFlowMappingKey$1$first(true);
        case B._State_FLOW_MAPPING_KEY:
          return _this._parseFlowMappingKey$0();
        case B._State_FLOW_MAPPING_VALUE:
          return _this._parseFlowMappingValue$0();
        case B._State_FLOW_MAPPING_EMPTY_VALUE:
          return _this._parseFlowMappingValue$1$empty(true);
        default:
          throw A.wrapException(A.StateError$("Unreachable"));
      }
    },
    _parseDocumentStart$0() {
      var token, start, pair, _this = this,
        t1 = _this._parser$_scanner,
        t2 = t1.peek$0();
      t2.toString;
      for (token = t2; token.get$type(token) === B.TokenType_5; token = t2) {
        t1.scan$0();
        t2 = t1.peek$0();
        t2.toString;
      }
      if (token.get$type(token) !== B.TokenType_2 && token.get$type(token) !== B.TokenType_3 && token.get$type(token) !== B.TokenType_4 && token.get$type(token) !== B.TokenType_1) {
        _this._processDirectives$0();
        B.JSArray_methods.add$1(_this._states, B._State_DOCUMENT_END);
        _this._parser$_state = B._State_BLOCK_NODE;
        t1 = token.get$span();
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        return A.DocumentStartEvent$(A._FileSpan$(t1.file, t2, t2), true, null, null);
      }
      if (token.get$type(token) === B.TokenType_1) {
        _this._parser$_state = B._State_END;
        t1.scan$0();
        return new A.Event(B.EventType_1, token.get$span());
      }
      start = token.get$span();
      pair = _this._processDirectives$0();
      token = t1.peek$0();
      if (token.get$type(token) !== B.TokenType_4)
        throw A.wrapException(A.YamlException$("Expected document start.", token.get$span()));
      B.JSArray_methods.add$1(_this._states, B._State_DOCUMENT_END);
      _this._parser$_state = B._State_DOCUMENT_CONTENT;
      t1.scan$0();
      return A.DocumentStartEvent$(start.expand$1(0, token.get$span()), false, pair.last, pair.first);
    },
    _parseDocumentContent$0() {
      var t1, t2, _this = this,
        token = _this._parser$_scanner.peek$0();
      switch (token.get$type(token).index) {
        case 2:
        case 3:
        case 4:
        case 5:
        case 1:
          t1 = _this._states;
          if (0 >= t1.length)
            return A.ioore(t1, -1);
          _this._parser$_state = t1.pop();
          t1 = token.get$span();
          t1 = A.FileLocation$_(t1.file, t1._file$_start);
          t2 = t1.offset;
          return new A.ScalarEvent(A._FileSpan$(t1.file, t2, t2), null, null, "", B.ScalarStyle_PLAIN);
        default:
          return _this._parseNode$1$block(true);
      }
    },
    _parseDocumentEnd$0() {
      var t1, token, t2;
      this._tagDirectives.clear$0(0);
      this._parser$_state = B._State_DOCUMENT_START;
      t1 = this._parser$_scanner;
      token = t1.peek$0();
      if (token.get$type(token) === B.TokenType_5) {
        t1.scan$0();
        return new A.DocumentEndEvent(token.get$span(), false);
      } else {
        t1 = token.get$span();
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        return new A.DocumentEndEvent(A._FileSpan$(t1.file, t2, t2), true);
      }
    },
    _parseNode$2$block$indentlessSequence(block, indentlessSequence) {
      var t4, t5, token, tag, tagDirective, _this = this, t1 = {},
        t2 = _this._parser$_scanner,
        t3 = t2.peek$0();
      t3.toString;
      if (t3 instanceof A.AliasToken) {
        t2.scan$0();
        t1 = _this._states;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        _this._parser$_state = t1.pop();
        return new A.AliasEvent(t3.span, t3.name);
      }
      t1.tagToken = t1.anchor = null;
      t4 = t3.get$span();
      t4 = A.FileLocation$_(t4.file, t4._file$_start);
      t5 = t4.offset;
      t1.span = A._FileSpan$(t4.file, t5, t5);
      t5 = new A.Parser__parseNode_parseAnchor(t1, _this);
      t4 = new A.Parser__parseNode_parseTag(t1, _this);
      if (t3 instanceof A.AnchorToken) {
        token = t5.call$1(t3);
        if (token instanceof A.TagToken)
          token = t4.call$1(token);
      } else if (t3 instanceof A.TagToken) {
        token = t4.call$1(t3);
        if (token instanceof A.AnchorToken)
          token = t5.call$1(token);
      } else
        token = t3;
      t3 = t1.tagToken;
      if (t3 != null) {
        t4 = t3.handle;
        if (t4 == null)
          tag = t3.suffix;
        else {
          tagDirective = _this._tagDirectives.$index(0, t4);
          if (tagDirective == null)
            throw A.wrapException(A.YamlException$("Undefined tag handle.", t1.tagToken.span));
          t3 = tagDirective.prefix;
          t4 = t1.tagToken;
          t4 = t4 == null ? null : t4.suffix;
          tag = t3 + (t4 == null ? "" : t4);
        }
      } else
        tag = null;
      if (indentlessSequence && token.get$type(token) === B.TokenType_13) {
        _this._parser$_state = B._State_INDENTLESS_SEQUENCE_ENTRY;
        return new A.SequenceStartEvent(t1.span.expand$1(0, token.get$span()), t1.anchor, tag, B.CollectionStyle_BLOCK);
      }
      if (token instanceof A.ScalarToken) {
        if (tag == null && token.style !== B.ScalarStyle_PLAIN)
          tag = "!";
        t3 = _this._states;
        if (0 >= t3.length)
          return A.ioore(t3, -1);
        _this._parser$_state = t3.pop();
        t2.scan$0();
        return new A.ScalarEvent(t1.span.expand$1(0, token.span), t1.anchor, tag, token.value, token.style);
      }
      if (token.get$type(token) === B.TokenType_9) {
        _this._parser$_state = B._State_FLOW_SEQUENCE_FIRST_ENTRY;
        return new A.SequenceStartEvent(t1.span.expand$1(0, token.get$span()), t1.anchor, tag, B.CollectionStyle_FLOW);
      }
      if (token.get$type(token) === B.TokenType_11) {
        _this._parser$_state = B._State_FLOW_MAPPING_FIRST_KEY;
        return new A.MappingStartEvent(t1.span.expand$1(0, token.get$span()), t1.anchor, tag, B.CollectionStyle_FLOW);
      }
      if (block && token.get$type(token) === B.TokenType_6) {
        _this._parser$_state = B._State_BLOCK_SEQUENCE_FIRST_ENTRY;
        return new A.SequenceStartEvent(t1.span.expand$1(0, token.get$span()), t1.anchor, tag, B.CollectionStyle_BLOCK);
      }
      if (block && token.get$type(token) === B.TokenType_7) {
        _this._parser$_state = B._State_BLOCK_MAPPING_FIRST_KEY;
        return new A.MappingStartEvent(t1.span.expand$1(0, token.get$span()), t1.anchor, tag, B.CollectionStyle_BLOCK);
      }
      if (t1.anchor != null || tag != null) {
        t2 = _this._states;
        if (0 >= t2.length)
          return A.ioore(t2, -1);
        _this._parser$_state = t2.pop();
        return new A.ScalarEvent(t1.span, t1.anchor, tag, "", B.ScalarStyle_PLAIN);
      }
      throw A.wrapException(A.YamlException$("Expected node content.", t1.span));
    },
    _parseNode$1$block(block) {
      return this._parseNode$2$block$indentlessSequence(block, false);
    },
    _parseNode$0() {
      return this._parseNode$2$block$indentlessSequence(false, false);
    },
    _parseBlockSequenceEntry$0() {
      var t2, start, _this = this,
        t1 = _this._parser$_scanner,
        token = t1.peek$0();
      if (token.get$type(token) === B.TokenType_13) {
        t2 = token.get$span();
        start = A.FileLocation$_(t2.file, t2._file$_start);
        t1.scan$0();
        token = t1.peek$0();
        if (token.get$type(token) === B.TokenType_13 || token.get$type(token) === B.TokenType_8) {
          _this._parser$_state = B._State_BLOCK_SEQUENCE_ENTRY;
          t1 = start.offset;
          return new A.ScalarEvent(A._FileSpan$(start.file, t1, t1), null, null, "", B.ScalarStyle_PLAIN);
        } else {
          B.JSArray_methods.add$1(_this._states, B._State_BLOCK_SEQUENCE_ENTRY);
          return _this._parseNode$1$block(true);
        }
      }
      if (token.get$type(token) === B.TokenType_8) {
        t1.scan$0();
        t1 = _this._states;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        _this._parser$_state = t1.pop();
        return new A.Event(B.EventType_7, token.get$span());
      }
      t1 = token.get$span();
      throw A.wrapException(A.YamlException$("While parsing a block collection, expected '-'.", t1.get$start(t1).pointSpan$0()));
    },
    _parseIndentlessSequenceEntry$0() {
      var t2, start, _this = this,
        t1 = _this._parser$_scanner,
        token = t1.peek$0();
      if (token.get$type(token) !== B.TokenType_13) {
        t1 = _this._states;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        _this._parser$_state = t1.pop();
        t1 = token.get$span();
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        return new A.Event(B.EventType_7, A._FileSpan$(t1.file, t2, t2));
      }
      t2 = token.get$span();
      start = A.FileLocation$_(t2.file, t2._file$_start);
      t1.scan$0();
      token = t1.peek$0();
      if (token.get$type(token) === B.TokenType_13 || token.get$type(token) === B.TokenType_15 || token.get$type(token) === B.TokenType_16 || token.get$type(token) === B.TokenType_8) {
        _this._parser$_state = B._State_INDENTLESS_SEQUENCE_ENTRY;
        t1 = start.offset;
        return new A.ScalarEvent(A._FileSpan$(start.file, t1, t1), null, null, "", B.ScalarStyle_PLAIN);
      } else {
        B.JSArray_methods.add$1(_this._states, B._State_INDENTLESS_SEQUENCE_ENTRY);
        return _this._parseNode$1$block(true);
      }
    },
    _parseBlockMappingKey$0() {
      var t2, start, _this = this, _null = null,
        t1 = _this._parser$_scanner,
        token = t1.peek$0();
      if (token.get$type(token) === B.TokenType_15) {
        t2 = token.get$span();
        start = A.FileLocation$_(t2.file, t2._file$_start);
        t1.scan$0();
        token = t1.peek$0();
        if (token.get$type(token) === B.TokenType_15 || token.get$type(token) === B.TokenType_16 || token.get$type(token) === B.TokenType_8) {
          _this._parser$_state = B._State_BLOCK_MAPPING_VALUE;
          t1 = start.offset;
          return new A.ScalarEvent(A._FileSpan$(start.file, t1, t1), _null, _null, "", B.ScalarStyle_PLAIN);
        } else {
          B.JSArray_methods.add$1(_this._states, B._State_BLOCK_MAPPING_VALUE);
          return _this._parseNode$2$block$indentlessSequence(true, true);
        }
      }
      if (token.get$type(token) === B.TokenType_16) {
        _this._parser$_state = B._State_BLOCK_MAPPING_VALUE;
        t1 = token.get$span();
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        return new A.ScalarEvent(A._FileSpan$(t1.file, t2, t2), _null, _null, "", B.ScalarStyle_PLAIN);
      }
      if (token.get$type(token) === B.TokenType_8) {
        t1.scan$0();
        t1 = _this._states;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        _this._parser$_state = t1.pop();
        return new A.Event(B.EventType_9, token.get$span());
      }
      t1 = token.get$span();
      throw A.wrapException(A.YamlException$("Expected a key while parsing a block mapping.", t1.get$start(t1).pointSpan$0()));
    },
    _parseBlockMappingValue$0() {
      var t2, start, _this = this, _null = null,
        t1 = _this._parser$_scanner,
        token = t1.peek$0();
      if (token.get$type(token) !== B.TokenType_16) {
        _this._parser$_state = B._State_BLOCK_MAPPING_KEY;
        t1 = token.get$span();
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        return new A.ScalarEvent(A._FileSpan$(t1.file, t2, t2), _null, _null, "", B.ScalarStyle_PLAIN);
      }
      t2 = token.get$span();
      start = A.FileLocation$_(t2.file, t2._file$_start);
      t1.scan$0();
      token = t1.peek$0();
      if (token.get$type(token) === B.TokenType_15 || token.get$type(token) === B.TokenType_16 || token.get$type(token) === B.TokenType_8) {
        _this._parser$_state = B._State_BLOCK_MAPPING_KEY;
        t1 = start.offset;
        return new A.ScalarEvent(A._FileSpan$(start.file, t1, t1), _null, _null, "", B.ScalarStyle_PLAIN);
      } else {
        B.JSArray_methods.add$1(_this._states, B._State_BLOCK_MAPPING_KEY);
        return _this._parseNode$2$block$indentlessSequence(true, true);
      }
    },
    _parseFlowSequenceEntry$1$first(first) {
      var t1, token, t2, _this = this;
      if (first)
        _this._parser$_scanner.scan$0();
      t1 = _this._parser$_scanner;
      token = t1.peek$0();
      if (token.get$type(token) !== B.TokenType_10) {
        if (!first) {
          if (token.get$type(token) !== B.TokenType_14) {
            t1 = token.get$span();
            throw A.wrapException(A.YamlException$("While parsing a flow sequence, expected ',' or ']'.", t1.get$start(t1).pointSpan$0()));
          }
          t1.scan$0();
          t2 = t1.peek$0();
          t2.toString;
          token = t2;
        }
        if (token.get$type(token) === B.TokenType_15) {
          _this._parser$_state = B._State_oBX;
          t1.scan$0();
          return new A.MappingStartEvent(token.get$span(), null, null, B.CollectionStyle_FLOW);
        } else if (token.get$type(token) !== B.TokenType_10) {
          B.JSArray_methods.add$1(_this._states, B._State_FLOW_SEQUENCE_ENTRY);
          return _this._parseNode$0();
        }
      }
      t1.scan$0();
      t1 = _this._states;
      if (0 >= t1.length)
        return A.ioore(t1, -1);
      _this._parser$_state = t1.pop();
      return new A.Event(B.EventType_7, token.get$span());
    },
    _parseFlowSequenceEntry$0() {
      return this._parseFlowSequenceEntry$1$first(false);
    },
    _parseFlowSequenceEntryMappingKey$0() {
      var t1, start, _this = this,
        token = _this._parser$_scanner.peek$0();
      if (token.get$type(token) === B.TokenType_16 || token.get$type(token) === B.TokenType_14 || token.get$type(token) === B.TokenType_10) {
        t1 = token.get$span();
        start = A.FileLocation$_(t1.file, t1._file$_start);
        _this._parser$_state = B._State_hJ6;
        t1 = start.offset;
        return new A.ScalarEvent(A._FileSpan$(start.file, t1, t1), null, null, "", B.ScalarStyle_PLAIN);
      } else {
        B.JSArray_methods.add$1(_this._states, B._State_hJ6);
        return _this._parseNode$0();
      }
    },
    _parseFlowSequenceEntryMappingValue$0() {
      var t2, _this = this,
        t1 = _this._parser$_scanner,
        token = t1.peek$0();
      if (token.get$type(token) === B.TokenType_16) {
        t1.scan$0();
        token = t1.peek$0();
        if (token.get$type(token) !== B.TokenType_14 && token.get$type(token) !== B.TokenType_10) {
          B.JSArray_methods.add$1(_this._states, B._State_h3t);
          return _this._parseNode$0();
        }
      }
      _this._parser$_state = B._State_h3t;
      t1 = token.get$span();
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      t2 = t1.offset;
      return new A.ScalarEvent(A._FileSpan$(t1.file, t2, t2), null, null, "", B.ScalarStyle_PLAIN);
    },
    _parseFlowMappingKey$1$first(first) {
      var t1, token, t2, _this = this;
      if (first)
        _this._parser$_scanner.scan$0();
      t1 = _this._parser$_scanner;
      token = t1.peek$0();
      if (token.get$type(token) !== B.TokenType_12) {
        if (!first) {
          if (token.get$type(token) !== B.TokenType_14) {
            t1 = token.get$span();
            throw A.wrapException(A.YamlException$("While parsing a flow mapping, expected ',' or '}'.", t1.get$start(t1).pointSpan$0()));
          }
          t1.scan$0();
          t2 = t1.peek$0();
          t2.toString;
          token = t2;
        }
        if (token.get$type(token) === B.TokenType_15) {
          t1.scan$0();
          token = t1.peek$0();
          if (token.get$type(token) !== B.TokenType_16 && token.get$type(token) !== B.TokenType_14 && token.get$type(token) !== B.TokenType_12) {
            B.JSArray_methods.add$1(_this._states, B._State_FLOW_MAPPING_VALUE);
            return _this._parseNode$0();
          } else {
            _this._parser$_state = B._State_FLOW_MAPPING_VALUE;
            t1 = token.get$span();
            t1 = A.FileLocation$_(t1.file, t1._file$_start);
            t2 = t1.offset;
            return new A.ScalarEvent(A._FileSpan$(t1.file, t2, t2), null, null, "", B.ScalarStyle_PLAIN);
          }
        } else if (token.get$type(token) !== B.TokenType_12) {
          B.JSArray_methods.add$1(_this._states, B._State_FLOW_MAPPING_EMPTY_VALUE);
          return _this._parseNode$0();
        }
      }
      t1.scan$0();
      t1 = _this._states;
      if (0 >= t1.length)
        return A.ioore(t1, -1);
      _this._parser$_state = t1.pop();
      return new A.Event(B.EventType_9, token.get$span());
    },
    _parseFlowMappingKey$0() {
      return this._parseFlowMappingKey$1$first(false);
    },
    _parseFlowMappingValue$1$empty(empty) {
      var token, _this = this, _null = null,
        t1 = _this._parser$_scanner,
        t2 = t1.peek$0();
      t2.toString;
      if (empty) {
        _this._parser$_state = B._State_FLOW_MAPPING_KEY;
        t1 = t2.get$span();
        t1 = A.FileLocation$_(t1.file, t1._file$_start);
        t2 = t1.offset;
        return new A.ScalarEvent(A._FileSpan$(t1.file, t2, t2), _null, _null, "", B.ScalarStyle_PLAIN);
      }
      if (t2.get$type(t2) === B.TokenType_16) {
        t1.scan$0();
        token = t1.peek$0();
        if (token.get$type(token) !== B.TokenType_14 && token.get$type(token) !== B.TokenType_12) {
          B.JSArray_methods.add$1(_this._states, B._State_FLOW_MAPPING_KEY);
          return _this._parseNode$0();
        }
      } else
        token = t2;
      _this._parser$_state = B._State_FLOW_MAPPING_KEY;
      t1 = token.get$span();
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      t2 = t1.offset;
      return new A.ScalarEvent(A._FileSpan$(t1.file, t2, t2), _null, _null, "", B.ScalarStyle_PLAIN);
    },
    _parseFlowMappingValue$0() {
      return this._parseFlowMappingValue$1$empty(false);
    },
    _processDirectives$0() {
      var tagDirectives, token, versionDirective, t3, tagDirective, _this = this,
        t1 = _this._parser$_scanner,
        t2 = t1.peek$0();
      t2.toString;
      tagDirectives = A._setArrayType([], type$.JSArray_TagDirective);
      token = t2;
      versionDirective = null;
      while (true) {
        if (!(token.get$type(token) === B.TokenType_2 || token.get$type(token) === B.TokenType_3))
          break;
        if (token instanceof A.VersionDirectiveToken) {
          if (versionDirective != null)
            throw A.wrapException(A.YamlException$("Duplicate %YAML directive.", token.span));
          t2 = token.major;
          if (t2 !== 1 || token.minor === 0)
            throw A.wrapException(A.YamlException$("Incompatible YAML document. This parser only supports YAML 1.1 and 1.2.", token.span));
          else {
            t3 = token.minor;
            if (t3 > 2)
              $.$get$yamlWarningCallback().call$2("Warning: this parser only supports YAML 1.1 and 1.2.", token.span);
          }
          versionDirective = new A.VersionDirective(t2, t3);
        } else if (token instanceof A.TagDirectiveToken) {
          tagDirective = new A.TagDirective(token.handle, token.prefix);
          _this._appendTagDirective$2(tagDirective, token.span);
          B.JSArray_methods.add$1(tagDirectives, tagDirective);
        }
        t1.scan$0();
        t2 = t1.peek$0();
        t2.toString;
        token = t2;
      }
      t1 = token.get$span();
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      t2 = t1.offset;
      _this._appendTagDirective$3$allowDuplicates(new A.TagDirective("!", "!"), A._FileSpan$(t1.file, t2, t2), true);
      t2 = token.get$span();
      t2 = A.FileLocation$_(t2.file, t2._file$_start);
      t1 = t2.offset;
      _this._appendTagDirective$3$allowDuplicates(new A.TagDirective("!!", "tag:yaml.org,2002:"), A._FileSpan$(t2.file, t1, t1), true);
      return new A.Pair(versionDirective, tagDirectives, type$.Pair_of_nullable_VersionDirective_and_List_TagDirective);
    },
    _appendTagDirective$3$allowDuplicates(newDirective, span, allowDuplicates) {
      var t1 = this._tagDirectives,
        t2 = newDirective.handle;
      if (t1.containsKey$1(t2)) {
        if (allowDuplicates)
          return;
        throw A.wrapException(A.YamlException$("Duplicate %TAG directive.", span));
      }
      t1.$indexSet(0, t2, newDirective);
    },
    _appendTagDirective$2(newDirective, span) {
      return this._appendTagDirective$3$allowDuplicates(newDirective, span, false);
    }
  };
  A.Parser__parseNode_parseAnchor.prototype = {
    call$1(token) {
      var t1 = this._box_0;
      t1.anchor = token.name;
      t1.span = t1.span.expand$1(0, token.span);
      t1 = this.$this._parser$_scanner;
      t1.scan$0();
      t1 = t1.peek$0();
      t1.toString;
      return t1;
    },
    $signature: 208
  };
  A.Parser__parseNode_parseTag.prototype = {
    call$1(token) {
      var t1 = this._box_0;
      t1.tagToken = token;
      t1.span = t1.span.expand$1(0, token.span);
      t1 = this.$this._parser$_scanner;
      t1.scan$0();
      t1 = t1.peek$0();
      t1.toString;
      return t1;
    },
    $signature: 209
  };
  A._State.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.Scanner.prototype = {
    get$_isTagChar() {
      var t1,
        char = this._scanner.peekChar$0();
      if (char == null)
        return false;
      switch (char) {
        case 45:
        case 59:
        case 47:
        case 58:
        case 64:
        case 38:
        case 61:
        case 43:
        case 36:
        case 46:
        case 126:
        case 63:
        case 42:
        case 39:
        case 40:
        case 41:
        case 37:
          return true;
        default:
          if (!(char >= 48 && char <= 57))
            if (!(char >= 97 && char <= 122))
              t1 = char >= 65 && char <= 90;
            else
              t1 = true;
          else
            t1 = true;
          return t1;
      }
    },
    get$_isAnchorChar() {
      if (!this.get$_isNonSpace())
        return false;
      switch (this._scanner.peekChar$0()) {
        case 44:
        case 91:
        case 93:
        case 123:
        case 125:
          return false;
        default:
          return true;
      }
    },
    get$_isDigit() {
      var char = this._scanner.peekChar$0();
      return char != null && char >= 48 && char <= 57;
    },
    get$_isHex() {
      var t1,
        char = this._scanner.peekChar$0();
      if (char == null)
        return false;
      if (!(char >= 48 && char <= 57))
        if (!(char >= 97 && char <= 102))
          t1 = char >= 65 && char <= 70;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    get$_isNonBreak() {
      var t1,
        char = this._scanner.peekChar$0();
      if (char == null)
        return false;
      switch (char) {
        case 10:
        case 13:
        case 65279:
          return false;
        case 9:
        case 133:
          return true;
        default:
          if (!(char >= 32 && char <= 126))
            if (!(char >= 160 && char <= 55295))
              if (!(char >= 57344 && char <= 65533))
                t1 = char >= 65536 && char <= 1114111;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
          return t1;
      }
    },
    get$_isNonSpace() {
      var t1,
        char = this._scanner.peekChar$0();
      if (char == null)
        return false;
      switch (char) {
        case 10:
        case 13:
        case 65279:
        case 32:
          return false;
        case 133:
          return true;
        default:
          if (!(char >= 32 && char <= 126))
            if (!(char >= 160 && char <= 55295))
              if (!(char >= 57344 && char <= 65533))
                t1 = char >= 65536 && char <= 1114111;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
          return t1;
      }
    },
    scan$0() {
      var token, _this = this;
      if (_this._streamEndProduced)
        throw A.wrapException(A.StateError$("Out of tokens."));
      if (!_this._tokenAvailable)
        _this._fetchMoreTokens$0();
      token = _this._tokens.removeFirst$0();
      _this._tokenAvailable = false;
      ++_this._tokensParsed;
      _this._streamEndProduced = token.get$type(token) === B.TokenType_1;
      return token;
    },
    peek$0() {
      var t1, _this = this;
      if (_this._streamEndProduced)
        return null;
      if (!_this._tokenAvailable)
        _this._fetchMoreTokens$0();
      t1 = _this._tokens;
      return t1.get$first(t1);
    },
    _fetchMoreTokens$0() {
      var t1, t2, _this = this;
      for (t1 = _this._tokens, t2 = _this._simpleKeys; true;) {
        if (!t1.get$isEmpty(t1)) {
          _this._staleSimpleKeys$0();
          if (t1.get$length(t1) === 0)
            A.throwExpression(A.IterableElementError_noElement());
          if (J.get$type$z(t1.$index(0, t1.get$length(t1) - 1)) === B.TokenType_1)
            break;
          if (!B.JSArray_methods.any$1(t2, new A.Scanner__fetchMoreTokens_closure(_this)))
            break;
        }
        _this._fetchNextToken$0();
      }
      _this._tokenAvailable = true;
    },
    _fetchNextToken$0() {
      var t1, t2, t3, directive, suffix, handle, token, _this = this;
      if (!_this._streamStartProduced) {
        _this._streamStartProduced = true;
        t1 = _this._tokens;
        t2 = _this._scanner;
        t2 = A.FileLocation$_(t2._sourceFile, t2._position);
        t3 = t2.offset;
        t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(new A.Token(B.TokenType_0, A._FileSpan$(t2.file, t3, t3))));
        return;
      }
      _this._scanToNextToken$0();
      _this._staleSimpleKeys$0();
      t1 = _this._scanner;
      _this._unrollIndent$1(t1._column);
      if (t1._position === t1.string.length) {
        _this._unrollIndent$1(-1);
        _this._removeSimpleKey$0();
        _this._simpleKeyAllowed = false;
        t2 = _this._tokens;
        t1 = A.FileLocation$_(t1._sourceFile, t1._position);
        t3 = t1.offset;
        t2._queue_list$_add$1(t2.$ti._eval$1("QueueList.E")._as(new A.Token(B.TokenType_1, A._FileSpan$(t1.file, t3, t3))));
        return;
      }
      if (t1._column === 0) {
        if (t1.peekChar$0() === 37) {
          _this._unrollIndent$1(-1);
          _this._removeSimpleKey$0();
          _this._simpleKeyAllowed = false;
          directive = _this._scanDirective$0();
          if (directive != null) {
            t1 = _this._tokens;
            t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(directive));
          }
          return;
        }
        if (_this._isBlankOrEndAt$1(3)) {
          if (t1.matches$1("---")) {
            _this._fetchDocumentIndicator$1(B.TokenType_4);
            return;
          }
          if (t1.matches$1("...")) {
            _this._fetchDocumentIndicator$1(B.TokenType_5);
            return;
          }
        }
      }
      switch (t1.peekChar$0()) {
        case 91:
          _this._fetchFlowCollectionStart$1(B.TokenType_9);
          return;
        case 123:
          _this._fetchFlowCollectionStart$1(B.TokenType_11);
          return;
        case 93:
          _this._fetchFlowCollectionEnd$1(B.TokenType_10);
          return;
        case 125:
          _this._fetchFlowCollectionEnd$1(B.TokenType_12);
          return;
        case 44:
          _this._removeSimpleKey$0();
          _this._simpleKeyAllowed = true;
          _this._addCharToken$1(B.TokenType_14);
          return;
        case 42:
          _this._fetchAnchor$1$anchor(false);
          return;
        case 38:
          _this._fetchAnchor$0();
          return;
        case 33:
          _this._saveSimpleKey$0();
          _this._simpleKeyAllowed = false;
          t2 = _this._tokens;
          t3 = t1._position;
          if (t1.peekChar$1(1) === 60) {
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            suffix = _this._scanTagUri$0();
            t1.expect$1(">");
            handle = "";
          } else {
            handle = _this._scanTagHandle$0();
            if (handle.length > 1 && B.JSString_methods.startsWith$1(handle, "!") && B.JSString_methods.endsWith$1(handle, "!"))
              suffix = _this._scanTagUri$1$flowSeparators(false);
            else {
              suffix = _this._scanTagUri$2$flowSeparators$head(false, handle);
              if (suffix.length === 0) {
                handle = null;
                suffix = "!";
              } else
                handle = "!";
            }
          }
          t2._queue_list$_add$1(t2.$ti._eval$1("QueueList.E")._as(new A.TagToken(t1.spanFrom$1(new A._EagerSpanScannerState(t3)), handle, suffix)));
          return;
        case 39:
          _this._fetchFlowScalar$1$singleQuote(true);
          return;
        case 34:
          _this._fetchFlowScalar$0();
          return;
        case 124:
          if (_this._simpleKeys.length !== 1)
            _this._invalidScalarCharacter$0();
          _this._fetchBlockScalar$1$literal(true);
          return;
        case 62:
          if (_this._simpleKeys.length !== 1)
            _this._invalidScalarCharacter$0();
          _this._fetchBlockScalar$0();
          return;
        case 37:
        case 64:
        case 96:
          _this._invalidScalarCharacter$0();
          break;
        case 45:
          if (_this._isPlainCharAt$1(1))
            _this._fetchPlainScalar$0();
          else {
            if (_this._simpleKeys.length === 1) {
              if (!_this._simpleKeyAllowed)
                A.throwExpression(A.YamlException$("Block sequence entries are not allowed here.", t1.get$emptySpan()));
              _this._rollIndent$3(t1._column, B.TokenType_6, A.FileLocation$_(t1._sourceFile, t1._position));
            }
            _this._removeSimpleKey$0();
            _this._simpleKeyAllowed = true;
            _this._addCharToken$1(B.TokenType_13);
          }
          return;
        case 63:
          if (_this._isPlainCharAt$1(1))
            _this._fetchPlainScalar$0();
          else {
            t2 = _this._simpleKeys;
            if (t2.length === 1) {
              if (!_this._simpleKeyAllowed)
                A.throwExpression(A.YamlException$("Mapping keys are not allowed here.", t1.get$emptySpan()));
              _this._rollIndent$3(t1._column, B.TokenType_7, A.FileLocation$_(t1._sourceFile, t1._position));
            }
            _this._simpleKeyAllowed = t2.length === 1;
            _this._addCharToken$1(B.TokenType_15);
          }
          return;
        case 58:
          if (_this._simpleKeys.length !== 1) {
            t1 = _this._tokens;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1) {
            t1 = _this._tokens;
            token = t1.get$last(t1);
            if (token.get$type(token) !== B.TokenType_10)
              if (token.get$type(token) !== B.TokenType_12)
                if (token.get$type(token) === B.TokenType_20) {
                  t1 = type$.ScalarToken._as(token).style;
                  t1 = t1 === B.ScalarStyle_SINGLE_QUOTED || t1 === B.ScalarStyle_DOUBLE_QUOTED;
                } else
                  t1 = false;
              else
                t1 = true;
            else
              t1 = true;
            if (t1) {
              _this._fetchValue$0();
              return;
            }
          }
          if (_this._isPlainCharAt$1(1))
            _this._fetchPlainScalar$0();
          else
            _this._fetchValue$0();
          return;
        default:
          if (!_this.get$_isNonBreak())
            _this._invalidScalarCharacter$0();
          _this._fetchPlainScalar$0();
          return;
      }
    },
    _invalidScalarCharacter$0() {
      return this._scanner.error$2$length(0, "Unexpected character.", 1);
    },
    _staleSimpleKeys$0() {
      var t1, t2, t3, t4, i, t5, key, t6, t7, t8, t9, _this = this;
      for (t1 = _this._simpleKeys, t2 = _this._scanner, t3 = _this._tokens, t4 = t2._sourceFile, i = 0; t5 = t1.length, i < t5; ++i) {
        key = t1[i];
        if (key == null)
          continue;
        if (t5 !== 1)
          continue;
        if (key.line === t2._line)
          continue;
        if (key.required) {
          t5 = t2._position;
          new A.FileLocation(t4, t5).FileLocation$_$2(t4, t5);
          t6 = new A._FileSpan(t4, t5, t5);
          t6._FileSpan$3(t4, t5, t5);
          A.throwExpression(new A.YamlException("Expected ':'.", t6));
          t5 = key.tokenNumber;
          t6 = _this._tokensParsed;
          t7 = key.location;
          t8 = t7.file;
          t7 = t7.offset;
          t9 = new A._FileSpan(t8, t7, t7);
          t9._FileSpan$3(t8, t7, t7);
          t3.insert$2(t3, t5 - t6, new A.Token(B.TokenType_15, t9));
        }
        B.JSArray_methods.$indexSet(t1, i, null);
      }
    },
    _saveSimpleKey$0() {
      var t2, t3, t4, t5, t6, t7, _this = this,
        t1 = _this._simpleKeys,
        required = t1.length === 1 && B.JSArray_methods.get$last(_this._indents) === _this._scanner._column;
      if (!_this._simpleKeyAllowed)
        return;
      _this._removeSimpleKey$0();
      t2 = t1.length;
      t3 = _this._tokensParsed;
      t4 = _this._tokens;
      t4 = t4.get$length(t4);
      t5 = _this._scanner;
      t6 = t5._line;
      t7 = t5._column;
      B.JSArray_methods.$indexSet(t1, t2 - 1, new A._SimpleKey(t3 + t4, A.FileLocation$_(t5._sourceFile, t5._position), t6, t7, required));
    },
    _removeSimpleKey$0() {
      var t1 = this._simpleKeys,
        key = B.JSArray_methods.get$last(t1);
      if (key != null && key.required)
        throw A.wrapException(A.YamlException$("Could not find expected ':' for simple key.", key.location.pointSpan$0()));
      B.JSArray_methods.$indexSet(t1, t1.length - 1, null);
    },
    _decreaseFlowLevel$0() {
      var t1 = this._simpleKeys,
        t2 = t1.length;
      if (t2 === 1)
        return;
      if (0 >= t2)
        return A.ioore(t1, -1);
      t1.pop();
    },
    _rollIndent$4$tokenNumber(column, type, $location, tokenNumber) {
      var t1, token, _this = this;
      if (_this._simpleKeys.length !== 1)
        return;
      t1 = _this._indents;
      if (B.JSArray_methods.get$last(t1) !== -1 && B.JSArray_methods.get$last(t1) >= column)
        return;
      B.JSArray_methods.add$1(t1, column);
      t1 = $location.offset;
      token = new A.Token(type, A._FileSpan$($location.file, t1, t1));
      t1 = _this._tokens;
      if (tokenNumber == null)
        t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(token));
      else
        t1.insert$2(t1, tokenNumber - _this._tokensParsed, token);
    },
    _rollIndent$3(column, type, $location) {
      return this._rollIndent$4$tokenNumber(column, type, $location, null);
    },
    _unrollIndent$1(column) {
      var t1, t2, t3, t4, t5, t6, t7, _this = this;
      if (_this._simpleKeys.length !== 1)
        return;
      for (t1 = _this._indents, t2 = _this._tokens, t3 = _this._scanner, t4 = t3._sourceFile, t5 = t2.$ti._eval$1("QueueList.E"); B.JSArray_methods.get$last(t1) > column;) {
        t6 = t3._position;
        new A.FileLocation(t4, t6).FileLocation$_$2(t4, t6);
        t7 = new A._FileSpan(t4, t6, t6);
        t7._FileSpan$3(t4, t6, t6);
        t2._queue_list$_add$1(t5._as(new A.Token(B.TokenType_8, t7)));
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
    },
    _fetchDocumentIndicator$1(type) {
      var t1, t2, t3, _this = this;
      _this._unrollIndent$1(-1);
      _this._removeSimpleKey$0();
      _this._simpleKeyAllowed = false;
      t1 = _this._scanner;
      t2 = t1._position;
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      t3 = _this._tokens;
      t3._queue_list$_add$1(t3.$ti._eval$1("QueueList.E")._as(new A.Token(type, t1.spanFrom$1(new A._EagerSpanScannerState(t2)))));
    },
    _fetchFlowCollectionStart$1(type) {
      var _this = this;
      _this._saveSimpleKey$0();
      B.JSArray_methods.add$1(_this._simpleKeys, null);
      _this._simpleKeyAllowed = true;
      _this._addCharToken$1(type);
    },
    _fetchFlowCollectionEnd$1(type) {
      var _this = this;
      _this._removeSimpleKey$0();
      _this._decreaseFlowLevel$0();
      _this._simpleKeyAllowed = false;
      _this._addCharToken$1(type);
    },
    _fetchValue$0() {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this._simpleKeys,
        simpleKey = B.JSArray_methods.get$last(t1);
      if (simpleKey != null) {
        t2 = _this._tokens;
        t3 = simpleKey.tokenNumber;
        t4 = _this._tokensParsed;
        t5 = simpleKey.location;
        t6 = t5.offset;
        t2.insert$2(t2, t3 - t4, new A.Token(B.TokenType_15, A._FileSpan$(t5.file, t6, t6)));
        _this._rollIndent$4$tokenNumber(simpleKey.column, B.TokenType_7, t5, t3);
        B.JSArray_methods.$indexSet(t1, t1.length - 1, null);
        _this._simpleKeyAllowed = false;
      } else if (t1.length === 1) {
        if (!_this._simpleKeyAllowed)
          throw A.wrapException(A.YamlException$("Mapping values are not allowed here. Did you miss a colon earlier?", _this._scanner.get$emptySpan()));
        t1 = _this._scanner;
        _this._rollIndent$3(t1._column, B.TokenType_7, A.FileLocation$_(t1._sourceFile, t1._position));
        _this._simpleKeyAllowed = true;
      } else if (_this._simpleKeyAllowed) {
        _this._simpleKeyAllowed = false;
        _this._addCharToken$1(B.TokenType_15);
      }
      _this._addCharToken$1(B.TokenType_16);
    },
    _addCharToken$1(type) {
      var t3,
        t1 = this._scanner,
        t2 = t1._position;
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      t3 = this._tokens;
      t3._queue_list$_add$1(t3.$ti._eval$1("QueueList.E")._as(new A.Token(type, t1.spanFrom$1(new A._EagerSpanScannerState(t2)))));
    },
    _fetchAnchor$1$anchor(anchor) {
      var t1, _this = this;
      _this._saveSimpleKey$0();
      _this._simpleKeyAllowed = false;
      t1 = _this._tokens;
      t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(_this._scanAnchor$1$anchor(anchor)));
    },
    _fetchAnchor$0() {
      return this._fetchAnchor$1$anchor(true);
    },
    _fetchBlockScalar$1$literal(literal) {
      var t1, _this = this;
      _this._removeSimpleKey$0();
      _this._simpleKeyAllowed = true;
      t1 = _this._tokens;
      t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(_this._scanBlockScalar$1$literal(literal)));
    },
    _fetchBlockScalar$0() {
      return this._fetchBlockScalar$1$literal(false);
    },
    _fetchFlowScalar$1$singleQuote(singleQuote) {
      var t1, _this = this;
      _this._saveSimpleKey$0();
      _this._simpleKeyAllowed = false;
      t1 = _this._tokens;
      t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(_this._scanFlowScalar$1$singleQuote(singleQuote)));
    },
    _fetchFlowScalar$0() {
      return this._fetchFlowScalar$1$singleQuote(false);
    },
    _fetchPlainScalar$0() {
      var t1, _this = this;
      _this._saveSimpleKey$0();
      _this._simpleKeyAllowed = false;
      t1 = _this._tokens;
      t1._queue_list$_add$1(t1.$ti._eval$1("QueueList.E")._as(_this._scanPlainScalar$0()));
    },
    _scanToNextToken$0() {
      var t1, t2, afterLineBreak, t3, t4, char, _this = this;
      for (t1 = _this._simpleKeys, t2 = _this._scanner, afterLineBreak = false; true; afterLineBreak = true) {
        if (t2._column === 0)
          t2.scan$1("\ufeff");
        t3 = !afterLineBreak;
        while (true) {
          if (t2.peekChar$0() !== 32)
            t4 = (t1.length !== 1 || t3) && t2.peekChar$0() === 9;
          else
            t4 = true;
          if (!t4)
            break;
          t2._adjustLineAndColumn$1(t2.super$StringScanner$readChar());
        }
        if (t2.peekChar$0() === 9)
          t2.error$2$length(0, "Tab characters are not allowed as indentation.", 1);
        _this._skipComment$0();
        char = t2.peekChar$1(0);
        if (char === 13 || char === 10) {
          _this._skipLine$0();
          if (t1.length === 1)
            _this._simpleKeyAllowed = true;
        } else
          break;
      }
    },
    _scanDirective$0() {
      var $name, major, minor, token, handle, prefix, t2, char, t3, _this = this,
        _s20_ = "Expected whitespace.",
        t1 = _this._scanner,
        start = new A._EagerSpanScannerState(t1._position);
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      $name = _this._scanDirectiveName$0();
      if ($name === "YAML") {
        _this._skipBlanks$0();
        major = _this._scanVersionDirectiveNumber$0();
        t1.expect$1(".");
        minor = _this._scanVersionDirectiveNumber$0();
        token = new A.VersionDirectiveToken(t1.spanFrom$1(start), major, minor);
      } else if ($name === "TAG") {
        _this._skipBlanks$0();
        handle = _this._scanTagHandle$1$directive(true);
        if (!_this._isBlankAt$1(0))
          A.throwExpression(A.YamlException$(_s20_, t1.get$emptySpan()));
        _this._skipBlanks$0();
        prefix = _this._scanTagUri$0();
        if (!_this._isBlankOrEndAt$1(0))
          A.throwExpression(A.YamlException$(_s20_, t1.get$emptySpan()));
        token = new A.TagDirectiveToken(t1.spanFrom$1(start), handle, prefix);
      } else {
        t2 = t1.spanFrom$1(start);
        $.$get$yamlWarningCallback().call$2("Warning: unknown directive.", t2);
        t2 = t1.string.length;
        while (true) {
          if (t1._position !== t2) {
            char = t1.peekChar$1(0);
            t3 = char === 13 || char === 10;
          } else
            t3 = true;
          if (!!t3)
            break;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        }
        return null;
      }
      _this._skipBlanks$0();
      _this._skipComment$0();
      if (!(t1._position === t1.string.length || _this._isBreakAt$1(0)))
        throw A.wrapException(A.YamlException$("Expected comment or line break after directive.", t1.spanFrom$1(start)));
      _this._skipLine$0();
      return token;
    },
    _scanDirectiveName$0() {
      var $name,
        t1 = this._scanner,
        start = t1._position;
      for (; this.get$_isNonSpace();)
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      $name = t1.substring$1(0, start);
      if ($name.length === 0)
        throw A.wrapException(A.YamlException$("Expected directive name.", t1.get$emptySpan()));
      else if (!this._isBlankOrEndAt$1(0))
        throw A.wrapException(A.YamlException$("Unexpected character in directive name.", t1.get$emptySpan()));
      return $name;
    },
    _scanVersionDirectiveNumber$0() {
      var char, number,
        t1 = this._scanner,
        start = t1._position;
      while (true) {
        char = t1.peekChar$0();
        if (!(char != null && char >= 48 && char <= 57))
          break;
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      }
      number = t1.substring$1(0, start);
      if (number.length === 0)
        throw A.wrapException(A.YamlException$("Expected version number.", t1.get$emptySpan()));
      return A.int_parse(number, null);
    },
    _scanAnchor$1$anchor(anchor) {
      var startPosition, $name, next, t2,
        t1 = this._scanner,
        start = new A._EagerSpanScannerState(t1._position);
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      startPosition = t1._position;
      for (; this.get$_isAnchorChar();)
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      $name = t1.substring$1(0, startPosition);
      next = t1.peekChar$0();
      if ($name.length !== 0)
        t2 = !this._isBlankOrEndAt$1(0) && next !== 63 && next !== 58 && next !== 44 && next !== 93 && next !== 125 && next !== 37 && next !== 64 && next !== 96;
      else
        t2 = true;
      if (t2)
        throw A.wrapException(A.YamlException$("Expected alphanumeric character.", t1.get$emptySpan()));
      if (anchor)
        return new A.AnchorToken(t1.spanFrom$1(start), $name);
      else
        return new A.AliasToken(t1.spanFrom$1(start), $name);
    },
    _scanTagHandle$1$directive(directive) {
      var buffer, start, t2, character,
        t1 = this._scanner;
      t1.expect$1("!");
      buffer = new A.StringBuffer("!");
      start = t1._position;
      for (; this.get$_isTagChar();)
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      t2 = buffer._contents += t1.substring$1(0, start);
      if (t1.peekChar$0() === 33) {
        character = t1.super$StringScanner$readChar();
        t1._adjustLineAndColumn$1(character);
        t1 = buffer._contents = t2 + A.Primitives_stringFromCharCode(character);
      } else {
        if (directive && (t2.charCodeAt(0) == 0 ? t2 : t2) !== "!")
          t1.expect$1("!");
        t1 = t2;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _scanTagHandle$0() {
      return this._scanTagHandle$1$directive(false);
    },
    _scanTagUri$2$flowSeparators$head(flowSeparators, head) {
      var t1, start, char, t2;
      if ((head == null ? 0 : head.length) > 1) {
        head.toString;
        B.JSString_methods.substring$1(head, 1);
      }
      t1 = this._scanner;
      start = t1._position;
      char = t1.peekChar$0();
      while (true) {
        if (!this.get$_isTagChar())
          if (flowSeparators)
            t2 = char === 44 || char === 91 || char === 93;
          else
            t2 = false;
        else
          t2 = true;
        if (!t2)
          break;
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        char = t1.peekChar$0();
      }
      t1 = t1.substring$1(0, start);
      return A._Uri__uriDecode(t1, 0, t1.length, B.Utf8Codec_false, false);
    },
    _scanTagUri$0() {
      return this._scanTagUri$2$flowSeparators$head(true, null);
    },
    _scanTagUri$1$flowSeparators(flowSeparators) {
      return this._scanTagUri$2$flowSeparators$head(flowSeparators, null);
    },
    _scanBlockScalar$1$literal(literal) {
      var char, t2, chomping, character, increment, t3, t4, indent, pair, trailingBreaks, buffer, end, leadingBreak, leadingBlank, t5, t6, trailingBlank, startPosition, end0, _this = this,
        _s46_ = "0 may not be used as an indentation indicator.",
        t1 = _this._scanner,
        start = new A._EagerSpanScannerState(t1._position);
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      char = t1.peekChar$0();
      t2 = char === 43;
      if (t2 || char === 45) {
        chomping = t2 ? B._Chomping_2 : B._Chomping_0;
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        if (_this.get$_isDigit()) {
          if (t1.peekChar$0() === 48)
            throw A.wrapException(A.YamlException$(_s46_, t1.spanFrom$1(start)));
          character = t1.super$StringScanner$readChar();
          t1._adjustLineAndColumn$1(character);
          increment = character - 48;
        } else
          increment = 0;
      } else if (_this.get$_isDigit()) {
        if (t1.peekChar$0() === 48)
          throw A.wrapException(A.YamlException$(_s46_, t1.spanFrom$1(start)));
        character = t1.super$StringScanner$readChar();
        t1._adjustLineAndColumn$1(character);
        increment = character - 48;
        char = t1.peekChar$0();
        t2 = char === 43;
        if (t2 || char === 45) {
          chomping = t2 ? B._Chomping_2 : B._Chomping_0;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        } else
          chomping = B._Chomping_1;
      } else {
        chomping = B._Chomping_1;
        increment = 0;
      }
      _this._skipBlanks$0();
      _this._skipComment$0();
      t2 = t1.string;
      t3 = t2.length;
      if (!(t1._position === t3 || _this._isBreakAt$1(0)))
        throw A.wrapException(A.YamlException$("Expected comment or line break.", t1.get$emptySpan()));
      _this._skipLine$0();
      if (increment !== 0) {
        t4 = _this._indents;
        indent = B.JSArray_methods.get$last(t4) >= 0 ? B.JSArray_methods.get$last(t4) + increment : increment;
      } else
        indent = 0;
      pair = _this._scanBlockScalarBreaks$1(indent);
      indent = pair.first;
      trailingBreaks = pair.last;
      buffer = new A.StringBuffer("");
      end = new A._EagerSpanScannerState(t1._position);
      t4 = !literal;
      leadingBreak = "";
      leadingBlank = false;
      t5 = "";
      while (true) {
        t6 = t1._column;
        if (!(t6 === indent && t1._position !== t3))
          break;
        if (t6 === 0) {
          char = t1.peekChar$1(3);
          if (char == null || char === 32 || char === 9 || char === 13 || char === 10)
            t6 = t1.matches$1("---") || t1.matches$1("...");
          else
            t6 = false;
        } else
          t6 = false;
        if (t6)
          break;
        char = t1.peekChar$1(0);
        trailingBlank = char === 32 || char === 9;
        if (t4 && leadingBreak.length !== 0 && !leadingBlank && !trailingBlank) {
          if (trailingBreaks.length === 0) {
            t5 += A.Primitives_stringFromCharCode(32);
            buffer._contents = t5;
          }
        } else
          t5 = buffer._contents = t5 + leadingBreak;
        buffer._contents = t5 + trailingBreaks;
        char = t1.peekChar$1(0);
        leadingBlank = char === 32 || char === 9;
        startPosition = t1._position;
        while (true) {
          if (t1._position !== t3) {
            char = t1.peekChar$1(0);
            t5 = char === 13 || char === 10;
          } else
            t5 = true;
          if (!!t5)
            break;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        }
        end = t1._position;
        t5 = buffer._contents += B.JSString_methods.substring$2(t2, startPosition, end);
        end0 = new A._EagerSpanScannerState(end);
        leadingBreak = end !== t3 ? _this._readLine$0() : "";
        pair = _this._scanBlockScalarBreaks$1(indent);
        indent = pair.first;
        trailingBreaks = pair.last;
        end = end0;
      }
      if (chomping !== B._Chomping_0) {
        t2 = t5 + leadingBreak;
        buffer._contents = t2;
      } else
        t2 = t5;
      if (chomping === B._Chomping_2)
        t2 = buffer._contents = t2 + trailingBreaks;
      t1 = t1.spanFrom$2(start, end);
      t3 = literal ? B.ScalarStyle_LITERAL : B.ScalarStyle_FOLDED;
      return new A.ScalarToken(t1, t2.charCodeAt(0) == 0 ? t2 : t2, t3);
    },
    _scanBlockScalarBreaks$1(indent) {
      var t1, t2, t3, maxIndent, maxIndent0, char,
        breaks = new A.StringBuffer("");
      for (t1 = this._scanner, t2 = indent === 0, t3 = !t2, maxIndent = 0; true;) {
        while (true) {
          if (!((!t3 || t1._column < indent) && t1.peekChar$0() === 32))
            break;
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        }
        maxIndent0 = t1._column;
        if (maxIndent0 > maxIndent)
          maxIndent = maxIndent0;
        char = t1.peekChar$1(0);
        if (!(char === 13 || char === 10))
          break;
        breaks._contents += this._readLine$0();
      }
      if (t2) {
        t1 = this._indents;
        indent = maxIndent < B.JSArray_methods.get$last(t1) + 1 ? B.JSArray_methods.get$last(t1) + 1 : maxIndent;
      }
      t1 = breaks._contents;
      return new A.Pair(indent, t1.charCodeAt(0) == 0 ? t1 : t1, type$.Pair_int_String);
    },
    _scanFlowScalar$1$singleQuote(singleQuote) {
      var t3, t4, char, t5, leadingBlanks, char0, escapeStart, codeLength, value, i, character, whitespace, trailingBreaks, leadingBreak, _this = this, _null = null,
        t1 = _this._scanner,
        t2 = t1._position,
        buffer = new A.StringBuffer("");
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      for (t3 = !singleQuote, t4 = t1.string.length; true;) {
        if (t1._column === 0) {
          char = t1.peekChar$1(3);
          if (char == null || char === 32 || char === 9 || char === 13 || char === 10)
            t5 = t1.matches$1("---") || t1.matches$1("...");
          else
            t5 = false;
        } else
          t5 = false;
        if (t5)
          t1.error$1(0, "Unexpected document indicator.");
        if (t1._position === t4)
          throw A.wrapException(A.YamlException$("Unexpected end of file.", t1.get$emptySpan()));
        while (true) {
          char = t1.peekChar$1(0);
          if (!!(char == null || char === 32 || char === 9 || char === 13 || char === 10)) {
            leadingBlanks = false;
            break;
          }
          char = t1.peekChar$0();
          if (singleQuote && char === 39 && t1.peekChar$1(1) === 39) {
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
            buffer._contents += A.Primitives_stringFromCharCode(39);
          } else if (char === (singleQuote ? 39 : 34)) {
            leadingBlanks = false;
            break;
          } else {
            if (t3)
              if (char === 92) {
                char0 = t1.peekChar$1(1);
                t5 = char0 === 13 || char0 === 10;
              } else
                t5 = false;
            else
              t5 = false;
            if (t5) {
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              _this._skipLine$0();
              leadingBlanks = true;
              break;
            } else if (t3 && char === 92) {
              escapeStart = new A._EagerSpanScannerState(t1._position);
              switch (t1.peekChar$1(1)) {
                case 48:
                  buffer._contents += A.Primitives_stringFromCharCode(0);
                  codeLength = _null;
                  break;
                case 97:
                  buffer._contents += A.Primitives_stringFromCharCode(7);
                  codeLength = _null;
                  break;
                case 98:
                  buffer._contents += A.Primitives_stringFromCharCode(8);
                  codeLength = _null;
                  break;
                case 116:
                case 9:
                  buffer._contents += A.Primitives_stringFromCharCode(9);
                  codeLength = _null;
                  break;
                case 110:
                  buffer._contents += A.Primitives_stringFromCharCode(10);
                  codeLength = _null;
                  break;
                case 118:
                  buffer._contents += A.Primitives_stringFromCharCode(11);
                  codeLength = _null;
                  break;
                case 102:
                  buffer._contents += A.Primitives_stringFromCharCode(12);
                  codeLength = _null;
                  break;
                case 114:
                  buffer._contents += A.Primitives_stringFromCharCode(13);
                  codeLength = _null;
                  break;
                case 101:
                  buffer._contents += A.Primitives_stringFromCharCode(27);
                  codeLength = _null;
                  break;
                case 32:
                case 34:
                case 47:
                case 92:
                  t5 = t1.peekChar$1(1);
                  t5.toString;
                  buffer._contents += A.Primitives_stringFromCharCode(t5);
                  codeLength = _null;
                  break;
                case 78:
                  buffer._contents += A.Primitives_stringFromCharCode(133);
                  codeLength = _null;
                  break;
                case 95:
                  buffer._contents += A.Primitives_stringFromCharCode(160);
                  codeLength = _null;
                  break;
                case 76:
                  buffer._contents += A.Primitives_stringFromCharCode(8232);
                  codeLength = _null;
                  break;
                case 80:
                  buffer._contents += A.Primitives_stringFromCharCode(8233);
                  codeLength = _null;
                  break;
                case 120:
                  codeLength = 2;
                  break;
                case 117:
                  codeLength = 4;
                  break;
                case 85:
                  codeLength = 8;
                  break;
                default:
                  throw A.wrapException(A.YamlException$("Unknown escape character.", t1.spanFrom$1(escapeStart)));
              }
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
              if (codeLength != null) {
                for (value = 0, i = 0; i < codeLength; ++i) {
                  if (!_this.get$_isHex()) {
                    t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
                    throw A.wrapException(A.YamlException$("Expected " + A.S(codeLength) + "-digit hexidecimal number.", t1.spanFrom$1(escapeStart)));
                  }
                  character = t1.super$StringScanner$readChar();
                  t1._adjustLineAndColumn$1(character);
                  value = (value << 4 >>> 0) + _this._asHex$1(character);
                }
                if (value >= 55296 && value <= 57343 || value > 1114111)
                  throw A.wrapException(A.YamlException$("Invalid Unicode character escape code.", t1.spanFrom$1(escapeStart)));
                buffer._contents += A.Primitives_stringFromCharCode(value);
              }
            } else {
              character = t1.super$StringScanner$readChar();
              t1._adjustLineAndColumn$1(character);
              buffer._contents += A.Primitives_stringFromCharCode(character);
            }
          }
        }
        t5 = t1.peekChar$0();
        if (t5 === (singleQuote ? 39 : 34))
          break;
        whitespace = new A.StringBuffer("");
        trailingBreaks = new A.StringBuffer("");
        leadingBreak = "";
        while (true) {
          char = t1.peekChar$1(0);
          if (!(char === 32 || char === 9)) {
            char = t1.peekChar$1(0);
            t5 = char === 13 || char === 10;
          } else
            t5 = true;
          if (!t5)
            break;
          char = t1.peekChar$1(0);
          if (char === 32 || char === 9)
            if (!leadingBlanks) {
              character = t1.super$StringScanner$readChar();
              t1._adjustLineAndColumn$1(character);
              whitespace._contents += A.Primitives_stringFromCharCode(character);
            } else
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
          else if (!leadingBlanks) {
            whitespace._contents = "";
            leadingBreak = _this._readLine$0();
            leadingBlanks = true;
          } else
            trailingBreaks._contents += _this._readLine$0();
        }
        if (leadingBlanks)
          if (leadingBreak.length !== 0 && trailingBreaks._contents.length === 0)
            buffer._contents += A.Primitives_stringFromCharCode(32);
          else
            buffer._contents += trailingBreaks.toString$0(0);
        else {
          buffer._contents += whitespace.toString$0(0);
          whitespace._contents = "";
        }
      }
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      t1 = t1.spanFrom$1(new A._EagerSpanScannerState(t2));
      t2 = buffer._contents;
      t3 = singleQuote ? B.ScalarStyle_SINGLE_QUOTED : B.ScalarStyle_DOUBLE_QUOTED;
      return new A.ScalarToken(t1, t2.charCodeAt(0) == 0 ? t2 : t2, t3);
    },
    _scanPlainScalar$0() {
      var t3, leadingBreak, trailingBreaks, char, t4, startPosition, character, _this = this,
        t1 = _this._scanner,
        t2 = t1._position,
        end = new A._EagerSpanScannerState(t2),
        buffer = new A.StringBuffer(""),
        whitespace = new A.StringBuffer(""),
        indent = B.JSArray_methods.get$last(_this._indents) + 1;
      for (t3 = _this._simpleKeys, leadingBreak = "", trailingBreaks = ""; true;) {
        if (t1._column === 0) {
          char = t1.peekChar$1(3);
          if (char == null || char === 32 || char === 9 || char === 13 || char === 10)
            t4 = t1.matches$1("---") || t1.matches$1("...");
          else
            t4 = false;
        } else
          t4 = false;
        if (t4)
          break;
        if (t1.peekChar$0() === 35)
          break;
        if (_this._isPlainCharAt$1(0))
          if (leadingBreak.length !== 0) {
            if (trailingBreaks.length === 0)
              buffer._contents += A.Primitives_stringFromCharCode(32);
            else
              buffer._contents += trailingBreaks;
            leadingBreak = "";
            trailingBreaks = "";
          } else {
            buffer._contents += whitespace.toString$0(0);
            whitespace._contents = "";
          }
        startPosition = t1._position;
        for (; _this._isPlainCharAt$1(0);)
          t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
        end = t1._position;
        buffer._contents += B.JSString_methods.substring$2(t1.string, startPosition, end);
        end = new A._EagerSpanScannerState(end);
        char = t1.peekChar$1(0);
        if (!(char === 32 || char === 9)) {
          char = t1.peekChar$1(0);
          t4 = !(char === 13 || char === 10);
        } else
          t4 = false;
        if (t4)
          break;
        while (true) {
          char = t1.peekChar$1(0);
          if (!(char === 32 || char === 9)) {
            char = t1.peekChar$1(0);
            t4 = char === 13 || char === 10;
          } else
            t4 = true;
          if (!t4)
            break;
          char = t1.peekChar$1(0);
          if (char === 32 || char === 9) {
            t4 = leadingBreak.length === 0;
            if (!t4 && t1._column < indent && t1.peekChar$0() === 9)
              t1.error$2$length(0, "Expected a space but found a tab.", 1);
            if (t4) {
              character = t1.super$StringScanner$readChar();
              t1._adjustLineAndColumn$1(character);
              whitespace._contents += A.Primitives_stringFromCharCode(character);
            } else
              t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
          } else if (leadingBreak.length === 0) {
            leadingBreak = _this._readLine$0();
            whitespace._contents = "";
          } else
            trailingBreaks = _this._readLine$0();
        }
        if (t3.length === 1 && t1._column < indent)
          break;
      }
      if (leadingBreak.length !== 0)
        _this._simpleKeyAllowed = true;
      t1 = t1.spanFrom$2(new A._EagerSpanScannerState(t2), end);
      t2 = buffer._contents;
      return new A.ScalarToken(t1, t2.charCodeAt(0) == 0 ? t2 : t2, B.ScalarStyle_PLAIN);
    },
    _skipLine$0() {
      var t1 = this._scanner,
        char = t1.peekChar$0(),
        t2 = char === 13;
      if (!t2 && char !== 10)
        return;
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      if (t2 && t1.peekChar$0() === 10)
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
    },
    _readLine$0() {
      var t1 = this._scanner,
        char = t1.peekChar$0(),
        t2 = char === 13;
      if (!t2 && char !== 10)
        throw A.wrapException(A.YamlException$("Expected newline.", t1.get$emptySpan()));
      t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      if (t2 && t1.peekChar$0() === 10)
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      return "\n";
    },
    _isBlankAt$1(offset) {
      var char = this._scanner.peekChar$1(offset);
      return char === 32 || char === 9;
    },
    _isBreakAt$1(offset) {
      var char = this._scanner.peekChar$1(offset);
      return char === 13 || char === 10;
    },
    _isBlankOrEndAt$1(offset) {
      var char = this._scanner.peekChar$1(offset);
      return char == null || char === 32 || char === 9 || char === 13 || char === 10;
    },
    _isPlainCharAt$1(offset) {
      var previous,
        t1 = this._scanner;
      switch (t1.peekChar$1(offset)) {
        case 58:
          return this._isPlainSafeAt$1(offset + 1);
        case 35:
          previous = t1.peekChar$1(offset - 1);
          return previous !== 32 && previous !== 9;
        default:
          return this._isPlainSafeAt$1(offset);
      }
    },
    _isPlainSafeAt$1(offset) {
      var t1,
        char = this._scanner.peekChar$1(offset);
      switch (char) {
        case 44:
        case 91:
        case 93:
        case 123:
        case 125:
          return this._simpleKeys.length === 1;
        case 32:
        case 9:
        case 10:
        case 13:
        case 65279:
          return false;
        case 133:
          return true;
        default:
          if (char != null)
            if (!(char >= 32 && char <= 126))
              if (!(char >= 160 && char <= 55295))
                if (!(char >= 57344 && char <= 65533))
                  t1 = char >= 65536 && char <= 1114111;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = false;
          return t1;
      }
    },
    _asHex$1(char) {
      if (char <= 57)
        return char - 48;
      if (char <= 70)
        return 10 + char - 65;
      return 10 + char - 97;
    },
    _skipBlanks$0() {
      var char,
        t1 = this._scanner;
      while (true) {
        char = t1.peekChar$1(0);
        if (!(char === 32 || char === 9))
          break;
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      }
    },
    _skipComment$0() {
      var t2, char, t3,
        t1 = this._scanner;
      if (t1.peekChar$0() !== 35)
        return;
      t2 = t1.string.length;
      while (true) {
        if (t1._position !== t2) {
          char = t1.peekChar$1(0);
          t3 = char === 13 || char === 10;
        } else
          t3 = true;
        if (!!t3)
          break;
        t1._adjustLineAndColumn$1(t1.super$StringScanner$readChar());
      }
    }
  };
  A.Scanner__fetchMoreTokens_closure.prototype = {
    call$1(key) {
      type$.nullable__SimpleKey._as(key);
      return key != null && key.tokenNumber === this.$this._tokensParsed;
    },
    $signature: 210
  };
  A._SimpleKey.prototype = {};
  A._Chomping.prototype = {
    _enumToString$0() {
      return "_Chomping." + this._core$_name;
    }
  };
  A.ScalarStyle.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.CollectionStyle.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.Token.prototype = {
    toString$0(_) {
      return this.type._enumToString$0();
    },
    get$type(receiver) {
      return this.type;
    },
    get$span() {
      return this.span;
    }
  };
  A.VersionDirectiveToken.prototype = {
    get$type(_) {
      return B.TokenType_2;
    },
    toString$0(_) {
      return "VERSION_DIRECTIVE " + this.major + "." + this.minor;
    },
    $isToken: 1,
    get$span() {
      return this.span;
    }
  };
  A.TagDirectiveToken.prototype = {
    get$type(_) {
      return B.TokenType_3;
    },
    toString$0(_) {
      return "TAG_DIRECTIVE " + this.handle + " " + this.prefix;
    },
    $isToken: 1,
    get$span() {
      return this.span;
    }
  };
  A.AnchorToken.prototype = {
    get$type(_) {
      return B.TokenType_18;
    },
    toString$0(_) {
      return "ANCHOR " + this.name;
    },
    $isToken: 1,
    get$span() {
      return this.span;
    }
  };
  A.AliasToken.prototype = {
    get$type(_) {
      return B.TokenType_17;
    },
    toString$0(_) {
      return "ALIAS " + this.name;
    },
    $isToken: 1,
    get$span() {
      return this.span;
    }
  };
  A.TagToken.prototype = {
    get$type(_) {
      return B.TokenType_19;
    },
    toString$0(_) {
      return "TAG " + A.S(this.handle) + " " + this.suffix;
    },
    $isToken: 1,
    get$span() {
      return this.span;
    }
  };
  A.ScalarToken.prototype = {
    get$type(_) {
      return B.TokenType_20;
    },
    toString$0(_) {
      return "SCALAR " + this.style.toString$0(0) + ' "' + this.value + '"';
    },
    $isToken: 1,
    get$span() {
      return this.span;
    }
  };
  A.TokenType.prototype = {
    _enumToString$0() {
      return "TokenType." + this._core$_name;
    }
  };
  A.Pair.prototype = {
    toString$0(_) {
      return "(" + A.S(this.first) + ", " + A.S(this.last) + ")";
    }
  };
  A.yamlWarningCallback_closure.prototype = {
    call$2(message, span) {
      message = span.message$1(0, message);
      A.print(message);
    },
    call$1(message) {
      return this.call$2(message, null);
    },
    $signature: 211
  };
  A.YamlDocument.prototype = {
    toString$0(_) {
      var t1 = this.contents;
      return t1.toString$0(t1);
    }
  };
  A.VersionDirective.prototype = {
    toString$0(_) {
      return "%YAML " + this.major + "." + this.minor;
    }
  };
  A.TagDirective.prototype = {
    toString$0(_) {
      return "%TAG " + this.handle + " " + this.prefix;
    }
  };
  A.YamlException.prototype = {};
  A.YamlNode.prototype = {
    get$span() {
      return this._yaml_node$_span;
    }
  };
  A.YamlMap.prototype = {
    get$value() {
      return this;
    },
    get$keys(_) {
      var t1 = this.nodes._map;
      t1 = t1.get$keys(t1);
      return t1.map$1$1(t1, new A.YamlMap_keys_closure(), type$.dynamic);
    },
    $index(_, key) {
      var t1 = this.nodes._map.$index(0, key);
      return t1 == null ? null : t1.get$value();
    },
    $isMap: 1,
    get$nodes() {
      return this.nodes;
    },
    get$style() {
      return this.style;
    }
  };
  A.YamlMap_keys_closure.prototype = {
    call$1(node) {
      return type$.YamlNode._as(node).get$value();
    },
    $signature: 8
  };
  A.YamlList.prototype = {
    get$value() {
      return this;
    },
    get$length(_) {
      return J.get$length$asx(this.nodes._collection$_source);
    },
    set$length(_, index) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List"));
    },
    $index(_, index) {
      return J.elementAt$1$ax(this.nodes._collection$_source, index).get$value();
    },
    $indexSet(_, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1,
    get$nodes() {
      return this.nodes;
    },
    get$style() {
      return this.style;
    }
  };
  A.YamlScalar.prototype = {
    toString$0(_) {
      return J.toString$0$(this.value);
    },
    get$value() {
      return this.value;
    },
    get$style() {
      return this.style;
    }
  };
  A._YamlList_YamlNode_ListMixin.prototype = {};
  A._YamlMap_YamlNode_MapMixin.prototype = {};
  A._YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin.prototype = {};
  A.YamlMapWrapper.prototype = {
    get$value() {
      return this;
    },
    get$keys(_) {
      var t1 = this._dartMap;
      return t1.get$keys(t1);
    },
    $index(_, key) {
      var value = this._dartMap.$index(0, key);
      if (type$.Map_dynamic_dynamic._is(value))
        return A.YamlMapWrapper$_(value, this.span, B.CollectionStyle_ANY);
      if (type$.List_dynamic._is(value))
        return A.YamlListWrapper$_(value, this.span);
      return value;
    },
    get$hashCode(_) {
      var t1 = this._dartMap;
      return t1.get$hashCode(t1);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.YamlMapWrapper && other._dartMap.$eq(0, this._dartMap);
    },
    $isYamlNode: 1,
    $isYamlMap: 1,
    get$style() {
      return this.style;
    },
    get$span() {
      return this.span;
    },
    get$nodes() {
      return this.nodes;
    }
  };
  A._YamlMapNodes.prototype = {
    get$keys(_) {
      var t1 = this._dartMap;
      t1 = t1.get$keys(t1);
      return t1.map$1$1(t1, new A._YamlMapNodes_keys_closure(this), type$.dynamic);
    },
    $index(_, key) {
      var t1;
      if (type$.YamlScalar._is(key))
        key = key.get$value();
      t1 = this._dartMap;
      if (!t1.containsKey$1(key))
        return null;
      return A._nodeForValue(t1.$index(0, key), this._yaml_node_wrapper$_span);
    },
    get$hashCode(_) {
      var t1 = this._dartMap;
      return t1.get$hashCode(t1);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._YamlMapNodes && other._dartMap.$eq(0, this._dartMap);
    }
  };
  A._YamlMapNodes_keys_closure.prototype = {
    call$1(key) {
      return new A.YamlScalar(key, B.ScalarStyle_ANY, this.$this._yaml_node_wrapper$_span);
    },
    $signature: 212
  };
  A.YamlListWrapper.prototype = {
    get$value() {
      return this;
    },
    get$length(_) {
      return J.get$length$asx(this._dartList);
    },
    set$length(_, index) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List."));
    },
    $index(_, index) {
      var value = J.$index$asx(this._dartList, index);
      if (type$.Map_dynamic_dynamic._is(value))
        return A.YamlMapWrapper$_(value, this.span, B.CollectionStyle_ANY);
      if (type$.List_dynamic._is(value))
        return A.YamlListWrapper$_(value, this.span);
      return value;
    },
    $indexSet(_, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List."));
    },
    get$hashCode(_) {
      return J.get$hashCode$(this._dartList);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.YamlListWrapper && J.$eq$(other._dartList, this._dartList);
    },
    $isYamlNode: 1,
    $isYamlList: 1,
    get$style() {
      return B.CollectionStyle_ANY;
    },
    get$span() {
      return this.span;
    },
    get$nodes() {
      return this.nodes;
    }
  };
  A._YamlListNodes.prototype = {
    get$length(_) {
      return J.get$length$asx(this._dartList);
    },
    set$length(_, index) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List."));
    },
    $index(_, index) {
      return A._nodeForValue(J.$index$asx(this._dartList, A._asInt(index)), this._yaml_node_wrapper$_span);
    },
    $indexSet(_, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List."));
    },
    get$hashCode(_) {
      return J.get$hashCode$(this._dartList);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._YamlListNodes && J.$eq$(other._dartList, this._dartList);
    }
  };
  A._YamlMapWrapper_MapBase_UnmodifiableMapMixin.prototype = {};
  A.__YamlMapNodes_MapBase_UnmodifiableMapMixin.prototype = {};
  A.YamlEditor.prototype = {
    toString$0(_) {
      return this._yaml;
    },
    _initialize$0() {
      var t1 = type$.YamlNode;
      this.set$_aliases(A.LinkedHashSet_LinkedHashSet$_empty(t1));
      new A.YamlEditor__initialize_collectAliases(this, A.LinkedHashSet_LinkedHashSet$_empty(t1)).call$1(this._editor$_contents);
    },
    update$2(path, value) {
      var t1, start, pathAsList, collectionPath, keyOrIndex, parentNode, expected, expectedMap, _this = this,
        valueNode = A.wrapAsYamlNode(value, B.CollectionStyle_ANY, B.ScalarStyle_ANY);
      if (path.length === 0) {
        t1 = _this._editor$_contents._yaml_node$_span;
        start = t1.get$start(t1).get$offset();
        return _this._performEdit$3(A.SourceEdit$_(start, A.getContentSensitiveEnd(_this._editor$_contents) - start, A.yamlEncodeBlockString(valueNode, 0, A.getLineEnding(_this._yaml))), path, valueNode);
      }
      pathAsList = A._setArrayType(path.slice(0), A._arrayInstanceType(path));
      collectionPath = A.SubListIterable$(pathAsList, 0, A.checkNotNullable(path.length - 1, "count", type$.int), A._arrayInstanceType(pathAsList)._precomputed1);
      keyOrIndex = B.JSArray_methods.get$last(pathAsList);
      parentNode = _this._traverse$2$checkAlias(collectionPath, true);
      if (type$.YamlList._is(parentNode)) {
        if (!A._isInt(keyOrIndex))
          throw A.wrapException(A.PathError$(path, path, parentNode));
        t1 = A.List_List$of(parentNode.get$nodes(), true, type$.YamlNode);
        B.JSArray_methods.$indexSet(t1, keyOrIndex, valueNode);
        expected = A.wrapAsYamlNode(t1, B.CollectionStyle_ANY, B.ScalarStyle_ANY);
        return _this._performEdit$3(A.updateInList(_this, parentNode, keyOrIndex, valueNode), collectionPath, expected);
      }
      if (type$.YamlMap._is(parentNode)) {
        expectedMap = A.updatedYamlMap(parentNode, new A.YamlEditor_update_closure(keyOrIndex, valueNode));
        return _this._performEdit$3(A.updateInMap(_this, parentNode, keyOrIndex, valueNode), collectionPath, expectedMap);
      }
      throw A.wrapException(new A.PathError(path, path, null, false, null, null, "Scalar " + parentNode.toString$0(parentNode) + " does not have key " + A.S(keyOrIndex)));
    },
    _traverse$3$checkAlias$orElse(path, checkAlias, orElse) {
      var currentNode, pathList, t2, t3, i, keyOrIndex, t4, keyNode, _this = this,
        t1 = J.getInterceptor$asx(path);
      if (t1.get$isEmpty(path))
        return _this._editor$_contents;
      currentNode = _this._editor$_contents;
      pathList = t1.toList$0(path);
      for (t2 = type$.YamlMap, t3 = type$.YamlList, i = 0; i < pathList.length; ++i) {
        keyOrIndex = pathList[i];
        if (checkAlias && _this._aliases.contains$1(0, currentNode))
          throw A.wrapException(A.AliasError$(path, currentNode));
        if (t3._is(currentNode)) {
          t4 = currentNode.get$length(currentNode);
          if (!(A._isInt(keyOrIndex) && keyOrIndex >= 0 && keyOrIndex < t4))
            return _this._pathErrorOrElse$4(path, t1.take$1(path, i + 1), currentNode, orElse);
          currentNode = J.$index$asx(currentNode.get$nodes(), A._asInt(keyOrIndex));
        } else {
          if (t2._is(currentNode)) {
            if (!A.containsKey(currentNode, keyOrIndex))
              return _this._pathErrorOrElse$4(path, t1.take$1(path, i + 1), currentNode, orElse);
            keyNode = A.getKeyNode(currentNode, keyOrIndex);
            if (checkAlias)
              if (_this._aliases.contains$1(0, keyNode))
                throw A.wrapException(A.AliasError$(path, keyNode));
            t4 = currentNode.get$nodes().$index(0, keyNode);
            t4.toString;
          } else
            return _this._pathErrorOrElse$4(path, t1.take$1(path, i + 1), currentNode, orElse);
          currentNode = t4;
        }
      }
      if (checkAlias)
        _this._assertNoChildAlias$2(path, currentNode);
      return currentNode;
    },
    _traverse$2$checkAlias(path, checkAlias) {
      return this._traverse$3$checkAlias$orElse(path, checkAlias, null);
    },
    _traverse$1(path) {
      return this._traverse$3$checkAlias$orElse(path, false, null);
    },
    _traverse$2$orElse(path, orElse) {
      return this._traverse$3$checkAlias$orElse(path, false, orElse);
    },
    _pathErrorOrElse$4(path, subPath, $parent, orElse) {
      var t1 = A.PathError$(path, subPath, $parent);
      throw A.wrapException(t1);
    },
    _assertNoChildAlias$2(path, node) {
      var t1, i, t2, keyList, t3, _this = this;
      if (node == null)
        return _this._assertNoChildAlias$2(path, _this._traverse$1(path));
      if (_this._aliases.contains$1(0, node))
        throw A.wrapException(A.AliasError$(path, node));
      if (type$.YamlScalar._is(node))
        return;
      if (type$.YamlList._is(node))
        for (t1 = type$.nullable_Object, i = 0; i < node.get$length(node); ++i) {
          t2 = A.List_List$of(path, true, t1);
          t2.push(i);
          _this._assertNoChildAlias$2(t2, J.$index$asx(node.get$nodes(), i));
        }
      if (type$.YamlMap._is(node)) {
        t1 = node.get$keys(node);
        keyList = t1.toList$0(t1);
        for (t1 = type$.dynamic, i = 0; t2 = node.get$keys(node), i < t2.get$length(t2); ++i) {
          t2 = A.List_List$of(path, true, t1);
          if (!(i < keyList.length))
            return A.ioore(keyList, i);
          t2.push(keyList[i]);
          t3 = _this._aliases;
          if (!(i < keyList.length))
            return A.ioore(keyList, i);
          if (t3.contains$1(0, keyList[i])) {
            if (!(i < keyList.length))
              return A.ioore(keyList, i);
            throw A.wrapException(A.AliasError$(path, type$.YamlNode._as(keyList[i])));
          }
          t3 = node.get$nodes();
          if (!(i < keyList.length))
            return A.ioore(keyList, i);
          _this._assertNoChildAlias$2(t2, t3.$index(0, keyList[i]));
        }
      }
    },
    _performEdit$3(edit, path, expectedNode) {
      var exception, actualTree, _this = this,
        expectedTree = _this._deepModify$4(_this._editor$_contents, path, [], expectedNode),
        initialYaml0 = _this._yaml,
        initialYaml = initialYaml0,
        t1 = edit.offset;
      _this._yaml = B.JSString_methods.replaceRange$3(initialYaml0, t1, t1 + edit.length, edit.replacement);
      try {
        _this._initialize$0();
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.YamlException)
          throw A.wrapException(A.createAssertionError("Failed to produce valid YAML after modification.", initialYaml, _this._yaml));
        else
          throw exception;
      }
      actualTree = A.loadYamlNode(_this._yaml, null);
      if (!A.deepEquals(actualTree, expectedTree))
        throw A.wrapException(A.createAssertionError("Modification did not result in expected result.", initialYaml, _this._yaml));
      _this._editor$_contents = actualTree;
      B.JSArray_methods.add$1(_this._edits, edit);
    },
    _deepModify$4(tree, path, subPath, expectedNode) {
      var keyOrIndex, t3,
        t1 = J.getInterceptor$asx(subPath),
        t2 = J.getInterceptor$asx(path);
      A.RangeError_checkValueInInterval(t1.get$length(subPath), 0, t2.get$length(path), null);
      if (t2.get$length(path) === t1.get$length(subPath))
        return expectedNode;
      keyOrIndex = t2.elementAt$1(path, t1.get$length(subPath));
      if (type$.YamlList._is(tree)) {
        if (!A.isValidIndex(keyOrIndex, tree.get$length(tree)))
          throw A.wrapException(A.PathError$(path, subPath, tree));
        t3 = A.List_List$of(tree.get$nodes(), true, type$.YamlNode);
        A._asInt(keyOrIndex);
        B.JSArray_methods.$indexSet(t3, keyOrIndex, this._deepModify$4(J.$index$asx(tree.get$nodes(), keyOrIndex), path, t2.take$1(path, t1.get$length(subPath) + 1), expectedNode));
        return A.wrapAsYamlNode(t3, B.CollectionStyle_ANY, B.ScalarStyle_ANY);
      }
      if (type$.YamlMap._is(tree))
        return A.updatedYamlMap(tree, new A.YamlEditor__deepModify_closure(this, keyOrIndex, path, subPath, expectedNode));
      throw A.wrapException(A.PathError$(path, subPath, tree));
    },
    set$_aliases(_aliases) {
      this._aliases = type$.Set_YamlNode._as(_aliases);
    }
  };
  A.YamlEditor__initialize_collectAliases.prototype = {
    call$1(node) {
      var _this = this;
      type$.YamlNode._as(node);
      if (_this.visited.add$1(0, node)) {
        if (type$.YamlMap._is(node))
          node.get$nodes().forEach$1(0, new A.YamlEditor__initialize_collectAliases_closure(_this));
        else if (type$.YamlList._is(node))
          J.forEach$1$ax(node.get$nodes(), _this);
      } else
        _this.$this._aliases.add$1(0, node);
    },
    $signature: 213
  };
  A.YamlEditor__initialize_collectAliases_closure.prototype = {
    call$2(key, value) {
      var t2,
        t1 = type$.YamlNode;
      t1._as(value);
      t2 = this.collectAliases;
      t2.call$1(t1._as(key));
      t2.call$1(value);
    },
    $signature: 214
  };
  A.YamlEditor_update_closure.prototype = {
    call$1(nodes) {
      var t1 = this.valueNode;
      nodes.$indexSet(0, this.keyOrIndex, t1);
      return t1;
    },
    $signature: 73
  };
  A.YamlEditor__deepModify_closure.prototype = {
    call$1(nodes) {
      var _this = this,
        t1 = _this.keyOrIndex,
        t2 = _this.path;
      t2 = _this.$this._deepModify$4(type$.YamlNode._as(nodes.$index(0, t1)), t2, J.take$1$ax(t2, J.get$length$asx(_this.subPath) + 1), _this.expectedNode);
      nodes.$indexSet(0, t1, t2);
      return t2;
    },
    $signature: 73
  };
  A.mapDeepEquals_closure.prototype = {
    call$1(key) {
      var key2,
        t1 = this._box_0;
      if (!A.containsKey(t1.map2, key))
        return false;
      key2 = A.getKey(t1.map2, key);
      if (!A.deepEquals(t1.map1.$index(0, key), t1.map2.$index(0, key2)))
        return false;
      return true;
    },
    $signature: 5
  };
  A.getKeyNode_closure.prototype = {
    call$1(node) {
      return A.deepEquals(node, this.key);
    },
    $signature: 5
  };
  A.getKey_closure.prototype = {
    call$1(k) {
      return A.deepEquals(k, this.key);
    },
    $signature: 5
  };
  A.containsKey_closure.prototype = {
    call$1(node) {
      return A.deepEquals(node, this.key);
    },
    $signature: 5
  };
  A.PathError.prototype = {
    toString$0(_) {
      var errorMessage, t2, _this = this,
        t1 = _this.message;
      if (t1 == null) {
        t1 = _this.subPath;
        errorMessage = "Failed to traverse to subpath " + A.S(t1) + "!";
        t2 = J.getInterceptor$asx(t1);
        if (t2.get$isNotEmpty(t1))
          errorMessage += " Parent " + A.S(_this.parent) + " does not contain key or index " + A.S(t2.get$last(t1));
        return "Invalid path: " + A.S(_this.path) + ". " + errorMessage + ".";
      }
      return "Invalid path: " + A.S(_this.path) + ". " + A.S(t1);
    }
  };
  A.AliasError.prototype = {};
  A._YamlAssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.S(t1);
      return "Assertion failed";
    }
  };
  A.SourceEdit.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.SourceEdit)
        return this.offset === other.offset && this.length === other.length && this.replacement === other.replacement;
      return false;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.offset) ^ B.JSInt_methods.get$hashCode(this.length) ^ B.JSString_methods.get$hashCode(this.replacement);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["offset", this.offset, "length", this.length, "replacement", this.replacement], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "SourceEdit(" + this.offset + ", " + this.length + ', "' + this.replacement + '")';
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.yamlEncodeFlowString_closure.prototype = {
    call$1(entry) {
      type$.MapEntry_dynamic_YamlNode._as(entry);
      return A.yamlEncodeFlowString(type$.YamlNode._as(entry.key)) + ": " + A.yamlEncodeFlowString(entry.value);
    },
    $signature: 74
  };
  A.yamlEncodeBlockString_closure.prototype = {
    call$1(child) {
      var t1, valueString, t2;
      type$.YamlNode._as(child);
      t1 = this.newIndentation;
      valueString = A.yamlEncodeBlockString(child, t1, this.lineEnding);
      if (type$.Map_dynamic_dynamic._is(child) || type$.List_dynamic._is(child)) {
        t2 = A.YamlNodeExtension_get_collectionStyle(child);
        t2 = t2 !== B.CollectionStyle_FLOW;
      } else
        t2 = false;
      if (t2)
        valueString = B.JSString_methods.substring$1(valueString, t1);
      return B.JSString_methods.$mul(" ", this.indentation) + "- " + valueString;
    },
    $signature: 75
  };
  A.yamlEncodeBlockString_closure0.prototype = {
    call$1(entry) {
      var safeKey, formattedKey, t1, formattedValue;
      type$.MapEntry_dynamic_YamlNode._as(entry);
      safeKey = A.yamlEncodeFlowString(type$.YamlNode._as(entry.key));
      formattedKey = B.JSString_methods.$mul(" ", this.indentation) + safeKey;
      t1 = entry.value;
      formattedValue = A.yamlEncodeBlockString(t1, this.newIndentation, this.lineEnding);
      if ((type$.Map_dynamic_dynamic._is(t1) || type$.List_dynamic._is(t1)) && !A.isEmpty(t1))
        return formattedKey + ":\n" + formattedValue;
      return formattedKey + ": " + formattedValue;
    },
    $signature: 74
  };
  A.getMapInsertionIndex_closure.prototype = {
    call$1(k) {
      return J.toString$0$(k);
    },
    $signature: 19
  };
  A.getMapInsertionIndex_closure0.prototype = {
    call$1(key) {
      return B.JSString_methods.compareTo$1(A._asString(key), this.newKey) > 0;
    },
    $signature: 1
  };
  A.YamlScalarWrap.prototype = {
    toString$0(_) {
      return J.toString$0$(this.value);
    },
    $isYamlNode: 1,
    $isYamlScalar: 1,
    get$style() {
      return this.style;
    },
    get$span() {
      return this.span;
    },
    get$value() {
      return this.value;
    }
  };
  A.YamlMapWrap.prototype = {
    $index(_, key) {
      var t1 = this.nodes.$index(0, key);
      return t1 == null ? null : t1.get$value();
    },
    get$keys(_) {
      var t1 = this.nodes,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>");
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(t1, t2), t2._eval$1("@(Iterable.E)")._as(new A.YamlMapWrap_keys_closure()), t2._eval$1("Iterable.E"), type$.dynamic);
    },
    get$value() {
      return this;
    },
    $isMap: 1,
    $isYamlNode: 1,
    $isYamlMap: 1,
    get$style() {
      return this.style;
    },
    get$nodes() {
      return this.nodes;
    },
    get$span() {
      return this.span;
    }
  };
  A.YamlMapWrap_keys_closure.prototype = {
    call$1(node) {
      return type$.YamlNode._as(node).get$value();
    },
    $signature: 8
  };
  A.YamlListWrap.prototype = {
    get$length(_) {
      return this.nodes.length;
    },
    set$length(_, index) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List"));
    },
    $index(_, index) {
      var t1 = this.nodes;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index].get$value();
    },
    $indexSet(_, index, value) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable List"));
    },
    get$value() {
      return this;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1,
    $isYamlNode: 1,
    $isYamlList: 1,
    get$style() {
      return this.style;
    },
    get$nodes() {
      return this.nodes;
    },
    get$span() {
      return this.span;
    }
  };
  A.YamlListWrap_YamlListWrap_closure.prototype = {
    call$1(v) {
      return A.wrapAsYamlNode(v, this.collectionStyle, this.scalarStyle);
    },
    $signature: 218
  };
  A._YamlListWrap_Object_ListMixin.prototype = {};
  A._YamlMapWrap_Object_MapMixin.prototype = {};
  A._YamlMapWrap_Object_MapMixin_UnmodifiableMapMixin.prototype = {};
  A._deputyScan_closure.prototype = {
    call$0() {
      return this.git.runCommand$1(A._setArrayType(["diff"], type$.JSArray_String));
    },
    $signature: 219
  };
  A._deputyScan_closure0.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, branchName, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              branchName = "chore/deps/" + Date.now();
              t1 = $async$self.git;
              t2 = type$.JSArray_String;
              $async$goto = 2;
              return A._asyncAwait(t1.runCommand$1(A._setArrayType(["checkout", "-b", branchName, "origin/main"], t2)), $async$call$0);
            case 2:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait(t1.runCommand$1(A._setArrayType(["add", "**/*.yaml"], t2)), $async$call$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait(t1.runCommand$1(A._setArrayType(["commit", "-m", '"chore(deps): Bump dependencies\n\nrequest-checks: true"'], t2)), $async$call$0);
            case 4:
              // returning from await.
              $async$goto = 5;
              return A._asyncAwait(t1.runCommand$1(A._setArrayType(["push", "-u", "origin", branchName], t2)), $async$call$0);
            case 5:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 40
  };
  A._deputyScan_closure1.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$self = this, t1, t2, t3, _0_0, executable, args, result, t4;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              for (t1 = $async$self.updates, t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1), t2 = "> **NOTE:** This PR was automatically created using the repo's deputy action.\n\n## Updates\n\n"; t1.moveNext$0(); t2 = t3) {
                t3 = t1.get$current();
                t3 = t2 + ("- Updated " + t3.key + " to `" + t3.value.toString$0(0) + "`\n");
              }
              t1 = A.join(new A.Directory(J.tmpdir$0$x(A.os())).createTempSync$1("deputy").path, "pr_body.txt");
              new A.File(t1).createSync$0();
              J.writeFileSync$2$x(A.fs(), J.resolve$1$x(A.path(), t1), t2.charCodeAt(0) == 0 ? t2 : t2);
              $.$get$processManager();
              t1 = type$.List_Object._as(A._setArrayType(["gh", "pr", "create", "--base=main", "--body-file=" + t1, '--title="chore(deps): Bump dependencies"', "--draft"], type$.JSArray_String));
              t2 = A._arrayInstanceType(t1)._eval$1("CastList<1,String>");
              _0_0 = new A.CastList(t1, t2);
              if (t1.length >= 1) {
                executable = t2._rest[1]._as(t1[0]);
                args = _0_0.sublist$1(_0_0, 1);
                t1 = true;
              } else {
                executable = null;
                args = null;
                t1 = false;
              }
              if (!t1)
                A.throwExpression(A.StateError$("Pattern matching error"));
              t1 = self;
              t2 = type$.JSObject;
              result = A.ChildProcess_execSync(t2._as(t1.childProcess), executable, args, false, null, true, false, null);
              t3 = result.exitCode;
              t4 = type$.Uint8List;
              B.Utf8Codec_true.decode$1(t4._as(result.stdout));
              t4 = B.Utf8Codec_true.decode$1(t4._as(result.stderr));
              if (t3 !== 0)
                A.Core_setFailed(t2._as(t1.core), "Failed to create PR (" + t3 + "): " + t4);
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 40
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = A._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _.super$_BufferingStreamSubscription$_close = _._close$0;
    _ = A._HashMap.prototype;
    _.super$_HashMap$_containsKey = _._containsKey$1;
    _.super$_HashMap$_get = _._get$1;
    _.super$_HashMap$_set = _._set$2;
    _.super$_HashMap$_remove = _._remove$1;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.Converter.prototype;
    _.super$Converter$bind = _.bind$1;
    _ = A._StringSinkConversionSink.prototype;
    _.super$_StringSinkConversionSink$close = _.close$0;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _.super$Iterable$skipWhile = _.skipWhile$1;
    _ = A.DelegatingStreamSubscription.prototype;
    _.super$DelegatingStreamSubscription$onError = _.onError$1;
    _.super$DelegatingStreamSubscription$cancel = _.cancel$0;
    _ = A.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
    _ = A.StringScanner.prototype;
    _.super$StringScanner$readChar = _.readChar$0;
    _.super$StringScanner$scan = _.scan$1;
    _.super$StringScanner$matches = _.matches$1;
    _ = A._ValueEvent.prototype;
    _.super$_ValueEvent$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_i = hunkHelpers._instance_1i,
      _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff,
      _static_0 = hunkHelpers._static_0,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_2_i = hunkHelpers._instance_2i;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 64);
    _instance_1_i(A._BytesBuilder.prototype, "get$add", "add$1", 29);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 31);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 31);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 31);
    _static(A, "async_Future___value_tearOff$closure", 0, function() {
      return [null];
    }, ["call$1$1", "call$1", "call$0", "call$1$0"], ["Future___value_tearOff", function(value) {
      return A.Future___value_tearOff(value, type$.dynamic);
    }, function() {
      return A.Future___value_tearOff(null, type$.dynamic);
    }, function($T) {
      return A.Future___value_tearOff(null, $T);
    }], 222, 1);
    _static(A, "async__FutureExtensions__ignore$closure", 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["FutureExtensions__ignore", function(_) {
      return A.FutureExtensions__ignore(_, null);
    }], 223, 0);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 21);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 6);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    _static(A, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 224, 0);
    _static(A, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return A._rootRun($self, $parent, zone, f, type$.dynamic);
    }], 225, 1);
    _static(A, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      return A._rootRunUnary($self, $parent, zone, f, arg, type$.dynamic, type$.dynamic);
    }], 226, 1);
    _static(A, "async___rootRunBinary$closure", 6, null, ["call$3$6", "call$6"], ["_rootRunBinary", function($self, $parent, zone, f, arg1, arg2) {
      return A._rootRunBinary($self, $parent, zone, f, arg1, arg2, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 227, 1);
    _static(A, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return A._rootRegisterCallback($self, $parent, zone, f, type$.dynamic);
    }], 68, 0);
    _static(A, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      return A._rootRegisterUnaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic);
    }], 69, 0);
    _static(A, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      return A._rootRegisterBinaryCallback($self, $parent, zone, f, type$.dynamic, type$.dynamic, type$.dynamic);
    }], 70, 0);
    _static(A, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 71, 0);
    _static(A, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 228, 0);
    _static(A, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 229, 0);
    _static(A, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 230, 0);
    _static(A, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 231, 0);
    _static_1(A, "async___printToZone$closure", "_printToZone", 30);
    _static(A, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 232, 0);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_i(_ = A._BroadcastStreamController.prototype, "get$add", "add$1", 9);
    _instance(_, "get$addError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["addError$2", "addError$1"], 25, 0, 0);
    _instance_1_u(_, "get$_async$_add", "_async$_add$1", 9);
    _instance_2_u(_, "get$_addError", "_addError$2", 6);
    _instance_0_u(_, "get$_close", "_close$0", 0);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 25, 0, 0);
    _instance(A._SyncCompleter.prototype, "get$complete", 0, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["complete$1", "complete$0"], 199, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 6);
    _instance_1_i(_ = A._StreamController.prototype, "get$add", "add$1", 9);
    _instance(_, "get$addError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["addError$2", "addError$1"], 25, 0, 0);
    _instance_1_u(_, "get$_async$_add", "_async$_add$1", 9);
    _instance_2_u(_, "get$_addError", "_addError$2", 6);
    _instance_0_u(_, "get$_close", "_close$0", 0);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance(_ = A._BufferingStreamSubscription.prototype, "get$pause", 1, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 46, 0, 0);
    _instance_0_i(_, "get$resume", "resume$0", 0);
    _instance_0_u(_, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance(_ = A._DoneStreamSubscription.prototype, "get$pause", 1, 0, null, ["call$1", "call$0"], ["pause$1", "pause$0"], 46, 0, 0);
    _instance_0_i(_, "get$resume", "resume$0", 0);
    _instance_0_u(_, "get$_onMicrotask", "_onMicrotask$0", 0);
    _instance_0_u(_ = A._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 9);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 104);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _instance_0_u(_ = A._SinkTransformerStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 9);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 6);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 18);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 10);
    _static_2(A, "collection_ListBase__compareAny$closure", "ListBase__compareAny", 64);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 8);
    _instance_0_i(A._JsonDecoderSink.prototype, "get$close", "close$0", 0);
    _instance(A._JsonUtf8EncoderSink.prototype, "get$_addChunk", 0, 3, null, ["call$3"], ["_addChunk$3"], 102, 0, 0);
    _static_1(A, "core__identityHashCode$closure", "identityHashCode", 10);
    _static_2(A, "core__identical$closure", "identical", 18);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 23);
    _static_0(A, "core__Uri__createList$closure", "_Uri__createList", 233);
    _static_2(A, "core___toUnmodifiableStringList$closure", "_toUnmodifiableStringList", 234);
    _instance_1_u(_ = A._StreamSinkImpl.prototype, "get$_completeDoneValue", "_completeDoneValue$1", 21);
    _instance_2_u(_, "get$_completeDoneError", "_completeDoneError$2", 221);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return A.max(a, b, type$.num);
    }], 235, 1);
    _instance_1_u(A.NodeLoggerPlugin.prototype, "get$handleLogEntry", "handleLogEntry$1", 45);
    _instance_0_i(A.NodeProcessManager.prototype, "get$close", "close$0", 12);
    _static_1(A, "config_AftComponent___fromJson_tearOff$closure", "AftComponent___fromJson_tearOff", 236);
    _static_1(A, "config_PackageInfo___fromJson_tearOff$closure", "PackageInfo___fromJson_tearOff", 237);
    _instance_0_u(A.AftConfig.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.AftComponent.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.PackageInfo.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.PubspecInfo.prototype, "get$toJson", "toJson$0", 2);
    _static_1(A, "package_selector_PackageSelector___fromJson_tearOff$closure", "PackageSelector___fromJson_tearOff", 56);
    _static_1(A, "raw_config_AftScript___fromJson_tearOff$closure", "AftScript___fromJson_tearOff", 238);
    _instance_0_u(A.RawAftConfig.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.Environment.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.AndroidEnvironment.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.IosEnvironment.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.MacOSEnvironment.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.GitHubPackageConfig.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.RawAftComponent.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.AftScript.prototype, "get$toJson", "toJson$0", 2);
    _instance_0_u(A.Deputy.prototype, "get$scanAndUpdate", "scanAndUpdate$0", 108);
    _instance_0_i(A.CancelableOperation.prototype, "get$cancel", "cancel$0", 120);
    _instance(_ = A.CancelableCompleter.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 25, 0, 0);
    _instance_0_u(_, "get$_cancelable_operation$_cancel", "_cancelable_operation$_cancel$0", 12);
    _instance_0_u(_ = A.StreamSplitter.prototype, "get$_onListen", "_onListen$0", 0);
    _instance_0_u(_, "get$_stream_splitter$_onPause", "_stream_splitter$_onPause$0", 0);
    _instance_0_u(_, "get$_stream_splitter$_onResume", "_stream_splitter$_onResume$0", 0);
    _instance_1_u(_, "get$_stream_splitter$_onData", "_stream_splitter$_onData$1", 9);
    _instance_2_u(_, "get$_stream_splitter$_onError", "_stream_splitter$_onError$2", 6);
    _instance_0_u(_, "get$_stream_splitter$_onDone", "_stream_splitter$_onDone$0", 0);
    _instance_1_u(A.SimpleLogPrinter.prototype, "get$handleLogEntry", "handleLogEntry$1", 45);
    _instance_2_i(_ = A.DefaultEquality.prototype, "get$equals", "equals$2", 18);
    _instance_1_u(_, "get$hash", "hash$1", 10);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 32);
    _instance_2_i(_ = A.DeepCollectionEquality.prototype, "get$equals", "equals$2", 18);
    _instance_1_u(_, "get$hash", "hash$1", 10);
    _instance_1_u(_, "get$isValidKey", "isValidKey$1", 32);
    _static(A, "util__dartify$closure", 1, null, ["call$1$1", "call$1"], ["dartify", function(jsObject) {
      return A.dartify(jsObject, type$.dynamic);
    }], 239, 1);
    _instance_0_i(A.File.prototype, "get$length", "length$0", 153);
    _instance_0_u(A.Chain.prototype, "get$toTrace", "toTrace$0", 17);
    _static_1(A, "frame_Frame___parseVM_tearOff$closure", "Frame___parseVM_tearOff", 24);
    _static_1(A, "frame_Frame___parseV8_tearOff$closure", "Frame___parseV8_tearOff", 24);
    _static_1(A, "frame_Frame___parseFirefox_tearOff$closure", "Frame___parseFirefox_tearOff", 24);
    _static_1(A, "frame_Frame___parseFriendly_tearOff$closure", "Frame___parseFriendly_tearOff", 24);
    _instance_0_u(A.LazyChain.prototype, "get$toTrace", "toTrace$0", 17);
    _instance(_ = A.StackZoneSpecification.prototype, "get$_registerCallback", 0, 4, null, ["call$1$4", "call$4"], ["_registerCallback$1$4", "_registerCallback$4"], 68, 0, 0);
    _instance(_, "get$_registerUnaryCallback", 0, 4, null, ["call$2$4", "call$4"], ["_registerUnaryCallback$2$4", "_registerUnaryCallback$4"], 69, 0, 0);
    _instance(_, "get$_registerBinaryCallback", 0, 4, null, ["call$3$4", "call$4"], ["_registerBinaryCallback$3$4", "_registerBinaryCallback$4"], 70, 0, 0);
    _instance(_, "get$_handleUncaughtError", 0, 5, null, ["call$5"], ["_handleUncaughtError$5"], 204, 0, 0);
    _instance(_, "get$_errorCallback", 0, 5, null, ["call$5"], ["_errorCallback$5"], 71, 0, 0);
    _static_1(A, "trace_Trace___parseVM_tearOff$closure", "Trace___parseVM_tearOff", 54);
    _static_1(A, "trace_Trace___parseFriendly_tearOff$closure", "Trace___parseFriendly_tearOff", 54);
    _static_2(A, "equality__deepEquals$closure", "deepEquals0", 18);
    _static_1(A, "equality__deepHashCode$closure", "deepHashCode", 10);
    _static_2(A, "equality0__deepEquals$closure", "deepEquals", 242);
    _static_1(A, "equality0__deepHashCode$closure", "deepHashCode0", 10);
    _static_1(A, "strings__yamlEncodeFlowString$closure", "yamlEncodeFlowString", 75);
    _static_0(A, "deputy_scan___deputyScan$closure", "_deputyScan", 12);
    _static_2(A, "comparators__equalsIgnoreAsciiCase$closure", "equalsIgnoreAsciiCase", 59);
    _static_1(A, "comparators__hashIgnoreAsciiCase$closure", "hashIgnoreAsciiCase", 176);
    _static(A, "uuid_util_UuidUtil_mathRNG$closure", 0, function() {
      return {seed: -1};
    }, ["call$1$seed", "call$0"], ["UuidUtil_mathRNG", function() {
      return A.UuidUtil_mathRNG(-1);
    }], 162, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A._BytesBuilder, A.Iterable, A.CastIterator, A.Closure, A.MapBase, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.ExpandIterator, A.TakeIterator, A.SkipIterator, A.SkipWhileIterator, A.EmptyIterator, A.WhereTypeIterator, A.NonNullsIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A._Record, A.MapView, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.JSInvocationMirror, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A._Required, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._InitializedCell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A.Stream, A._BufferingStreamSubscription, A._BroadcastStreamController, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.StreamTransformerBase, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._StreamSinkWrapper, A._AddStreamState, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._EventSinkWrapper, A._ZoneFunction, A._ZoneSpecification, A._ZoneDelegate, A._Zone, A._HashMapKeyIterator, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._MapBaseValueIterator, A._UnmodifiableMapMixin, A._ListQueueIterator, A.StringConversionSink, A.Codec, A.Converter, A.ByteConversionSink, A._Base64Encoder, A._Base64Decoder, A.ChunkedConversionSink, A._ConverterStreamEventSink, A._JsonStringifier, A._JsonPrettyPrintMixin, A._ClosableStringSink, A._StringConversionSinkAsStringSinkAdapter, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A._WeakReferenceWrapper, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.Expando, A.FileSystemEntityType, A._StreamSinkImpl, A.ProcessStartMode, A.ProcessResult, A.ProcessException, A.NullRejectionException, A._JSRandom, A._Random, A.ActionContext, A.NodeLoggerPlugin, A.Platform, A.NodeProcessManager, A.NodeProcess, A._AftConfig_Object_AWSSerializable, A._AftComponent_Object_AWSSerializable, A._PackageInfo_Object_AWSEquatable, A._PubspecInfo_Object_AWSSerializable, A._$AftConfigSerializer, A.AftConfigBuilder, A.AftConfigLoader, A._PackageSelector_Object_AWSSerializable, A.PackageSelectorConverter, A.RawPubspecConfig, A._RawAftConfig_Object_AWSSerializable, A._Environment_Object_AWSSerializable, A.PlatformEnvironment, A._AndroidEnvironment_Object_AWSSerializable, A._IosEnvironment_Object_AWSSerializable, A._MacOSEnvironment_Object_AWSSerializable, A._GitHubPackageConfig_Object_AWSSerializable, A._RawAftComponent_Object_AWSSerializable, A._AftScript_Object_AWSSerializable, A._$EnvironmentSerializer, A._$PlatformEnvironmentSerializer, A._$AndroidEnvironmentSerializer, A._$IosEnvironmentSerializer, A._$MacOSEnvironmentSerializer, A._$GitHubPackageConfigSerializer, A.EnvironmentBuilder, A.PlatformEnvironmentBuilder, A.AndroidEnvironmentBuilder, A.IosEnvironmentBuilder, A.MacOSEnvironmentBuilder, A.GitHubPackageConfigBuilder, A.JsonSerializer, A.VersionConstraintSerializer, A.Deputy, A._Group_Object_AWSSerializable, A._$GroupSerializer, A.GroupBuilder, A.GitDir, A.PubVersionInfo, A.Repo, A.VersionResolver, A.AsyncMemoizer, A.CancelableOperation, A.CancelableCompleter, A.DelegatingStreamSubscription, A.FutureGroup, A.ErrorResult, A.ValueResult, A.StreamQueue, A._NextRequest, A._CancelRequest, A._HasNextRequest, A.StreamSplitter, A.DelegatingMap, A.AWSHttpException, A.CancellationException, A.AWSHttpClient, A._AWSOperation_Object_AWSDebuggable, A.AWSBaseHttpRequest, A.AWSBaseHttpResponse, A.JSEnum, A._AWSLogger_Object_AWSDebuggable, A.AWSLoggerMixin, A._LogEntry_Object_AWSEquatable, A.SimpleLogPrinter, A.AWSProgressOperation, A.AWSDebuggable, A.AWSEquatable, A.AWSSerializable, A.CopyOnWriteList, A.BuiltList, A.ListBuilder, A.BuiltListMultimap, A.ListMultimapBuilder, A.BuiltMap, A.MapBuilder, A.BuiltSet, A.SetBuilder, A.BuiltSetMultimap, A.SetMultimapBuilder, A.IndentingBuiltValueToStringHelper, A.JsonObject, A.FullType, A.BigIntSerializer, A.BoolSerializer, A.BuiltJsonSerializers, A.BuiltJsonSerializersBuilder, A.BuiltListMultimapSerializer, A.BuiltListSerializer, A.BuiltMapSerializer, A.BuiltSetMultimapSerializer, A.BuiltSetSerializer, A.DateTimeSerializer, A.DoubleSerializer, A.DurationSerializer, A.Int64Serializer, A.IntSerializer, A.JsonObjectSerializer, A.NullSerializer, A.NumSerializer, A.RegExpSerializer, A.StringSerializer, A.Uint8ListSerializer, A.UriSerializer, A.StandardJsonPlugin, A.ParsedYamlException, A._WrappedYamlException, A.DefaultEquality, A.IterableEquality, A.ListEquality, A._UnorderedEquality, A._MapEntry, A.MapEquality, A.DeepCollectionEquality, A._QueueList_Object_ListMixin, A.UnmodifiableMapMixin, A.FileSystem, A.Int64, A.BadKeyException, A.CheckedFromJsonException, A.Level, A.LogRecord, A.Logger, A.FileSystemEntity0, A.FileStat, A.Context, A._PathDirection, A._PathRelation, A.Style, A.ParsedPath, A.PathException, A.LocalProcessManager, A.Version, A._EmptyVersion, A.VersionRange, A.Dependency, A.HostedDetails, A.Pubspec, A.Screenshot, A.Mapping, A.TargetLineEntry, A.TargetEntry, A._MappingTokenizer, A._TokenKind, A.SourceSpanMixin, A.SourceFile, A.SourceLocationMixin, A.Highlighter, A._Highlight, A._Line, A.SourceLocation, A.SourceSpanException, A.Chain, A.Frame, A.LazyChain, A.LazyTrace, A.StackZoneSpecification, A._Node, A.Trace, A.UnparsedFrame, A.StringScanner, A._EagerSpanScannerState, A.Uuid, A._DeepEquals, A.Event, A.DocumentStartEvent, A.DocumentEndEvent, A.AliasEvent, A._ValueEvent, A.Loader, A.Parser, A._State, A.Scanner, A._SimpleKey, A.ScalarStyle, A.CollectionStyle, A.Token, A.VersionDirectiveToken, A.TagDirectiveToken, A.AnchorToken, A.AliasToken, A.TagToken, A.ScalarToken, A.Pair, A.YamlDocument, A.VersionDirective, A.TagDirective, A.YamlNode, A.YamlEditor, A.SourceEdit, A.YamlScalarWrap, A._YamlMapWrap_Object_MapMixin, A._YamlListWrap_Object_ListMixin]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, A.BufferModule, A.BufferConstants, A.Buffer, A.ConsoleModule, A.Console, A.DNS, A.DNSLookupOptions, A.DNSAddress, A.Resolver, A.EventEmitter, A.FS, A.FSConstants, A.FSWatcher, A.ReadStream, A.ReadStreamOptions, A.WriteStream, A.WriteStreamOptions, A.FileOptions, A.StatOptions, A.MkdirOptions, A.RmdirOptions, A.WatchOptions, A.WatchFileOptions, A.Stats, A.HTTP, A.HttpAgent, A.HttpAgentOptions, A.RequestOptions, A.ClientRequest, A.HttpServer, A.ServerResponse, A.IncomingMessage, A.Promise0, A.Date, A.JsError, A.Atomics, A.Modules, A.Module, A.Net, A.Socket, A.NetAddress, A.NetServer, A.NodeJsError, A.OS, A.CPU, A.CPUTimes, A.OSConstants, A.OSSignalConstants, A.OSErrorConstants, A.OSDLOpenConstants, A.Path, A.PathObject, A.Process0, A.CPUUsage, A.Release, A.StreamModule, A.Readable, A.Writable, A.Duplex, A.Transform, A.WritableOptions, A.ReadableOptions, A.Immediate, A.Timeout, A.TTY, A.Util]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.SkipIterable, A.SkipWhileIterable, A.WhereTypeIterable, A.NonNullsIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin, A.CastQueue]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure, [A.Closure2Args, A.CastMap_entries_closure, A.Closure0Args, A.Instantiation, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._SyncBroadcastStreamController__sendData_closure, A._SyncBroadcastStreamController__sendError_closure, A._SyncBroadcastStreamController__sendDone_closure, A.Future_wait_closure, A.Future_any_onValue, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_fold_closure0, A.Stream_fold__closure0, A.Stream_length_closure, A._CustomZone_bindUnaryCallback_closure, A._RootZone_bindUnaryCallback_closure, A._HashMap_values_closure, A._CustomHashMap_closure, A._LinkedCustomHashMap_closure, A.MapBase_entries_closure, A._JsonMap_values_closure, A.Converter_bind_closure, A.Encoding_decodeStream_closure0, A.LineSplitter_bind_closure, A._BigIntImpl_hashCode_finish, A.DateTime_parse_parseIntOrZero, A.DateTime_parse_parseMilliAndMicroseconds, A._Uri__makePath_closure, A._Uri__splitQueryStringAll_parsePair, A._createTables_setChars, A._createTables_setRange, A._StreamSinkImpl__controller_closure, A.jsify__convert, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.ChildProcess_spawn_closure, A.NodeReadableStream_get_stream_onData, A.NodeReadableStream_get_stream_onError, A.NodeReadableStream_get_stream_onDone, A.EventEmitter_once_closure, A.NodeProcessManager_run_closure, A.NodeProcessManager_run_closure0, A.NodeProcess__init_closure, A.NodeProcess__init_closure0, A._$AftComponentFromJson_closure, A._$AftComponentFromJson__closure, A._$AftComponentFromJson__closure0, A._$AftComponentFromJson__closure1, A._$AftComponentFromJson___closure0, A._$AftComponentFromJson__closure2, A._$AftComponentFromJson____closure, A._$AftComponentFromJson__closure3, A._$AftComponentToJson_closure, A._$AftComponentToJson__closure, A._$PackageInfoFromJson_closure, A._$PackageInfoFromJson__closure, A._$PackageInfoFromJson__closure0, A._$PackageInfoFromJson__closure1, A._$PackageInfoFromJson__closure2, A._$PackageInfoFromJson__closure3, A._$PackageInfoFromJson__closure4, A._$PubspecInfoFromJson_closure, A._$PubspecInfoFromJson__closure, A._$PubspecInfoFromJson__closure0, A._$PubspecInfoFromJson__closure1, A._$PubspecInfoFromJson__closure2, A.AftConfigLoader__processPubspecs_mergePubspec, A.AftConfigLoader__processPubspecs_mergePubspec_closure, A.AftConfigLoader__processPubspecs_mergePubspec_closure0, A.AftConfigLoader__processPubspecs__closure, A.AftConfigLoader__processPubspecs__closure0, A.AftConfigLoader__processPubspecs___closure, A._OrPackageSelector_toJson_closure, A._AndPackageSelector_toJson_closure, A._$RawPubspecConfigFromJson_closure, A._$RawPubspecConfigFromJson__closure, A._$RawPubspecConfigFromJson__closure0, A._$RawPubspecConfigFromJson__closure1, A._$RawAftConfigFromJson_closure, A._$RawAftConfigFromJson__closure, A._$RawAftConfigFromJson__closure0, A._$RawAftConfigFromJson___closure1, A._$RawAftConfigFromJson__closure1, A._$RawAftConfigFromJson___closure0, A._$RawAftConfigFromJson__closure2, A._$RawAftConfigFromJson__closure3, A._$RawAftConfigToJson_closure, A._$RawAftComponentFromJson_closure, A._$RawAftComponentFromJson__closure, A._$RawAftComponentFromJson__closure0, A._$RawAftComponentFromJson__closure1, A._$RawAftComponentFromJson___closure, A._$RawAftComponentFromJson__closure2, A._$AftScriptFromJson_closure, A._$AftScriptFromJson__closure, A._$AftScriptFromJson__closure0, A._$AftScriptFromJson__closure1, A._$AftScriptFromJson__closure2, A.Deputy__listDependencyGroups_closure, A.Deputy__listDependencyGroups_closure0, A.RunGit__throwIfProcessFailed_closure0, A.PubVersionInfo_latestVersion_closure, A.PubVersionInfo_latestPrerelease_closure, A.Repo_getPackageGraph_closure, A.PubVersionResolver_latestVersion_closure, A.CancelableOperation_valueOrCancellation_closure, A.CancelableOperation_then_closure0, A.CancelableOperation_thenOperation_closure0, A.CancelableCompleter_complete_closure, A.FutureGroup_add_closure, A.StreamQueue__ensureListening_closure, A.StreamSplitter__onPause_closure, A.AWSHttpClient_onBadCertificate_closure, A.AWSHttpClientImpl__send_closure, A.AWSHttpClientImpl__send_closure1, A.AWSBaseHttpRequest_send_closure, A.PropsResponse_get_headers_closure, A.UnderlyingSource__staticInteropFactoryStub_closure, A.StreamToReadableStream_asReadableStream_closure, A.AWSLogger_getPlugin_closure, A.AWSLogger_registerPlugin_hasPlugin, A.AWSLogger_registerPlugin_hasPlugin_closure, A.AWSLogger_registerPlugin_closure, A.StringRecase_get_paramCase_closure, A.StringRecase_groupIntoWords_closure, A.StringRecase_groupIntoWords_closure0, A.StringRecase_groupIntoWords__closure, A.StringRecase_groupIntoWords_closure2, A.StringRecase_groupIntoWords_closure3, A.StreamForward_forward_closure, A.BuiltListMultimap_BuiltListMultimap_closure, A.BuiltListMultimap_hashCode_closure, A.ListMultimapBuilder_replace_closure, A.BuiltMap_BuiltMap_closure, A.BuiltMap_hashCode_closure, A.BuiltSet_hashCode_closure, A.BuiltSetMultimap_hashCode_closure, A.SetMultimapBuilder_replace_closure, A.newBuiltValueToStringHelper_closure, A.BuiltListMultimapSerializer_serialize_closure, A.BuiltListMultimapSerializer_deserialize_closure, A.BuiltListSerializer_serialize_closure, A.BuiltListSerializer_deserialize_closure, A.BuiltSetMultimapSerializer_serialize_closure, A.BuiltSetMultimapSerializer_deserialize_closure, A.BuiltSetSerializer_serialize_closure, A.BuiltSetSerializer_deserialize_closure, A.StandardJsonPlugin__toList_closure, A.StandardJsonPlugin__toListUsingDiscriminator_closure, A.toParsedYamlException_closure, A.$checkKeys_closure, A.$checkKeys_closure0, A.$checkKeys_closure1, A.$checkedCreate_checkedConvert, A.Directory_listSync_list, A.File_length_closure, A.FileStat_stat_callback, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.WindowsStyle_absolutePathToUri_closure, A.Version__splitParts_closure, A._fromJson_closure, A._fromJson_closure1, A._$SdkDependencyFromJson_closure, A._$SdkDependencyFromJson__closure, A._$SdkDependencyFromJson__closure0, A._$GitDependencyFromJson_closure, A._$GitDependencyFromJson__closure, A._$GitDependencyFromJson__closure0, A._$GitDependencyFromJson__closure1, A._$HostedDependencyFromJson_closure, A._$HostedDependencyFromJson__closure, A._$HostedDependencyFromJson__closure0, A._$HostedDetailsFromJson_closure, A._$HostedDetailsFromJson__closure, A._$HostedDetailsFromJson__closure0, A.Pubspec_Pubspec$parse_closure, A._$PubspecFromJson_closure, A._$PubspecFromJson__closure, A._$PubspecFromJson__closure0, A._$PubspecFromJson__closure1, A._$PubspecFromJson__closure2, A._$PubspecFromJson__closure3, A._$PubspecFromJson___closure2, A._$PubspecFromJson__closure4, A._$PubspecFromJson__closure5, A._$PubspecFromJson__closure6, A._$PubspecFromJson__closure7, A._$PubspecFromJson__closure8, A._$PubspecFromJson___closure1, A._$PubspecFromJson__closure9, A._$PubspecFromJson___closure0, A._$PubspecFromJson__closure10, A._$PubspecFromJson__closure11, A._$PubspecFromJson__closure12, A._$PubspecFromJson__closure13, A._$PubspecFromJson__closure14, A._$PubspecFromJson__closure15, A._$PubspecFromJson__closure16, A.mapStackTrace_closure, A.mapStackTrace_closure0, A._prettifyMember_closure, A._prettifyMember_closure0, A.SingleMapping__findLine_closure, A.SingleMapping__findColumn_closure, A.Highlighter$__closure, A.Highlighter$___closure, A.Highlighter$__closure0, A.Highlighter__collateLines_closure, A.Highlighter__collateLines_closure1, A.Highlighter__collateLines__closure, A.Highlighter_highlight_closure, A.Chain_Chain$parse_closure, A.Chain_toTrace_closure, A.Chain_toString_closure0, A.Chain_toString__closure0, A.Chain_toString_closure, A.Chain_toString__closure, A.StackZoneSpecification__registerUnaryCallback_closure, A.Trace__parseVM_closure, A.Trace$parseV8_closure, A.Trace$parseJSCore_closure, A.Trace$parseFirefox_closure, A.Trace$parseFriendly_closure, A.Trace_toString_closure0, A.Trace_toString_closure, A.TransformByHandlers_transformByHandlers__closure, A.TakeUntil_takeUntil_closure, A.Tap_tap_closure1, A.Tap_tap_closure0, A.deepHashCode_deepHashCodeInner, A.deepHashCode_deepHashCodeInner_closure, A.Parser__parseNode_parseAnchor, A.Parser__parseNode_parseTag, A.Scanner__fetchMoreTokens_closure, A.yamlWarningCallback_closure, A.YamlMap_keys_closure, A._YamlMapNodes_keys_closure, A.YamlEditor__initialize_collectAliases, A.YamlEditor_update_closure, A.YamlEditor__deepModify_closure, A.mapDeepEquals_closure, A.getKeyNode_closure, A.getKey_closure, A.containsKey_closure, A.yamlEncodeFlowString_closure, A.yamlEncodeBlockString_closure, A.yamlEncodeBlockString_closure0, A.getMapInsertionIndex_closure, A.getMapInsertionIndex_closure0, A.YamlMapWrap_keys_closure, A.YamlListWrap_YamlListWrap_closure]);
    _inheritMany(A.Closure2Args, [A._CastListBase_sort_closure, A.CastMap_forEach_closure, A.ConstantMap_map_closure, A.Primitives_functionNoSuchMethod_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A.Future_any_onError, A._Future__chainForeignFuture_closure0, A._cancelAndErrorClosure_closure, A.HashMap_HashMap$from_closure, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A.Encoding_decodeStream_closure, A._JsonStringifier_writeMap_closure, A._JsonPrettyPrintMixin_writeMap_closure, A._BigIntImpl_hashCode_combine, A._symbolMapToStringMap_closure, A.NoSuchMethodError_toString_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._Uri__makeQuery_writeParameter, A._Uri__makeQuery_closure, A._createTables_build, A._StreamSinkImpl__controller_closure0, A.wrapMain_closure0, A._$AftComponentFromJson___closure, A._$AftComponentToJson_closure0, A.AftConfigLoader__processPubspecs_closure, A._extension_1_toJson_closure, A._extension_1_toJson_closure0, A._extension_1_toJson_closure1, A._extension_1_toJson_closure2, A._$RawAftConfigFromJson___closure, A._$RawAftConfigToJson_closure0, A.Deputy__listDependencyGroups__closure, A.RunGit__throwIfProcessFailed_closure, A.dfs_search, A.collectBytes_closure, A.CancelableOperation_then_closure, A.CancelableOperation_thenOperation_closure, A.CancelableCompleter_complete_closure0, A.FutureGroup_add_closure0, A.StreamQueue__ensureListening_closure1, A._CancelOnErrorSubscriptionWrapper_onError_closure, A.AWSHttpClientImpl_send_closure, A.AWSBaseHttpRequest_send_closure0, A.Promise_fromFuture_staticInteropFactoryStub_closure, A.StreamForward_forward_closure1, A.hashObjects_closure, A.MapBuilder_replace_closure, A.MapBuilder_replace_closure0, A.StandardJsonPlugin__toList_closure0, A.StandardJsonPlugin__toListUsingDiscriminator_closure0, A.parseDeps_closure, A._environmentMap_closure, A._$PubspecFromJson___closure, A.SingleMapping$fromJson_closure, A.SingleMapping_toJson_closure, A.Highlighter__collateLines_closure0, A.Frame_Frame$parseV8_closure_parseLocation, A.StackZoneSpecification__registerBinaryCallback_closure, A.TransformByHandlers_transformByHandlers__closure1, A.Tap_tap_closure, A.YamlEditor__initialize_collectAliases_closure]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.MapBase, [A.CastMap, A.JsLinkedHashMap, A._HashMap, A._JsonMap, A._YamlMapWrapper_MapBase_UnmodifiableMapMixin, A.__YamlMapNodes_MapBase_UnmodifiableMapMixin]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A.AssertionError, A._Error, A.JsonUnsupportedObjectError, A.ArgumentError, A.NoSuchMethodError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A._UnreachableError, A.BuiltValueNullFieldError, A.BuiltValueNestedFieldError, A.DeserializationError]);
    _inheritMany(A.ListBase, [A.UnmodifiableListBase, A.YamlListWrapper, A._YamlListNodes]);
    _inheritMany(A.UnmodifiableListBase, [A.CodeUnits, A.UnmodifiableListView]);
    _inheritMany(A.Closure0Args, [A.nullFuture_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._TimerImpl$periodic_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__chainCoreFutureAsync_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_fold_closure, A.Stream_fold__closure, A.Stream_length_closure0, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._AddStreamState_cancel_closure, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._cancelAndError_closure, A._CustomZone_bindCallback_closure, A._CustomZone_bindCallbackGuarded_closure, A._rootHandleError_closure, A._RootZone_bindCallback_closure, A._RootZone_bindCallbackGuarded_closure, A.Utf8Decoder__decoder_closure, A.Utf8Decoder__decoderNonfatal_closure, A.wrapMain_closure, A.wrapMain__closure0, A.wrapMain__closure, A.NodeReadableStream_get_stream_closure, A.NodeReadableStream_get_stream_closure0, A.processManager_closure, A.AftConfigLoader__processPubspecs_mergePubspec__closure, A._$aftSerializers_closure, A._$aftSerializers_closure0, A._$aftSerializers_closure1, A._$aftSerializers_closure2, A._$aftSerializers_closure3, A.Deputy__listDependencyGroups__closure0, A._$_serializers_closure, A.VersionResolver_updateFor_closure, A.VersionResolver_updateFor_closure0, A.VersionResolver_updateFor_closure1, A.VersionResolver_updateFor_closure2, A.VersionResolver_updateFor_closure3, A.VersionResolver_updateFor_closure4, A.VersionResolver_updateFor_closure5, A.VersionResolver_updateFor_closure6, A._collectBytes_closure, A.CancelableOperation_thenOperation_closure1, A.StreamQueue__ensureListening_closure0, A.StreamSplitter_split_closure, A._CancelOnErrorSubscriptionWrapper_onError__closure, A.AWSHttpClientImpl__send_closure0, A.AWSHttpClientImpl__send_closure2, A.AWSHttpClientImpl__send_closure3, A.AWSHttpClientImpl__send_closure4, A.AWSHttpClientImpl__send_closure5, A.AWSHttpClientImpl_send_wrappedOnCancel, A.AWSBaseHttpRequest_send_closeClient, A.AWSBaseHttpRequest_send_closure1, A.StreamToReadableStream_asReadableStream__closure, A.AWSOperation_cancel_closure, A.StringRecase_groupIntoWords_closure1, A.StreamForward_forward_closure0, A.Serializers_Serializers_closure, A.Serializers_Serializers_closure0, A.Serializers_Serializers_closure1, A.Serializers_Serializers_closure2, A.Serializers_Serializers_closure3, A.toParsedYamlException_closure0, A.$checkedCreate_closure, A.Logger_Logger_closure, A.VersionConstraint_VersionConstraint$parse_skipWhitespace, A.VersionConstraint_VersionConstraint$parse_matchVersion, A.VersionConstraint_VersionConstraint$parse_matchComparison, A.VersionConstraint_VersionConstraint$parse_matchCompatibleWith, A._fromJson_closure0, A._digits_closure, A.Highlighter_closure, A.Highlighter__writeFileStart_closure, A.Highlighter__writeMultilineHighlights_closure, A.Highlighter__writeMultilineHighlights_closure0, A.Highlighter__writeMultilineHighlights_closure1, A.Highlighter__writeMultilineHighlights_closure2, A.Highlighter__writeMultilineHighlights__closure, A.Highlighter__writeMultilineHighlights__closure0, A.Highlighter__writeHighlightedText_closure, A.Highlighter__writeIndicator_closure, A.Highlighter__writeIndicator_closure0, A.Highlighter__writeIndicator_closure1, A.Highlighter__writeSidebar_closure, A._Highlight_closure, A.Chain_capture_closure, A.Frame_Frame$parseVM_closure, A.Frame_Frame$parseV8_closure, A.Frame_Frame$_parseFirefoxEval_closure, A.Frame_Frame$parseFirefox_closure, A.Frame_Frame$parseFriendly_closure, A.StackZoneSpecification_chainFor_closure, A.StackZoneSpecification_chainFor_closure0, A.StackZoneSpecification__registerCallback_closure, A.StackZoneSpecification__registerUnaryCallback__closure, A.StackZoneSpecification__registerBinaryCallback__closure, A.StackZoneSpecification__currentTrace_closure, A.Trace_Trace$from_closure, A.TransformByHandlers_transformByHandlers_closure, A.TransformByHandlers_transformByHandlers__closure0, A.TransformByHandlers_transformByHandlers__closure2, A.TakeUntil_takeUntil_closure0, A.TakeUntil_takeUntil__closure, A.TakeUntil_takeUntil__closure0, A._deputyScan_closure, A._deputyScan_closure0, A._deputyScan_closure1]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._HashMapKeyIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A.ReversedListIterable, A.ListQueue, A._JsonMapKeyIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A._Record2, A._Record);
    _inheritMany(A._Record2, [A._Record_2, A._Record_2_isBreaking]);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inheritMany(A.AssertionError, [A._AssertionError, A._YamlAssertionError]);
    _inheritMany(A.JsLinkedHashMap, [A.JsIdentityLinkedHashMap, A.JsConstantLinkedHashMap, A._LinkedCustomHashMap]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Stream, [A._StreamImpl, A.StreamView, A._EmptyStream, A._ForwardingStream, A._BoundSinkStream, A.SubscriptionStream]);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._BroadcastStream, A._ControllerStream);
    _inheritMany(A._BufferingStreamSubscription, [A._ControllerSubscription, A._ForwardingStreamSubscription, A._SinkTransformerStreamSubscription]);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inheritMany(A._BroadcastStreamController, [A._SyncBroadcastStreamController, A._AsyncBroadcastStreamController]);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inherit(A._StreamControllerAddStreamState, A._AddStreamState);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inherit(A._MapStream, A._ForwardingStream);
    _inheritMany(A._Zone, [A._CustomZone, A._RootZone]);
    _inheritMany(A._HashMap, [A._IdentityHashMap, A._CustomHashMap]);
    _inherit(A._SetBase, A.SetBase);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.StringConversionSink, [A._StringSinkConversionSink, A._UnicodeSubsetEncoderSink, A._Base64DecoderSink, A._LineSplitterSink, A._StringAdapterSink]);
    _inherit(A._JsonDecoderSink, A._StringSinkConversionSink);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A._FusedCodec, A.JsonCodec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Utf8Codec]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Base64Encoder, A.Base64Decoder, A.JsonEncoder, A.JsonDecoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A.AsciiEncoder, A._UnicodeSubsetEncoder);
    _inherit(A.AsciiDecoder, A._UnicodeSubsetDecoder);
    _inheritMany(A.ByteConversionSink, [A._ErrorHandlingAsciiDecoderSink, A._SimpleAsciiDecoderSink, A._Base64EncoderSink, A._ByteAdapterSink, A._Utf8StringSinkAdapter, A._Utf8ConversionSink]);
    _inherit(A._BufferCachingBase64Encoder, A._Base64Encoder);
    _inheritMany(A._Base64EncoderSink, [A._AsciiBase64EncoderSink, A._Utf8Base64EncoderSink]);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inheritMany(A.ChunkedConversionSink, [A._JsonEncoderSink, A._JsonUtf8EncoderSink]);
    _inheritMany(A._JsonStringifier, [A._JsonStringStringifier, A._JsonUtf8Stringifier]);
    _inherit(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonStringStringifier);
    _inherit(A._JsonStringStringifierPretty, A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inherit(A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, A._JsonUtf8Stringifier);
    _inherit(A._JsonUtf8StringifierPretty, A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin);
    _inherit(A.LineSplitter, A.StreamTransformerBase);
    _inherit(A._LineSplitterEventSink, A._LineSplitterSink);
    _inherit(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink, A._Utf8Encoder);
    _inherit(A._Utf8EncoderSink, A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError, A.PathError]);
    _inherit(A._DataUri, A._Uri);
    _inherit(A._IOSinkImpl, A._StreamSinkImpl);
    _inheritMany(A._Enum, [A.ActionResult, A.VersionPropagation, A.PackageFlavor, A.DependencyType, A._VersionWindow, A.AlpnProtocol, A.SupportedProtocols, A.AWSHttpMethod, A._RequestCache__Enum_JSEnum, A._RequestCredentials__Enum_JSEnum, A._RequestRedirect__Enum_JSEnum, A._RequestDestination__Enum_JSEnum, A._RequestMode__Enum_JSEnum, A._ReadableStreamType__Enum_JSEnum, A._ReadableStreamReaderMode__Enum_JSEnum, A.LogLevel, A.EventType, A._Chomping, A.TokenType]);
    _inheritMany(A.Platform, [A.NodePlatform, A.LocalPlatform]);
    _inherit(A._AftConfig_Object_AWSSerializable_AWSDebuggable, A._AftConfig_Object_AWSSerializable);
    _inherit(A.AftConfig, A._AftConfig_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._AftComponent_Object_AWSSerializable_AWSDebuggable, A._AftComponent_Object_AWSSerializable);
    _inherit(A.AftComponent, A._AftComponent_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._PackageInfo_Object_AWSEquatable_AWSSerializable, A._PackageInfo_Object_AWSEquatable);
    _inherit(A._PackageInfo_Object_AWSEquatable_AWSSerializable_AWSDebuggable, A._PackageInfo_Object_AWSEquatable_AWSSerializable);
    _inherit(A.PackageInfo, A._PackageInfo_Object_AWSEquatable_AWSSerializable_AWSDebuggable);
    _inherit(A._PubspecInfo_Object_AWSSerializable_AWSDebuggable, A._PubspecInfo_Object_AWSSerializable);
    _inherit(A.PubspecInfo, A._PubspecInfo_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._$AftConfig, A.AftConfig);
    _inherit(A.PackageSelector, A._PackageSelector_Object_AWSSerializable);
    _inheritMany(A.PackageSelector, [A._PackageSelector, A._PackageOrComponentSelector, A._AllPackageSelector, A._DevelopmentPackageSelector, A._ExamplePackageSelector, A._TestPackageSelector, A._DartPackageSelector, A._FlutterPackageSelector, A._RootPackageSelector, A._CurrentPackageSelector, A._OrPackageSelector, A._AndPackageSelector]);
    _inherit(A._RawAftConfig_Object_AWSSerializable_AWSDebuggable, A._RawAftConfig_Object_AWSSerializable);
    _inherit(A.RawAftConfig, A._RawAftConfig_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._Environment_Object_AWSSerializable_AWSDebuggable, A._Environment_Object_AWSSerializable);
    _inherit(A.Environment, A._Environment_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._AndroidEnvironment_Object_AWSSerializable_AWSDebuggable, A._AndroidEnvironment_Object_AWSSerializable);
    _inherit(A.AndroidEnvironment, A._AndroidEnvironment_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._IosEnvironment_Object_AWSSerializable_AWSDebuggable, A._IosEnvironment_Object_AWSSerializable);
    _inherit(A.IosEnvironment, A._IosEnvironment_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._MacOSEnvironment_Object_AWSSerializable_AWSDebuggable, A._MacOSEnvironment_Object_AWSSerializable);
    _inherit(A.MacOSEnvironment, A._MacOSEnvironment_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._GitHubPackageConfig_Object_AWSSerializable_AWSDebuggable, A._GitHubPackageConfig_Object_AWSSerializable);
    _inherit(A.GitHubPackageConfig, A._GitHubPackageConfig_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._RawAftComponent_Object_AWSSerializable_AWSDebuggable, A._RawAftComponent_Object_AWSSerializable);
    _inherit(A.RawAftComponent, A._RawAftComponent_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._AftScript_Object_AWSSerializable_AWSDebuggable, A._AftScript_Object_AWSSerializable);
    _inherit(A.AftScript, A._AftScript_Object_AWSSerializable_AWSDebuggable);
    _inherit(A._$Environment, A.Environment);
    _inherit(A._$PlatformEnvironment, A.PlatformEnvironment);
    _inherit(A._$AndroidEnvironment, A.AndroidEnvironment);
    _inherit(A._$IosEnvironment, A.IosEnvironment);
    _inherit(A._$MacOSEnvironment, A.MacOSEnvironment);
    _inherit(A._$GitHubPackageConfig, A.GitHubPackageConfig);
    _inherit(A.Group, A._Group_Object_AWSSerializable);
    _inherit(A._$Group, A.Group);
    _inherit(A.PubVersionResolver, A.VersionResolver);
    _inherit(A._CancelOnErrorSubscriptionWrapper, A.DelegatingStreamSubscription);
    _inherit(A.CaseInsensitiveMap, A.DelegatingMap);
    _inherit(A.AWSHttpClientImpl, A.AWSHttpClient);
    _inherit(A._AWSOperation_Object_AWSDebuggable_AWSLoggerMixin, A._AWSOperation_Object_AWSDebuggable);
    _inherit(A.AWSOperation, A._AWSOperation_Object_AWSDebuggable_AWSLoggerMixin);
    _inherit(A._AWSHttpOperation_AWSOperation_AWSProgressOperation, A.AWSOperation);
    _inherit(A.AWSHttpOperation, A._AWSHttpOperation_AWSOperation_AWSProgressOperation);
    _inherit(A.AWSHttpRequest, A.AWSBaseHttpRequest);
    _inherit(A.AWSStreamedHttpResponse, A.AWSBaseHttpResponse);
    _inherit(A.RequestCache, A._RequestCache__Enum_JSEnum);
    _inherit(A.RequestCredentials, A._RequestCredentials__Enum_JSEnum);
    _inherit(A.RequestRedirect, A._RequestRedirect__Enum_JSEnum);
    _inherit(A.RequestDestination, A._RequestDestination__Enum_JSEnum);
    _inherit(A.RequestMode, A._RequestMode__Enum_JSEnum);
    _inherit(A.ReadableStreamType, A._ReadableStreamType__Enum_JSEnum);
    _inherit(A.ReadableStreamReaderMode, A._ReadableStreamReaderMode__Enum_JSEnum);
    _inherit(A.ReadableStreamView, A.StreamView);
    _inherit(A.AWSLogger, A._AWSLogger_Object_AWSDebuggable);
    _inherit(A._LogEntry_Object_AWSEquatable_AWSDebuggable, A._LogEntry_Object_AWSEquatable);
    _inherit(A.LogEntry, A._LogEntry_Object_AWSEquatable_AWSDebuggable);
    _inherit(A._BuiltList, A.BuiltList);
    _inherit(A._BuiltListMultimap, A.BuiltListMultimap);
    _inherit(A._BuiltMap, A.BuiltMap);
    _inherit(A._BuiltSet, A.BuiltSet);
    _inherit(A._BuiltSetMultimap, A.BuiltSetMultimap);
    _inheritMany(A.JsonObject, [A.BoolJsonObject, A.ListJsonObject, A.MapJsonObject, A.NumJsonObject, A.StringJsonObject]);
    _inheritMany(A._UnorderedEquality, [A.UnorderedIterableEquality, A.SetEquality]);
    _inherit(A.QueueList, A._QueueList_Object_ListMixin);
    _inherit(A._CastQueueList, A.QueueList);
    _inheritMany(A.FileSystem, [A.LocalFileSystem, A.NodeFileSystem]);
    _inheritMany(A.BadKeyException, [A.UnrecognizedKeysException, A.MissingRequiredKeysException, A.DisallowedNullValueException]);
    _inheritMany(A.NodeJsError, [A.JsAssertionError, A.JsRangeError, A.JsReferenceError, A.JsSyntaxError, A.JsTypeError, A.JsSystemError]);
    _inheritMany(A.Socket, [A.TTYReadStream, A.TTYWriteStream]);
    _inheritMany(A.FileSystemEntity0, [A.Directory, A.File, A.Link]);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inherit(A.CompatibleWithVersionRange, A.VersionRange);
    _inheritMany(A.Dependency, [A.SdkDependency, A.GitDependency, A.PathDependency, A.HostedDependency]);
    _inheritMany(A.Mapping, [A.MultiSectionMapping, A.SingleMapping]);
    _inheritMany(A.SourceSpanMixin, [A.SourceSpanBase, A._FileSpan, A.NullSpan]);
    _inheritMany(A.SourceSpanBase, [A.SourceMapSpan, A.SourceSpanWithContext]);
    _inherit(A.FileLocation, A.SourceLocationMixin);
    _inherit(A.SourceSpanFormatException, A.SourceSpanException);
    _inherit(A.SpanScanner, A.StringScanner);
    _inherit(A.EagerSpanScanner, A.SpanScanner);
    _inheritMany(A.SourceSpanFormatException, [A.StringScannerException, A.YamlException]);
    _inheritMany(A._ValueEvent, [A.ScalarEvent, A.SequenceStartEvent, A.MappingStartEvent]);
    _inheritMany(A.YamlNode, [A._YamlMap_YamlNode_MapMixin, A._YamlList_YamlNode_ListMixin, A.YamlScalar]);
    _inherit(A._YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin, A._YamlMap_YamlNode_MapMixin);
    _inherit(A.YamlMap, A._YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin);
    _inherit(A.YamlList, A._YamlList_YamlNode_ListMixin);
    _inherit(A.YamlMapWrapper, A._YamlMapWrapper_MapBase_UnmodifiableMapMixin);
    _inherit(A._YamlMapNodes, A.__YamlMapNodes_MapBase_UnmodifiableMapMixin);
    _inherit(A.AliasError, A.UnsupportedError);
    _inherit(A._YamlMapWrap_Object_MapMixin_UnmodifiableMapMixin, A._YamlMapWrap_Object_MapMixin);
    _inherit(A.YamlMapWrap, A._YamlMapWrap_Object_MapMixin_UnmodifiableMapMixin);
    _inherit(A.YamlListWrap, A._YamlListWrap_Object_ListMixin);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, A._JsonPrettyPrintMixin);
    _mixin(A.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, A._JsonPrettyPrintMixin);
    _mixin(A.__Utf8EncoderSink__Utf8Encoder_StringConversionSink, A.StringConversionSink);
    _mixin(A._AftComponent_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._AftComponent_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._AftConfig_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._AftConfig_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._PackageInfo_Object_AWSEquatable, A.AWSEquatable);
    _mixin(A._PackageInfo_Object_AWSEquatable_AWSSerializable, A.AWSSerializable);
    _mixin(A._PackageInfo_Object_AWSEquatable_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._PubspecInfo_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._PubspecInfo_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._PackageSelector_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._AftScript_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._AftScript_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._AndroidEnvironment_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._AndroidEnvironment_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._Environment_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._Environment_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._GitHubPackageConfig_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._GitHubPackageConfig_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._IosEnvironment_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._IosEnvironment_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._MacOSEnvironment_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._MacOSEnvironment_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._RawAftComponent_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._RawAftComponent_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._RawAftConfig_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._RawAftConfig_Object_AWSSerializable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._Group_Object_AWSSerializable, A.AWSSerializable);
    _mixin(A._AWSHttpOperation_AWSOperation_AWSProgressOperation, A.AWSProgressOperation);
    _mixin(A._RequestCache__Enum_JSEnum, A.JSEnum);
    _mixin(A._RequestCredentials__Enum_JSEnum, A.JSEnum);
    _mixin(A._RequestDestination__Enum_JSEnum, A.JSEnum);
    _mixin(A._RequestMode__Enum_JSEnum, A.JSEnum);
    _mixin(A._RequestRedirect__Enum_JSEnum, A.JSEnum);
    _mixin(A._ReadableStreamReaderMode__Enum_JSEnum, A.JSEnum);
    _mixin(A._ReadableStreamType__Enum_JSEnum, A.JSEnum);
    _mixin(A._AWSLogger_Object_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._LogEntry_Object_AWSEquatable, A.AWSEquatable);
    _mixin(A._LogEntry_Object_AWSEquatable_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._AWSOperation_Object_AWSDebuggable, A.AWSDebuggable);
    _mixin(A._AWSOperation_Object_AWSDebuggable_AWSLoggerMixin, A.AWSLoggerMixin);
    _mixin(A._QueueList_Object_ListMixin, A.ListBase);
    _mixin(A._YamlList_YamlNode_ListMixin, A.ListBase);
    _mixin(A._YamlMap_YamlNode_MapMixin, A.MapBase);
    _mixin(A._YamlMap_YamlNode_MapMixin_UnmodifiableMapMixin, A.UnmodifiableMapMixin);
    _mixin(A._YamlMapWrapper_MapBase_UnmodifiableMapMixin, A.UnmodifiableMapMixin);
    _mixin(A.__YamlMapNodes_MapBase_UnmodifiableMapMixin, A.UnmodifiableMapMixin);
    _mixin(A._YamlListWrap_Object_ListMixin, A.ListBase);
    _mixin(A._YamlMapWrap_Object_MapMixin, A.MapBase);
    _mixin(A._YamlMapWrap_Object_MapMixin_UnmodifiableMapMixin, A.UnmodifiableMapMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "bool(String)", "Map<String,Object?>()", "Null()", "String?(Object?)", "bool(@)", "~(Object,StackTrace)", "String(Object?)", "@(@)", "~(Object?)", "int(Object?)", "Object?(@)", "Future<~>()", "Null(Object,StackTrace)", "String(Match)", "bool()", "~(@,@)", "Trace()", "bool(Object?,Object?)", "String(@)", "Frame()", "~(@)", "Map<String,Dependency>(Object?)", "String(String)", "Frame(String)", "~(Object[StackTrace?])", "~(String,@)", "Dependency()", "PackageInfo?(String)", "~(List<int>)", "~(String)", "~(~())", "bool(Object?)", "int()", "MapEntry<String,Map<String,Object?>>(String,Dependency)", "Null(~)", "~(Object?,Object?)", "Null(@)", "Uri?(Object?)", "bool(_Highlight)", "Future<Null>()", "PackageInfo?(Object?)", "~(Uint8List,String,int)", "@()", "Null(@,StackTrace)", "~(LogEntry)", "~([Future<~>?])", "PackageInfo(@)", "VersionPropagation(Object?)", "Map<String,Object?>(PackageInfo)", "Uri(Object?)", "@(String)", "int(String?)", "Object?(PackageSelector)", "Trace(String)", "List<String>(Object?)", "PackageSelector(Object?)", "MapBuilder<String,VersionConstraint>()", "Object?(Object?)", "bool(String,String)", "bool(Version)", "int(int,int)", "bool(AWSLoggerPlugin)", "~(Symbol0,@)", "int(@,@)", "List<String>?(Object?)", "int(Frame)", "String(Frame)", "0^()(Zone,ZoneDelegate,Zone,0^())<Object?>", "0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?,Object?>", "0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?,Object?,Object?>", "AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)", "Future<~>?()", "YamlNode(Map<@,@>)", "String(MapEntry<@,YamlNode>)", "String(YamlNode)", "VersionConstraint(Object?)", "bool(String,Dependency)", "@(@,String)", "bool(PackageInfo)", "_Future<@>(@)", "MapEntry<String,String?>(String,VersionConstraint?)", "0&(JSObject)", "RawPubspecConfig(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "_ConverterStreamEventSink<@,@>(EventSink<@>)", "Environment(Object?)", "RawAftConfig?(Object?)", "RawAftConfig(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "PlatformEnvironment?(Object?)", "Future<~>(Object,Chain)", "StringBuffer(StringBuffer,String)", "List<RawAftComponent>(Object?)", "RawAftComponent(@)", "Map<String,AftScript>(Object?)", "MapEntry<String,AftScript>(@,@)", "GitHubPackageConfig?(Object?)", "Map<String,Object?>(RawAftComponent)", "MapEntry<String,Map<String,Object?>>(String,AftScript)", "RawAftComponent(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "String(StringBuffer)", "AftScript(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "AftComponent(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "~(Uint8List,int,int)", "MapBuilder<String,PackageInfo>()", "~(@,StackTrace)", "ListBuilder<String>()", "MapBuilder<String,AftComponent>()", "MapBuilder<String,AftScript>()", "Future<Map<String,VersionConstraint>?>()", "~(PackageInfo)", "~(int,@)", "Group(GroupBuilder)", "List<PackageInfo>(Object?)", "String(MapEntry<String,String>)", "Future<0&>()", "_LineSplitterEventSink(EventSink<String>)", "_VersionWindow()", "Map<String,List<PackageInfo>>(Object?)", "Version(Version)", "Future<Uint8List>(StreamSubscription<List<int>>,Future<Uint8List>)", "Future<@>()", "int(int)", "Future<Null>(Object,StackTrace)", "bool(X509Certificate,String,int)", "~(Object,@)", "AWSBaseHttpResponse(AWSBaseHttpResponse)", "0&(Object,StackTrace)", "~(String,String,JavaScriptObject)", "JavaScriptObject(JavaScriptObject)", "Future<~>(JavaScriptObject)", "MapEntry<String,List<PackageInfo>>(@,@)", "bool(AWSLogger)", "LogEntry(LogRecord)", "~(Uint8List)", "Iterable<String>()", "String(RegExpMatch)", "int(int,@)", "IndentingBuiltValueToStringHelper(String)", "ListBuilder<Object>()", "ListMultimapBuilder<Object,Object>()", "MapBuilder<Object,Object>()", "SetBuilder<Object>()", "SetMultimapBuilder<Object,Object>()", "MapEntry<String,RawAftComponent>(RawAftComponent)", "YamlMap()", "~(String,int)", "~(String,int?)", "Null(~())", "bool(MapEntry<@,@>)", "String(MapEntry<@,@>)", "0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>", "Logger()", "Iterable<FileSystemEntity>(String)", "Future<int>()", "int(FileStat)", "~(@[@])", "String(String?)", "Object(String)", "Version?()", "VersionRange?()", "VersionConstraint?()", "MapEntry<String,Dependency>(@,@)", "Uint8List({seed:int})", "~(JSObject)", "GitDependency(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "HostedDependency(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "HostedDetails?(Object?)", "HostedDetails(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "~(String,String?)", "Pubspec(Map<@,@>?)", "MapEntry<String,VersionConstraint?>(@,@)", "Pubspec(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "Version?(Object?)", "MapEntry<String,List<Map<String,Object?>>>(String,List<PackageInfo>)", "Map<String,VersionConstraint?>?(Object?)", "List<Uri>?(Object?)", "int(String)", "List<Screenshot>(Object?)", "Map<String,@>?(Object?)", "MapEntry<String,@>(@,@)", "Trace(Trace)", "Frame?(Frame)", "bool(TargetLineEntry)", "bool(TargetEntry)", "Map<String,int>()", "String?()", "int(_Line)", "~(int,int,int)", "Object(_Line)", "Object(_Highlight)", "int(_Highlight,_Highlight)", "List<_Line>(MapEntry<Object,List<_Highlight>>)", "SourceSpanWithContext()", "Uint8List(@,@)", "List<Frame>(Trace)", "int(Trace)", "PackageInfo(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "String(Trace)", "PubspecInfo(Object?)", "~([Object?])", "Frame(String,String)", "PackageFlavor(Object?)", "PubspecInfo(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)", "Pubspec(Object?)", "~(Zone,ZoneDelegate,Zone,Object,StackTrace)", "YamlMap(Object?)", "Chain()", "~([@])", "Token(AnchorToken)", "Token(TagToken)", "bool(_SimpleKey?)", "~(String[SourceSpan?])", "YamlScalar(@)", "~(YamlNode)", "~(@,YamlNode)", "~(YamlMap,Pubspec{isRoot:bool})", "MapEntry<String,VersionConstraint>?(MapEntry<String,Dependency>)", "Null([Object?,Object?,Object?])", "YamlNode(@)", "Future<ProcessResult>()", "NodeProcessManager()", "~(@,StackTrace?)", "Future<0^>([0^/?])<Object?>", "~(Object?[Object?])", "~(Zone?,ZoneDelegate?,Zone,Object,StackTrace)", "0^(Zone?,ZoneDelegate?,Zone,0^())<Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^),1^)<Object?,Object?>", "0^(Zone?,ZoneDelegate?,Zone,0^(1^,2^),1^,2^)<Object?,Object?,Object?>", "~(Zone?,ZoneDelegate?,Zone,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~())", "Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))", "~(Zone,ZoneDelegate,Zone,String)", "Zone(Zone?,ZoneDelegate?,Zone,ZoneSpecification?,Map<Object?,Object?>?)", "List<String>()", "List<String>(String,List<String>)", "0^(0^,0^)<num>", "AftComponent(Map<String,Object?>)", "PackageInfo(Map<String,Object?>)", "AftScript(Map<String,Object?>)", "0^(@)<Object?>", "Null(@,@)", "MapEntry<String,AftComponent>(String,RawAftComponent)", "bool(@,@)", "Uri(@)", "SdkDependency(0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1),
      "2;isBreaking": (t1, t2) => o => o instanceof A._Record_2_isBreaking && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","BufferModule":"LegacyJavaScriptObject","BufferConstants":"LegacyJavaScriptObject","Buffer":"LegacyJavaScriptObject","ConsoleModule":"LegacyJavaScriptObject","Console":"LegacyJavaScriptObject","DNS":"LegacyJavaScriptObject","DNSLookupOptions":"LegacyJavaScriptObject","DNSAddress":"LegacyJavaScriptObject","Resolver":"LegacyJavaScriptObject","EventEmitter":"LegacyJavaScriptObject","FS":"LegacyJavaScriptObject","FSConstants":"LegacyJavaScriptObject","FSWatcher":"LegacyJavaScriptObject","ReadStream":"LegacyJavaScriptObject","ReadStreamOptions":"LegacyJavaScriptObject","WriteStream":"LegacyJavaScriptObject","WriteStreamOptions":"LegacyJavaScriptObject","FileOptions":"LegacyJavaScriptObject","StatOptions":"LegacyJavaScriptObject","MkdirOptions":"LegacyJavaScriptObject","RmdirOptions":"LegacyJavaScriptObject","WatchOptions":"LegacyJavaScriptObject","WatchFileOptions":"LegacyJavaScriptObject","Stats":"LegacyJavaScriptObject","HTTP":"LegacyJavaScriptObject","HttpAgent":"LegacyJavaScriptObject","HttpAgentOptions":"LegacyJavaScriptObject","RequestOptions":"LegacyJavaScriptObject","ClientRequest":"LegacyJavaScriptObject","HttpServer":"LegacyJavaScriptObject","ServerResponse":"LegacyJavaScriptObject","IncomingMessage":"LegacyJavaScriptObject","Promise0":"LegacyJavaScriptObject","Date":"LegacyJavaScriptObject","JsError":"LegacyJavaScriptObject","Atomics":"LegacyJavaScriptObject","Modules":"LegacyJavaScriptObject","Module":"LegacyJavaScriptObject","Net":"LegacyJavaScriptObject","Socket":"LegacyJavaScriptObject","NetAddress":"LegacyJavaScriptObject","NetServer":"LegacyJavaScriptObject","NodeJsError":"LegacyJavaScriptObject","JsAssertionError":"LegacyJavaScriptObject","JsRangeError":"LegacyJavaScriptObject","JsReferenceError":"LegacyJavaScriptObject","JsSyntaxError":"LegacyJavaScriptObject","JsTypeError":"LegacyJavaScriptObject","JsSystemError":"LegacyJavaScriptObject","OS":"LegacyJavaScriptObject","CPU":"LegacyJavaScriptObject","CPUTimes":"LegacyJavaScriptObject","OSConstants":"LegacyJavaScriptObject","OSSignalConstants":"LegacyJavaScriptObject","OSErrorConstants":"LegacyJavaScriptObject","OSDLOpenConstants":"LegacyJavaScriptObject","Path":"LegacyJavaScriptObject","PathObject":"LegacyJavaScriptObject","Process0":"LegacyJavaScriptObject","CPUUsage":"LegacyJavaScriptObject","Release":"LegacyJavaScriptObject","StreamModule":"LegacyJavaScriptObject","Readable":"LegacyJavaScriptObject","Writable":"LegacyJavaScriptObject","Duplex":"LegacyJavaScriptObject","Transform":"LegacyJavaScriptObject","WritableOptions":"LegacyJavaScriptObject","ReadableOptions":"LegacyJavaScriptObject","Immediate":"LegacyJavaScriptObject","Timeout":"LegacyJavaScriptObject","TTY":"LegacyJavaScriptObject","TTYReadStream":"LegacyJavaScriptObject","TTYWriteStream":"LegacyJavaScriptObject","Util":"LegacyJavaScriptObject","JavaScriptObject":{"JSObject":[]},"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"LegacyJavaScriptObject":{"JavaScriptObject":[],"JSObject":[],"FS":[],"Stats":[],"OS":[],"Path":[]},"JSArray":{"List":["1"],"JavaScriptObject":[],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"JavaScriptObject":[],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"],"TrustedGetRuntimeType":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"CastMap":{"MapBase":["3","4"],"Map":["3","4"],"MapBase.K":"3","MapBase.V":"4"},"CastQueue":{"Queue":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"LateError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"SkipWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"SkipWhileIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"NonNullsIterable":{"Iterable":["1"],"Iterable.E":"1"},"NonNullsIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"Symbol":{"Symbol0":[]},"_Record_2":{"_Record2":[],"_Record":[]},"_Record_2_isBreaking":{"_Record2":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JsIdentityLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_Record2":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JavaScriptObject":[],"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JavaScriptObject":[],"JSObject":[]},"NativeByteData":{"JavaScriptObject":[],"ByteData":[],"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JavaScriptObject":[],"JSObject":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JavaScriptObject":[],"EfficientLengthIterable":["double"],"JSObject":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"ListBase":["double"],"Float32List":[],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JavaScriptObject":[],"EfficientLengthIterable":["double"],"JSObject":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"ListBase":["double"],"Float64List":[],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"JavaScriptObject":[],"EfficientLengthIterable":["double"],"JSObject":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Int16List":[],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Int32List":[],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Int8List":[],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint16List":[],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint32List":[],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint8ClampedList":[],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"Uint8List":[],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"JavaScriptObject":[],"EfficientLengthIterable":["int"],"JSObject":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"AsyncError":{"Error":[]},"_Future":{"Future":["1"]},"EventSink":{"Sink":["1"]},"StreamController":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"_BroadcastStream":{"_ControllerStream":["1"],"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamView":{"Stream":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_StreamController":{"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamSinkWrapper":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_EmptyStream":{"Stream":["1"],"Stream.T":"1"},"_ForwardingStream":{"Stream":["2"]},"_ForwardingStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_MapStream":{"_ForwardingStream":["1","2"],"Stream":["2"],"Stream.T":"2"},"_EventSinkWrapper":{"EventSink":["1"],"Sink":["1"]},"_SinkTransformerStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_BoundSinkStream":{"Stream":["2"],"Stream.T":"2"},"_ZoneSpecification":{"ZoneSpecification":[]},"_ZoneDelegate":{"ZoneDelegate":[]},"_Zone":{"Zone":[]},"_CustomZone":{"_Zone":[],"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapBase":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_CustomHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_LinkedHashSet":{"_SetBase":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"UnmodifiableListView":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListBase.E":"1","UnmodifiableListMixin.E":"1"},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ListQueue":{"Queue":["1"],"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"_ListQueueIterator":{"Iterator":["1"]},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ConverterStreamEventSink":{"EventSink":["1"],"Sink":["1"]},"_LineSplitterEventSink":{"StringConversionSink":[],"EventSink":["String"],"Sink":["String"]},"_JsonMap":{"MapBase":["String","@"],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ListIterable.E":"String","Iterable.E":"String"},"_JsonDecoderSink":{"_StringSinkConversionSink":["StringBuffer"],"StringConversionSink":[],"Sink":["String"],"_StringSinkConversionSink.0":"StringBuffer"},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"_UnicodeSubsetEncoderSink":{"StringConversionSink":[],"Sink":["String"]},"_UnicodeSubsetDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AsciiDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"_ErrorHandlingAsciiDecoderSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"_SimpleAsciiDecoderSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"_BufferCachingBase64Encoder":{"_Base64Encoder":[]},"_Base64EncoderSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"_AsciiBase64EncoderSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"_Utf8Base64EncoderSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"Base64Decoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"_Base64DecoderSink":{"StringConversionSink":[],"Sink":["String"]},"ByteConversionSink":{"Sink":["List<int>"]},"_ByteAdapterSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"ChunkedConversionSink":{"Sink":["1"]},"_FusedCodec":{"Codec":["1","3"],"Codec.S":"1"},"Converter":{"StreamTransformer":["1","2"]},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonEncoder":{"Converter":["Object?","String"],"StreamTransformer":["Object?","String"],"Converter.S":"Object?","Converter.T":"String"},"_JsonEncoderSink":{"Sink":["Object?"]},"_JsonUtf8EncoderSink":{"Sink":["Object?"]},"JsonDecoder":{"Converter":["String","Object?"],"StreamTransformer":["String","Object?"],"Converter.S":"String","Converter.T":"Object?"},"LineSplitter":{"StreamTransformer":["String","String"]},"_LineSplitterSink":{"StringConversionSink":[],"Sink":["String"]},"StringConversionSink":{"Sink":["String"]},"_ClosableStringSink":{"StringSink":[]},"_StringConversionSinkAsStringSinkAdapter":{"StringSink":[]},"_StringSinkConversionSink":{"StringConversionSink":[],"Sink":["String"]},"_StringAdapterSink":{"StringConversionSink":[],"Sink":["String"]},"_Utf8StringSinkAdapter":{"ByteConversionSink":[],"Sink":["List<int>"]},"_Utf8ConversionSink":{"ByteConversionSink":[],"Sink":["List<int>"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"],"Converter.S":"String","Converter.T":"List<int>"},"_Utf8EncoderSink":{"StringConversionSink":[],"Sink":["String"]},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"],"Converter.S":"List<int>","Converter.T":"String"},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExp":{"Pattern":[]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Comparable":["String"],"Pattern":[]},"StringBuffer":{"StringSink":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"_WeakReferenceWrapper":{"WeakReference":["1"]},"_Enum":{"Enum":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"RangeError":[],"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[],"Error":[]},"_StringStackTrace":{"StackTrace":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"_StreamSinkImpl":{"EventSink":["1"],"Sink":["1"],"StreamConsumer":["1"]},"_IOSinkImpl":{"_StreamSinkImpl":["List<int>"],"IOSink":[],"EventSink":["List<int>"],"Sink":["List<int>"],"StreamConsumer":["List<int>"],"StringSink":[],"_StreamSinkImpl.T":"List<int>"},"ProcessException":{"Exception":[]},"NullRejectionException":{"Exception":[]},"ActionResult":{"Enum":[]},"NodeLoggerPlugin":{"AWSLoggerPlugin":[]},"NodePlatform":{"Platform":[]},"NodeProcessManager":{"ProcessManager":[]},"NodeProcess":{"Process":[]},"_UnreachableError":{"Error":[]},"AftConfig":{"AWSSerializable":["Map<String,Object?>"]},"AftComponent":{"AWSSerializable":["Map<String,Object?>"]},"PackageInfo":{"AWSEquatable":["PackageInfo"],"AWSSerializable":["Map<String,Object?>"],"Comparable":["PackageInfo"],"AWSEquatable.T":"PackageInfo"},"PubspecInfo":{"AWSSerializable":["Map<String,Object?>"]},"_$AftConfigSerializer":{"StructuredSerializer":["AftConfig"],"Serializer":["AftConfig"]},"_$AftConfig":{"AftConfig":[],"AWSSerializable":["Map<String,Object?>"]},"PackageSelector":{"AWSSerializable":["Object?"]},"_PackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_PackageOrComponentSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_AllPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_DevelopmentPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_ExamplePackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_TestPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_DartPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_FlutterPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_RootPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_CurrentPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_OrPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"_AndPackageSelector":{"PackageSelector":[],"AWSSerializable":["Object?"]},"RawAftConfig":{"AWSSerializable":["Map<String,Object?>"]},"Environment":{"AWSSerializable":["Map<String,Object?>"]},"AndroidEnvironment":{"AWSSerializable":["Map<String,Object?>"]},"IosEnvironment":{"AWSSerializable":["Map<String,Object?>"]},"MacOSEnvironment":{"AWSSerializable":["Map<String,Object?>"]},"GitHubPackageConfig":{"AWSSerializable":["Map<String,Object?>"]},"VersionPropagation":{"Enum":[]},"RawAftComponent":{"AWSSerializable":["Map<String,Object?>"]},"AftScript":{"AWSSerializable":["Map<String,Object?>"]},"_$EnvironmentSerializer":{"StructuredSerializer":["Environment"],"Serializer":["Environment"]},"_$PlatformEnvironmentSerializer":{"StructuredSerializer":["PlatformEnvironment"],"Serializer":["PlatformEnvironment"]},"_$AndroidEnvironmentSerializer":{"StructuredSerializer":["AndroidEnvironment"],"Serializer":["AndroidEnvironment"]},"_$IosEnvironmentSerializer":{"StructuredSerializer":["IosEnvironment"],"Serializer":["IosEnvironment"]},"_$MacOSEnvironmentSerializer":{"StructuredSerializer":["MacOSEnvironment"],"Serializer":["MacOSEnvironment"]},"_$GitHubPackageConfigSerializer":{"StructuredSerializer":["GitHubPackageConfig"],"Serializer":["GitHubPackageConfig"]},"_$Environment":{"Environment":[],"AWSSerializable":["Map<String,Object?>"]},"_$PlatformEnvironment":{"PlatformEnvironment":[]},"_$AndroidEnvironment":{"AndroidEnvironment":[],"AWSSerializable":["Map<String,Object?>"]},"_$IosEnvironment":{"IosEnvironment":[],"AWSSerializable":["Map<String,Object?>"]},"_$MacOSEnvironment":{"MacOSEnvironment":[],"AWSSerializable":["Map<String,Object?>"]},"_$GitHubPackageConfig":{"GitHubPackageConfig":[],"AWSSerializable":["Map<String,Object?>"]},"JsonSerializer":{"PrimitiveSerializer":["1"],"Serializer":["1"]},"VersionConstraintSerializer":{"PrimitiveSerializer":["1"],"Serializer":["1"]},"Group":{"AWSSerializable":["Object?"]},"_$GroupSerializer":{"StructuredSerializer":["Group"],"Serializer":["Group"]},"_$Group":{"Group":[],"AWSSerializable":["Object?"]},"PackageFlavor":{"Enum":[]},"DependencyType":{"Enum":[]},"_VersionWindow":{"Enum":[]},"PubVersionResolver":{"VersionResolver":[]},"DelegatingStreamSubscription":{"StreamSubscription":["1"]},"FutureGroup":{"Sink":["Future<1>"]},"ErrorResult":{"Result":["0&"]},"ValueResult":{"Result":["1"]},"_NextRequest":{"_EventRequest":["1"]},"_CancelRequest":{"_EventRequest":["1"]},"_HasNextRequest":{"_EventRequest":["1"]},"SubscriptionStream":{"Stream":["1"],"Stream.T":"1"},"_CancelOnErrorSubscriptionWrapper":{"DelegatingStreamSubscription":["1"],"StreamSubscription":["1"]},"CaseInsensitiveMap":{"DelegatingMap":["String","1"],"Map":["String","1"],"DelegatingMap.K":"String","DelegatingMap.V":"1"},"AWSHttpException":{"Exception":[]},"CancellationException":{"Exception":[]},"AlpnProtocol":{"Enum":[]},"SupportedProtocols":{"Enum":[]},"AWSHttpClientImpl":{"AWSHttpClient":[]},"AWSHttpMethod":{"Enum":[]},"AWSHttpOperation":{"_AWSHttpOperation_AWSOperation_AWSProgressOperation":["1"],"AWSOperation":["1"],"Cancelable":[]},"AWSBaseHttpRequest":{"StreamSplitter":["List<int>"]},"AWSHttpRequest":{"AWSBaseHttpRequest":[],"StreamSplitter":["List<int>"]},"AWSBaseHttpResponse":{"StreamSplitter":["List<int>"]},"AWSStreamedHttpResponse":{"AWSBaseHttpResponse":[],"StreamSplitter":["List<int>"]},"RequestCache":{"Enum":[]},"RequestCredentials":{"Enum":[]},"RequestRedirect":{"Enum":[]},"RequestDestination":{"Enum":[]},"RequestMode":{"Enum":[]},"ReadableStreamView":{"StreamView":["List<int>"],"Stream":["List<int>"],"Stream.T":"List<int>","StreamView.T":"List<int>"},"ReadableStreamType":{"Enum":[]},"ReadableStreamReaderMode":{"Enum":[]},"LogEntry":{"AWSEquatable":["LogEntry"],"AWSEquatable.T":"LogEntry"},"LogLevel":{"Enum":[],"Comparable":["LogLevel"]},"SimpleLogPrinter":{"AWSLoggerPlugin":[]},"AWSOperation":{"Cancelable":[]},"CopyOnWriteList":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"BuiltList":{"Iterable":["1"]},"_BuiltList":{"BuiltList":["1"],"Iterable":["1"]},"_BuiltListMultimap":{"BuiltListMultimap":["1","2"]},"_BuiltMap":{"BuiltMap":["1","2"]},"BuiltSet":{"Iterable":["1"]},"_BuiltSet":{"BuiltSet":["1"],"Iterable":["1"]},"_BuiltSetMultimap":{"BuiltSetMultimap":["1","2"]},"BuiltValueNullFieldError":{"Error":[]},"BuiltValueNestedFieldError":{"Error":[]},"BoolJsonObject":{"JsonObject":[]},"ListJsonObject":{"JsonObject":[]},"MapJsonObject":{"JsonObject":[]},"NumJsonObject":{"JsonObject":[]},"StringJsonObject":{"JsonObject":[]},"DeserializationError":{"Error":[]},"BigIntSerializer":{"PrimitiveSerializer":["BigInt"],"Serializer":["BigInt"]},"BoolSerializer":{"PrimitiveSerializer":["bool"],"Serializer":["bool"]},"BuiltJsonSerializers":{"Serializers":[]},"BuiltListMultimapSerializer":{"StructuredSerializer":["BuiltListMultimap<@,@>"],"Serializer":["BuiltListMultimap<@,@>"]},"BuiltListSerializer":{"StructuredSerializer":["BuiltList<@>"],"Serializer":["BuiltList<@>"]},"BuiltMapSerializer":{"StructuredSerializer":["BuiltMap<@,@>"],"Serializer":["BuiltMap<@,@>"]},"BuiltSetMultimapSerializer":{"StructuredSerializer":["BuiltSetMultimap<@,@>"],"Serializer":["BuiltSetMultimap<@,@>"]},"BuiltSetSerializer":{"StructuredSerializer":["BuiltSet<@>"],"Serializer":["BuiltSet<@>"]},"DateTimeSerializer":{"PrimitiveSerializer":["DateTime"],"Serializer":["DateTime"]},"DoubleSerializer":{"PrimitiveSerializer":["double"],"Serializer":["double"]},"DurationSerializer":{"PrimitiveSerializer":["Duration"],"Serializer":["Duration"]},"Int64Serializer":{"PrimitiveSerializer":["Int64"],"Serializer":["Int64"]},"IntSerializer":{"PrimitiveSerializer":["int"],"Serializer":["int"]},"JsonObjectSerializer":{"PrimitiveSerializer":["JsonObject"],"Serializer":["JsonObject"]},"NullSerializer":{"PrimitiveSerializer":["Null"],"Serializer":["Null"]},"NumSerializer":{"PrimitiveSerializer":["num"],"Serializer":["num"]},"RegExpSerializer":{"PrimitiveSerializer":["RegExp"],"Serializer":["RegExp"]},"StringSerializer":{"PrimitiveSerializer":["String"],"Serializer":["String"]},"Uint8ListSerializer":{"PrimitiveSerializer":["Uint8List"],"Serializer":["Uint8List"]},"UriSerializer":{"PrimitiveSerializer":["Uri"],"Serializer":["Uri"]},"StandardJsonPlugin":{"SerializerPlugin":[]},"ParsedYamlException":{"Exception":[]},"_WrappedYamlException":{"Exception":[]},"DefaultEquality":{"Equality":["1"]},"IterableEquality":{"Equality":["Iterable<1>"]},"ListEquality":{"Equality":["List<1>"]},"_UnorderedEquality":{"Equality":["2"]},"UnorderedIterableEquality":{"_UnorderedEquality":["1","Iterable<1>"],"Equality":["Iterable<1>"],"_UnorderedEquality.T":"Iterable<1>","_UnorderedEquality.E":"1"},"SetEquality":{"_UnorderedEquality":["1","Set<1>"],"Equality":["Set<1>"],"_UnorderedEquality.T":"Set<1>","_UnorderedEquality.E":"1"},"MapEquality":{"Equality":["Map<1,2>"]},"DeepCollectionEquality":{"Equality":["@"]},"QueueList":{"ListBase":["1"],"List":["1"],"Queue":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListBase.E":"1","QueueList.E":"1"},"_CastQueueList":{"QueueList":["2"],"ListBase":["2"],"List":["2"],"Queue":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","QueueList.E":"2"},"DelegatingMap":{"Map":["1","2"]},"LocalFileSystem":{"FileSystem":[]},"Int64":{"Comparable":["Object"]},"BadKeyException":{"Exception":[]},"UnrecognizedKeysException":{"Exception":[]},"DisallowedNullValueException":{"Exception":[]},"CheckedFromJsonException":{"Exception":[]},"Level":{"Comparable":["Level"]},"Directory":{"Directory0":[],"FileSystemEntity":[]},"File":{"FileSystemEntity":[]},"NodeFileSystem":{"FileSystem":[]},"FileSystemEntity0":{"FileSystemEntity":[]},"Link":{"FileSystemEntity":[]},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"LocalPlatform":{"Platform":[]},"LocalProcessManager":{"ProcessManager":[]},"Version":{"VersionRange":[],"VersionConstraint":[],"Comparable":["VersionRange"]},"_EmptyVersion":{"VersionConstraint":[]},"VersionRange":{"Comparable":["VersionRange"],"VersionConstraint":[]},"CompatibleWithVersionRange":{"VersionRange":[],"Comparable":["VersionRange"],"VersionConstraint":[]},"SdkDependency":{"Dependency":[]},"GitDependency":{"Dependency":[]},"HostedDependency":{"Dependency":[]},"PathDependency":{"Dependency":[]},"MultiSectionMapping":{"Mapping":[]},"SingleMapping":{"Mapping":[]},"_MappingTokenizer":{"Iterator":["String"]},"SourceMapSpan":{"SourceSpan":[],"Comparable":["SourceSpan"]},"FileLocation":{"SourceLocation":[],"Comparable":["SourceLocation"]},"_FileSpan":{"FileSpan":[],"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation":{"Comparable":["SourceLocation"]},"SourceLocationMixin":{"SourceLocation":[],"Comparable":["SourceLocation"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"Chain":{"StackTrace":[]},"LazyChain":{"Chain":[],"StackTrace":[]},"LazyTrace":{"Trace":[],"StackTrace":[]},"Trace":{"StackTrace":[]},"UnparsedFrame":{"Frame":[]},"EagerSpanScanner":{"SpanScanner":[]},"_EagerSpanScannerState":{"LineScannerState":[]},"StringScannerException":{"FormatException":[],"Exception":[]},"DocumentStartEvent":{"Event":[]},"DocumentEndEvent":{"Event":[]},"AliasEvent":{"Event":[]},"_ValueEvent":{"Event":[]},"ScalarEvent":{"Event":[]},"SequenceStartEvent":{"Event":[]},"MappingStartEvent":{"Event":[]},"EventType":{"Enum":[]},"NullSpan":{"SourceSpan":[],"Comparable":["SourceSpan"]},"_Chomping":{"Enum":[]},"AnchorToken":{"Token":[]},"TagToken":{"Token":[]},"VersionDirectiveToken":{"Token":[]},"TagDirectiveToken":{"Token":[]},"AliasToken":{"Token":[]},"ScalarToken":{"Token":[]},"TokenType":{"Enum":[]},"YamlException":{"FormatException":[],"Exception":[]},"YamlMap":{"MapBase":["@","@"],"UnmodifiableMapMixin":["@","@"],"YamlNode":[],"Map":["@","@"],"MapBase.K":"@","MapBase.V":"@","UnmodifiableMapMixin.K":"@","UnmodifiableMapMixin.V":"@"},"YamlScalar":{"YamlNode":[]},"YamlList":{"ListBase":["@"],"List":["@"],"EfficientLengthIterable":["@"],"YamlNode":[],"Iterable":["@"],"ListBase.E":"@"},"YamlMapWrapper":{"YamlMap":[],"MapBase":["@","@"],"UnmodifiableMapMixin":["@","@"],"Map":["@","@"],"YamlNode":[],"MapBase.K":"@","MapBase.V":"@","UnmodifiableMapMixin.K":"@","UnmodifiableMapMixin.V":"@"},"_YamlMapNodes":{"MapBase":["@","YamlNode"],"UnmodifiableMapMixin":["@","YamlNode"],"Map":["@","YamlNode"],"MapBase.K":"@","MapBase.V":"YamlNode","UnmodifiableMapMixin.K":"@","UnmodifiableMapMixin.V":"YamlNode"},"YamlListWrapper":{"YamlList":[],"ListBase":["@"],"List":["@"],"EfficientLengthIterable":["@"],"Iterable":["@"],"YamlNode":[],"ListBase.E":"@"},"_YamlListNodes":{"ListBase":["YamlNode"],"List":["YamlNode"],"EfficientLengthIterable":["YamlNode"],"Iterable":["YamlNode"],"ListBase.E":"YamlNode"},"PathError":{"Error":[]},"AliasError":{"Error":[]},"_YamlAssertionError":{"Error":[]},"YamlScalarWrap":{"YamlScalar":[],"YamlNode":[]},"YamlMapWrap":{"YamlMap":[],"MapBase":["@","@"],"UnmodifiableMapMixin":["@","@"],"Map":["@","@"],"YamlNode":[],"MapBase.K":"@","MapBase.V":"@","UnmodifiableMapMixin.K":"@","UnmodifiableMapMixin.V":"@"},"YamlListWrap":{"YamlList":[],"ListBase":["@"],"List":["@"],"EfficientLengthIterable":["@"],"Iterable":["@"],"YamlNode":[],"ListBase.E":"@"},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Directory0":{"FileSystemEntity":[]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"StreamTransformerBase":2,"_DelayedEvent":1,"ChunkedConversionSink":1,"AWSProgressOperation":1,"_QueueList_Object_ListMixin":1}'));
  var string$ = {
    x20must_: " must not be greater than the number of characters in the file, ",
    x27_has_: "' has been assigned during initialization.",
    x3d_____: "===== asynchronous gap ===========================\n",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    Broadc: "Broadcast stream controllers do not support pause callbacks",
    Cannoteff: "Cannot extract a file path from a URI with a fragment component",
    Cannotefq: "Cannot extract a file path from a URI with a query component",
    Cannoten: "Cannot extract a non-Windows file path from a file URI with an authority",
    Cannotf: "Cannot fire new event. Controller is already firing an event",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    max_mu: "max must be in range 0 < max \u2264 2^32, was ",
    serial: "serializer must be StructuredSerializer or PrimitiveSerializer"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_dynamic: findType("@<@>"),
      AWSBaseHttpResponse: findType("AWSBaseHttpResponse"),
      AWSEquatable_AWSEquatable_nullable_Object: findType("AWSEquatable<AWSEquatable<Object?>>"),
      AWSLogger: findType("AWSLogger"),
      AWSLoggerPlugin: findType("AWSLoggerPlugin"),
      AWSSerializable_nullable_Object: findType("AWSSerializable<Object?>"),
      A_Function_A_extends_nullable_Object_2_String_and_A_Function_nullable_Object_$named_readValue_nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String: findType("0^(String,0^(Object?){readValue:Object?(Map<@,@>,String)?})<Object?>"),
      AftComponent: findType("AftComponent"),
      AftConfig: findType("AftConfig"),
      AftScript: findType("AftScript"),
      AliasEvent: findType("AliasEvent"),
      AndroidEnvironment: findType("AndroidEnvironment"),
      AsyncError: findType("AsyncError"),
      AsyncMemoizer_void: findType("AsyncMemoizer<~>"),
      Base64Codec: findType("Base64Codec"),
      BigInt: findType("BigInt"),
      BuiltListMultimap_dynamic_dynamic: findType("BuiltListMultimap<@,@>"),
      BuiltList_String: findType("BuiltList<String>"),
      BuiltList_dynamic: findType("BuiltList<@>"),
      BuiltList_nullable_Object: findType("BuiltList<Object?>"),
      BuiltMap_String_AftComponent: findType("BuiltMap<String,AftComponent>"),
      BuiltMap_String_AftScript: findType("BuiltMap<String,AftScript>"),
      BuiltMap_String_PackageInfo: findType("BuiltMap<String,PackageInfo>"),
      BuiltMap_String_VersionConstraint: findType("BuiltMap<String,VersionConstraint>"),
      BuiltMap_dynamic_dynamic: findType("BuiltMap<@,@>"),
      BuiltSetMultimap_dynamic_dynamic: findType("BuiltSetMultimap<@,@>"),
      BuiltSet_dynamic: findType("BuiltSet<@>"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      CancelableCompleter_AWSBaseHttpResponse: findType("CancelableCompleter<AWSBaseHttpResponse>"),
      Chain: findType("Chain"),
      ChangelogUpdate: findType("ChangelogUpdate"),
      CodeUnits: findType("CodeUnits"),
      CollectionStyle: findType("CollectionStyle"),
      Comparable_dynamic: findType("Comparable<@>"),
      Comparable_nullable_Object: findType("Comparable<Object?>"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConstantStringMap_String_String: findType("ConstantStringMap<String,String>"),
      DateTime: findType("DateTime"),
      Dependency: findType("Dependency"),
      Deputy: findType("Deputy"),
      Directory: findType("Directory0"),
      DocumentEndEvent: findType("DocumentEndEvent"),
      DocumentStartEvent: findType("DocumentStartEvent"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Environment: findType("Environment"),
      Error: findType("Error"),
      EventSink_String: findType("EventSink<String>"),
      Exception: findType("Exception"),
      Expando__Node: findType("Expando<_Node>"),
      FS: findType("FS"),
      FileSpan: findType("FileSpan"),
      FileStat: findType("FileStat"),
      Float32List: findType("Float32List"),
      Float64List: findType("Float64List"),
      FormatException: findType("FormatException"),
      Frame: findType("Frame"),
      Frame_Function_String: findType("Frame(String)"),
      FullType: findType("FullType"),
      Function: findType("Function"),
      FutureGroup_dynamic: findType("FutureGroup<@>"),
      Future_Never: findType("Future<0&>"),
      Future_String: findType("Future<String>"),
      Future_Uint8List: findType("Future<Uint8List>"),
      Future_dynamic: findType("Future<@>"),
      Future_nullable_Version: findType("Future<Version?>"),
      Future_void_Function_JavaScriptObject: findType("Future<~>(JavaScriptObject)"),
      GitChanges: findType("GitChanges"),
      GitDependency: findType("GitDependency"),
      GitDir: findType("GitDir"),
      GitHubPackageConfig: findType("GitHubPackageConfig"),
      Group: findType("Group"),
      GroupBuilder: findType("GroupBuilder"),
      HostedDependency: findType("HostedDependency"),
      HostedDetails: findType("HostedDetails"),
      Int16List: findType("Int16List"),
      Int32List: findType("Int32List"),
      Int64: findType("Int64"),
      Int8List: findType("Int8List"),
      Invocation: findType("Invocation"),
      IosEnvironment: findType("IosEnvironment"),
      IterableEquality_dynamic: findType("IterableEquality<@>"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      Iterable_nullable_Object: findType("Iterable<Object?>"),
      JSArray_AWSLogger: findType("JSArray<AWSLogger>"),
      JSArray_Frame: findType("JSArray<Frame>"),
      JSArray_FullType: findType("JSArray<FullType>"),
      JSArray_Future_dynamic: findType("JSArray<Future<@>>"),
      JSArray_Future_void: findType("JSArray<Future<~>>"),
      JSArray_Mapping: findType("JSArray<Mapping>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_PackageInfo: findType("JSArray<PackageInfo>"),
      JSArray_Record_2_String_and_YamlEditor: findType("JSArray<+(String,YamlEditor)>"),
      JSArray_Result_List_int: findType("JSArray<Result<List<int>>>"),
      JSArray_Screenshot: findType("JSArray<Screenshot>"),
      JSArray_SourceEdit: findType("JSArray<SourceEdit>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_TagDirective: findType("JSArray<TagDirective>"),
      JSArray_TargetEntry: findType("JSArray<TargetEntry>"),
      JSArray_TargetLineEntry: findType("JSArray<TargetLineEntry>"),
      JSArray_Trace: findType("JSArray<Trace>"),
      JSArray_Type: findType("JSArray<Type>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray_Version: findType("JSArray<Version>"),
      JSArray_WeakReference_Cancelable: findType("JSArray<WeakReference<Cancelable>>"),
      JSArray_YamlNode: findType("JSArray<YamlNode>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray__State: findType("JSArray<_State>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable__SimpleKey: findType("JSArray<_SimpleKey?>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JavaScriptObject: findType("JavaScriptObject"),
      JavaScriptObject_Function_JavaScriptObject: findType("JavaScriptObject(JavaScriptObject)"),
      JsLinkedHashMap_String_dynamic: findType("JsLinkedHashMap<String,@>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      JsonObject: findType("JsonObject"),
      Level: findType("Level"),
      ListBuilder_String: findType("ListBuilder<String>"),
      ListBuilder_dynamic: findType("ListBuilder<@>"),
      ListEquality_dynamic: findType("ListEquality<@>"),
      ListMultimapBuilder_dynamic_dynamic: findType("ListMultimapBuilder<@,@>"),
      List_Group: findType("List<Group>"),
      List_Map_of_String_and_nullable_Object: findType("List<Map<String,Object?>>"),
      List_Object: findType("List<Object>"),
      List_PackageInfo: findType("List<PackageInfo>"),
      List_RawAftComponent: findType("List<RawAftComponent>"),
      List_String: findType("List<String>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_Object: findType("List<Object?>"),
      List_nullable__Highlight: findType("List<_Highlight?>"),
      LogEntry: findType("LogEntry"),
      LogLevel: findType("LogLevel"),
      LogRecord: findType("LogRecord"),
      Logger: findType("Logger"),
      MacOSEnvironment: findType("MacOSEnvironment"),
      MapBuilder_String_AftComponent: findType("MapBuilder<String,AftComponent>"),
      MapBuilder_String_AftScript: findType("MapBuilder<String,AftScript>"),
      MapBuilder_String_PackageInfo: findType("MapBuilder<String,PackageInfo>"),
      MapBuilder_String_VersionConstraint: findType("MapBuilder<String,VersionConstraint>"),
      MapBuilder_dynamic_dynamic: findType("MapBuilder<@,@>"),
      MapEntry_String_AftComponent: findType("MapEntry<String,AftComponent>"),
      MapEntry_String_AftScript: findType("MapEntry<String,AftScript>"),
      MapEntry_String_Dependency: findType("MapEntry<String,Dependency>"),
      MapEntry_String_RawAftComponent: findType("MapEntry<String,RawAftComponent>"),
      MapEntry_String_String: findType("MapEntry<String,String>"),
      MapEntry_String_VersionConstraint: findType("MapEntry<String,VersionConstraint>"),
      MapEntry_String_dynamic: findType("MapEntry<String,@>"),
      MapEntry_dynamic_YamlNode: findType("MapEntry<@,YamlNode>"),
      MapEntry_dynamic_dynamic: findType("MapEntry<@,@>"),
      MapEntry_of_Object_and_List__Highlight: findType("MapEntry<Object,List<_Highlight>>"),
      MapEntry_of_String_and_List_Map_of_String_and_nullable_Object: findType("MapEntry<String,List<Map<String,Object?>>>"),
      MapEntry_of_String_and_List_PackageInfo: findType("MapEntry<String,List<PackageInfo>>"),
      MapEntry_of_String_and_Map_of_String_and_nullable_Object: findType("MapEntry<String,Map<String,Object?>>"),
      MapEntry_of_String_and_nullable_String: findType("MapEntry<String,String?>"),
      MapEntry_of_String_and_nullable_VersionConstraint: findType("MapEntry<String,VersionConstraint?>"),
      MapEquality_dynamic_dynamic: findType("MapEquality<@,@>"),
      Map_String_AftScript: findType("Map<String,AftScript>"),
      Map_String_Dependency: findType("Map<String,Dependency>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_VersionConstraint: findType("Map<String,VersionConstraint>"),
      Map_Symbol_dynamic: findType("Map<Symbol0,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      Map_of_String_and_List_PackageInfo: findType("Map<String,List<PackageInfo>>"),
      Map_of_String_and_List_String: findType("Map<String,List<String>>"),
      Map_of_String_and_nullable_Object: findType("Map<String,Object?>"),
      Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>"),
      MappedIterable_String_Frame: findType("MappedIterable<String,Frame>"),
      MappedListIterable_String_Object: findType("MappedListIterable<String,Object>"),
      MappedListIterable_String_Trace: findType("MappedListIterable<String,Trace>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MappingStartEvent: findType("MappingStartEvent"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      Never: findType("0&"),
      NodeLoggerPlugin: findType("NodeLoggerPlugin"),
      NodeProcess: findType("NodeProcess"),
      NonNullsIterable_MapEntry_String_VersionConstraint: findType("NonNullsIterable<MapEntry<String,VersionConstraint>>"),
      NonNullsIterable_PackageInfo: findType("NonNullsIterable<PackageInfo>"),
      Null: findType("Null"),
      OS: findType("OS"),
      Object: findType("Object"),
      Object_Function_String: findType("Object(String)"),
      PackageFlavor: findType("PackageFlavor"),
      PackageInfo: findType("PackageInfo"),
      PackageSelector: findType("PackageSelector"),
      Pair_int_String: findType("Pair<int,String>"),
      Pair_of_nullable_VersionDirective_and_List_TagDirective: findType("Pair<VersionDirective?,List<TagDirective>>"),
      Path: findType("Path"),
      PlatformEnvironment: findType("PlatformEnvironment"),
      PrimitiveSerializer_dynamic: findType("PrimitiveSerializer<@>"),
      Process: findType("Process"),
      ProcessResult: findType("ProcessResult"),
      Pubspec: findType("Pubspec"),
      PubspecInfo: findType("PubspecInfo"),
      Queue_Record_2_YamlMap_and_Pubspec: findType("Queue<+(YamlMap,Pubspec)>"),
      RangeError: findType("RangeError"),
      RawAftComponent: findType("RawAftComponent"),
      RawAftConfig: findType("RawAftConfig"),
      RawPubspecConfig: findType("RawPubspecConfig"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_String_and_String: findType("+(String,String)"),
      Record_2_YamlMap_and_Pubspec: findType("+(YamlMap,Pubspec)"),
      RegExp: findType("RegExp"),
      RegExpMatch: findType("RegExpMatch"),
      Repo: findType("Repo"),
      Result_List_int: findType("Result<List<int>>"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ScalarEvent: findType("ScalarEvent"),
      ScalarToken: findType("ScalarToken"),
      SdkDependency: findType("SdkDependency"),
      SequenceStartEvent: findType("SequenceStartEvent"),
      SerializerPlugin: findType("SerializerPlugin"),
      Serializer_dynamic: findType("Serializer<@>"),
      SetBuilder_dynamic: findType("SetBuilder<@>"),
      SetEquality_dynamic: findType("SetEquality<@>"),
      SetMultimapBuilder_dynamic_dynamic: findType("SetMultimapBuilder<@,@>"),
      Set_YamlNode: findType("Set<YamlNode>"),
      Set_dynamic: findType("Set<@>"),
      SimpleLogPrinter: findType("SimpleLogPrinter"),
      Sink_List_int: findType("Sink<List<int>>"),
      Sink_String: findType("Sink<String>"),
      SourceEdit: findType("SourceEdit"),
      SourceLocation: findType("SourceLocation"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      StackTrace: findType("StackTrace"),
      Stats: findType("Stats"),
      StreamController_List_int: findType("StreamController<List<int>>"),
      StreamController_int: findType("StreamController<int>"),
      StreamQueue_List_int: findType("StreamQueue<List<int>>"),
      StreamSplitter_List_int: findType("StreamSplitter<List<int>>"),
      StreamSubscription_List_int: findType("StreamSubscription<List<int>>"),
      StreamSubscription_LogEntry: findType("StreamSubscription<LogEntry>"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_String: findType("Stream<String>"),
      String: findType("String"),
      StringBuffer: findType("StringBuffer"),
      StringConversionSink: findType("StringConversionSink"),
      String_Function_Match: findType("String(Match)"),
      StructuredSerializer_dynamic: findType("StructuredSerializer<@>"),
      Symbol: findType("Symbol0"),
      TagDirective: findType("TagDirective"),
      TargetEntry: findType("TargetEntry"),
      TargetLineEntry: findType("TargetLineEntry"),
      Timer: findType("Timer"),
      Token: findType("Token"),
      Trace: findType("Trace"),
      Trace_Function_String: findType("Trace(String)"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      Type: findType("Type"),
      TypeError: findType("TypeError"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8ClampedList: findType("Uint8ClampedList"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableListView_YamlNode: findType("UnmodifiableListView<YamlNode>"),
      UnmodifiableListView_nullable_Object: findType("UnmodifiableListView<Object?>"),
      UnmodifiableMapView_String_PackageInfo: findType("UnmodifiableMapView<String,PackageInfo>"),
      UnmodifiableMapView_dynamic_YamlNode: findType("UnmodifiableMapView<@,YamlNode>"),
      UnmodifiableMapView_of_PackageInfo_and_List_PackageInfo: findType("UnmodifiableMapView<PackageInfo,List<PackageInfo>>"),
      UnmodifiableMapView_of_String_and_List_PackageInfo: findType("UnmodifiableMapView<String,List<PackageInfo>>"),
      UnmodifiableMapView_of_String_and_nullable_Object: findType("UnmodifiableMapView<String,Object?>"),
      Uri: findType("Uri"),
      Version: findType("Version"),
      VersionConstraint: findType("VersionConstraint"),
      VersionPropagation: findType("VersionPropagation"),
      VersionRange: findType("VersionRange"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereTypeIterable_Frame: findType("WhereTypeIterable<Frame>"),
      WhereTypeIterable_PackageInfo: findType("WhereTypeIterable<PackageInfo>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      WhereTypeIterator_Directory: findType("WhereTypeIterator<Directory0>"),
      YamlList: findType("YamlList"),
      YamlMap: findType("YamlMap"),
      YamlNode: findType("YamlNode"),
      YamlScalar: findType("YamlScalar"),
      Zone: findType("Zone"),
      _AsyncCompleter_FileStat: findType("_AsyncCompleter<FileStat>"),
      _AsyncCompleter_List_dynamic: findType("_AsyncCompleter<List<@>>"),
      _AsyncCompleter_bool: findType("_AsyncCompleter<bool>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncCompleter_void: findType("_AsyncCompleter<~>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _BoundSinkStream_dynamic_String: findType("_BoundSinkStream<@,String>"),
      _BuiltMap_dynamic_dynamic: findType("_BuiltMap<@,@>"),
      _ConverterStreamEventSink_dynamic_dynamic: findType("_ConverterStreamEventSink<@,@>"),
      _EventRequest_dynamic: findType("_EventRequest<@>"),
      _Future_FileStat: findType("_Future<FileStat>"),
      _Future_List_dynamic: findType("_Future<List<@>>"),
      _Future_Uint8List: findType("_Future<Uint8List>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_nullable_Version: findType("_Future<Version?>"),
      _Future_void: findType("_Future<~>"),
      _Highlight: findType("_Highlight"),
      _IdentityHashMap_of_nullable_Object_and_nullable_Object: findType("_IdentityHashMap<Object?,Object?>"),
      _Line: findType("_Line"),
      _MapEntry: findType("_MapEntry"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _SyncCompleter_Uint8List: findType("_SyncCompleter<Uint8List>"),
      _SyncCompleter_void: findType("_SyncCompleter<~>"),
      _SyncStarIterable_FileSystemEntity: findType("_SyncStarIterable<FileSystemEntity>"),
      _SyncStarIterable_String: findType("_SyncStarIterable<String>"),
      _WeakReferenceWrapper_Cancelable: findType("_WeakReferenceWrapper<Cancelable>"),
      _ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C: findType("_ZoneFunction<0^(1^,2^)(Zone,ZoneDelegate,Zone,0^(1^,2^))<Object?,Object?,Object?>>"),
      _ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B: findType("_ZoneFunction<0^(1^)(Zone,ZoneDelegate,Zone,0^(1^))<Object?,Object?>>"),
      _ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function: findType("_ZoneFunction<0^()(Zone,ZoneDelegate,Zone,0^())<Object?>>"),
      _ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace: findType("_ZoneFunction<AsyncError?(Zone,ZoneDelegate,Zone,Object,StackTrace?)>"),
      _ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace: findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,Object,StackTrace)>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_String: findType("bool(String)"),
      bool_Function__Highlight: findType("bool(_Highlight)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      dynamic_Function_dynamic: findType("@(@)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_FS: findType("FS?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_GitHubPackageConfig: findType("GitHubPackageConfig?"),
      nullable_HostedDetails: findType("HostedDetails?"),
      nullable_IOOverrides: findType("IOOverrides?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_JavaScriptObject: findType("JavaScriptObject?"),
      nullable_ListBuilder_String: findType("ListBuilder<String>?"),
      nullable_List_Screenshot: findType("List<Screenshot>?"),
      nullable_List_String: findType("List<String>?"),
      nullable_List_Uri: findType("List<Uri>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_List_nullable_Object: findType("List<Object?>?"),
      nullable_MapBuilder_String_AftComponent: findType("MapBuilder<String,AftComponent>?"),
      nullable_MapBuilder_String_AftScript: findType("MapBuilder<String,AftScript>?"),
      nullable_MapBuilder_String_PackageInfo: findType("MapBuilder<String,PackageInfo>?"),
      nullable_MapBuilder_String_VersionConstraint: findType("MapBuilder<String,VersionConstraint>?"),
      nullable_MapEntry_String_VersionConstraint: findType("MapEntry<String,VersionConstraint>?"),
      nullable_Map_String_Dependency: findType("Map<String,Dependency>?"),
      nullable_Map_String_VersionConstraint: findType("Map<String,VersionConstraint>?"),
      nullable_Map_String_dynamic: findType("Map<String,@>?"),
      nullable_Map_dynamic_dynamic: findType("Map<@,@>?"),
      nullable_Map_of_String_and_nullable_VersionConstraint: findType("Map<String,VersionConstraint?>?"),
      nullable_Map_of_nullable_Object_and_nullable_Object: findType("Map<Object?,Object?>?"),
      nullable_OS: findType("OS?"),
      nullable_Object: findType("Object?"),
      nullable_PackageInfo: findType("PackageInfo?"),
      nullable_Path: findType("Path?"),
      nullable_PlatformEnvironment: findType("PlatformEnvironment?"),
      nullable_PubVersionInfo: findType("PubVersionInfo?"),
      nullable_RawAftConfig: findType("RawAftConfig?"),
      nullable_SourceFile: findType("SourceFile?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_StreamController_LogRecord: findType("StreamController<LogRecord>?"),
      nullable_StreamSplitter_List_int: findType("StreamSplitter<List<int>>?"),
      nullable_StreamSubscription_List_int: findType("StreamSubscription<List<int>>?"),
      nullable_String: findType("String?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_Uint8List: findType("Uint8List?"),
      nullable_Uri: findType("Uri?"),
      nullable_Version: findType("Version?"),
      nullable_VersionConstraint: findType("VersionConstraint?"),
      nullable_Zone: findType("Zone?"),
      nullable_ZoneDelegate: findType("ZoneDelegate?"),
      nullable_ZoneSpecification: findType("ZoneSpecification?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__Highlight: findType("_Highlight?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable__Node: findType("_Node?"),
      nullable__SimpleKey: findType("_SimpleKey?"),
      nullable_nullable_Object_Function_2_Map_dynamic_dynamic_and_String: findType("Object?(Map<@,@>,String)?"),
      nullable_void_Function: findType("~()?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_JavaScriptObject: findType("~(JavaScriptObject)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_String_dynamic: findType("~(String,@)"),
      void_Function_Timer: findType("~(Timer)"),
      void_Function_dynamic_$opt_dynamic: findType("~(@[@])")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSBool_methods = J.JSBool.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeUint32List_methods = A.NativeUint32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.AWSHttpMethod_0 = new A.AWSHttpMethod(0, "get");
    B.AWSHttpMethod_1 = new A.AWSHttpMethod(1, "head");
    B.ActionResult_0 = new A.ActionResult(0, "success");
    B.ActionResult_1 = new A.ActionResult(1, "failure");
    B.AlpnProtocol_0_http1_1 = new A.AlpnProtocol(0, "http1_1");
    B.AsciiDecoder_false_127 = new A.AsciiDecoder(false, 127);
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.CONSTANT1 = new A.Instantiation1(A.async_Future___value_tearOff$closure(), A.findType("Instantiation1<~()>"));
    B.CONSTANT = new A.Instantiation1(A.util__dartify$closure(), A.findType("Instantiation1<@>"));
    B.CONSTANT0 = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Encoder = new A.Base64Encoder();
    B.C_Base64Codec = new A.Base64Codec();
    B.C_Base64Decoder = new A.Base64Decoder();
    B.C_DefaultEquality = new A.DefaultEquality(A.findType("DefaultEquality<0&>"));
    B.C_DeepCollectionEquality = new A.DeepCollectionEquality();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_LineSplitter = new A.LineSplitter();
    B.C_LocalFileSystem = new A.LocalFileSystem();
    B.C_LocalPlatform = new A.LocalPlatform();
    B.C_LocalProcessManager = new A.LocalProcessManager();
    B.C_NodeFileSystem = new A.NodeFileSystem();
    B.C_NodeLoggerPlugin = new A.NodeLoggerPlugin();
    B.C_NodePlatform = new A.NodePlatform();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_PackageSelectorConverter = new A.PackageSelectorConverter();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_SimpleLogPrinter = new A.SimpleLogPrinter();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C_Uuid = new A.Uuid();
    B.C_VersionConstraintSerializer0 = new A.VersionConstraintSerializer(A.findType("VersionConstraintSerializer<Version>"));
    B.C_VersionConstraintSerializer = new A.VersionConstraintSerializer(A.findType("VersionConstraintSerializer<VersionConstraint>"));
    B.C__AllPackageSelector = new A._AllPackageSelector();
    B.C__CurrentPackageSelector = new A._CurrentPackageSelector();
    B.C__DartPackageSelector = new A._DartPackageSelector();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__DevelopmentPackageSelector = new A._DevelopmentPackageSelector();
    B.C__EmptyStream = new A._EmptyStream(A.findType("_EmptyStream<List<int>>"));
    B.C__EmptyVersion = new A._EmptyVersion();
    B.C__ExamplePackageSelector = new A._ExamplePackageSelector();
    B.C__FlutterPackageSelector = new A._FlutterPackageSelector();
    B.C__JSRandom = new A._JSRandom();
    B.C__Required = new A._Required();
    B.C__RootPackageSelector = new A._RootPackageSelector();
    B.C__RootZone = new A._RootZone();
    B.C__TestPackageSelector = new A._TestPackageSelector();
    B.CancellationException_null = new A.CancellationException(null);
    B.CollectionStyle_ANY = new A.CollectionStyle("ANY");
    B.CollectionStyle_BLOCK = new A.CollectionStyle("BLOCK");
    B.CollectionStyle_FLOW = new A.CollectionStyle("FLOW");
    B.DependencyType_dependencies_0_dependency = new A.DependencyType("dependencies", 0, "dependency");
    B.DependencyType_dev_dependencies_1_devDependency = new A.DependencyType("dev_dependencies", 1, "devDependency");
    B.Duration_0 = new A.Duration(0);
    B.EventType_0 = new A.EventType(0, "streamStart");
    B.EventType_1 = new A.EventType(1, "streamEnd");
    B.EventType_2 = new A.EventType(2, "documentStart");
    B.EventType_3 = new A.EventType(3, "documentEnd");
    B.EventType_4 = new A.EventType(4, "alias");
    B.EventType_5 = new A.EventType(5, "scalar");
    B.EventType_6 = new A.EventType(6, "sequenceStart");
    B.EventType_7 = new A.EventType(7, "sequenceEnd");
    B.EventType_8 = new A.EventType(8, "mappingStart");
    B.EventType_9 = new A.EventType(9, "mappingEnd");
    B.FileSystemEntityType_0 = new A.FileSystemEntityType(0);
    B.FileSystemEntityType_1 = new A.FileSystemEntityType(1);
    B.FileSystemEntityType_2 = new A.FileSystemEntityType(2);
    B.FileSystemEntityType_5 = new A.FileSystemEntityType(5);
    B.FormatException_Ynx = new A.FormatException("Cannot parse an empty string.", null, null);
    B.FormatException_kUZ = new A.FormatException("Must be an http or https URL.", null, null);
    B.Type_PlatformEnvironment_miE = A.typeLiteral("PlatformEnvironment");
    B.List_empty2 = A._setArrayType(makeConstList([]), type$.JSArray_FullType);
    B.FullType_00 = new A.FullType(B.Type_PlatformEnvironment_miE, B.List_empty2, false);
    B.Type_BuiltMap_qd4 = A.typeLiteral("BuiltMap<@,@>");
    B.Type_String_k8F = A.typeLiteral("String");
    B.FullType_h8g = new A.FullType(B.Type_String_k8F, B.List_empty2, false);
    B.Type_VersionConstraint_dvx = A.typeLiteral("VersionConstraint");
    B.FullType_0AN = new A.FullType(B.Type_VersionConstraint_dvx, B.List_empty2, false);
    B.List_SWJ = A._setArrayType(makeConstList([B.FullType_h8g, B.FullType_0AN]), type$.JSArray_FullType);
    B.FullType_0 = new A.FullType(B.Type_BuiltMap_qd4, B.List_SWJ, false);
    B.Type_IosEnvironment_IMh = A.typeLiteral("IosEnvironment");
    B.FullType_5i6 = new A.FullType(B.Type_IosEnvironment_IMh, B.List_empty2, false);
    B.Type_Object_xQ6 = A.typeLiteral("Object");
    B.FullType_1MH = new A.FullType(B.Type_Object_xQ6, B.List_empty2, false);
    B.List_4AN = A._setArrayType(makeConstList([B.FullType_1MH, B.FullType_1MH]), type$.JSArray_FullType);
    B.FullType_6Ps = new A.FullType(B.Type_BuiltMap_qd4, B.List_4AN, false);
    B.Type_BuiltSet_fcN = A.typeLiteral("BuiltSet<@>");
    B.List_3wP = A._setArrayType(makeConstList([B.FullType_1MH]), type$.JSArray_FullType);
    B.FullType_KVM = new A.FullType(B.Type_BuiltSet_fcN, B.List_3wP, false);
    B.Type_bool_lhE = A.typeLiteral("bool");
    B.FullType_MtR = new A.FullType(B.Type_bool_lhE, B.List_empty2, false);
    B.Type_Version_MPT = A.typeLiteral("Version");
    B.FullType_NWH = new A.FullType(B.Type_Version_MPT, B.List_empty2, false);
    B.Type_AndroidEnvironment_hO0 = A.typeLiteral("AndroidEnvironment");
    B.FullType_URx = new A.FullType(B.Type_AndroidEnvironment_hO0, B.List_empty2, false);
    B.Type_MacOSEnvironment_K5p = A.typeLiteral("MacOSEnvironment");
    B.FullType_W3m = new A.FullType(B.Type_MacOSEnvironment_K5p, B.List_empty2, false);
    B.Type_BuiltList_iTR = A.typeLiteral("BuiltList<@>");
    B.FullType_WUY = new A.FullType(B.Type_BuiltList_iTR, B.List_3wP, false);
    B.Type_BuiltListMultimap_2Mt = A.typeLiteral("BuiltListMultimap<@,@>");
    B.FullType_fA4 = new A.FullType(B.Type_BuiltListMultimap_2Mt, B.List_4AN, false);
    B.Type_PackageInfo_2zl = A.typeLiteral("PackageInfo");
    B.FullType_ml5 = new A.FullType(B.Type_PackageInfo_2zl, B.List_empty2, false);
    B.List_Sd9 = A._setArrayType(makeConstList([B.FullType_h8g, B.FullType_ml5]), type$.JSArray_FullType);
    B.FullType_fsZ = new A.FullType(B.Type_BuiltMap_qd4, B.List_Sd9, false);
    B.Type_BuiltSetMultimap_9Fi = A.typeLiteral("BuiltSetMultimap<@,@>");
    B.FullType_gsm = new A.FullType(B.Type_BuiltSetMultimap_9Fi, B.List_4AN, false);
    B.Type_AftScript_ql0 = A.typeLiteral("AftScript");
    B.FullType_ww8 = new A.FullType(B.Type_AftScript_ql0, B.List_empty2, false);
    B.List_c2q = A._setArrayType(makeConstList([B.FullType_h8g, B.FullType_ww8]), type$.JSArray_FullType);
    B.FullType_hYw = new A.FullType(B.Type_BuiltMap_qd4, B.List_c2q, false);
    B.List_EY4 = A._setArrayType(makeConstList([B.FullType_h8g]), type$.JSArray_FullType);
    B.FullType_hkZ = new A.FullType(B.Type_BuiltList_iTR, B.List_EY4, false);
    B.FullType_null_List_empty_false = new A.FullType(null, B.List_empty2, false);
    B.Type_Uri_EFX = A.typeLiteral("Uri");
    B.FullType_ohJ = new A.FullType(B.Type_Uri_EFX, B.List_empty2, false);
    B.Type_Environment_apI = A.typeLiteral("Environment");
    B.FullType_sM2 = new A.FullType(B.Type_Environment_apI, B.List_empty2, false);
    B.Type_AftComponent_2jN = A.typeLiteral("AftComponent");
    B.FullType_ALM = new A.FullType(B.Type_AftComponent_2jN, B.List_empty2, false);
    B.List_EKt = A._setArrayType(makeConstList([B.FullType_h8g, B.FullType_ALM]), type$.JSArray_FullType);
    B.FullType_zMO = new A.FullType(B.Type_BuiltMap_qd4, B.List_EKt, false);
    B.IterableEquality_DefaultEquality = new A.IterableEquality(B.C_DefaultEquality, A.findType("IterableEquality<Object>"));
    B.IterableEquality_DefaultEquality0 = new A.IterableEquality(B.C_DefaultEquality, type$.IterableEquality_dynamic);
    B.JsonDecoder_null = new A.JsonDecoder(null);
    B.JsonEncoder_null_null = new A.JsonEncoder(null, null);
    B["JsonSerializer__#fromJson#tearOff0"] = new A.JsonSerializer(A.config_AftComponent___fromJson_tearOff$closure(), A.findType("JsonSerializer<AftComponent>"));
    B["JsonSerializer__#fromJson#tearOff1"] = new A.JsonSerializer(A.raw_config_AftScript___fromJson_tearOff$closure(), A.findType("JsonSerializer<AftScript>"));
    B["JsonSerializer__#fromJson#tearOff"] = new A.JsonSerializer(A.config_PackageInfo___fromJson_tearOff$closure(), A.findType("JsonSerializer<PackageInfo>"));
    B.Level_FINER_400 = new A.Level("FINER", 400);
    B.Level_INFO_800 = new A.Level("INFO", 800);
    B.Level_WARNING_900 = new A.Level("WARNING", 900);
    B.List_0 = A._setArrayType(makeConstList(["file", "directory", "link", "unixDomainSock", "pipe", "notFound"]), type$.JSArray_String);
    B.List_239_191_189 = A._setArrayType(makeConstList([239, 191, 189]), type$.JSArray_int);
    B.List_2bx = A._setArrayType(makeConstList(["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"]), type$.JSArray_String);
    B.Type__$PlatformEnvironment_1a4 = A.typeLiteral("_$PlatformEnvironment");
    B.List_4e8 = A._setArrayType(makeConstList([B.Type_PlatformEnvironment_miE, B.Type__$PlatformEnvironment_1a4]), type$.JSArray_Type);
    B.Type_Group_eVB = A.typeLiteral("Group");
    B.Type__$Group_6Vn = A.typeLiteral("_$Group");
    B.List_6dc = A._setArrayType(makeConstList([B.Type_Group_eVB, B.Type__$Group_6Vn]), type$.JSArray_Type);
    B.Type__$AndroidEnvironment_6z6 = A.typeLiteral("_$AndroidEnvironment");
    B.List_CSD = A._setArrayType(makeConstList([B.Type_AndroidEnvironment_hO0, B.Type__$AndroidEnvironment_6z6]), type$.JSArray_Type);
    B.AlpnProtocol_1_http2 = new A.AlpnProtocol(1, "http2");
    B.AlpnProtocol_2_http3 = new A.AlpnProtocol(2, "http3");
    B.List_E8w = A._setArrayType(makeConstList([B.AlpnProtocol_0_http1_1, B.AlpnProtocol_1_http2, B.AlpnProtocol_2_http3]), A.findType("JSArray<AlpnProtocol>"));
    B.List_EFr = A._setArrayType(makeConstList(["name", "summary", "packages", "packageGraph", "propagate"]), type$.JSArray_String);
    B.List_I27 = A._setArrayType(makeConstList(["name", "path", "pubspecInfo", "flavor", "example", "docs"]), type$.JSArray_String);
    B.List_IY4 = A._setArrayType(makeConstList(["platforms", "ignore", "components", "scripts", "github"]), type$.JSArray_String);
    B.List_Icz = A._setArrayType(makeConstList([0, 0, 1048576, 531441, 1048576, 390625, 279936, 823543, 262144, 531441, 1000000, 161051, 248832, 371293, 537824, 759375, 1048576, 83521, 104976, 130321, 160000, 194481, 234256, 279841, 331776, 390625, 456976, 531441, 614656, 707281, 810000, 923521, 1048576, 35937, 39304, 42875, 46656]), type$.JSArray_int);
    B.List_Kd3 = A._setArrayType(makeConstList(["run", "description", "from", "fail-fast"]), type$.JSArray_String);
    B.List_M1A = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_MMm = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.List_OL3 = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.Type__$Environment_yHF = A.typeLiteral("_$Environment");
    B.List_X3r = A._setArrayType(makeConstList([B.Type_Environment_apI, B.Type__$Environment_yHF]), type$.JSArray_Type);
    B.List_XRg0 = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_XRg = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_YmH = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.Type_AftConfig_oYY = A.typeLiteral("AftConfig");
    B.Type__$AftConfig_A0N = A.typeLiteral("_$AftConfig");
    B.List_aLp = A._setArrayType(makeConstList([B.Type_AftConfig_oYY, B.Type__$AftConfig_A0N]), type$.JSArray_Type);
    B.List_ejq = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_empty3 = A._setArrayType(makeConstList([]), A.findType("JSArray<RawAftComponent>"));
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_empty4 = A._setArrayType(makeConstList([]), type$.JSArray_nullable_String);
    B.Type__$IosEnvironment_NIe = A.typeLiteral("_$IosEnvironment");
    B.List_gg4 = A._setArrayType(makeConstList([B.Type_IosEnvironment_IMh, B.Type__$IosEnvironment_NIe]), type$.JSArray_Type);
    B.List_hosted = A._setArrayType(makeConstList(["hosted"]), type$.JSArray_String);
    B.List_name_summary_packages_propagate = A._setArrayType(makeConstList(["name", "summary", "packages", "propagate"]), type$.JSArray_String);
    B.List_name_url = A._setArrayType(makeConstList(["name", "url"]), type$.JSArray_String);
    B.List_oFp = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_pubspec_uri_pubspecYaml_pubspecMap = A._setArrayType(makeConstList(["pubspec", "uri", "pubspecYaml", "pubspecMap"]), type$.JSArray_String);
    B.Type__$MacOSEnvironment_H10 = A.typeLiteral("_$MacOSEnvironment");
    B.List_qpR = A._setArrayType(makeConstList([B.Type_MacOSEnvironment_K5p, B.Type__$MacOSEnvironment_H10]), type$.JSArray_Type);
    B.List_sdk_git_path_hosted = A._setArrayType(makeConstList(["sdk", "git", "path", "hosted"]), type$.JSArray_String);
    B.List_sww = A._setArrayType(makeConstList(["normal", "inheritStdio", "detached", "detachedWithStdio"]), type$.JSArray_String);
    B.List_url = A._setArrayType(makeConstList(["url"]), type$.JSArray_String);
    B.List_version_hosted = A._setArrayType(makeConstList(["version", "hosted"]), type$.JSArray_String);
    B.Type_GitHubPackageConfig_neA = A.typeLiteral("GitHubPackageConfig");
    B.Type__$GitHubPackageConfig_MED = A.typeLiteral("_$GitHubPackageConfig");
    B.List_yv8 = A._setArrayType(makeConstList([B.Type_GitHubPackageConfig_neA, B.Type__$GitHubPackageConfig_MED]), type$.JSArray_Type);
    B.List_yzX = A._setArrayType(makeConstList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767]), type$.JSArray_int);
    B.LogLevel_0 = new A.LogLevel(0, "verbose");
    B.LogLevel_1 = new A.LogLevel(1, "debug");
    B.LogLevel_2 = new A.LogLevel(2, "info");
    B.LogLevel_3 = new A.LogLevel(3, "warn");
    B.LogLevel_4 = new A.LogLevel(4, "error");
    B.LogLevel_5 = new A.LogLevel(5, "none");
    B.Object_Accept_0 = {Accept: 0};
    B.Map_6pV0v = new A.ConstantStringMap(B.Object_Accept_0, ["application/vnd.pub.v2+json"], type$.ConstantStringMap_String_String);
    B.Object_declaredName_0 = {declaredName: 0};
    B.Map_E8aOh = new A.ConstantStringMap(B.Object_declaredName_0, ["name"], type$.ConstantStringMap_String_String);
    B.PackageFlavor_0_flutter = new A.PackageFlavor(0, "flutter");
    B.PackageFlavor_1_dart = new A.PackageFlavor(1, "dart");
    B.Map_QS6eY = new A.GeneralConstantMap([B.PackageFlavor_0_flutter, "flutter", B.PackageFlavor_1_dart, "dart"], A.findType("GeneralConstantMap<PackageFlavor,String>"));
    B.Object_failFast_0 = {failFast: 0};
    B.Map_bHizW = new A.ConstantStringMap(B.Object_failFast_0, ["fail-fast"], type$.ConstantStringMap_String_String);
    B.Object_empty = {};
    B.Map_empty5 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,AftScript>"));
    B.Map_empty2 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,Dependency>"));
    B.Map_empty4 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,List<String>>"));
    B.Map_empty0 = new A.ConstantStringMap(B.Object_empty, [], type$.ConstantStringMap_String_String);
    B.Map_empty1 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,VersionConstraint?>"));
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<Symbol0,@>"));
    B.Map_empty3 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<@,@>"));
    B.VersionPropagation_0 = new A.VersionPropagation(0, "major");
    B.VersionPropagation_1 = new A.VersionPropagation(1, "minor");
    B.VersionPropagation_2 = new A.VersionPropagation(2, "all");
    B.VersionPropagation_3 = new A.VersionPropagation(3, "none");
    B.Map_gv0sl = new A.GeneralConstantMap([B.VersionPropagation_0, "major", B.VersionPropagation_1, "minor", B.VersionPropagation_2, "all", B.VersionPropagation_3, "none"], A.findType("GeneralConstantMap<VersionPropagation,String>"));
    B.Object_w0S = {publishTo: 0, issueTracker: 1, devDependencies: 2, dependencyOverrides: 3};
    B.Map_gwFkb = new A.ConstantStringMap(B.Object_w0S, ["publish_to", "issue_tracker", "dev_dependencies", "dependency_overrides"], type$.ConstantStringMap_String_String);
    B.ProcessStartMode_0 = new A.ProcessStartMode(0);
    B.ProcessStartMode_1 = new A.ProcessStartMode(1);
    B.ProcessStartMode_2 = new A.ProcessStartMode(2);
    B.ProcessStartMode_3 = new A.ProcessStartMode(3);
    B.ReadableStreamReaderMode_1 = new A.ReadableStreamReaderMode(1, "default$");
    B.ReadableStreamType_1 = new A.ReadableStreamType(1, "default$");
    B.C__EmptyStream0 = new A._EmptyStream(A.findType("_EmptyStream<int>"));
    B.ReadableStreamView__EmptyStream__EmptyStream = new A.ReadableStreamView(B.C__EmptyStream0, B.C__EmptyStream);
    B.RequestCache_0 = new A.RequestCache(0, "default$");
    B.RequestCredentials_0 = new A.RequestCredentials(0, "default$");
    B.RequestDestination_0 = new A.RequestDestination(0, "default$");
    B.RequestMode_0 = new A.RequestMode(0, "default$");
    B.RequestRedirect_1 = new A.RequestRedirect(1, "follow");
    B.RequestRedirect_2 = new A.RequestRedirect(2, "error");
    B.ScalarStyle_ANY = new A.ScalarStyle("ANY");
    B.ScalarStyle_DOUBLE_QUOTED = new A.ScalarStyle("DOUBLE_QUOTED");
    B.ScalarStyle_FOLDED = new A.ScalarStyle("FOLDED");
    B.ScalarStyle_LITERAL = new A.ScalarStyle("LITERAL");
    B.ScalarStyle_PLAIN = new A.ScalarStyle("PLAIN");
    B.ScalarStyle_SINGLE_QUOTED = new A.ScalarStyle("SINGLE_QUOTED");
    B.SupportedProtocols_2_http1_2_3 = new A.SupportedProtocols(2, "http1_2_3");
    B.Symbol_call = new A.Symbol("call");
    B.TokenType_0 = new A.TokenType(0, "streamStart");
    B.TokenType_1 = new A.TokenType(1, "streamEnd");
    B.TokenType_10 = new A.TokenType(10, "flowSequenceEnd");
    B.TokenType_11 = new A.TokenType(11, "flowMappingStart");
    B.TokenType_12 = new A.TokenType(12, "flowMappingEnd");
    B.TokenType_13 = new A.TokenType(13, "blockEntry");
    B.TokenType_14 = new A.TokenType(14, "flowEntry");
    B.TokenType_15 = new A.TokenType(15, "key");
    B.TokenType_16 = new A.TokenType(16, "value");
    B.TokenType_17 = new A.TokenType(17, "alias");
    B.TokenType_18 = new A.TokenType(18, "anchor");
    B.TokenType_19 = new A.TokenType(19, "tag");
    B.TokenType_2 = new A.TokenType(2, "versionDirective");
    B.TokenType_20 = new A.TokenType(20, "scalar");
    B.TokenType_3 = new A.TokenType(3, "tagDirective");
    B.TokenType_4 = new A.TokenType(4, "documentStart");
    B.TokenType_5 = new A.TokenType(5, "documentEnd");
    B.TokenType_6 = new A.TokenType(6, "blockSequenceStart");
    B.TokenType_7 = new A.TokenType(7, "blockMappingStart");
    B.TokenType_8 = new A.TokenType(8, "blockEnd");
    B.TokenType_9 = new A.TokenType(9, "flowSequenceStart");
    B.Type_BigInt_8OV = A.typeLiteral("BigInt");
    B.Type_BoolJsonObject_8HQ = A.typeLiteral("BoolJsonObject");
    B.Type_ByteBuffer_RkP = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_zNC = A.typeLiteral("ByteData");
    B.Type_DateTime_8AS = A.typeLiteral("DateTime");
    B.Type_Duration_SnA = A.typeLiteral("Duration");
    B.Type_Float32List_LB7 = A.typeLiteral("Float32List");
    B.Type_Float64List_LB7 = A.typeLiteral("Float64List");
    B.Type_Int16List_uXf = A.typeLiteral("Int16List");
    B.Type_Int32List_O50 = A.typeLiteral("Int32List");
    B.Type_Int64_ww8 = A.typeLiteral("Int64");
    B.Type_Int8List_ekJ = A.typeLiteral("Int8List");
    B.Type_JSObject_8k0 = A.typeLiteral("JSObject");
    B.Type_JsonObject_gyf = A.typeLiteral("JsonObject");
    B.Type_ListJsonObject_yPV = A.typeLiteral("ListJsonObject");
    B.Type_MapJsonObject_bBG = A.typeLiteral("MapJsonObject");
    B.Type_Null_Yyn = A.typeLiteral("Null");
    B.Type_NumJsonObject_H9C = A.typeLiteral("NumJsonObject");
    B.Type_RegExp_Eeh = A.typeLiteral("RegExp");
    B.Type_StringJsonObject_GAC = A.typeLiteral("StringJsonObject");
    B.Type_Uint16List_2bx = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2bx = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_Jik = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_WLA = A.typeLiteral("Uint8List");
    B.Type_VersionRange_aqJ = A.typeLiteral("VersionRange");
    B.Type_double_K1J = A.typeLiteral("double");
    B.Type_int_tHn = A.typeLiteral("int");
    B.Type_num_cv7 = A.typeLiteral("num");
    B.UnorderedIterableEquality_DefaultEquality = new A.UnorderedIterableEquality(B.C_DefaultEquality, A.findType("UnorderedIterableEquality<@>"));
    B.Utf8Codec_false = new A.Utf8Codec(false);
    B.Utf8Codec_true = new A.Utf8Codec(true);
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.Utf8Decoder_true = new A.Utf8Decoder(true);
    B._Chomping_0 = new A._Chomping(0, "strip");
    B._Chomping_1 = new A._Chomping(1, "clip");
    B._Chomping_2 = new A._Chomping(2, "keep");
    B._PathDirection_8Gl = new A._PathDirection("at root");
    B._PathDirection_988 = new A._PathDirection("below root");
    B._PathDirection_FIw = new A._PathDirection("reaches root");
    B._PathDirection_ZGD = new A._PathDirection("above root");
    B._PathRelation_different = new A._PathRelation("different");
    B._PathRelation_equal = new A._PathRelation("equal");
    B._PathRelation_inconclusive = new A._PathRelation("inconclusive");
    B._PathRelation_within = new A._PathRelation("within");
    B._State_BLOCK_MAPPING_FIRST_KEY = new A._State("BLOCK_MAPPING_FIRST_KEY");
    B._State_BLOCK_MAPPING_KEY = new A._State("BLOCK_MAPPING_KEY");
    B._State_BLOCK_MAPPING_VALUE = new A._State("BLOCK_MAPPING_VALUE");
    B._State_BLOCK_NODE = new A._State("BLOCK_NODE");
    B._State_BLOCK_SEQUENCE_ENTRY = new A._State("BLOCK_SEQUENCE_ENTRY");
    B._State_BLOCK_SEQUENCE_FIRST_ENTRY = new A._State("BLOCK_SEQUENCE_FIRST_ENTRY");
    B._State_DOCUMENT_CONTENT = new A._State("DOCUMENT_CONTENT");
    B._State_DOCUMENT_END = new A._State("DOCUMENT_END");
    B._State_DOCUMENT_START = new A._State("DOCUMENT_START");
    B._State_END = new A._State("END");
    B._State_FLOW_MAPPING_EMPTY_VALUE = new A._State("FLOW_MAPPING_EMPTY_VALUE");
    B._State_FLOW_MAPPING_FIRST_KEY = new A._State("FLOW_MAPPING_FIRST_KEY");
    B._State_FLOW_MAPPING_KEY = new A._State("FLOW_MAPPING_KEY");
    B._State_FLOW_MAPPING_VALUE = new A._State("FLOW_MAPPING_VALUE");
    B._State_FLOW_NODE = new A._State("FLOW_NODE");
    B._State_FLOW_SEQUENCE_ENTRY = new A._State("FLOW_SEQUENCE_ENTRY");
    B._State_FLOW_SEQUENCE_FIRST_ENTRY = new A._State("FLOW_SEQUENCE_FIRST_ENTRY");
    B._State_INDENTLESS_SEQUENCE_ENTRY = new A._State("INDENTLESS_SEQUENCE_ENTRY");
    B._State_STREAM_START = new A._State("STREAM_START");
    B._State_h3t = new A._State("FLOW_SEQUENCE_ENTRY_MAPPING_END");
    B._State_hJ6 = new A._State("FLOW_SEQUENCE_ENTRY_MAPPING_VALUE");
    B._State_oBX = new A._State("FLOW_SEQUENCE_ENTRY_MAPPING_KEY");
    B._State_p8I = new A._State("BLOCK_NODE_OR_INDENTLESS_SEQUENCE");
    B._StringStackTrace_3uE = new A._StringStackTrace("");
    B._TokenKind_false_false_false = new A._TokenKind(false, false, false);
    B._TokenKind_false_false_true = new A._TokenKind(false, false, true);
    B._TokenKind_false_true_false = new A._TokenKind(false, true, false);
    B._TokenKind_true_false_false = new A._TokenKind(true, false, false);
    B._VersionWindow_0 = new A._VersionWindow(0, "patch");
    B._VersionWindow_1 = new A._VersionWindow(1, "singleMinor");
    B._VersionWindow_2 = new A._VersionWindow(2, "multipleMinor");
    B._VersionWindow_3 = new A._VersionWindow(3, "major");
    B._ZoneFunction_3bB = new A._ZoneFunction(B.C__RootZone, A.async___rootCreatePeriodicTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~(Timer))>"));
    B._ZoneFunction_7G2 = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterBinaryCallback$closure(), type$._ZoneFunction_of_A_Function_2_B_and_C_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_and_C_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_2_B_and_C);
    B._ZoneFunction_Eeh = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterUnaryCallback$closure(), type$._ZoneFunction_of_A_Function_B_Function_A_extends_nullable_Object_and_B_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function_B);
    B._ZoneFunction_NMc = new A._ZoneFunction(B.C__RootZone, A.async___rootHandleUncaughtError$closure(), type$._ZoneFunction_of_void_Function_Zone_ZoneDelegate_Zone_Object_StackTrace);
    B._ZoneFunction__RootZone__rootCreateTimer = new A._ZoneFunction(B.C__RootZone, A.async___rootCreateTimer$closure(), A.findType("_ZoneFunction<Timer(Zone,ZoneDelegate,Zone,Duration,~())>"));
    B._ZoneFunction__RootZone__rootErrorCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootErrorCallback$closure(), type$._ZoneFunction_of_nullable_AsyncError_Function_5_Zone_and_ZoneDelegate_and_Zone_and_Object_and_nullable_StackTrace);
    B._ZoneFunction__RootZone__rootFork = new A._ZoneFunction(B.C__RootZone, A.async___rootFork$closure(), A.findType("_ZoneFunction<Zone(Zone,ZoneDelegate,Zone,ZoneSpecification?,Map<Object?,Object?>?)>"));
    B._ZoneFunction__RootZone__rootPrint = new A._ZoneFunction(B.C__RootZone, A.async___rootPrint$closure(), A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,String)>"));
    B._ZoneFunction__RootZone__rootRegisterCallback = new A._ZoneFunction(B.C__RootZone, A.async___rootRegisterCallback$closure(), type$._ZoneFunction_of_A_Function_Function_A_extends_nullable_Object_4_Zone_and_ZoneDelegate_and_Zone_and_A_Function);
    B._ZoneFunction__RootZone__rootRun = new A._ZoneFunction(B.C__RootZone, A.async___rootRun$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^())<Object?>>"));
    B._ZoneFunction__RootZone__rootRunBinary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunBinary$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^(1^,2^),1^,2^)<Object?,Object?,Object?>>"));
    B._ZoneFunction__RootZone__rootRunUnary = new A._ZoneFunction(B.C__RootZone, A.async___rootRunUnary$closure(), A.findType("_ZoneFunction<0^(Zone,ZoneDelegate,Zone,0^(1^),1^)<Object?,Object?>>"));
    B._ZoneFunction__RootZone__rootScheduleMicrotask = new A._ZoneFunction(B.C__RootZone, A.async___rootScheduleMicrotask$closure(), A.findType("_ZoneFunction<~(Zone,ZoneDelegate,Zone,~())>"));
    B._ZoneSpecification_ALf = new A._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.printToZone = null;
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $.Uri__cachedBaseString = "";
    $.Uri__cachedBaseUri = null;
    $._Platform__environmentCache = null;
    $._Platform__cachedOSVersion = null;
    $.AWSLogger__initialized = false;
    $.AWSLogger_activeLoggers = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.AWSLogger);
    $._indentingBuiltValueToStringHelperIndent = 0;
    $.LogRecord__nextNumber = 0;
    $.hierarchicalLoggingEnabled = false;
    $.Logger__loggers = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Logger);
    $._fs = null;
    $._os = null;
    $._path = null;
    $._currentUriBase = null;
    $._current = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "_CopyingBytesBuilder__emptyList", "$get$_CopyingBytesBuilder__emptyList", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), A.findType("Future<Null>")));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<Null>")._as($.$get$nullFuture()));
    _lazyFinal($, "_RootZone__rootMap", "$get$_RootZone__rootMap", () => {
      var t1 = type$.dynamic;
      return A.HashMap_HashMap(null, null, null, t1, t1);
    });
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", () => new A.Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", () => new A.Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazy($, "_Base64Decoder__emptyBuffer", "$get$_Base64Decoder__emptyBuffer", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false, false));
    _lazyFinal($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", () => typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32");
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true, false));
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", () => new Error().stack != void 0);
    _lazyFinal($, "DateTime__parseFormat", "$get$DateTime__parseFormat", () => A.RegExp_RegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", true, false));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_xQ6));
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "_ioOverridesToken", "$get$_ioOverridesToken", () => new A.Object());
    _lazyFinal($, "Platform_numberOfProcessors", "$get$Platform_numberOfProcessors", () => A._Platform_numberOfProcessors());
    _lazyFinal($, "Platform_pathSeparator", "$get$Platform_pathSeparator", () => A._Platform_pathSeparator());
    _lazyFinal($, "Platform_operatingSystem0", "$get$Platform_operatingSystem", () => A._Platform_operatingSystem());
    _lazyFinal($, "Platform_operatingSystemVersion", "$get$Platform_operatingSystemVersion", () => A._Platform_operatingSystemVersion());
    _lazyFinal($, "Platform_localHostname", "$get$Platform_localHostname", () => A._Platform_localHostname());
    _lazyFinal($, "Platform_version0", "$get$Platform_version", () => A._Platform_version());
    _lazy($, "_Platform_executable", "$get$_Platform_executable", () => A._Platform__executable());
    _lazy($, "_Platform_resolvedExecutable", "$get$_Platform_resolvedExecutable", () => A._Platform__resolvedExecutable());
    _lazy($, "_Platform_packageConfig", "$get$_Platform_packageConfig", () => A._Platform__packageConfig());
    _lazyFinal($, "_stdin", "$get$_stdin", () => A._StdIOUtils__getStdioInputStream(0));
    _lazyFinal($, "_stdout", "$get$_stdout", () => A._StdIOUtils__getStdioOutputStream(1));
    _lazyFinal($, "context", "$get$context0", () => {
      var t1 = A.findType("JSArray<~()>");
      return new A.ActionContext(A._setArrayType([], t1), A._setArrayType([], t1));
    });
    _lazyFinal($, "processManager", "$get$processManager", () => new A.processManager_closure().call$0());
    _lazy($, "_$aftConfigSerializer", "$get$_$aftConfigSerializer", () => new A._$AftConfigSerializer());
    _lazy($, "_$environmentSerializer", "$get$_$environmentSerializer", () => new A._$EnvironmentSerializer());
    _lazy($, "_$platformEnvironmentSerializer", "$get$_$platformEnvironmentSerializer", () => new A._$PlatformEnvironmentSerializer());
    _lazy($, "_$androidEnvironmentSerializer", "$get$_$androidEnvironmentSerializer", () => new A._$AndroidEnvironmentSerializer());
    _lazy($, "_$iosEnvironmentSerializer", "$get$_$iosEnvironmentSerializer", () => new A._$IosEnvironmentSerializer());
    _lazy($, "_$macOSEnvironmentSerializer", "$get$_$macOSEnvironmentSerializer", () => new A._$MacOSEnvironmentSerializer());
    _lazy($, "_$gitHubPackageConfigSerializer", "$get$_$gitHubPackageConfigSerializer", () => new A._$GitHubPackageConfigSerializer());
    _lazyFinal($, "aftSerializers", "$get$aftSerializers", () => {
      var t1 = $.$get$_$aftSerializers().toBuilder$0();
      t1.addPlugin$1(A.StandardJsonPlugin$());
      t1.add$1(0, B.C_VersionConstraintSerializer);
      t1.add$1(0, B["JsonSerializer__#fromJson#tearOff"]);
      t1.add$1(0, B["JsonSerializer__#fromJson#tearOff0"]);
      t1.add$1(0, B["JsonSerializer__#fromJson#tearOff1"]);
      return t1.build$0();
    });
    _lazyFinal($, "JsonSerializer__jsonPlugin", "$get$JsonSerializer__jsonPlugin", () => A.StandardJsonPlugin$());
    _lazy($, "_$aftSerializers", "$get$_$aftSerializers", () => {
      var t1 = A.Serializers_Serializers().toBuilder$0();
      t1.add$1(0, $.$get$_$aftConfigSerializer());
      t1.add$1(0, $.$get$_$androidEnvironmentSerializer());
      t1.add$1(0, $.$get$_$environmentSerializer());
      t1.add$1(0, $.$get$_$gitHubPackageConfigSerializer());
      t1.add$1(0, $.$get$_$iosEnvironmentSerializer());
      t1.add$1(0, $.$get$_$macOSEnvironmentSerializer());
      t1.add$1(0, $.$get$_$platformEnvironmentSerializer());
      t1.addBuilderFactory$2(B.FullType_fsZ, new A._$aftSerializers_closure());
      t1.addBuilderFactory$2(B.FullType_0, new A._$aftSerializers_closure0());
      t1.addBuilderFactory$2(B.FullType_hkZ, new A._$aftSerializers_closure1());
      t1.addBuilderFactory$2(B.FullType_zMO, new A._$aftSerializers_closure2());
      t1.addBuilderFactory$2(B.FullType_hYw, new A._$aftSerializers_closure3());
      return t1.build$0();
    });
    _lazyFinal($, "_serializers", "$get$_serializers", () => {
      var t1 = $.$get$_$_serializers().toBuilder$0();
      t1.addPlugin$1(A.StandardJsonPlugin$());
      t1.add$1(0, B.C_VersionConstraintSerializer);
      t1.add$1(0, B.C_VersionConstraintSerializer0);
      return t1.build$0();
    });
    _lazy($, "_$_serializers", "$get$_$_serializers", () => {
      var t1 = A.Serializers_Serializers().toBuilder$0();
      t1.add$1(0, $.$get$_$groupSerializer());
      t1.addBuilderFactory$2(B.FullType_0, new A._$_serializers_closure());
      return t1.build$0();
    });
    _lazy($, "_$groupSerializer", "$get$_$groupSerializer", () => new A._$GroupSerializer());
    _lazyFinal($, "_responseStreams", "$get$_responseStreams", () => A.Expando$("ResponseStreams", A.findType("ReadableStreamView")));
    _lazyFinal($, "_readableStreamViews", "$get$_readableStreamViews", () => A.Expando$("ReadableStreamViews", A.findType("ReadableStreamView")));
    _lazyFinal($, "StringRecase__nonAlphaNumericChars", "$get$StringRecase__nonAlphaNumericChars", () => A.RegExp_RegExp("[^A-Za-z0-9+]", true, false));
    _lazyFinal($, "StringRecase__standaloneVLower", "$get$StringRecase__standaloneVLower", () => A.RegExp_RegExp("([^a-z]{2,})v([0-9]+)", true, false));
    _lazyFinal($, "StringRecase__standaloneVUpper", "$get$StringRecase__standaloneVUpper", () => A.RegExp_RegExp("([^A-Z]{2,})V([0-9]+)", true, false));
    _lazyFinal($, "StringRecase__camelCasedWords", "$get$StringRecase__camelCasedWords", () => A.RegExp_RegExp("(?=[a-z][A-Z][a-zA-Z0-9])", true, false));
    _lazyFinal($, "StringRecase__acronyms", "$get$StringRecase__acronyms", () => A.RegExp_RegExp("([A-Z]+)([A-Z][a-z])", true, false));
    _lazyFinal($, "StringRecase__numInMiddleOrEnd", "$get$StringRecase__numInMiddleOrEnd", () => A.RegExp_RegExp("([0-9])([a-zA-Z])", true, false));
    _lazyFinal($, "isSoundMode", "$get$isSoundMode", () => !type$.List_int._is(A._setArrayType([], A.findType("JSArray<int?>"))));
    _lazy($, "newBuiltValueToStringHelper", "$get$newBuiltValueToStringHelper", () => new A.newBuiltValueToStringHelper_closure());
    _lazyFinal($, "_runtimeType", "$get$_runtimeType", () => A.getRuntimeTypeOfDartObject(A.RegExp_RegExp("", true, false)));
    _lazyFinal($, "StandardJsonPlugin__unsupportedTypes", "$get$StandardJsonPlugin__unsupportedTypes", () => A.BuiltSet_BuiltSet([B.Type_BuiltListMultimap_2Mt, B.Type_BuiltSetMultimap_9Fi], type$.Type));
    _lazyFinal($, "Logger_root", "$get$Logger_root", () => A.Logger_Logger(""));
    _lazyFinal($, "FileSystemEntity__absoluteWindowsPathPattern", "$get$FileSystemEntity__absoluteWindowsPathPattern", () => A.RegExp_RegExp("^(\\\\\\\\|[a-zA-Z]:[/\\\\])", true, false));
    _lazyFinal($, "FileSystemEntity__parentRegExp", "$get$FileSystemEntity__parentRegExp", () => $.$get$Platform_isWindows() ? A.RegExp_RegExp("[^/\\\\][/\\\\]+[^/\\\\]", true, false) : A.RegExp_RegExp("[^/]/+[^/]", true, false));
    _lazyFinal($, "Platform_isWindows", "$get$Platform_isWindows", () => A.Platform_operatingSystem() === "win32");
    _lazyFinal($, "windows", "$get$windows", () => A.Context_Context(null, $.$get$Style_windows()));
    _lazyFinal($, "url", "$get$url", () => A.Context_Context(null, $.$get$Style_url()));
    _lazyFinal($, "context0", "$get$context", () => new A.Context($.$get$Style_platform(), null));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("[^/]$", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true, false), A.RegExp_RegExp("[^/\\\\]$", true, false), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true, false), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true, false)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true, false), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true, false), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true, false), A.RegExp_RegExp("^/", true, false)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "startVersion", "$get$startVersion", () => A.RegExp_RegExp("^(\\d+)\\.(\\d+)\\.(\\d+)(-([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?", true, false));
    _lazyFinal($, "completeVersion", "$get$completeVersion", () => A.RegExp_RegExp($.$get$startVersion().pattern + "$", true, false));
    _lazyFinal($, "startComparison", "$get$startComparison", () => A.RegExp_RegExp("^[<>]=?", true, false));
    _lazy($, "VersionConstraint_any", "$get$VersionConstraint_any", () => A.VersionRange_VersionRange(false, false, false, null, null));
    _lazyFinal($, "_digits", "$get$_digits", () => new A._digits_closure().call$0());
    _lazyFinal($, "maxInt32", "$get$maxInt32", () => A._asInt(A.pow(2, 31)) - 1);
    _lazyFinal($, "minInt32", "$get$minInt32", () => -A._asInt(A.pow(2, 31)));
    _lazyFinal($, "_specKey", "$get$_specKey", () => new A.Object());
    _lazyFinal($, "_vmFrame", "$get$_vmFrame", () => A.RegExp_RegExp("^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$", true, false));
    _lazyFinal($, "_v8Frame", "$get$_v8Frame", () => A.RegExp_RegExp("^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$", true, false));
    _lazyFinal($, "_v8UrlLocation", "$get$_v8UrlLocation", () => A.RegExp_RegExp("^(.*?):(\\d+)(?::(\\d+))?$|native$", true, false));
    _lazyFinal($, "_v8EvalLocation", "$get$_v8EvalLocation", () => A.RegExp_RegExp("^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$", true, false));
    _lazyFinal($, "_firefoxEvalLocation", "$get$_firefoxEvalLocation", () => A.RegExp_RegExp("(\\S+)@(\\S+) line (\\d+) >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariFrame", "$get$_firefoxSafariFrame", () => A.RegExp_RegExp("^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$", true, false));
    _lazyFinal($, "_friendlyFrame", "$get$_friendlyFrame", () => A.RegExp_RegExp("^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$", true, false));
    _lazyFinal($, "_asyncBody", "$get$_asyncBody", () => A.RegExp_RegExp("<(<anonymous closure>|[^>]+)_async_body>", true, false));
    _lazyFinal($, "_initialDot", "$get$_initialDot", () => A.RegExp_RegExp("^\\.", true, false));
    _lazyFinal($, "Frame__uriRegExp", "$get$Frame__uriRegExp", () => A.RegExp_RegExp("^[a-zA-Z][-+.a-zA-Z\\d]*://", true, false));
    _lazyFinal($, "Frame__windowsRegExp", "$get$Frame__windowsRegExp", () => A.RegExp_RegExp("^([a-zA-Z]:[\\\\/]|\\\\\\\\)", true, false));
    _lazyFinal($, "StackZoneSpecification_disableKey", "$get$StackZoneSpecification_disableKey", () => new A.Object());
    _lazyFinal($, "_v8Trace", "$get$_v8Trace", () => A.RegExp_RegExp("\\n    ?at ", true, false));
    _lazyFinal($, "_v8TraceLine", "$get$_v8TraceLine", () => A.RegExp_RegExp("    ?at ", true, false));
    _lazyFinal($, "_firefoxEvalTrace", "$get$_firefoxEvalTrace", () => A.RegExp_RegExp("@\\S+ line \\d+ >.* (Function|eval):\\d+:\\d+", true, false));
    _lazyFinal($, "_firefoxSafariTrace", "$get$_firefoxSafariTrace", () => A.RegExp_RegExp("^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$", true, true));
    _lazyFinal($, "_friendlyTrace", "$get$_friendlyTrace", () => A.RegExp_RegExp("^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$", true, true));
    _lazyFinal($, "vmChainGap", "$get$vmChainGap", () => A.RegExp_RegExp("^<asynchronous suspension>\\n?$", true, true));
    _lazyFinal($, "_newlineRegExp", "$get$_newlineRegExp", () => A.RegExp_RegExp("\\r\\n?|\\n", true, false));
    _lazyFinal($, "Uuid__byteToHex", "$get$Uuid__byteToHex", () => {
      var i,
        _list = J.JSArray_JSArray$allocateGrowable(256, type$.String);
      for (i = 0; i < 256; ++i)
        _list[i] = B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(i, 16), 2, "0");
      return _list;
    });
    _lazyFinal($, "Uuid__stateExpando", "$get$Uuid__stateExpando", () => A.Expando$(null, A.findType("Map<String,@>")));
    _lazyFinal($, "UuidUtil__random", "$get$UuidUtil__random", () => A.Random_Random(null));
    _lazy($, "yamlWarningCallback", "$get$yamlWarningCallback", () => new A.yamlWarningCallback_closure());
    _lazyFinal($, "unprintableCharCodes", "$get$unprintableCharCodes", () => A.LinkedHashMap_LinkedHashMap$_literal([0, "\\0", 7, "\\a", 8, "\\b", 11, "\\v", 12, "\\f", 13, "\\r", 27, "\\e", 133, "\\N", 160, "\\_", 8232, "\\L", 8233, "\\P"], type$.int, type$.String));
    _lazyFinal($, "doubleQuoteEscapeChars", "$get$doubleQuoteEscapeChars", () => {
      var t1 = A.LinkedHashMap_LinkedHashMap$of($.$get$unprintableCharCodes(), type$.int, type$.String);
      t1.$indexSet(0, 9, "\\t");
      t1.$indexSet(0, 10, "\\n");
      t1.$indexSet(0, 34, '\\"');
      t1.$indexSet(0, 47, "\\/");
      t1.$indexSet(0, 92, "\\\\");
      return t1;
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$2$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$2$0 = function() {
    return this();
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$3$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$2$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=main.cjs.map
