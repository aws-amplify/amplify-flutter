// Generated with smithy-dart 0.3.1. DO NOT MODIFY.
// ignore_for_file: avoid_unused_constructor_parameters,deprecated_member_use_from_same_package,non_constant_identifier_names,require_trailing_commas

library smoke_test.cloud_formation.model.stack_event; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:aws_common/aws_common.dart' as _i1;
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:smithy/smithy.dart' as _i6;
import 'package:smoke_test/src/sdk/src/cloud_formation/model/hook_failure_mode.dart'
    as _i5;
import 'package:smoke_test/src/sdk/src/cloud_formation/model/hook_invocation_point.dart'
    as _i4;
import 'package:smoke_test/src/sdk/src/cloud_formation/model/hook_status.dart'
    as _i3;
import 'package:smoke_test/src/sdk/src/cloud_formation/model/resource_status.dart'
    as _i2;

part 'stack_event.g.dart';

/// The StackEvent data type.
abstract class StackEvent
    with _i1.AWSEquatable<StackEvent>
    implements Built<StackEvent, StackEventBuilder> {
  /// The StackEvent data type.
  factory StackEvent({
    required String stackId,
    required String eventId,
    required String stackName,
    String? logicalResourceId,
    String? physicalResourceId,
    String? resourceType,
    required DateTime timestamp,
    _i2.ResourceStatus? resourceStatus,
    String? resourceStatusReason,
    String? resourceProperties,
    String? clientRequestToken,
    String? hookType,
    _i3.HookStatus? hookStatus,
    String? hookStatusReason,
    _i4.HookInvocationPoint? hookInvocationPoint,
    _i5.HookFailureMode? hookFailureMode,
  }) {
    return _$StackEvent._(
      stackId: stackId,
      eventId: eventId,
      stackName: stackName,
      logicalResourceId: logicalResourceId,
      physicalResourceId: physicalResourceId,
      resourceType: resourceType,
      timestamp: timestamp,
      resourceStatus: resourceStatus,
      resourceStatusReason: resourceStatusReason,
      resourceProperties: resourceProperties,
      clientRequestToken: clientRequestToken,
      hookType: hookType,
      hookStatus: hookStatus,
      hookStatusReason: hookStatusReason,
      hookInvocationPoint: hookInvocationPoint,
      hookFailureMode: hookFailureMode,
    );
  }

  /// The StackEvent data type.
  factory StackEvent.build([void Function(StackEventBuilder) updates]) =
      _$StackEvent;

  const StackEvent._();

  static const List<_i6.SmithySerializer<StackEvent>> serializers = [
    StackEventAwsQuerySerializer()
  ];

  /// The unique ID name of the instance of the stack.
  String get stackId;

  /// The unique ID of this event.
  String get eventId;

  /// The name associated with a stack.
  String get stackName;

  /// The logical name of the resource specified in the template.
  String? get logicalResourceId;

  /// The name or unique identifier associated with the physical instance of the resource.
  String? get physicalResourceId;

  /// Type of resource. (For more information, go to [Amazon Web Services Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) in the CloudFormation User Guide.)
  String? get resourceType;

  /// Time the status was updated.
  DateTime get timestamp;

  /// Current status of the resource.
  _i2.ResourceStatus? get resourceStatus;

  /// Success/failure message associated with the resource.
  String? get resourceStatusReason;

  /// BLOB of the properties used to create the resource.
  String? get resourceProperties;

  /// The token passed to the operation that generated this event.
  ///
  /// All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a `CreateStack` operation with the token `token1`, then all the `StackEvents` generated by that operation will have `ClientRequestToken` set as `token1`.
  ///
  /// In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format _Console-StackOperation-ID_, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: `Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002`.
  String? get clientRequestToken;

  /// The name of the hook.
  String? get hookType;

  /// Provides the status of the change set hook.
  _i3.HookStatus? get hookStatus;

  /// Provides the reason for the hook status.
  String? get hookStatusReason;

  /// Invocation points are points in provisioning logic where hooks are initiated.
  _i4.HookInvocationPoint? get hookInvocationPoint;

  /// Specify the hook failure mode for non-compliant resources in the followings ways.
  ///
  /// *   `FAIL` Stops provisioning resources.
  ///
  /// *   `WARN` Allows provisioning to continue with a warning message.
  _i5.HookFailureMode? get hookFailureMode;
  @override
  List<Object?> get props => [
        stackId,
        eventId,
        stackName,
        logicalResourceId,
        physicalResourceId,
        resourceType,
        timestamp,
        resourceStatus,
        resourceStatusReason,
        resourceProperties,
        clientRequestToken,
        hookType,
        hookStatus,
        hookStatusReason,
        hookInvocationPoint,
        hookFailureMode,
      ];
  @override
  String toString() {
    final helper = newBuiltValueToStringHelper('StackEvent')
      ..add(
        'stackId',
        stackId,
      )
      ..add(
        'eventId',
        eventId,
      )
      ..add(
        'stackName',
        stackName,
      )
      ..add(
        'logicalResourceId',
        logicalResourceId,
      )
      ..add(
        'physicalResourceId',
        physicalResourceId,
      )
      ..add(
        'resourceType',
        resourceType,
      )
      ..add(
        'timestamp',
        timestamp,
      )
      ..add(
        'resourceStatus',
        resourceStatus,
      )
      ..add(
        'resourceStatusReason',
        resourceStatusReason,
      )
      ..add(
        'resourceProperties',
        resourceProperties,
      )
      ..add(
        'clientRequestToken',
        clientRequestToken,
      )
      ..add(
        'hookType',
        hookType,
      )
      ..add(
        'hookStatus',
        hookStatus,
      )
      ..add(
        'hookStatusReason',
        hookStatusReason,
      )
      ..add(
        'hookInvocationPoint',
        hookInvocationPoint,
      )
      ..add(
        'hookFailureMode',
        hookFailureMode,
      );
    return helper.toString();
  }
}

class StackEventAwsQuerySerializer
    extends _i6.StructuredSmithySerializer<StackEvent> {
  const StackEventAwsQuerySerializer() : super('StackEvent');

  @override
  Iterable<Type> get types => const [
        StackEvent,
        _$StackEvent,
      ];
  @override
  Iterable<_i6.ShapeId> get supportedProtocols => const [
        _i6.ShapeId(
          namespace: 'aws.protocols',
          shape: 'awsQuery',
        )
      ];
  @override
  StackEvent deserialize(
    Serializers serializers,
    Iterable<Object?> serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = StackEventBuilder();
    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final value = iterator.current;
      if (value == null) {
        continue;
      }
      switch (key) {
        case 'StackId':
          result.stackId = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'EventId':
          result.eventId = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'StackName':
          result.stackName = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'LogicalResourceId':
          result.logicalResourceId = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'PhysicalResourceId':
          result.physicalResourceId = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'ResourceType':
          result.resourceType = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'Timestamp':
          result.timestamp = (serializers.deserialize(
            value,
            specifiedType: const FullType(DateTime),
          ) as DateTime);
        case 'ResourceStatus':
          result.resourceStatus = (serializers.deserialize(
            value,
            specifiedType: const FullType(_i2.ResourceStatus),
          ) as _i2.ResourceStatus);
        case 'ResourceStatusReason':
          result.resourceStatusReason = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'ResourceProperties':
          result.resourceProperties = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'ClientRequestToken':
          result.clientRequestToken = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'HookType':
          result.hookType = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'HookStatus':
          result.hookStatus = (serializers.deserialize(
            value,
            specifiedType: const FullType(_i3.HookStatus),
          ) as _i3.HookStatus);
        case 'HookStatusReason':
          result.hookStatusReason = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'HookInvocationPoint':
          result.hookInvocationPoint = (serializers.deserialize(
            value,
            specifiedType: const FullType(_i4.HookInvocationPoint),
          ) as _i4.HookInvocationPoint);
        case 'HookFailureMode':
          result.hookFailureMode = (serializers.deserialize(
            value,
            specifiedType: const FullType(_i5.HookFailureMode),
          ) as _i5.HookFailureMode);
      }
    }

    return result.build();
  }

  @override
  Iterable<Object?> serialize(
    Serializers serializers,
    StackEvent object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result$ = <Object?>[
      const _i6.XmlElementName(
        'StackEventResponse',
        _i6.XmlNamespace('http://cloudformation.amazonaws.com/doc/2010-05-15/'),
      )
    ];
    final StackEvent(
      :stackId,
      :eventId,
      :stackName,
      :logicalResourceId,
      :physicalResourceId,
      :resourceType,
      :timestamp,
      :resourceStatus,
      :resourceStatusReason,
      :resourceProperties,
      :clientRequestToken,
      :hookType,
      :hookStatus,
      :hookStatusReason,
      :hookInvocationPoint,
      :hookFailureMode
    ) = object;
    result$
      ..add(const _i6.XmlElementName('StackId'))
      ..add(serializers.serialize(
        stackId,
        specifiedType: const FullType(String),
      ));
    result$
      ..add(const _i6.XmlElementName('EventId'))
      ..add(serializers.serialize(
        eventId,
        specifiedType: const FullType(String),
      ));
    result$
      ..add(const _i6.XmlElementName('StackName'))
      ..add(serializers.serialize(
        stackName,
        specifiedType: const FullType(String),
      ));
    if (logicalResourceId != null) {
      result$
        ..add(const _i6.XmlElementName('LogicalResourceId'))
        ..add(serializers.serialize(
          logicalResourceId,
          specifiedType: const FullType(String),
        ));
    }
    if (physicalResourceId != null) {
      result$
        ..add(const _i6.XmlElementName('PhysicalResourceId'))
        ..add(serializers.serialize(
          physicalResourceId,
          specifiedType: const FullType(String),
        ));
    }
    if (resourceType != null) {
      result$
        ..add(const _i6.XmlElementName('ResourceType'))
        ..add(serializers.serialize(
          resourceType,
          specifiedType: const FullType(String),
        ));
    }
    result$
      ..add(const _i6.XmlElementName('Timestamp'))
      ..add(serializers.serialize(
        timestamp,
        specifiedType: const FullType.nullable(DateTime),
      ));
    if (resourceStatus != null) {
      result$
        ..add(const _i6.XmlElementName('ResourceStatus'))
        ..add(serializers.serialize(
          resourceStatus,
          specifiedType: const FullType.nullable(_i2.ResourceStatus),
        ));
    }
    if (resourceStatusReason != null) {
      result$
        ..add(const _i6.XmlElementName('ResourceStatusReason'))
        ..add(serializers.serialize(
          resourceStatusReason,
          specifiedType: const FullType(String),
        ));
    }
    if (resourceProperties != null) {
      result$
        ..add(const _i6.XmlElementName('ResourceProperties'))
        ..add(serializers.serialize(
          resourceProperties,
          specifiedType: const FullType(String),
        ));
    }
    if (clientRequestToken != null) {
      result$
        ..add(const _i6.XmlElementName('ClientRequestToken'))
        ..add(serializers.serialize(
          clientRequestToken,
          specifiedType: const FullType(String),
        ));
    }
    if (hookType != null) {
      result$
        ..add(const _i6.XmlElementName('HookType'))
        ..add(serializers.serialize(
          hookType,
          specifiedType: const FullType(String),
        ));
    }
    if (hookStatus != null) {
      result$
        ..add(const _i6.XmlElementName('HookStatus'))
        ..add(serializers.serialize(
          hookStatus,
          specifiedType: const FullType.nullable(_i3.HookStatus),
        ));
    }
    if (hookStatusReason != null) {
      result$
        ..add(const _i6.XmlElementName('HookStatusReason'))
        ..add(serializers.serialize(
          hookStatusReason,
          specifiedType: const FullType(String),
        ));
    }
    if (hookInvocationPoint != null) {
      result$
        ..add(const _i6.XmlElementName('HookInvocationPoint'))
        ..add(serializers.serialize(
          hookInvocationPoint,
          specifiedType: const FullType.nullable(_i4.HookInvocationPoint),
        ));
    }
    if (hookFailureMode != null) {
      result$
        ..add(const _i6.XmlElementName('HookFailureMode'))
        ..add(serializers.serialize(
          hookFailureMode,
          specifiedType: const FullType.nullable(_i5.HookFailureMode),
        ));
    }
    return result$;
  }
}
