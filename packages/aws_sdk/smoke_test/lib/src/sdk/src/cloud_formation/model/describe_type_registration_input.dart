// Generated with smithy-dart 0.3.1. DO NOT MODIFY.
// ignore_for_file: avoid_unused_constructor_parameters,deprecated_member_use_from_same_package,non_constant_identifier_names,require_trailing_commas

library smoke_test.cloud_formation.model.describe_type_registration_input; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:aws_common/aws_common.dart' as _i2;
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:smithy/smithy.dart' as _i1;

part 'describe_type_registration_input.g.dart';

abstract class DescribeTypeRegistrationInput
    with
        _i1.HttpInput<DescribeTypeRegistrationInput>,
        _i2.AWSEquatable<DescribeTypeRegistrationInput>
    implements
        Built<DescribeTypeRegistrationInput,
            DescribeTypeRegistrationInputBuilder> {
  factory DescribeTypeRegistrationInput({required String registrationToken}) {
    return _$DescribeTypeRegistrationInput._(
        registrationToken: registrationToken);
  }

  factory DescribeTypeRegistrationInput.build(
          [void Function(DescribeTypeRegistrationInputBuilder) updates]) =
      _$DescribeTypeRegistrationInput;

  const DescribeTypeRegistrationInput._();

  factory DescribeTypeRegistrationInput.fromRequest(
    DescribeTypeRegistrationInput payload,
    _i2.AWSBaseHttpRequest request, {
    Map<String, String> labels = const {},
  }) =>
      payload;

  static const List<_i1.SmithySerializer<DescribeTypeRegistrationInput>>
      serializers = [DescribeTypeRegistrationInputAwsQuerySerializer()];

  /// The identifier for this registration request.
  ///
  /// This registration token is generated by CloudFormation when you initiate a registration request using RegisterType.
  String get registrationToken;
  @override
  DescribeTypeRegistrationInput getPayload() => this;
  @override
  List<Object?> get props => [registrationToken];
  @override
  String toString() {
    final helper = newBuiltValueToStringHelper('DescribeTypeRegistrationInput')
      ..add(
        'registrationToken',
        registrationToken,
      );
    return helper.toString();
  }
}

class DescribeTypeRegistrationInputAwsQuerySerializer
    extends _i1.StructuredSmithySerializer<DescribeTypeRegistrationInput> {
  const DescribeTypeRegistrationInputAwsQuerySerializer()
      : super('DescribeTypeRegistrationInput');

  @override
  Iterable<Type> get types => const [
        DescribeTypeRegistrationInput,
        _$DescribeTypeRegistrationInput,
      ];
  @override
  Iterable<_i1.ShapeId> get supportedProtocols => const [
        _i1.ShapeId(
          namespace: 'aws.protocols',
          shape: 'awsQuery',
        )
      ];
  @override
  DescribeTypeRegistrationInput deserialize(
    Serializers serializers,
    Iterable<Object?> serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = DescribeTypeRegistrationInputBuilder();
    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final value = iterator.current;
      if (value == null) {
        continue;
      }
      switch (key) {
        case 'RegistrationToken':
          result.registrationToken = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
      }
    }

    return result.build();
  }

  @override
  Iterable<Object?> serialize(
    Serializers serializers,
    DescribeTypeRegistrationInput object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result$ = <Object?>[
      const _i1.XmlElementName(
        'DescribeTypeRegistrationInputResponse',
        _i1.XmlNamespace('http://cloudformation.amazonaws.com/doc/2010-05-15/'),
      )
    ];
    final DescribeTypeRegistrationInput(:registrationToken) = object;
    result$
      ..add(const _i1.XmlElementName('RegistrationToken'))
      ..add(serializers.serialize(
        registrationToken,
        specifiedType: const FullType(String),
      ));
    return result$;
  }
}
