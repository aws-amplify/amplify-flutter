// Generated with smithy-dart 0.3.1. DO NOT MODIFY.
// ignore_for_file: avoid_unused_constructor_parameters,deprecated_member_use_from_same_package,non_constant_identifier_names

library smoke_test.sts.model.assumed_role_user; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:aws_common/aws_common.dart' as _i1;
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:smithy/smithy.dart' as _i2;

part 'assumed_role_user.g.dart';

/// The identifiers for the temporary security credentials that the operation returns.
abstract class AssumedRoleUser
    with _i1.AWSEquatable<AssumedRoleUser>
    implements Built<AssumedRoleUser, AssumedRoleUserBuilder> {
  /// The identifiers for the temporary security credentials that the operation returns.
  factory AssumedRoleUser({
    required String assumedRoleId,
    required String arn,
  }) {
    return _$AssumedRoleUser._(
      assumedRoleId: assumedRoleId,
      arn: arn,
    );
  }

  /// The identifiers for the temporary security credentials that the operation returns.
  factory AssumedRoleUser.build(
      [void Function(AssumedRoleUserBuilder) updates]) = _$AssumedRoleUser;

  const AssumedRoleUser._();

  static const List<_i2.SmithySerializer> serializers = [
    AssumedRoleUserAwsQuerySerializer()
  ];

  @BuiltValueHook(initializeBuilder: true)
  static void _init(AssumedRoleUserBuilder b) {}

  /// A unique identifier that contains the role ID and the role session name of the role that is being assumed. The role ID is generated by Amazon Web Services when the role is created.
  String get assumedRoleId;

  /// The ARN of the temporary security credentials that are returned from the AssumeRole action. For more information about ARNs and how to use them in policies, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html) in the _IAM User Guide_.
  String get arn;
  @override
  List<Object?> get props => [
        assumedRoleId,
        arn,
      ];
  @override
  String toString() {
    final helper = newBuiltValueToStringHelper('AssumedRoleUser');
    helper.add(
      'assumedRoleId',
      assumedRoleId,
    );
    helper.add(
      'arn',
      arn,
    );
    return helper.toString();
  }
}

class AssumedRoleUserAwsQuerySerializer
    extends _i2.StructuredSmithySerializer<AssumedRoleUser> {
  const AssumedRoleUserAwsQuerySerializer() : super('AssumedRoleUser');

  @override
  Iterable<Type> get types => const [
        AssumedRoleUser,
        _$AssumedRoleUser,
      ];
  @override
  Iterable<_i2.ShapeId> get supportedProtocols => const [
        _i2.ShapeId(
          namespace: 'aws.protocols',
          shape: 'awsQuery',
        )
      ];
  @override
  AssumedRoleUser deserialize(
    Serializers serializers,
    Iterable<Object?> serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = AssumedRoleUserBuilder();
    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final value = iterator.current;
      if (value == null) {
        continue;
      }
      switch (key) {
        case 'AssumedRoleId':
          result.assumedRoleId = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
        case 'Arn':
          result.arn = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
      }
    }

    return result.build();
  }

  @override
  Iterable<Object?> serialize(
    Serializers serializers,
    AssumedRoleUser object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result$ = <Object?>[
      const _i2.XmlElementName(
        'AssumedRoleUserResponse',
        _i2.XmlNamespace('https://sts.amazonaws.com/doc/2011-06-15/'),
      )
    ];
    final AssumedRoleUser(:assumedRoleId, :arn) = object;
    result$
      ..add(const _i2.XmlElementName('AssumedRoleId'))
      ..add(serializers.serialize(
        assumedRoleId,
        specifiedType: const FullType(String),
      ));
    result$
      ..add(const _i2.XmlElementName('Arn'))
      ..add(serializers.serialize(
        arn,
        specifiedType: const FullType(String),
      ));
    return result$;
  }
}
