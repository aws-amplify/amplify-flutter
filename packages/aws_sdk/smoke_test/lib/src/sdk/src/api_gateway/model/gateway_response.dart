// Generated with smithy-dart 0.3.1. DO NOT MODIFY.
// ignore_for_file: avoid_unused_constructor_parameters,deprecated_member_use_from_same_package,non_constant_identifier_names,require_trailing_commas

library smoke_test.api_gateway.model.gateway_response; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'package:aws_common/aws_common.dart' as _i1;
import 'package:built_collection/built_collection.dart' as _i3;
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:smithy/smithy.dart' as _i4;
import 'package:smoke_test/src/sdk/src/api_gateway/model/gateway_response_type.dart'
    as _i2;

part 'gateway_response.g.dart';

/// A gateway response of a given response type and status code, with optional response parameters and mapping templates.
abstract class GatewayResponse
    with _i1.AWSEquatable<GatewayResponse>
    implements Built<GatewayResponse, GatewayResponseBuilder> {
  /// A gateway response of a given response type and status code, with optional response parameters and mapping templates.
  factory GatewayResponse({
    _i2.GatewayResponseType? responseType,
    String? statusCode,
    Map<String, String>? responseParameters,
    Map<String, String>? responseTemplates,
    bool? defaultResponse,
  }) {
    defaultResponse ??= false;
    return _$GatewayResponse._(
      responseType: responseType,
      statusCode: statusCode,
      responseParameters:
          responseParameters == null ? null : _i3.BuiltMap(responseParameters),
      responseTemplates:
          responseTemplates == null ? null : _i3.BuiltMap(responseTemplates),
      defaultResponse: defaultResponse,
    );
  }

  /// A gateway response of a given response type and status code, with optional response parameters and mapping templates.
  factory GatewayResponse.build(
      [void Function(GatewayResponseBuilder) updates]) = _$GatewayResponse;

  const GatewayResponse._();

  /// Constructs a [GatewayResponse] from a [payload] and [response].
  factory GatewayResponse.fromResponse(
    GatewayResponse payload,
    _i1.AWSBaseHttpResponse response,
  ) =>
      payload;

  static const List<_i4.SmithySerializer<GatewayResponse>> serializers = [
    GatewayResponseRestJson1Serializer()
  ];

  @BuiltValueHook(initializeBuilder: true)
  static void _init(GatewayResponseBuilder b) {
    b.defaultResponse = false;
  }

  /// The response type of the associated GatewayResponse.
  _i2.GatewayResponseType? get responseType;

  /// The HTTP status code for this GatewayResponse.
  String? get statusCode;

  /// Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
  _i3.BuiltMap<String, String>? get responseParameters;

  /// Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
  _i3.BuiltMap<String, String>? get responseTemplates;

  /// A Boolean flag to indicate whether this GatewayResponse is the default gateway response (`true`) or not (`false`). A default gateway response is one generated by API Gateway without any customization by an API developer.
  bool get defaultResponse;
  @override
  List<Object?> get props => [
        responseType,
        statusCode,
        responseParameters,
        responseTemplates,
        defaultResponse,
      ];
  @override
  String toString() {
    final helper = newBuiltValueToStringHelper('GatewayResponse')
      ..add(
        'responseType',
        responseType,
      )
      ..add(
        'statusCode',
        statusCode,
      )
      ..add(
        'responseParameters',
        responseParameters,
      )
      ..add(
        'responseTemplates',
        responseTemplates,
      )
      ..add(
        'defaultResponse',
        defaultResponse,
      );
    return helper.toString();
  }
}

class GatewayResponseRestJson1Serializer
    extends _i4.StructuredSmithySerializer<GatewayResponse> {
  const GatewayResponseRestJson1Serializer() : super('GatewayResponse');

  @override
  Iterable<Type> get types => const [
        GatewayResponse,
        _$GatewayResponse,
      ];
  @override
  Iterable<_i4.ShapeId> get supportedProtocols => const [
        _i4.ShapeId(
          namespace: 'aws.protocols',
          shape: 'restJson1',
        )
      ];
  @override
  GatewayResponse deserialize(
    Serializers serializers,
    Iterable<Object?> serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = GatewayResponseBuilder();
    final iterator = serialized.iterator;
    while (iterator.moveNext()) {
      final key = iterator.current as String;
      iterator.moveNext();
      final value = iterator.current;
      if (value == null) {
        continue;
      }
      switch (key) {
        case 'defaultResponse':
          result.defaultResponse = (serializers.deserialize(
            value,
            specifiedType: const FullType(bool),
          ) as bool);
        case 'responseParameters':
          result.responseParameters.replace((serializers.deserialize(
            value,
            specifiedType: const FullType(
              _i3.BuiltMap,
              [
                FullType(String),
                FullType(String),
              ],
            ),
          ) as _i3.BuiltMap<String, String>));
        case 'responseTemplates':
          result.responseTemplates.replace((serializers.deserialize(
            value,
            specifiedType: const FullType(
              _i3.BuiltMap,
              [
                FullType(String),
                FullType(String),
              ],
            ),
          ) as _i3.BuiltMap<String, String>));
        case 'responseType':
          result.responseType = (serializers.deserialize(
            value,
            specifiedType: const FullType(_i2.GatewayResponseType),
          ) as _i2.GatewayResponseType);
        case 'statusCode':
          result.statusCode = (serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String);
      }
    }

    return result.build();
  }

  @override
  Iterable<Object?> serialize(
    Serializers serializers,
    GatewayResponse object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result$ = <Object?>[];
    final GatewayResponse(
      :defaultResponse,
      :responseParameters,
      :responseTemplates,
      :responseType,
      :statusCode
    ) = object;
    result$.addAll([
      'defaultResponse',
      serializers.serialize(
        defaultResponse,
        specifiedType: const FullType(bool),
      ),
    ]);
    if (responseParameters != null) {
      result$
        ..add('responseParameters')
        ..add(serializers.serialize(
          responseParameters,
          specifiedType: const FullType(
            _i3.BuiltMap,
            [
              FullType(String),
              FullType(String),
            ],
          ),
        ));
    }
    if (responseTemplates != null) {
      result$
        ..add('responseTemplates')
        ..add(serializers.serialize(
          responseTemplates,
          specifiedType: const FullType(
            _i3.BuiltMap,
            [
              FullType(String),
              FullType(String),
            ],
          ),
        ));
    }
    if (responseType != null) {
      result$
        ..add('responseType')
        ..add(serializers.serialize(
          responseType,
          specifiedType: const FullType(_i2.GatewayResponseType),
        ));
    }
    if (statusCode != null) {
      result$
        ..add('statusCode')
        ..add(serializers.serialize(
          statusCode,
          specifiedType: const FullType(String),
        ));
    }
    return result$;
  }
}
