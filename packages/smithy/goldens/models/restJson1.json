{
    "smithy": "1.0",
    "metadata": {
        "suppressions": [
            {
                "id": "UnreferencedShape",
                "namespace": "aws.protocoltests.config",
                "reason": "These shapes are intended to be used to validate vendorParams in\nprotocol tests, so they naturally will not be connected to a service.\n"
            },
            {
                "id": "HttpMethodSemantics",
                "namespace": "com.amazonaws.glacier"
            },
            {
                "id": "DeprecatedTrait",
                "namespace": "*",
                "reason": "Some of the AWS protocols make use of deprecated traits, and some are\nthemselves deprecated traits. As this package is intended to test those\nprotocols, the warnings should be suppressed."
            }
        ]
    },
    "shapes": {
        "aws.protocoltests.restjson#AllQueryStringTypes": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#AllQueryStringTypesInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses all query string types.",
                "smithy.api#http": {
                    "uri": "/AllQueryStringTypesInput",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonAllQueryStringTypes",
                        "documentation": "Serializes query string parameters with all supported types",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "String=Hello%20there",
                            "StringList=a",
                            "StringList=b",
                            "StringList=c",
                            "StringSet=a",
                            "StringSet=b",
                            "StringSet=c",
                            "Byte=1",
                            "Short=2",
                            "Integer=3",
                            "IntegerList=1",
                            "IntegerList=2",
                            "IntegerList=3",
                            "IntegerSet=1",
                            "IntegerSet=2",
                            "IntegerSet=3",
                            "Long=4",
                            "Float=1.1",
                            "Double=1.1",
                            "DoubleList=1.1",
                            "DoubleList=2.1",
                            "DoubleList=3.1",
                            "Boolean=true",
                            "BooleanList=true",
                            "BooleanList=false",
                            "BooleanList=true",
                            "Timestamp=1970-01-01T00%3A00%3A01Z",
                            "TimestampList=1970-01-01T00%3A00%3A01Z",
                            "TimestampList=1970-01-01T00%3A00%3A02Z",
                            "TimestampList=1970-01-01T00%3A00%3A03Z",
                            "Enum=Foo",
                            "EnumList=Foo",
                            "EnumList=Baz",
                            "EnumList=Bar"
                        ],
                        "params": {
                            "queryString": "Hello there",
                            "queryStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "queryStringSet": [
                                "a",
                                "b",
                                "c"
                            ],
                            "queryByte": 1,
                            "queryShort": 2,
                            "queryInteger": 3,
                            "queryIntegerList": [
                                1,
                                2,
                                3
                            ],
                            "queryIntegerSet": [
                                1,
                                2,
                                3
                            ],
                            "queryLong": 4,
                            "queryFloat": 1.1,
                            "queryDouble": 1.1,
                            "queryDoubleList": [
                                1.1,
                                2.1,
                                3.1
                            ],
                            "queryBoolean": true,
                            "queryBooleanList": [
                                true,
                                false,
                                true
                            ],
                            "queryTimestamp": 1,
                            "queryTimestampList": [
                                1,
                                2,
                                3
                            ],
                            "queryEnum": "Foo",
                            "queryEnumList": [
                                "Foo",
                                "Baz",
                                "Bar"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonQueryStringMap",
                        "documentation": "Handles query string maps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "QueryParamsStringKeyA=Foo",
                            "QueryParamsStringKeyB=Bar"
                        ],
                        "params": {
                            "queryParamsMapOfStringList": {
                                "QueryParamsStringKeyA": [
                                    "Foo"
                                ],
                                "QueryParamsStringKeyB": [
                                    "Bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonQueryStringEscaping",
                        "documentation": "Handles escaping all required characters in the query string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "String=%25%3A%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%F0%9F%98%B9"
                        ],
                        "params": {
                            "queryString": "%:/?#[]@!$&'()*+,;=ðŸ˜¹"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatQueryValues",
                        "documentation": "Supports handling NaN float query values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=NaN",
                            "Double=NaN"
                        ],
                        "params": {
                            "queryFloat": "NaN",
                            "queryDouble": "NaN",
                            "queryParamsMapOfStringList": {
                                "Float": [
                                    "NaN"
                                ],
                                "Double": [
                                    "NaN"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatQueryValues",
                        "documentation": "Supports handling Infinity float query values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=Infinity",
                            "Double=Infinity"
                        ],
                        "params": {
                            "queryFloat": "Infinity",
                            "queryDouble": "Infinity",
                            "queryParamsMapOfStringList": {
                                "Float": [
                                    "Infinity"
                                ],
                                "Double": [
                                    "Infinity"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatQueryValues",
                        "documentation": "Supports handling -Infinity float query values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/AllQueryStringTypesInput",
                        "body": "",
                        "queryParams": [
                            "Float=-Infinity",
                            "Double=-Infinity"
                        ],
                        "params": {
                            "queryFloat": "-Infinity",
                            "queryDouble": "-Infinity",
                            "queryParamsMapOfStringList": {
                                "Float": [
                                    "-Infinity"
                                ],
                                "Double": [
                                    "-Infinity"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#AllQueryStringTypesInput": {
            "type": "structure",
            "members": {
                "queryString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "String"
                    }
                },
                "queryStringList": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpQuery": "StringList"
                    }
                },
                "queryStringSet": {
                    "target": "aws.protocoltests.shared#StringSet",
                    "traits": {
                        "smithy.api#httpQuery": "StringSet"
                    }
                },
                "queryByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpQuery": "Byte"
                    }
                },
                "queryShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpQuery": "Short"
                    }
                },
                "queryInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpQuery": "Integer"
                    }
                },
                "queryIntegerList": {
                    "target": "aws.protocoltests.shared#IntegerList",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerList"
                    }
                },
                "queryIntegerSet": {
                    "target": "aws.protocoltests.shared#IntegerSet",
                    "traits": {
                        "smithy.api#httpQuery": "IntegerSet"
                    }
                },
                "queryLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpQuery": "Long"
                    }
                },
                "queryFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpQuery": "Float"
                    }
                },
                "queryDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpQuery": "Double"
                    }
                },
                "queryDoubleList": {
                    "target": "aws.protocoltests.shared#DoubleList",
                    "traits": {
                        "smithy.api#httpQuery": "DoubleList"
                    }
                },
                "queryBoolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpQuery": "Boolean"
                    }
                },
                "queryBooleanList": {
                    "target": "aws.protocoltests.shared#BooleanList",
                    "traits": {
                        "smithy.api#httpQuery": "BooleanList"
                    }
                },
                "queryTimestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "Timestamp"
                    }
                },
                "queryTimestampList": {
                    "target": "aws.protocoltests.shared#TimestampList",
                    "traits": {
                        "smithy.api#httpQuery": "TimestampList"
                    }
                },
                "queryEnum": {
                    "target": "aws.protocoltests.shared#FooEnum",
                    "traits": {
                        "smithy.api#httpQuery": "Enum"
                    }
                },
                "queryEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList",
                    "traits": {
                        "smithy.api#httpQuery": "EnumList"
                    }
                },
                "queryParamsMapOfStringList": {
                    "target": "aws.protocoltests.shared#StringListMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "com.amazonaws.apigateway#ApiKeySourceType": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "value": "HEADER",
                        "name": "HEADER"
                    },
                    {
                        "value": "AUTHORIZER",
                        "name": "AUTHORIZER"
                    }
                ]
            }
        },
        "smithy.test#AppliesTo": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "value": "client",
                        "name": "CLIENT",
                        "documentation": "The test only applies to client implementations."
                    },
                    {
                        "value": "server",
                        "name": "SERVER",
                        "documentation": "The test only applies to server implementations."
                    }
                ],
                "smithy.api#private": {}
            }
        },
        "com.amazonaws.glacier#ArchiveCreationOutput": {
            "type": "structure",
            "members": {
                "location": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "Location"
                    }
                },
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                },
                "archiveId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-archive-id"
                    }
                }
            }
        },
        "aws.apigateway#Arn": {
            "type": "string",
            "traits": {
                "aws.api#arnReference": {},
                "smithy.api#documentation": "<p>The ARN of an AWS integration target.</p><p>This string MAY contain the literal string <code>{serviceName}</code> and/or the literal string <code>{operationName}</code>, which will be replaced with the name of the Smithy service shape and the name of the Smithy operation shape, respectively.</p>",
                "smithy.api#private": {}
            }
        },
        "aws.api#ArnNamespace": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^[a-z0-9.\\-]{1,63}$",
                "smithy.api#private": {}
            }
        },
        "aws.apigateway#AuthorizerDefinition": {
            "type": "structure",
            "members": {
                "scheme": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The Smithy authentication scheme used by the client (e.g, aws.v4).",
                        "smithy.api#idRef": {
                            "selector": "[trait|authDefinition]",
                            "failWhenMissing": true,
                            "errorMessage": "The scheme of an authorizer definition must reference an auth trait"
                        },
                        "smithy.api#required": {}
                    }
                },
                "type": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The type of the authorizer. If specifying information beyond the scheme, this value is required. The value must be \"token\", for an authorizer with the caller identity embedded in an authorization token, or \"request\", for an authorizer with the caller identity contained in request parameters."
                    }
                },
                "customAuthType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "This value is not used directly by API Gateway but will be used for OpenAPI exports. This will default to \"awsSigV4\" if your scheme is \"aws.v4\", or \"custom\" otherwise."
                    }
                },
                "uri": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The Uniform Resource Identifier (URI) of the authorizer Lambda function"
                    }
                },
                "credentials": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Credentials required for invoking the authorizer"
                    }
                },
                "identitySource": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Comma-separated list of mapping expressions of the request parameters as the identity source. Applicable for the authorizer of the \"request\" type only."
                    }
                },
                "identityValidationExpression": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A regular expression for validating the token as the incoming identity"
                    }
                },
                "resultTtlInSeconds": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#documentation": "The number of seconds for which the resulting IAM policy is cached."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "An object that associates an authorizer and associated metadata with an authentication mechanism.",
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.config#AwsConfig": {
            "type": "structure",
            "members": {
                "clockTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#documentation": "This is the time that should be set during the course of the test.\nThis is important for things like signing where the clock time impacts\nthe result."
                    }
                },
                "scopedConfig": {
                    "target": "aws.protocoltests.config#ScopedConfig"
                }
            }
        },
        "com.amazonaws.apigateway#BackplaneControlService": {
            "type": "service",
            "traits": {
                "aws.api#service": {
                    "sdkId": "API Gateway",
                    "arnNamespace": "apigateway",
                    "cloudFormationName": "ApiGateway",
                    "cloudTrailEventSource": "apigateway.amazonaws.com",
                    "endpointPrefix": "apigateway"
                },
                "aws.auth#sigv4": {
                    "name": "apigateway"
                },
                "aws.protocols#restJson1": {},
                "smithy.api#title": "Amazon API Gateway"
            },
            "version": "2015-07-09",
            "operations": [
                {
                    "target": "com.amazonaws.apigateway#GetRestApis"
                }
            ]
        },
        "com.amazonaws.apigateway#BadRequestException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.apigateway#String"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "com.amazonaws.apigateway#Boolean": {
            "type": "boolean"
        },
        "aws.protocoltests.shared#BooleanList": {
            "type": "list",
            "member": {
                "target": "smithy.api#PrimitiveBoolean"
            }
        },
        "aws.protocols#ChecksumAlgorithm": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "value": "CRC32C",
                        "name": "CRC32C"
                    },
                    {
                        "value": "CRC32",
                        "name": "CRC32"
                    },
                    {
                        "value": "SHA1",
                        "name": "SHA1"
                    },
                    {
                        "value": "SHA256",
                        "name": "SHA256"
                    }
                ],
                "smithy.api#private": {}
            }
        },
        "aws.protocols#ChecksumAlgorithmSet": {
            "type": "list",
            "member": {
                "target": "aws.protocols#ChecksumAlgorithm"
            },
            "traits": {
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#private": {},
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.config#ClientConfig": {
            "type": "structure",
            "members": {
                "aws_access_key_id": {
                    "target": "smithy.api#String"
                },
                "aws_secret_access_key": {
                    "target": "smithy.api#String"
                },
                "aws_session_token": {
                    "target": "smithy.api#String"
                },
                "region": {
                    "target": "smithy.api#String"
                },
                "s3": {
                    "target": "aws.protocoltests.config#S3Config"
                },
                "retry_config": {
                    "target": "aws.protocoltests.config#RetryConfig"
                },
                "aws_profile": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration that is set on the constructed client."
            }
        },
        "aws.api#CloudFormationName": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^[A-Z][A-Za-z0-9]+$",
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#ComplexError": {
            "type": "structure",
            "members": {
                "Header": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Header"
                    }
                },
                "TopLevel": {
                    "target": "smithy.api#String"
                },
                "Nested": {
                    "target": "aws.protocoltests.restjson#ComplexNestedErrorData"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when a request is invalid.",
                "smithy.api#error": "client",
                "smithy.api#httpError": 403,
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonComplexErrorWithNoMessage",
                        "documentation": "Serializes a complex error with no message member",
                        "protocol": "aws.protocols#restJson1",
                        "params": {
                            "Header": "Header",
                            "TopLevel": "Top level",
                            "Nested": {
                                "Foo": "bar"
                            }
                        },
                        "code": 403,
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Header": "Header",
                            "X-Amzn-Errortype": "ComplexError"
                        },
                        "body": "{\n    \"TopLevel\": \"Top level\",\n    \"Nested\": {\n        \"Fooooo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json"
                    },
                    {
                        "id": "RestJsonEmptyComplexErrorWithNoMessage",
                        "protocol": "aws.protocols#restJson1",
                        "params": {},
                        "code": 403,
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Amzn-Errortype": "ComplexError"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ComplexNestedErrorData": {
            "type": "structure",
            "members": {
                "Foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "Fooooo"
                    }
                }
            }
        },
        "aws.iam#ConditionKeyDefinition": {
            "type": "structure",
            "members": {
                "documentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines documentation about the condition key."
                    }
                },
                "externalDocumentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A valid URL that defines more information about the condition key."
                    }
                },
                "type": {
                    "target": "aws.iam#ConditionKeyType",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "A defined condition key to appear within a service in addition to inferred and global condition keys.",
                "smithy.api#private": {}
            }
        },
        "aws.iam#ConditionKeyType": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "The IAM policy type of the value that will supplied for this context key",
                "smithy.api#enum": [
                    {
                        "value": "ARN",
                        "name": "ARN"
                    },
                    {
                        "value": "ArrayOfARN",
                        "name": "ARRAY_OF_ARN"
                    },
                    {
                        "value": "Binary",
                        "name": "BINARY"
                    },
                    {
                        "value": "ArrayOfBinary",
                        "name": "ARRAY_OF_BINARY"
                    },
                    {
                        "value": "String",
                        "name": "STRING"
                    },
                    {
                        "value": "ArrayOfString",
                        "name": "ARRAY_OF_STRING"
                    },
                    {
                        "value": "Numeric",
                        "name": "NUMERIC"
                    },
                    {
                        "value": "ArrayOfNumeric",
                        "name": "ARRAY_OF_NUMERIC"
                    },
                    {
                        "value": "Date",
                        "name": "DATE"
                    },
                    {
                        "value": "ArrayOfDate",
                        "name": "ARRAY_OF_DATE"
                    },
                    {
                        "value": "Bool",
                        "name": "BOOL"
                    },
                    {
                        "value": "ArrayOfBool",
                        "name": "ARRAY_OF_BOOL"
                    },
                    {
                        "value": "IPAddress",
                        "name": "IP_ADDRESS"
                    },
                    {
                        "value": "ArrayOfIPAddress",
                        "name": "ARRAY_OF_IP_ADDRESS"
                    }
                ],
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.config#ConfigFile": {
            "type": "map",
            "key": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#documentation": "The top level key in a config file is the \"profile\", which is a string.\nIf a profile is not explicitly set, then implementations should check the\nprofile named \"default\"."
                }
            },
            "value": {
                "target": "aws.protocoltests.config#FileConfigSettings",
                "traits": {
                    "smithy.api#documentation": "The value is a collection of settings."
                }
            },
            "traits": {
                "smithy.api#documentation": "A shape representing a parsed config file, which is a map of profile names\nto configuration sets."
            }
        },
        "aws.apigateway#ConnectionType": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "name": "INTERNET",
                        "value": "INTERNET"
                    },
                    {
                        "name": "VPC_LINK",
                        "value": "VPC_LINK"
                    }
                ],
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#ConstantAndVariableQueryString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#ConstantAndVariableQueryStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses fixed query string params and variable query string params.\nThe fixed query string parameters and variable parameters must both be\nserialized (implementations may need to merge them together).",
                "smithy.api#http": {
                    "uri": "/ConstantAndVariableQueryString?foo=bar",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonConstantAndVariableQueryStringMissingOneValue",
                        "documentation": "Mixes constant and variable query string parameters",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ConstantAndVariableQueryString",
                        "queryParams": [
                            "foo=bar",
                            "baz=bam"
                        ],
                        "forbidQueryParams": [
                            "maybeSet"
                        ],
                        "body": "",
                        "params": {
                            "baz": "bam"
                        }
                    },
                    {
                        "id": "RestJsonConstantAndVariableQueryStringAllValues",
                        "documentation": "Mixes constant and variable query string parameters",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ConstantAndVariableQueryString",
                        "queryParams": [
                            "foo=bar",
                            "baz=bam",
                            "maybeSet=yes"
                        ],
                        "body": "",
                        "params": {
                            "baz": "bam",
                            "maybeSet": "yes"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ConstantAndVariableQueryStringInput": {
            "type": "structure",
            "members": {
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "baz"
                    }
                },
                "maybeSet": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "maybeSet"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#ConstantQueryString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#ConstantQueryStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This example uses a constant query string parameters and a label.\nThis simply tests that labels and query string parameters are\ncompatible. The fixed query string parameter named \"hello\" should\nin no way conflict with the label, `{hello}`.",
                "smithy.api#http": {
                    "uri": "/ConstantQueryString/{hello}?foo=bar&hello",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonConstantQueryString",
                        "documentation": "Includes constant query string parameters",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ConstantQueryString/hi",
                        "queryParams": [
                            "foo=bar",
                            "hello"
                        ],
                        "body": "",
                        "params": {
                            "hello": "hi"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ConstantQueryStringInput": {
            "type": "structure",
            "members": {
                "hello": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.apigateway#ContentHandling": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Defines the contentHandling for the integration",
                "smithy.api#enum": [
                    {
                        "value": "CONVERT_TO_TEXT",
                        "name": "CONVERT_TO_TEXT"
                    },
                    {
                        "value": "CONVERT_TO_BINARY",
                        "name": "CONVERT_TO_BINARY"
                    }
                ],
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.shared#DateTime": {
            "type": "timestamp",
            "traits": {
                "smithy.api#timestampFormat": "date-time"
            }
        },
        "aws.protocoltests.restjson#DenseBooleanMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Boolean"
            }
        },
        "aws.protocoltests.restjson#DenseNumberMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Integer"
            }
        },
        "aws.protocoltests.restjson#DenseSetMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#StringSet"
            }
        },
        "aws.protocoltests.restjson#DenseStringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.restjson#DenseStructMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            }
        },
        "aws.protocoltests.restjson#Document": {
            "type": "document"
        },
        "aws.protocoltests.restjson#DocumentType": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#DocumentTypeInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#DocumentTypeInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a document as part of the payload.",
                "smithy.api#http": {
                    "uri": "/DocumentType",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "DocumentTypeInputWithObject",
                        "documentation": "Serializes document types as part of the JSON request payload with no escaping.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": {\n        \"foo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentInputWithString",
                        "documentation": "Serializes document types using a string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": \"hello\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": "hello"
                        }
                    },
                    {
                        "id": "DocumentInputWithNumber",
                        "documentation": "Serializes document types using a number.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": 10\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": 10
                        }
                    },
                    {
                        "id": "DocumentInputWithBoolean",
                        "documentation": "Serializes document types using a boolean.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": true\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": true
                        }
                    },
                    {
                        "id": "DocumentInputWithList",
                        "documentation": "Serializes document types using a list.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentType",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": [\n        true,\n        \"hi\",\n        [\n            1,\n            2\n        ],\n        {\n            \"foo\": {\n                \"baz\": [\n                    3,\n                    4\n                ]\n            }\n        }\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": [
                                true,
                                "hi",
                                [
                                    1,
                                    2
                                ],
                                {
                                    "foo": {
                                        "baz": [
                                            3,
                                            4
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "DocumentOutput",
                        "documentation": "Serializes documents as part of the JSON response payload with no escaping.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": {\n        \"foo\": \"bar\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentOutputString",
                        "documentation": "Document types can be JSON scalars too.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": \"hello\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": "hello"
                        }
                    },
                    {
                        "id": "DocumentOutputNumber",
                        "documentation": "Document types can be JSON scalars too.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": 10\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": 10
                        }
                    },
                    {
                        "id": "DocumentOutputBoolean",
                        "documentation": "Document types can be JSON scalars too.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": false\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": false
                        }
                    },
                    {
                        "id": "DocumentOutputArray",
                        "documentation": "Document types can be JSON arrays.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"documentValue\": [\n        true,\n        false\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": "string",
                            "documentValue": [
                                true,
                                false
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#DocumentTypeAsPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#DocumentTypeAsPayloadInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#DocumentTypeAsPayloadInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes a document as the entire HTTP payload.",
                "smithy.api#http": {
                    "uri": "/DocumentTypeAsPayload",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "DocumentTypeAsPayloadInput",
                        "documentation": "Serializes a document as the target of the httpPayload trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentTypeAsPayload",
                        "body": "{\n    \"foo\": \"bar\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentTypeAsPayloadInputString",
                        "documentation": "Serializes a document as the target of the httpPayload trait using a string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/DocumentTypeAsPayload",
                        "body": "\"hello\"",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": "hello"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "DocumentTypeAsPayloadOutput",
                        "documentation": "Serializes a document as the target of the httpPayload trait.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"foo\": \"bar\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": {
                                "foo": "bar"
                            }
                        }
                    },
                    {
                        "id": "DocumentTypeAsPayloadOutputString",
                        "documentation": "Serializes a document as a payload string.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "\"hello\"",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "documentValue": "hello"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#DocumentTypeAsPayloadInputOutput": {
            "type": "structure",
            "members": {
                "documentValue": {
                    "target": "aws.protocoltests.restjson#Document",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#DocumentTypeInputOutput": {
            "type": "structure",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "documentValue": {
                    "target": "aws.protocoltests.restjson#Document"
                }
            }
        },
        "aws.protocoltests.shared#DoubleList": {
            "type": "list",
            "member": {
                "target": "smithy.api#Double"
            }
        },
        "aws.protocoltests.restjson#EmptyInputAndEmptyOutput": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#EmptyInputAndEmptyOutputInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#EmptyInputAndEmptyOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has an empty input\nand empty output structure that reuses the same shape. While this should\nbe rare, code generators must support this.",
                "smithy.api#http": {
                    "uri": "/EmptyInputAndEmptyOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutput",
                        "documentation": "Clients should not serialize a JSON payload when no parameters\nare given that are sent in the body. A service will tolerate\nclients that omit a payload or that send a JSON object.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EmptyInputAndEmptyOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutputWithJson",
                        "documentation": "Similar to RestJsonEmptyInputAndEmptyOutput, but ensures that\nservices gracefully handles receiving a JSON object.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EmptyInputAndEmptyOutput",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutput",
                        "documentation": "As of January 2021, server implementations are expected to\nrespond with a JSON object regardless of if the output\nparameters are empty.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json"
                    },
                    {
                        "id": "RestJsonEmptyInputAndEmptyOutputJsonObjectOutput",
                        "documentation": "This test ensures that clients can gracefully handle\nsituations where a service omits a JSON payload entirely.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#EmptyInputAndEmptyOutputInput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#EmptyInputAndEmptyOutputOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "com.amazonaws.apigateway#EndpointConfiguration": {
            "type": "structure",
            "members": {
                "types": {
                    "target": "com.amazonaws.apigateway#ListOfEndpointType"
                },
                "vpcEndpointIds": {
                    "target": "com.amazonaws.apigateway#ListOfString"
                }
            }
        },
        "aws.protocoltests.restjson#EndpointOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo."
                },
                "smithy.api#http": {
                    "uri": "/EndpointOperation",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonEndpointTrait",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EndpointOperation",
                        "body": "",
                        "host": "example.com",
                        "resolvedHost": "foo.example.com"
                    }
                ]
            }
        },
        "com.amazonaws.apigateway#EndpointType": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "value": "REGIONAL",
                        "name": "REGIONAL"
                    },
                    {
                        "value": "EDGE",
                        "name": "EDGE"
                    },
                    {
                        "value": "PRIVATE",
                        "name": "PRIVATE"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#EndpointWithHostLabelOperation": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HostLabelInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#endpoint": {
                    "hostPrefix": "foo.{label}."
                },
                "smithy.api#http": {
                    "uri": "/EndpointWithHostLabelOperation",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonEndpointTraitWithHostLabel",
                        "documentation": "Operations can prepend to the given host if they define the\nendpoint trait, and can use the host label trait to define\nfurther customization based on user input.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/EndpointWithHostLabelOperation",
                        "body": "{\"label\": \"bar\"}",
                        "bodyMediaType": "application/json",
                        "host": "example.com",
                        "resolvedHost": "foo.bar.example.com",
                        "params": {
                            "label": "bar"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#EnumPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.restjson#StringEnum",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.config#EnvironmentConfig": {
            "type": "structure",
            "members": {
                "AWS_ACCESS_KEY_ID": {
                    "target": "smithy.api#String"
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "target": "smithy.api#String"
                },
                "AWS_DEFAULT_REGION": {
                    "target": "smithy.api#String"
                },
                "AWS_RETRY_MODE": {
                    "target": "aws.protocoltests.config#RetryMode"
                },
                "AWS_SESSION_TOKEN": {
                    "target": "smithy.api#String"
                },
                "AWS_PROFILE": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "Config settings that can be set as environment variables."
            }
        },
        "aws.protocoltests.shared#EpochSeconds": {
            "type": "timestamp",
            "traits": {
                "smithy.api#timestampFormat": "epoch-seconds"
            }
        },
        "aws.protocoltests.config#FileConfigSettings": {
            "type": "structure",
            "members": {
                "aws_access_key_id": {
                    "target": "smithy.api#String"
                },
                "aws_secret_access_key": {
                    "target": "smithy.api#String"
                },
                "aws_session_token": {
                    "target": "smithy.api#String"
                },
                "region": {
                    "target": "smithy.api#String"
                },
                "s3": {
                    "target": "aws.protocoltests.config#S3Config"
                },
                "retry_mode": {
                    "target": "aws.protocoltests.config#RetryMode"
                },
                "max_attempts": {
                    "target": "smithy.api#Short"
                }
            },
            "traits": {
                "smithy.api#documentation": "Config settings that can be set in the AWS config / credentials file as\npart of a profile."
            }
        },
        "aws.protocoltests.restjson#FiniteStreamingBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#requiresLength": {},
                "smithy.api#streaming": {}
            }
        },
        "aws.protocoltests.shared#FooEnum": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "name": "FOO",
                        "value": "Foo"
                    },
                    {
                        "name": "BAZ",
                        "value": "Baz"
                    },
                    {
                        "name": "BAR",
                        "value": "Bar"
                    },
                    {
                        "name": "ONE",
                        "value": "1"
                    },
                    {
                        "name": "ZERO",
                        "value": "0"
                    }
                ]
            }
        },
        "aws.protocoltests.shared#FooEnumList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#FooEnum"
            }
        },
        "aws.protocoltests.shared#FooEnumMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#FooEnum"
            }
        },
        "aws.protocoltests.shared#FooEnumSet": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#FooEnum"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.protocoltests.restjson#FooError": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "This error has test cases that test some of the dark corners of Amazon service\nframework history. It should only be implemented by clients.",
                "smithy.api#error": "server",
                "smithy.api#httpError": 500,
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonFooErrorUsingXAmznErrorType",
                        "documentation": "Serializes the X-Amzn-ErrorType header. For an example service, see Amazon EKS.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingXAmznErrorTypeWithUri",
                        "documentation": "Some X-Amzn-Errortype headers contain URLs. Clients need to split the URL on ':' and take only the first half of the string. For example, 'ValidationException:http://internal.amazon.com/example/com.amazon.example.validate/'\nis to be interpreted as 'ValidationException'.\n\nFor an example service see Amazon Polly.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "FooError:http://internal.amazon.com/example/com.amazon.example.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingXAmznErrorTypeWithUriAndNamespace",
                        "documentation": "X-Amzn-Errortype might contain a URL and a namespace. Client should extract only the shape name. This is a pathalogical case that might not actually happen in any deployed AWS service.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "X-Amzn-Errortype": "aws.protocoltests.restjson#FooError:http://internal.amazon.com/example/com.amazon.example.validate/"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingCode",
                        "documentation": "This example uses the 'code' property in the output rather than X-Amzn-Errortype. Some services do this though it's preferable to send the X-Amzn-Errortype. Client implementations must first check for the X-Amzn-Errortype and then check for a top-level 'code' property.\n\nFor example service see Amazon S3 Glacier.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"code\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingCodeAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.restjson#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorUsingCodeUriAndNamespace",
                        "documentation": "Some services serialize errors using code, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"code\": \"aws.protocoltests.restjson#FooError:http://internal.amazon.com/example/com.amazon.example.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorWithDunderType",
                        "documentation": "Some services serialize errors using __type.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"__type\": \"FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorWithDunderTypeAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. Clients should just take the last part of the string after '#'.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.restjson#FooError\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonFooErrorWithDunderTypeUriAndNamespace",
                        "documentation": "Some services serialize errors using __type, and it might contain a namespace. It also might contain a URI. Clients should just take the last part of the string after '#' and before \":\". This is a pathalogical case that might not occur in any deployed AWS service.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 500,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{\n    \"__type\": \"aws.protocoltests.restjson#FooError:http://internal.amazon.com/example/com.amazon.example.validate/\"\n}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "com.amazonaws.apigateway#GetRestApis": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.apigateway#GetRestApisRequest"
            },
            "output": {
                "target": "com.amazonaws.apigateway#RestApis"
            },
            "errors": [
                {
                    "target": "com.amazonaws.apigateway#BadRequestException"
                },
                {
                    "target": "com.amazonaws.apigateway#TooManyRequestsException"
                },
                {
                    "target": "com.amazonaws.apigateway#UnauthorizedException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/restapis",
                    "code": 200
                },
                "smithy.api#paginated": {
                    "inputToken": "position",
                    "outputToken": "position",
                    "items": "items",
                    "pageSize": "limit"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "ApiGatewayAccept",
                        "documentation": "API Gateway requires that this Accept header is set on all requests.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/restapis",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "body": "",
                        "params": {}
                    }
                ]
            }
        },
        "com.amazonaws.apigateway#GetRestApisRequest": {
            "type": "structure",
            "members": {
                "position": {
                    "target": "com.amazonaws.apigateway#String",
                    "traits": {
                        "smithy.api#httpQuery": "position"
                    }
                },
                "limit": {
                    "target": "com.amazonaws.apigateway#NullableInteger",
                    "traits": {
                        "smithy.api#httpQuery": "limit"
                    }
                }
            }
        },
        "com.amazonaws.glacier#Glacier": {
            "type": "service",
            "traits": {
                "aws.api#service": {
                    "sdkId": "Glacier",
                    "arnNamespace": "glacier",
                    "cloudFormationName": "Glacier",
                    "cloudTrailEventSource": "glacier.amazonaws.com",
                    "endpointPrefix": "glacier"
                },
                "aws.auth#sigv4": {
                    "name": "glacier"
                },
                "aws.protocols#restJson1": {},
                "smithy.api#title": "Amazon Glacier",
                "smithy.api#xmlNamespace": {
                    "uri": "http://glacier.amazonaws.com/doc/2012-06-01/"
                }
            },
            "version": "2012-06-01",
            "operations": [
                {
                    "target": "com.amazonaws.glacier#UploadArchive"
                },
                {
                    "target": "com.amazonaws.glacier#UploadMultipartPart"
                }
            ]
        },
        "aws.protocoltests.shared#GreetingList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            }
        },
        "aws.protocoltests.restjson.nested#GreetingStruct": {
            "type": "structure",
            "members": {
                "salutation": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.shared#GreetingStruct": {
            "type": "structure",
            "members": {
                "hi": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restjson#GreetingWithErrors": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#GreetingWithErrorsOutput"
            },
            "errors": [
                {
                    "target": "aws.protocoltests.restjson#ComplexError"
                },
                {
                    "target": "aws.protocoltests.restjson#FooError"
                },
                {
                    "target": "aws.protocoltests.restjson#InvalidGreeting"
                }
            ],
            "traits": {
                "smithy.api#documentation": "This operation has four possible return values:\n\n1. A successful response in the form of GreetingWithErrorsOutput\n2. An InvalidGreeting error.\n3. A BadRequest error.\n4. A FooError.\n\nImplementations must be able to successfully take a response and\nproperly (de)serialize successful and error responses based on the\nthe presence of the",
                "smithy.api#http": {
                    "uri": "/GreetingWithErrors",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonGreetingWithErrors",
                        "documentation": "Ensures that operations with errors successfully know how\nto deserialize a successful response. As of January 2021,\nserver implementations are expected to respond with a\nJSON object regardless of if the output parameters are\nempty.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "X-Greeting": "Hello"
                        },
                        "params": {
                            "greeting": "Hello"
                        }
                    },
                    {
                        "id": "RestJsonGreetingWithErrorsNoPayload",
                        "documentation": "This test is similar to RestJsonGreetingWithErrors, but it\nensures that clients can gracefully deal with a server\nomitting a response payload.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "headers": {
                            "X-Greeting": "Hello"
                        },
                        "params": {
                            "greeting": "Hello"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#GreetingWithErrorsOutput": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Greeting"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HostLabelInput": {
            "type": "structure",
            "members": {
                "label": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#hostLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HostWithPathOperation": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/HostWithPathOperation",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHostWithPath",
                        "documentation": "Custom endpoints supplied by users can have paths",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/custom/HostWithPathOperation",
                        "body": "",
                        "host": "example.com/custom",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpChecksumRequired": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpChecksumRequiredInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpChecksumRequiredInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example tests httpChecksumRequired trait",
                "smithy.api#http": {
                    "uri": "/HttpChecksumRequired",
                    "method": "POST"
                },
                "smithy.api#httpChecksumRequired": {},
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpChecksumRequired",
                        "documentation": "Adds Content-MD5 header",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpChecksumRequired",
                        "body": "{\n    \"foo\":\"base64 encoded md5 checksum\"\n}\n",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "Content-MD5": "iB0/3YSo7maijL0IGOgA9g=="
                        },
                        "params": {
                            "foo": "base64 encoded md5 checksum"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpChecksumRequiredInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.shared#HttpDate": {
            "type": "timestamp",
            "traits": {
                "smithy.api#timestampFormat": "http-date"
            }
        },
        "aws.protocoltests.restjson#HttpEnumPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#EnumPayloadInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#EnumPayloadInput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/EnumPayload",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "EnumPayloadRequest",
                        "uri": "/EnumPayload",
                        "body": "enumvalue",
                        "params": {
                            "payload": "enumvalue"
                        },
                        "method": "POST",
                        "protocol": "aws.protocols#restJson1"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "EnumPayloadResponse",
                        "body": "enumvalue",
                        "params": {
                            "payload": "enumvalue"
                        },
                        "protocol": "aws.protocols#restJson1",
                        "code": 200
                    }
                ]
            }
        },
        "smithy.test#HttpMalformedRequestDefinition": {
            "type": "structure",
            "members": {
                "method": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The HTTP request method.",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "uri": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The request-target of the HTTP request, not including\nthe query string (for example, \"/foo/bar\").",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "host": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The host / endpoint provided to the client, not including the path\nor scheme (for example, \"example.com\")."
                    }
                },
                "queryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of the serialized query string parameters to include in the request.\n\nEach element in the list is a query string key value pair\nthat starts with the query string parameter name optionally\nfollowed by \"=\", optionally followed by the query string\nparameter value. For example, \"foo=bar\", \"foo=\", and \"foo\"\nare all valid values. The query string parameter name and\nthe value MUST appear in the format in which it is expected\nto be sent over the wire; if a key or value needs to be\npercent-encoded, then it MUST appear percent-encoded in this list."
                    }
                },
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "Defines a map of HTTP headers to include in the request"
                    }
                },
                "body": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The HTTP message body to include in the request"
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedRequestTestCase": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The identifier of the test case. This identifier can be used by\nprotocol test implementations to filter out unsupported test\ncases by ID, to generate test case names, etc. The provided `id`\nMUST match Smithy's `identifier` ABNF. No two `httpMalformedRequestTests`\ntest cases can share the same ID.",
                        "smithy.api#pattern": "^[A-Za-z_][A-Za-z0-9_]+$",
                        "smithy.api#required": {}
                    }
                },
                "protocol": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The name of the protocol to test.",
                        "smithy.api#idRef": {
                            "selector": "[trait|protocolDefinition]",
                            "failWhenMissing": true
                        },
                        "smithy.api#required": {}
                    }
                },
                "request": {
                    "target": "smithy.test#HttpMalformedRequestDefinition",
                    "traits": {
                        "smithy.api#documentation": "The malformed request to send.",
                        "smithy.api#required": {}
                    }
                },
                "response": {
                    "target": "smithy.test#HttpMalformedResponseDefinition",
                    "traits": {
                        "smithy.api#documentation": "The expected response.",
                        "smithy.api#required": {}
                    }
                },
                "documentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A description of the test and what is being asserted."
                    }
                },
                "tags": {
                    "target": "smithy.test#NonEmptyStringList",
                    "traits": {
                        "smithy.api#documentation": "Applies a list of tags to the test."
                    }
                },
                "testParameters": {
                    "target": "smithy.test#HttpMalformedRequestTestParametersDefinition",
                    "traits": {
                        "smithy.api#documentation": "An optional set of test parameters for parameterized testing."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedRequestTestParametersDefinition": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.test#StringList"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedResponseBodyAssertion": {
            "type": "union",
            "members": {
                "contents": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines the expected serialized response body, which will be matched\nexactly."
                    }
                },
                "messageRegex": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A regex to evaluate against the `message` field in the body. For\nresponses that may have some variance from platform to platform,\nsuch as those that include messages from a parser."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedResponseBodyDefinition": {
            "type": "structure",
            "members": {
                "assertion": {
                    "target": "smithy.test#HttpMalformedResponseBodyAssertion",
                    "traits": {
                        "smithy.api#documentation": "The assertion to execute against the response body.",
                        "smithy.api#required": {}
                    }
                },
                "mediaType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The media type of the response body.\n\nThis is used to help test runners to parse and evaluate\n`contents' and `messageRegex` in the assertion",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "smithy.test#HttpMalformedResponseDefinition": {
            "type": "structure",
            "members": {
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "Defines a map of expected HTTP headers.\n\nHeaders that are not listed in this map are ignored."
                    }
                },
                "code": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#documentation": "Defines the HTTP response code.",
                        "smithy.api#range": {
                            "min": 100,
                            "max": 599
                        },
                        "smithy.api#required": {}
                    }
                },
                "body": {
                    "target": "smithy.test#HttpMalformedResponseBodyDefinition",
                    "traits": {
                        "smithy.api#documentation": "The expected response body."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraits": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a blob shape in the payload.\n\nIn this example, no JSON document is synthesized because the payload is\nnot a structure or a union type.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadTraits",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "Content-Type": "application/octet-stream",
                            "X-Foo": "Foo"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlobAcceptsAllContentTypes",
                        "documentation": "Servers must accept any content type for blob inputs\nwithout the media type trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "This is definitely a jpeg",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "image/jpeg"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "This is definitely a jpeg"
                        },
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlobAcceptsAllAccepts",
                        "documentation": "Servers must accept any accept header for blob inputs\nwithout the media type trait.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraits",
                        "body": "This is definitely a jpeg",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Accept": "image/jpeg"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "This is definitely a jpeg"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonHttpPayloadTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraitsInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaType": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaTypeInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaTypeInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples uses a `@mediaType` trait on the payload to force a custom\ncontent-type to be serialized.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadTraitsWithMediaType",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/HttpPayloadTraitsWithMediaType",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPayloadTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaTypeInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.shared#TextPlainBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpPayloadWithStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPayloadWithStructureInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPayloadWithStructureInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a structure in the payload.\n\nNote that serializing a structure changes the wrapper element name\nto match the targeted structure.",
                "smithy.api#http": {
                    "uri": "/HttpPayloadWithStructure",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPayloadWithStructure",
                        "documentation": "Serializes a structure in the payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/HttpPayloadWithStructure",
                        "body": "{\n    \"greeting\": \"hello\",\n    \"name\": \"Phreddy\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "nested": {
                                "greeting": "hello",
                                "name": "Phreddy"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPayloadWithStructure",
                        "documentation": "Serializes a structure in the payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"greeting\": \"hello\",\n    \"name\": \"Phreddy\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "nested": {
                                "greeting": "hello",
                                "name": "Phreddy"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPayloadWithStructureInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restjson#NestedPayload",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples adds headers to the input of a request and response by prefix.",
                "smithy.api#externalDocumentation": {
                    "httpPrefixHeaders Trait": "https://awslabs.github.io/smithy/1.0/spec/http.html#httpprefixheaders-trait"
                },
                "smithy.api#http": {
                    "uri": "/HttpPrefixHeaders",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpPrefixHeadersArePresent",
                        "documentation": "Adds headers by prefix",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpPrefixHeaders",
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo",
                            "X-Foo-Abc": "Abc value",
                            "X-Foo-Def": "Def value"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {
                                "Abc": "Abc value",
                                "Def": "Def value"
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpPrefixHeadersAreNotPresent",
                        "documentation": "No prefix headers are serialized because the value is empty",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpPrefixHeaders",
                        "body": "",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {}
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpPrefixHeadersArePresent",
                        "documentation": "Adds headers by prefix",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Foo": "Foo",
                            "X-Foo-Abc": "Abc value",
                            "X-Foo-Def": "Def value"
                        },
                        "params": {
                            "foo": "Foo",
                            "fooMap": {
                                "Abc": "Abc value",
                                "Def": "Def value"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInResponse": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersInResponseInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpPrefixHeadersInResponseOutput"
            },
            "traits": {
                "smithy.api#documentation": "Clients that perform this test extract all headers from the response.",
                "smithy.api#http": {
                    "uri": "/HttpPrefixHeadersResponse",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "HttpPrefixHeadersResponse",
                        "documentation": "(de)serializes all response headers",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Foo": "Foo",
                            "Hello": "Hello"
                        },
                        "params": {
                            "prefixHeaders": {
                                "X-Foo": "Foo",
                                "Hello": "Hello"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInResponseInput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInResponseOutput": {
            "type": "structure",
            "members": {
                "prefixHeaders": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpPrefixHeaders": ""
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "fooMap": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpPrefixHeaders": "X-Foo-"
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#HttpPrefixHeadersOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "fooMap": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpPrefixHeaders": "X-Foo-"
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "smithy.test#HttpRequestTestCase": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The identifier of the test case. This identifier can be used by\nprotocol test implementations to filter out unsupported test\ncases by ID, to generate test case names, etc. The provided `id`\nMUST match Smithy's `identifier` ABNF. No two `httpRequestTests`\ntest cases can share the same ID.",
                        "smithy.api#pattern": "^[A-Za-z_][A-Za-z0-9_]+$",
                        "smithy.api#required": {}
                    }
                },
                "protocol": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The name of the protocol to test.",
                        "smithy.api#idRef": {
                            "selector": "[trait|protocolDefinition]",
                            "failWhenMissing": true
                        },
                        "smithy.api#required": {}
                    }
                },
                "method": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The expected serialized HTTP request method.",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "uri": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The request-target of the HTTP request, not including\nthe query string (for example, \"/foo/bar\").",
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                },
                "host": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The host / endpoint provided to the client, not including the path\nor scheme (for example, \"example.com\")."
                    }
                },
                "resolvedHost": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The host / endpoint that the client should send to, not including\nthe path or scheme (for example, \"prefix.example.com\").\n\nThis can differ from the host provided to the client if the `hostPrefix`\nmember of the `endpoint` trait is set, for instance."
                    }
                },
                "authScheme": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The optional authentication scheme shape ID to assume. It's\npossible that specific authentication schemes might influence\nthe serialization logic of an HTTP request.",
                        "smithy.api#idRef": {
                            "selector": "[trait|authDefinition]",
                            "failWhenMissing": true
                        }
                    }
                },
                "queryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of the expected serialized query string parameters.\n\nEach element in the list is a query string key value pair\nthat starts with the query string parameter name optionally\nfollowed by \"=\", optionally followed by the query string\nparameter value. For example, \"foo=bar\", \"foo=\", and \"foo\"\nare all valid values. The query string parameter name and\nthe value MUST appear in the format in which it is expected\nto be sent over the wire; if a key or value needs to be\npercent-encoded, then it MUST appear percent-encoded in this list.\n\nA serialized HTTP request is not in compliance with the protocol\nif any query string parameter defined in `queryParams` is not\ndefined in the request or if the value of a query string parameter\nin the request differs from the expected value.\n\n`queryParams` applies no constraints on additional query parameters."
                    }
                },
                "forbidQueryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of query string parameter names that must not appear in the\nserialized HTTP request.\n\nEach value MUST appear in the format in which it is sent over the\nwire; if a key needs to be percent-encoded, then it MUST appear\npercent-encoded in this list."
                    }
                },
                "requireQueryParams": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of query string parameter names that MUST appear in the\nserialized request URI, but no assertion is made on the value.\n\nEach value MUST appear in the format in which it is sent over the\nwire; if a key needs to be percent-encoded, then it MUST appear\npercent-encoded in this list."
                    }
                },
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "Defines a map of expected HTTP headers.\n\nHeaders that are not listed in this map are ignored unless they are\nexplicitly forbidden through `forbidHeaders`."
                    }
                },
                "forbidHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must not appear in the serialized\nHTTP request."
                    }
                },
                "requireHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must appear in the serialized\nHTTP message, but no assertion is made on the value.\n\nHeaders listed in `headers` do not need to appear in this list."
                    }
                },
                "body": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The expected HTTP message body.\n\nIf no request body is defined, then no assertions are made about\nthe body of the message."
                    }
                },
                "bodyMediaType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The media type of the `body`.\n\nThis is used to help test runners to parse and validate the expected\ndata against generated data."
                    }
                },
                "params": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines the input parameters used to generated the HTTP request.\n\nThese parameters MUST be compatible with the input of the operation."
                    }
                },
                "vendorParams": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines vendor-specific parameters that are used to influence the\nrequest. For example, some vendors might utilize environment\nvariables, configuration files on disk, or other means to influence\nthe serialization formats used by clients or servers.\n\nIf a `vendorParamsShape` is set, these parameters MUST be compatible\nwith that shape's definition."
                    }
                },
                "vendorParamsShape": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A shape to be used to validate the `vendorParams` member contents.\n\nIf set, the parameters in `vendorParams` MUST be compatible with this\nshape's definition.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true
                        }
                    }
                },
                "documentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A description of the test and what is being asserted."
                    }
                },
                "tags": {
                    "target": "smithy.test#NonEmptyStringList",
                    "traits": {
                        "smithy.api#documentation": "Applies a list of tags to the test."
                    }
                },
                "appliesTo": {
                    "target": "smithy.test#AppliesTo",
                    "traits": {
                        "smithy.api#documentation": "Indicates that the test case is only to be implemented by \"client\" or\n\"server\" implementations. This property is useful for identifying and\ntesting edge cases of clients and servers that are impossible or\nundesirable to test in *both* client and server implementations."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithFloatLabels": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithFloatLabelsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/FloatHttpLabels/{float}/{double}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonSupportsNaNFloatLabels",
                        "documentation": "Supports handling NaN float label values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/NaN/NaN",
                        "body": "",
                        "params": {
                            "float": "NaN",
                            "double": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatLabels",
                        "documentation": "Supports handling Infinity float label values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/Infinity/Infinity",
                        "body": "",
                        "params": {
                            "float": "Infinity",
                            "double": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatLabels",
                        "documentation": "Supports handling -Infinity float label values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/FloatHttpLabels/-Infinity/-Infinity",
                        "body": "",
                        "params": {
                            "float": "-Infinity",
                            "double": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithFloatLabelsInput": {
            "type": "structure",
            "members": {
                "float": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "double": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPath": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPathInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithGreedyLabelInPath/foo/{foo}/baz/{baz+}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpRequestWithGreedyLabelInPath",
                        "documentation": "Serializes greedy labels and normal labels",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithGreedyLabelInPath/foo/hello%2Fescape/baz/there/guy",
                        "body": "",
                        "params": {
                            "foo": "hello/escape",
                            "baz": "there/guy"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPathInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabels": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithLabelsInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests are serialized when there's no input\npayload but there are HTTP labels.",
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithLabels/{string}/{short}/{integer}/{long}/{float}/{double}/{boolean}/{timestamp}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonInputWithHeadersAndAllParams",
                        "documentation": "Sends a GET request that uses URI label bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabels/string/1/2/3/4.1/5.1/true/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "string": "string",
                            "short": 1,
                            "integer": 2,
                            "long": 3,
                            "float": 4.1,
                            "double": 5.1,
                            "boolean": true,
                            "timestamp": 1576540098
                        }
                    },
                    {
                        "id": "RestJsonHttpRequestLabelEscaping",
                        "documentation": "Sends a GET request that uses URI label bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabels/%25%3A%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D%F0%9F%98%B9/1/2/3/4.1/5.1/true/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "string": "%:/?#[]@!$&'()*+,;=ðŸ˜¹",
                            "short": 1,
                            "integer": 2,
                            "long": 3,
                            "float": 4.1,
                            "double": 5.1,
                            "boolean": true,
                            "timestamp": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormat": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormatInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests serialize different timestamp formats in the\nURI path.",
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/HttpRequestWithLabelsAndTimestampFormat/{memberEpochSeconds}/{memberHttpDate}/{memberDateTime}/{defaultFormat}/{targetEpochSeconds}/{targetHttpDate}/{targetDateTime}"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpRequestWithLabelsAndTimestampFormat",
                        "documentation": "Serializes different timestamp formats in URI labels",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/HttpRequestWithLabelsAndTimestampFormat/1576540098/Mon%2C%2016%20Dec%202019%2023%3A48%3A18%20GMT/2019-12-16T23%3A48%3A18Z/2019-12-16T23%3A48%3A18Z/1576540098/Mon%2C%2016%20Dec%202019%2023%3A48%3A18%20GMT/2019-12-16T23%3A48%3A18Z",
                        "body": "",
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormatInput": {
            "type": "structure",
            "members": {
                "memberEpochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "memberHttpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "memberDateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "defaultFormat": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetEpochSeconds": {
                    "target": "aws.protocoltests.shared#EpochSeconds",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetHttpDate": {
                    "target": "aws.protocoltests.shared#HttpDate",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "targetDateTime": {
                    "target": "aws.protocoltests.shared#DateTime",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithLabelsInput": {
            "type": "structure",
            "members": {
                "string": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "short": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "integer": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "long": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "float": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "double": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "boolean": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Serialized in the path as true or false.",
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#documentation": "Note that this member has no format, so it's serialized as an RFC 3399 date-time.",
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithRegexLiteral": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#HttpRequestWithRegexLiteralInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/ReDosLiteral/{str}/(a+)+"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonToleratesRegexCharsInSegments",
                        "documentation": "Path matching is not broken by regex expressions in literal segments",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/ReDosLiteral/abc/(a+)+",
                        "body": "",
                        "params": {
                            "str": "abc"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpRequestWithRegexLiteralInput": {
            "type": "structure",
            "members": {
                "str": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#HttpResponseCode": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#HttpResponseCodeOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/HttpResponseCode",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpResponseCode",
                        "documentation": "Binds the http response code to an output structure. Note that\neven though all members are bound outside of the payload, an\nempty JSON object is serialized in the response. However,\nclients should be able to handle an empty JSON object or an\nempty payload without failing to deserialize a response.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {
                            "Status": 201
                        }
                    },
                    {
                        "id": "RestJsonHttpResponseCodeDefaultsToModeledCode",
                        "documentation": "Binds the http response code to the http trait's code if the\ncode isn't explicitly set. A client would be parsing the\nhttp response code, so this would always be present, but\na server doesn't require it to be set to serialize a request.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {},
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonHttpResponseCodeWithNoPayload",
                        "documentation": "This test ensures that clients gracefully handle cases where\nthe service responds with no payload rather than an empty JSON\nobject.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "body": "",
                        "params": {
                            "Status": 201
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#HttpResponseCodeOutput": {
            "type": "structure",
            "members": {
                "Status": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpResponseCode": {}
                    }
                }
            }
        },
        "smithy.test#HttpResponseTestCase": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The identifier of the test case. This identifier can be used by\nprotocol test implementations to filter out unsupported test\ncases by ID, to generate test case names, etc. The provided `id`\nMUST match Smithy's `identifier` ABNF. No two `httpResponseTests`\ntest cases can share the same ID.",
                        "smithy.api#pattern": "^[A-Za-z_][A-Za-z0-9_]+$",
                        "smithy.api#required": {}
                    }
                },
                "protocol": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The shape ID of the protocol to test.",
                        "smithy.api#idRef": {
                            "selector": "[trait|protocolDefinition]",
                            "failWhenMissing": true
                        },
                        "smithy.api#required": {}
                    }
                },
                "code": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#documentation": "Defines the HTTP response code.",
                        "smithy.api#range": {
                            "min": 100,
                            "max": 599
                        },
                        "smithy.api#required": {}
                    }
                },
                "authScheme": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The optional authentication scheme shape ID to assume. It's possible\nthat specific authentication schemes might influence the serialization\nlogic of an HTTP response.",
                        "smithy.api#idRef": {
                            "selector": "[trait|authDefinition]",
                            "failWhenMissing": true
                        }
                    }
                },
                "headers": {
                    "target": "smithy.test#StringMap",
                    "traits": {
                        "smithy.api#documentation": "A map of expected HTTP headers. Each key represents a header field\nname and each value represents the expected header value. An HTTP\nresponse is not in compliance with the protocol if any listed header\nis missing from the serialized response or if the expected header\nvalue differs from the serialized response value.\n\n`headers` applies no constraints on additional headers."
                    }
                },
                "forbidHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must not appear."
                    }
                },
                "requireHeaders": {
                    "target": "smithy.test#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of header field names that must appear in the serialized\nHTTP message, but no assertion is made on the value.\n\nHeaders listed in `headers` map do not need to appear in this list."
                    }
                },
                "body": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines the HTTP message body.\n\nIf no response body is defined, then no assertions are made about\nthe body of the message."
                    }
                },
                "bodyMediaType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The media type of the `body`.\n\nThis is used to help test runners to parse and validate the expected\ndata against generated data. Binary media type formats require that\nthe contents of `body` are base64 encoded."
                    }
                },
                "params": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines the output parameters deserialized from the HTTP response.\n\nThese parameters MUST be compatible with the output of the operation."
                    }
                },
                "vendorParams": {
                    "target": "smithy.api#Document",
                    "traits": {
                        "smithy.api#documentation": "Defines vendor-specific parameters that are used to influence the\nresponse. For example, some vendors might utilize environment\nvariables, configuration files on disk, or other means to influence\nthe serialization formats used by clients or servers.\n\nIf a `vendorParamsShape` is set, these parameters MUST be compatible\nwith that shape's definition."
                    }
                },
                "vendorParamsShape": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A shape to be used to validate the `vendorParams` member contents.\n\nIf set, the parameters in `vendorParams` MUST be compatible with this\nshape's definition.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true
                        }
                    }
                },
                "documentation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "A description of the test and what is being asserted."
                    }
                },
                "tags": {
                    "target": "smithy.test#NonEmptyStringList",
                    "traits": {
                        "smithy.api#documentation": "Applies a list of tags to the test."
                    }
                },
                "appliesTo": {
                    "target": "smithy.test#AppliesTo",
                    "traits": {
                        "smithy.api#documentation": "Indicates that the test case is only to be implemented by \"client\" or\n\"server\" implementations. This property is useful for identifying and\ntesting edge cases of clients and servers that are impossible or\nundesirable to test in *both* client and server implementations."
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#HttpStringPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StringPayloadInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#StringPayloadInput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/StringPayload",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "StringPayloadRequest",
                        "uri": "/StringPayload",
                        "body": "rawstring",
                        "params": {
                            "payload": "rawstring"
                        },
                        "method": "POST",
                        "protocol": "aws.protocols#restJson1"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "StringPayloadResponse",
                        "body": "rawstring",
                        "params": {
                            "payload": "rawstring"
                        },
                        "protocol": "aws.protocols#restJson1",
                        "code": 200
                    }
                ]
            }
        },
        "aws.iam#IamIdentifier": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^([A-Za-z0-9][A-Za-z0-9-\\.]{0,62}:[^:]+)$",
                "smithy.api#private": {}
            }
        },
        "aws.apigateway#IamRoleArn": {
            "type": "string",
            "traits": {
                "aws.api#arnReference": {
                    "type": "AWS::IAM::Role"
                },
                "smithy.api#documentation": "<p>The ARN of the IAM role to assume with invoking the integration.</p><p>This string MAY contain the literal string <code>{serviceName}</code> and/or the literal string <code>{operationName}</code>, which will be replaced with the name of the Smithy service shape and the name of the Smithy operation shape, respectively.</p>",
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#IgnoreQueryParamsInResponse": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#IgnoreQueryParamsInResponseOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example ensures that query string bound request parameters are\nserialized in the body of responses if the structure is used in both\nthe request and response.",
                "smithy.api#http": {
                    "uri": "/IgnoreQueryParamsInResponse",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonIgnoreQueryParamsInResponse",
                        "documentation": "Query parameters must be ignored when serializing the output\nof an operation. As of January 2021, server implementations\nare expected to respond with a JSON object regardless of\nif the output parameters are empty.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {}
                    },
                    {
                        "id": "RestJsonIgnoreQueryParamsInResponseNoPayload",
                        "documentation": "This test is similar to RestJsonIgnoreQueryParamsInResponse,\nbut it ensures that clients gracefully handle responses from\nthe server that do not serialize an empty JSON object.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "params": {},
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#IgnoreQueryParamsInResponseOutput": {
            "type": "structure",
            "members": {
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "baz"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#InputAndOutputWithHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#InputAndOutputWithHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#InputAndOutputWithHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there is\nno input or output payload but there are HTTP header bindings.",
                "smithy.api#http": {
                    "uri": "/InputAndOutputWithHeaders",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonInputAndOutputWithStringHeaders",
                        "documentation": "Tests requests with string header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-String": "Hello",
                            "X-StringList": "a, b, c",
                            "X-StringSet": "a, b, c"
                        },
                        "body": "",
                        "params": {
                            "headerString": "Hello",
                            "headerStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "headerStringSet": [
                                "a",
                                "b",
                                "c"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithQuotedStringHeaders",
                        "documentation": "Tests requests with string list header bindings that require quoting",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-StringList": "\"b,c\", \"\\\"def\\\"\", a"
                        },
                        "body": "",
                        "params": {
                            "headerStringList": [
                                "b,c",
                                "\"def\"",
                                "a"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithNumericHeaders",
                        "documentation": "Tests requests with numeric header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Byte": "1",
                            "X-Short": "123",
                            "X-Integer": "123",
                            "X-Long": "123",
                            "X-Float": "1.1",
                            "X-Double": "1.1",
                            "X-IntegerList": "1, 2, 3"
                        },
                        "body": "",
                        "params": {
                            "headerByte": 1,
                            "headerShort": 123,
                            "headerInteger": 123,
                            "headerLong": 123,
                            "headerFloat": 1.1,
                            "headerDouble": 1.1,
                            "headerIntegerList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithBooleanHeaders",
                        "documentation": "Tests requests with boolean header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Boolean1": "true",
                            "X-Boolean2": "false",
                            "X-BooleanList": "true, false, true"
                        },
                        "body": "",
                        "params": {
                            "headerTrueBool": true,
                            "headerFalseBool": false,
                            "headerBooleanList": [
                                true,
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithTimestampHeaders",
                        "documentation": "Tests requests with timestamp header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
                        },
                        "body": "",
                        "params": {
                            "headerTimestampList": [
                                1576540098,
                                1576540098
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithEnumHeaders",
                        "documentation": "Tests requests with enum header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "headers": {
                            "X-Enum": "Foo",
                            "X-EnumList": "Foo, Bar, Baz"
                        },
                        "body": "",
                        "params": {
                            "headerEnum": "Foo",
                            "headerEnumList": [
                                "Foo",
                                "Bar",
                                "Baz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatHeaderInputs",
                        "documentation": "Supports handling NaN float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "NaN",
                            "X-Double": "NaN"
                        },
                        "params": {
                            "headerFloat": "NaN",
                            "headerDouble": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatHeaderInputs",
                        "documentation": "Supports handling Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "Infinity",
                            "X-Double": "Infinity"
                        },
                        "params": {
                            "headerFloat": "Infinity",
                            "headerDouble": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatHeaderInputs",
                        "documentation": "Supports handling -Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/InputAndOutputWithHeaders",
                        "body": "",
                        "headers": {
                            "X-Float": "-Infinity",
                            "X-Double": "-Infinity"
                        },
                        "params": {
                            "headerFloat": "-Infinity",
                            "headerDouble": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonInputAndOutputWithStringHeaders",
                        "documentation": "Tests responses with string header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-String": "Hello",
                            "X-StringList": "a, b, c",
                            "X-StringSet": "a, b, c"
                        },
                        "params": {
                            "headerString": "Hello",
                            "headerStringList": [
                                "a",
                                "b",
                                "c"
                            ],
                            "headerStringSet": [
                                "a",
                                "b",
                                "c"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithQuotedStringHeaders",
                        "documentation": "Tests responses with string list header bindings that require quoting",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-StringList": "\"b,c\", \"\\\"def\\\"\", a"
                        },
                        "params": {
                            "headerStringList": [
                                "b,c",
                                "\"def\"",
                                "a"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithNumericHeaders",
                        "documentation": "Tests responses with numeric header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Byte": "1",
                            "X-Short": "123",
                            "X-Integer": "123",
                            "X-Long": "123",
                            "X-Float": "1.1",
                            "X-Double": "1.1",
                            "X-IntegerList": "1, 2, 3"
                        },
                        "params": {
                            "headerByte": 1,
                            "headerShort": 123,
                            "headerInteger": 123,
                            "headerLong": 123,
                            "headerFloat": 1.1,
                            "headerDouble": 1.1,
                            "headerIntegerList": [
                                1,
                                2,
                                3
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithBooleanHeaders",
                        "documentation": "Tests responses with boolean header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Boolean1": "true",
                            "X-Boolean2": "false",
                            "X-BooleanList": "true, false, true"
                        },
                        "params": {
                            "headerTrueBool": true,
                            "headerFalseBool": false,
                            "headerBooleanList": [
                                true,
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithTimestampHeaders",
                        "documentation": "Tests responses with timestamp header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-TimestampList": "Mon, 16 Dec 2019 23:48:18 GMT, Mon, 16 Dec 2019 23:48:18 GMT"
                        },
                        "params": {
                            "headerTimestampList": [
                                1576540098,
                                1576540098
                            ]
                        }
                    },
                    {
                        "id": "RestJsonInputAndOutputWithEnumHeaders",
                        "documentation": "Tests responses with enum header bindings",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Enum": "Foo",
                            "X-EnumList": "Foo, Bar, Baz"
                        },
                        "params": {
                            "headerEnum": "Foo",
                            "headerEnumList": [
                                "Foo",
                                "Bar",
                                "Baz"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatHeaderOutputs",
                        "documentation": "Supports handling NaN float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Float": "NaN",
                            "X-Double": "NaN"
                        },
                        "params": {
                            "headerFloat": "NaN",
                            "headerDouble": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatHeaderOutputs",
                        "documentation": "Supports handling Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Float": "Infinity",
                            "X-Double": "Infinity"
                        },
                        "params": {
                            "headerFloat": "Infinity",
                            "headerDouble": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatHeaderOutputs",
                        "documentation": "Supports handling -Infinity float header values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Float": "-Infinity",
                            "X-Double": "-Infinity"
                        },
                        "params": {
                            "headerFloat": "-Infinity",
                            "headerDouble": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#InputAndOutputWithHeadersIO": {
            "type": "structure",
            "members": {
                "headerString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-String"
                    }
                },
                "headerByte": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpHeader": "X-Byte"
                    }
                },
                "headerShort": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpHeader": "X-Short"
                    }
                },
                "headerInteger": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpHeader": "X-Integer"
                    }
                },
                "headerLong": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpHeader": "X-Long"
                    }
                },
                "headerFloat": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpHeader": "X-Float"
                    }
                },
                "headerDouble": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpHeader": "X-Double"
                    }
                },
                "headerTrueBool": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "X-Boolean1"
                    }
                },
                "headerFalseBool": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "X-Boolean2"
                    }
                },
                "headerStringList": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpHeader": "X-StringList"
                    }
                },
                "headerStringSet": {
                    "target": "aws.protocoltests.shared#StringSet",
                    "traits": {
                        "smithy.api#httpHeader": "X-StringSet"
                    }
                },
                "headerIntegerList": {
                    "target": "aws.protocoltests.shared#IntegerList",
                    "traits": {
                        "smithy.api#httpHeader": "X-IntegerList"
                    }
                },
                "headerBooleanList": {
                    "target": "aws.protocoltests.shared#BooleanList",
                    "traits": {
                        "smithy.api#httpHeader": "X-BooleanList"
                    }
                },
                "headerTimestampList": {
                    "target": "aws.protocoltests.shared#TimestampList",
                    "traits": {
                        "smithy.api#httpHeader": "X-TimestampList"
                    }
                },
                "headerEnum": {
                    "target": "aws.protocoltests.shared#FooEnum",
                    "traits": {
                        "smithy.api#httpHeader": "X-Enum"
                    }
                },
                "headerEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList",
                    "traits": {
                        "smithy.api#httpHeader": "X-EnumList"
                    }
                }
            }
        },
        "aws.protocoltests.shared#IntegerList": {
            "type": "list",
            "member": {
                "target": "smithy.api#Integer"
            }
        },
        "aws.protocoltests.shared#IntegerSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#Integer"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.apigateway#IntegrationResponse": {
            "type": "structure",
            "members": {
                "statusCode": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "HTTP status code for the method response; for example, \"200\". This must correspond to a matching response in the OpenAPI Operation responses field."
                    }
                },
                "contentHandling": {
                    "target": "aws.apigateway#ContentHandling"
                },
                "responseTemplates": {
                    "target": "aws.apigateway#Templates"
                },
                "responseParameters": {
                    "target": "aws.apigateway#ResponseParameters"
                }
            },
            "traits": {
                "smithy.api#documentation": "Defines a response and specifies parameter mappings.",
                "smithy.api#private": {}
            }
        },
        "aws.apigateway#IntegrationResponses": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.apigateway#IntegrationResponse"
            },
            "traits": {
                "smithy.api#documentation": "A map of response identifiers to responses.",
                "smithy.api#private": {}
            }
        },
        "aws.apigateway#IntegrationType": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "value": "aws",
                        "name": "AWS"
                    },
                    {
                        "value": "aws_proxy",
                        "name": "AWS_PROXY"
                    },
                    {
                        "value": "http",
                        "name": "HTTP"
                    },
                    {
                        "value": "http_proxy",
                        "name": "HTTP_PROXY"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#InvalidGreeting": {
            "type": "structure",
            "members": {
                "Message": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "This error is thrown when an invalid greeting value is provided.",
                "smithy.api#error": "client",
                "smithy.api#httpError": 400,
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonInvalidGreetingError",
                        "documentation": "Parses simple JSON errors",
                        "protocol": "aws.protocols#restJson1",
                        "params": {
                            "Message": "Hi"
                        },
                        "code": 400,
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Amzn-Errortype": "InvalidGreeting"
                        },
                        "body": "{\n    \"Message\": \"Hi\"\n}",
                        "bodyMediaType": "application/json"
                    }
                ]
            }
        },
        "com.amazonaws.glacier#InvalidParameterValueException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "aws.protocoltests.shared#JpegBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#mediaType": "image/jpeg"
            }
        },
        "aws.protocoltests.restjson#JsonBlobs": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonBlobsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonBlobsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "Blobs are base64 encoded",
                "smithy.api#http": {
                    "uri": "/JsonBlobs",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonBlobs",
                        "body": "{\n    \"data\": \"dmFsdWU=\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonBlobs",
                        "documentation": "Blobs are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"data\": \"dmFsdWU=\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "data": "value"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonBlobsInputOutput": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Blob"
                }
            }
        },
        "aws.protocoltests.restjson#JsonEnums": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonEnumsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonEnumsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example serializes enums as top level properties, in lists, sets, and maps.",
                "smithy.api#http": {
                    "uri": "/JsonEnums",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonEnums",
                        "body": "{\n    \"fooEnum1\": \"Foo\",\n    \"fooEnum2\": \"0\",\n    \"fooEnum3\": \"1\",\n    \"fooEnumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumSet\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumMap\": {\n        \"hi\": \"Foo\",\n        \"zero\": \"0\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonEnums",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"fooEnum1\": \"Foo\",\n    \"fooEnum2\": \"0\",\n    \"fooEnum3\": \"1\",\n    \"fooEnumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumSet\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"fooEnumMap\": {\n        \"hi\": \"Foo\",\n        \"zero\": \"0\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "fooEnum1": "Foo",
                            "fooEnum2": "0",
                            "fooEnum3": "1",
                            "fooEnumList": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumSet": [
                                "Foo",
                                "0"
                            ],
                            "fooEnumMap": {
                                "hi": "Foo",
                                "zero": "0"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonEnumsInputOutput": {
            "type": "structure",
            "members": {
                "fooEnum1": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum2": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnum3": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "fooEnumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "fooEnumSet": {
                    "target": "aws.protocoltests.shared#FooEnumSet"
                },
                "fooEnumMap": {
                    "target": "aws.protocoltests.shared#FooEnumMap"
                }
            }
        },
        "aws.protocoltests.restjson#JsonHeaderString": {
            "type": "string",
            "traits": {
                "smithy.api#mediaType": "application/json"
            }
        },
        "aws.protocoltests.restjson#JsonLists": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonListsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonListsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This test case serializes JSON lists for the following cases for both\ninput and output:\n\n1. Normal JSON lists.\n2. Normal JSON sets.\n3. JSON lists of lists.\n4. Lists of structures.",
                "smithy.api#http": {
                    "uri": "/JsonLists",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonLists",
                        "documentation": "Serializes JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonLists",
                        "body": "{\n    \"stringList\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"stringSet\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"integerList\": [\n        1,\n        2\n    ],\n    \"booleanList\": [\n        true,\n        false\n    ],\n    \"timestampList\": [\n        1398796238,\n        1398796238\n    ],\n    \"enumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"nestedStringList\": [\n        [\n            \"foo\",\n            \"bar\"\n        ],\n        [\n            \"baz\",\n            \"qux\"\n        ]\n    ],\n    \"myStructureList\": [\n        {\n            \"value\": \"1\",\n            \"other\": \"2\"\n        },\n        {\n            \"value\": \"3\",\n            \"other\": \"4\"\n        }\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ]
                        }
                    },
                    {
                        "id": "RestJsonListsEmpty",
                        "documentation": "Serializes empty JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonLists",
                        "body": "{\n    \"stringList\": []\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": []
                        }
                    },
                    {
                        "id": "RestJsonListsSerializeNull",
                        "documentation": "Serializes null values in lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonLists",
                        "body": "{\n    \"sparseStringList\": [\n        null,\n        \"hi\"\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseStringList": [
                                null,
                                "hi"
                            ]
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonLists",
                        "documentation": "Serializes JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringList\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"stringSet\": [\n        \"foo\",\n        \"bar\"\n    ],\n    \"integerList\": [\n        1,\n        2\n    ],\n    \"booleanList\": [\n        true,\n        false\n    ],\n    \"timestampList\": [\n        1398796238,\n        1398796238\n    ],\n    \"enumList\": [\n        \"Foo\",\n        \"0\"\n    ],\n    \"nestedStringList\": [\n        [\n            \"foo\",\n            \"bar\"\n        ],\n        [\n            \"baz\",\n            \"qux\"\n        ]\n    ],\n    \"myStructureList\": [\n        {\n            \"value\": \"1\",\n            \"other\": \"2\"\n        },\n        {\n            \"value\": \"3\",\n            \"other\": \"4\"\n        }\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": [
                                "foo",
                                "bar"
                            ],
                            "stringSet": [
                                "foo",
                                "bar"
                            ],
                            "integerList": [
                                1,
                                2
                            ],
                            "booleanList": [
                                true,
                                false
                            ],
                            "timestampList": [
                                1398796238,
                                1398796238
                            ],
                            "enumList": [
                                "Foo",
                                "0"
                            ],
                            "nestedStringList": [
                                [
                                    "foo",
                                    "bar"
                                ],
                                [
                                    "baz",
                                    "qux"
                                ]
                            ],
                            "structureList": [
                                {
                                    "a": "1",
                                    "b": "2"
                                },
                                {
                                    "a": "3",
                                    "b": "4"
                                }
                            ]
                        }
                    },
                    {
                        "id": "RestJsonListsEmpty",
                        "documentation": "Serializes empty JSON lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringList\": []\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringList": []
                        }
                    },
                    {
                        "id": "RestJsonListsSerializeNull",
                        "documentation": "Serializes null values in sparse lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseStringList\": [\n        null,\n        \"hi\"\n    ]\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseStringList": [
                                null,
                                "hi"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonListsInputOutput": {
            "type": "structure",
            "members": {
                "stringList": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "sparseStringList": {
                    "target": "aws.protocoltests.shared#SparseStringList"
                },
                "stringSet": {
                    "target": "aws.protocoltests.shared#StringSet"
                },
                "integerList": {
                    "target": "aws.protocoltests.shared#IntegerList"
                },
                "booleanList": {
                    "target": "aws.protocoltests.shared#BooleanList"
                },
                "timestampList": {
                    "target": "aws.protocoltests.shared#TimestampList"
                },
                "enumList": {
                    "target": "aws.protocoltests.shared#FooEnumList"
                },
                "nestedStringList": {
                    "target": "aws.protocoltests.shared#NestedStringList"
                },
                "structureList": {
                    "target": "aws.protocoltests.restjson#StructureList",
                    "traits": {
                        "smithy.api#jsonName": "myStructureList"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#JsonMaps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonMapsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonMapsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests basic map serialization.",
                "smithy.api#http": {
                    "uri": "/JsonMaps",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonMaps",
                        "documentation": "Serializes JSON maps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"denseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n    },\n    \"sparseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            },
                            "sparseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesNullMapValues",
                        "documentation": "Serializes JSON map values in sparse maps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"sparseBooleanMap\": {\n        \"x\": null\n    },\n    \"sparseNumberMap\": {\n        \"x\": null\n    },\n    \"sparseStringMap\": {\n        \"x\": null\n    },\n    \"sparseStructMap\": {\n        \"x\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseBooleanMap": {
                                "x": null
                            },
                            "sparseNumberMap": {
                                "x": null
                            },
                            "sparseStringMap": {
                                "x": null
                            },
                            "sparseStructMap": {
                                "x": null
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesZeroValuesInMaps",
                        "documentation": "Ensure that 0 and false are sent over the wire in all maps and lists",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"denseNumberMap\": {\n        \"x\": 0\n    },\n    \"sparseNumberMap\": {\n        \"x\": 0\n    },\n    \"denseBooleanMap\": {\n        \"x\": false\n    },\n    \"sparseBooleanMap\": {\n        \"x\": false\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseNumberMap": {
                                "x": 0
                            },
                            "sparseNumberMap": {
                                "x": 0
                            },
                            "denseBooleanMap": {
                                "x": false
                            },
                            "sparseBooleanMap": {
                                "x": false
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesSparseSetMap",
                        "documentation": "A request that contains a sparse map of sets",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesDenseSetMap",
                        "documentation": "A request that contains a dense map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"denseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializesSparseSetMapAndRetainsNull",
                        "documentation": "A request that contains a sparse map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonMaps",
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"],\n        \"z\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ],
                                "z": null
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonMaps",
                        "documentation": "Deserializes JSON maps",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"denseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n    },\n    \"sparseStructMap\": {\n        \"foo\": {\n            \"hi\": \"there\"\n        },\n        \"baz\": {\n            \"hi\": \"bye\"\n        }\n   }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            },
                            "sparseStructMap": {
                                "foo": {
                                    "hi": "there"
                                },
                                "baz": {
                                    "hi": "bye"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesNullMapValues",
                        "documentation": "Deserializes null JSON map values",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseBooleanMap\": {\n        \"x\": null\n    },\n    \"sparseNumberMap\": {\n        \"x\": null\n    },\n    \"sparseStringMap\": {\n        \"x\": null\n    },\n    \"sparseStructMap\": {\n        \"x\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseBooleanMap": {
                                "x": null
                            },
                            "sparseNumberMap": {
                                "x": null
                            },
                            "sparseStringMap": {
                                "x": null
                            },
                            "sparseStructMap": {
                                "x": null
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesZeroValuesInMaps",
                        "documentation": "Ensure that 0 and false are sent over the wire in all maps and lists",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"denseNumberMap\": {\n        \"x\": 0\n    },\n    \"sparseNumberMap\": {\n        \"x\": 0\n    },\n    \"denseBooleanMap\": {\n        \"x\": false\n    },\n    \"sparseBooleanMap\": {\n        \"x\": false\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseNumberMap": {
                                "x": 0
                            },
                            "sparseNumberMap": {
                                "x": 0
                            },
                            "denseBooleanMap": {
                                "x": false
                            },
                            "sparseBooleanMap": {
                                "x": false
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesSparseSetMap",
                        "documentation": "A response that contains a sparse map of sets",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesDenseSetMap",
                        "documentation": "A response that contains a dense map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"denseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesSparseSetMapAndRetainsNull",
                        "documentation": "A response that contains a sparse map of sets.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"sparseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"],\n        \"z\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "sparseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ],
                                "z": null
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializesDenseSetMapAndSkipsNull",
                        "documentation": "Clients SHOULD tolerate seeing a null value in a dense map, and they SHOULD\ndrop the null key-value pair.",
                        "protocol": "aws.protocols#restJson1",
                        "appliesTo": "client",
                        "code": 200,
                        "body": "{\n    \"denseSetMap\": {\n        \"x\": [],\n        \"y\": [\"a\", \"b\"],\n        \"z\": null\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "denseSetMap": {
                                "x": [],
                                "y": [
                                    "a",
                                    "b"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonMapsInputOutput": {
            "type": "structure",
            "members": {
                "denseStructMap": {
                    "target": "aws.protocoltests.restjson#DenseStructMap"
                },
                "sparseStructMap": {
                    "target": "aws.protocoltests.restjson#SparseStructMap"
                },
                "denseNumberMap": {
                    "target": "aws.protocoltests.restjson#DenseNumberMap"
                },
                "denseBooleanMap": {
                    "target": "aws.protocoltests.restjson#DenseBooleanMap"
                },
                "denseStringMap": {
                    "target": "aws.protocoltests.restjson#DenseStringMap"
                },
                "sparseNumberMap": {
                    "target": "aws.protocoltests.restjson#SparseNumberMap"
                },
                "sparseBooleanMap": {
                    "target": "aws.protocoltests.restjson#SparseBooleanMap"
                },
                "sparseStringMap": {
                    "target": "aws.protocoltests.shared#SparseStringMap"
                },
                "denseSetMap": {
                    "target": "aws.protocoltests.restjson#DenseSetMap"
                },
                "sparseSetMap": {
                    "target": "aws.protocoltests.restjson#SparseSetMap"
                }
            }
        },
        "aws.protocoltests.restjson#JsonTimestamps": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#JsonTimestampsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#JsonTimestampsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This tests how timestamps are serialized, including using the\ndefault format of date-time and various @timestampFormat trait\nvalues.",
                "smithy.api#http": {
                    "uri": "/JsonTimestamps",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonJsonTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"normal\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"dateTime\": \"2014-04-29T18:30:38Z\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"epochSeconds\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/JsonTimestamps",
                        "body": "{\n    \"httpDate\": \"Tue, 29 Apr 2014 18:30:38 GMT\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonJsonTimestamps",
                        "documentation": "Tests how normal timestamps are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"normal\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "normal": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithDateTimeFormat",
                        "documentation": "Ensures that the timestampFormat of date-time works like normal timestamps",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"dateTime\": \"2014-04-29T18:30:38Z\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "dateTime": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithEpochSecondsFormat",
                        "documentation": "Ensures that the timestampFormat of epoch-seconds works",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"epochSeconds\": 1398796238\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "epochSeconds": 1398796238
                        }
                    },
                    {
                        "id": "RestJsonJsonTimestampsWithHttpDateFormat",
                        "documentation": "Ensures that the timestampFormat of http-date works",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"httpDate\": \"Tue, 29 Apr 2014 18:30:38 GMT\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "httpDate": 1398796238
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonTimestampsInputOutput": {
            "type": "structure",
            "members": {
                "normal": {
                    "target": "smithy.api#Timestamp"
                },
                "dateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "epochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "httpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#timestampFormat": "http-date"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#JsonUnions": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#UnionInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#UnionInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation uses unions for inputs and outputs.",
                "smithy.api#http": {
                    "uri": "/JsonUnions",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonSerializeStringUnionValue",
                        "documentation": "Serializes a string union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeBooleanUnionValue",
                        "documentation": "Serializes a boolean union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeNumberUnionValue",
                        "documentation": "Serializes a number union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeBlobUnionValue",
                        "documentation": "Serializes a blob union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeTimestampUnionValue",
                        "documentation": "Serializes a timestamp union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeEnumUnionValue",
                        "documentation": "Serializes an enum union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeListUnionValue",
                        "documentation": "Serializes a list union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeMapUnionValue",
                        "documentation": "Serializes a map union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeStructureUnionValue",
                        "documentation": "Serializes a structure union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonSerializeRenamedStructureUnionValue",
                        "documentation": "Serializes a renamed structure union value",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/JsonUnions",
                        "body": "{\n    \"contents\": {\n        \"renamedStructureValue\": {\n            \"salutation\": \"hello!\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "renamedStructureValue": {
                                    "salutation": "hello!"
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonDeserializeStringUnionValue",
                        "documentation": "Deserializes a string union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"stringValue\": \"foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "stringValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeBooleanUnionValue",
                        "documentation": "Deserializes a boolean union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"booleanValue\": true\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "booleanValue": true
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeNumberUnionValue",
                        "documentation": "Deserializes a number union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"numberValue\": 1\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "numberValue": 1
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeBlobUnionValue",
                        "documentation": "Deserializes a blob union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"blobValue\": \"Zm9v\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "blobValue": "foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeTimestampUnionValue",
                        "documentation": "Deserializes a timestamp union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"timestampValue\": 1398796238\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "timestampValue": 1398796238
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeEnumUnionValue",
                        "documentation": "Deserializes an enum union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"enumValue\": \"Foo\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "enumValue": "Foo"
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeListUnionValue",
                        "documentation": "Deserializes a list union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"listValue\": [\"foo\", \"bar\"]\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "listValue": [
                                    "foo",
                                    "bar"
                                ]
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeMapUnionValue",
                        "documentation": "Deserializes a map union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"mapValue\": {\n            \"foo\": \"bar\",\n            \"spam\": \"eggs\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "mapValue": {
                                    "foo": "bar",
                                    "spam": "eggs"
                                }
                            }
                        }
                    },
                    {
                        "id": "RestJsonDeserializeStructureUnionValue",
                        "documentation": "Deserializes a structure union value",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"contents\": {\n        \"structureValue\": {\n            \"hi\": \"hello\"\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "contents": {
                                "structureValue": {
                                    "hi": "hello"
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#JsonValue": {
            "type": "string",
            "traits": {
                "smithy.api#mediaType": "application/json"
            }
        },
        "com.amazonaws.apigateway#ListOfEndpointType": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.apigateway#EndpointType"
            }
        },
        "com.amazonaws.apigateway#ListOfRestApi": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.apigateway#RestApi"
            }
        },
        "com.amazonaws.apigateway#ListOfString": {
            "type": "list",
            "member": {
                "target": "com.amazonaws.apigateway#String"
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithBody": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedAcceptWithBody"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithBodyExpectsApplicationJsonAccept",
                        "documentation": "When there is modeled output, the accept must be application/json",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedAcceptWithBody",
                            "headers": {
                                "accept": "application/hal+json"
                            }
                        },
                        "response": {
                            "code": 406,
                            "headers": {
                                "x-amzn-errortype": "NotAcceptableException"
                            }
                        },
                        "tags": [
                            "accept"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithGenericString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedAcceptWithGenericStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedAcceptWithGenericString"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithPayloadExpectsImpliedAccept",
                        "documentation": "When there is a payload without a mediaType trait, the accept must match the\nimplied content type of the shape.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedAcceptWithGenericString",
                            "headers": {
                                "accept": "application/json"
                            }
                        },
                        "response": {
                            "code": 406,
                            "headers": {
                                "x-amzn-errortype": "NotAcceptableException"
                            }
                        },
                        "tags": [
                            "accept"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithGenericStringInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithPayload": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#MalformedAcceptWithPayloadOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedAcceptWithPayload"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithPayloadExpectsModeledAccept",
                        "documentation": "When there is a payload with a mediaType trait, the accept must match.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedAcceptWithPayload",
                            "headers": {
                                "accept": "application/json"
                            }
                        },
                        "response": {
                            "code": 406,
                            "headers": {
                                "x-amzn-errortype": "NotAcceptableException"
                            }
                        },
                        "tags": [
                            "accept"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedAcceptWithPayloadOutput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.shared#JpegBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedBlob": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedBlobInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedBlob",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyMalformedBlobInvalidBase64",
                        "documentation": "When a blob member is not properly base64 encoded, or not encoded at\nall, the response should be a 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBlob",
                            "body": "{ \"blob\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "blob",
                                "\"xyz\"",
                                "\"YmxvYg=\"",
                                "[98, 108, 11, 98]",
                                "[\"b\", \"l\",\"o\",\"b\"]",
                                "981081198",
                                "true",
                                "[][]",
                                "-_=="
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedBlobInput": {
            "type": "structure",
            "members": {
                "blob": {
                    "target": "smithy.api#Blob"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedBoolean": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedBooleanInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedBoolean/{booleanInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "body": "{ \"booleanInBody\" : $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "false",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonBodyBooleanBadLiteral",
                        "documentation": "YAML-style alternate boolean literals should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "body": "{ \"booleanInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonPathBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonQueryBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "queryParams": [
                                "booleanInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonHeaderBooleanStringCoercion",
                        "documentation": "Attempted string coercion should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedBoolean/true",
                            "headers": {
                                "booleanInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "True",
                                "TRUE",
                                "y",
                                "Y",
                                "yes",
                                "Yes",
                                "YES",
                                "1",
                                "on",
                                "On",
                                "ON",
                                "False",
                                "FALSE",
                                "n",
                                "N",
                                "no",
                                "No",
                                "NO",
                                "0",
                                "off",
                                "Off",
                                "OFF"
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedBooleanInput": {
            "type": "structure",
            "members": {
                "booleanInBody": {
                    "target": "smithy.api#Boolean"
                },
                "booleanInPath": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "booleanInQuery": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpQuery": "booleanInQuery"
                    }
                },
                "booleanInHeader": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#httpHeader": "booleanInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedByte": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedByteInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedByte/{byteInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "body": "{ \"byteInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "queryParams": [
                                "byteInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderByteUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "headers": {
                                "byteInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "256",
                                "-256",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyByteMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "body": "{ \"byteInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathByteMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryByteMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "queryParams": [
                                "byteInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderByteMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedByte/1",
                            "headers": {
                                "byteInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedByteInput": {
            "type": "structure",
            "members": {
                "byteInBody": {
                    "target": "smithy.api#Byte"
                },
                "byteInPath": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "byteInQuery": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpQuery": "byteInQuery"
                    }
                },
                "byteInHeader": {
                    "target": "smithy.api#Byte",
                    "traits": {
                        "smithy.api#httpHeader": "byteInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithBody": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithBody"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithBodyExpectsApplicationJsonContentType",
                        "documentation": "When there is modeled input, they content type must be application/json",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithBody",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/hal+json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithGenericString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedContentTypeWithGenericStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithGenericString"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithPayloadExpectsImpliedContentType",
                        "documentation": "When there is a payload without a mediaType trait, the content type must match the\nimplied content type of the shape.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithPayload",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithGenericStringInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedContentTypeWithPayloadInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithPayload"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithPayloadExpectsModeledContentType",
                        "documentation": "When there is a payload with a mediaType trait, the content type must match.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithPayload",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "aws.protocoltests.shared#JpegBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedContentTypeWithoutBody": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/MalformedContentTypeWithoutBody"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonWithoutBodyExpectsEmptyContentType",
                        "documentation": "When there is no modeled input, content type must not be set and the body must be empty.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedContentTypeWithoutBody",
                            "body": "{}",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 415,
                            "headers": {
                                "x-amzn-errortype": "UnsupportedMediaTypeException"
                            }
                        },
                        "tags": [
                            "content-type"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedDouble": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedDoubleInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedDouble/{doubleInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyDoubleMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/1",
                            "body": "{ \"doubleInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathDoubleMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryDoubleMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/1",
                            "queryParams": [
                                "doubleInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderDoubleMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedDouble/1",
                            "headers": {
                                "doubleInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedDoubleInput": {
            "type": "structure",
            "members": {
                "doubleInBody": {
                    "target": "smithy.api#Double"
                },
                "doubleInPath": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "doubleInQuery": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpQuery": "doubleInQuery"
                    }
                },
                "doubleInHeader": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#httpHeader": "doubleInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedFloat": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedFloatInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedFloat/{floatInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyFloatMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/1",
                            "body": "{ \"floatInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathFloatMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryFloatMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/1",
                            "queryParams": [
                                "floatInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderFloatMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedFloat/1",
                            "headers": {
                                "floatInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "2ABC",
                                "0x42"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "trailing_chars",
                                "hex"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedFloatInput": {
            "type": "structure",
            "members": {
                "floatInBody": {
                    "target": "smithy.api#Float"
                },
                "floatInPath": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "floatInQuery": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpQuery": "floatInQuery"
                    }
                },
                "floatInHeader": {
                    "target": "smithy.api#Float",
                    "traits": {
                        "smithy.api#httpHeader": "floatInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedInteger": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedIntegerInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedInteger/{integerInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "body": "{ \"integerInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "queryParams": [
                                "integerInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderIntegerUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "headers": {
                                "integerInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyIntegerMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "body": "{ \"integerInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathIntegerMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryIntegerMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "queryParams": [
                                "integerInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderIntegerMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedInteger/1",
                            "headers": {
                                "integerInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedIntegerInput": {
            "type": "structure",
            "members": {
                "integerInBody": {
                    "target": "smithy.api#Integer"
                },
                "integerInPath": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "integerInQuery": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpQuery": "integerInQuery"
                    }
                },
                "integerInHeader": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpHeader": "integerInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedList": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedListInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedList",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyMalformedListNullItem",
                        "documentation": "When a dense list contains null, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedList",
                            "body": "{ \"bodyList\" : [\"a\", null, \"b\", \"c\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonBodyMalformedListUnclosed",
                        "documentation": "When a list does not have a closing bracket, the response should be\na 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedList",
                            "body": "{ \"bodyList\" : [\"a\", \"b\", \"c\" }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonBodyMalformedMapNullKey",
                        "documentation": "When a map contains a null key, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedMap",
                            "body": "{ \"bodyMap\" : { null: \"abc\" }  }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonBodyMalformedMapNullValue",
                        "documentation": "When a dense map contains a null value, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedMap",
                            "body": "{ \"bodyMap\" : { \"abc\": null }  }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedListInput": {
            "type": "structure",
            "members": {
                "bodyList": {
                    "target": "aws.protocoltests.restjson#SimpleList"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedLong": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedLongInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedLong/{longInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "body": "{ \"longInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "queryParams": [
                                "longInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderLongUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "headers": {
                                "longInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "-184467440737095500000",
                                "184467440737095500000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyLongMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "body": "{ \"longInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathLongMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryLongMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "queryParams": [
                                "longInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderLongMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedLong/1",
                            "headers": {
                                "longInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedLongInput": {
            "type": "structure",
            "members": {
                "longInBody": {
                    "target": "smithy.api#Long"
                },
                "longInPath": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "longInQuery": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpQuery": "longInQuery"
                    }
                },
                "longInHeader": {
                    "target": "smithy.api#Long",
                    "traits": {
                        "smithy.api#httpHeader": "longInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedMap": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedMapInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedMap",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedMapInput": {
            "type": "structure",
            "members": {
                "bodyMap": {
                    "target": "aws.protocoltests.restjson#SimpleMap"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedRequestBody": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedRequestBodyInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedRequestBody",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonInvalidJsonBody",
                        "documentation": "When the request body is not valid JSON, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRequestBody",
                            "body": "$value:L",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "{[",
                                "{ \"int\": 10 }abc",
                                "abc{ \"int\": 10 }",
                                "{\n    \"int\": 10 // the integer should be 10\n}",
                                "{\n    \"int\": 10 /* the integer should be 10 */\n}",
                                "{\"int\" :\u000c10}",
                                "{'int': 10}",
                                "{\"int\": 10,}"
                            ]
                        }
                    },
                    {
                        "id": "RestJsonTechnicallyValidJsonBody",
                        "documentation": "When the request body is technically valid, but cannot map to a Smithy structure,\nthe response should be a 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedRequestBody",
                            "body": "$value:L",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "[{ \"int\": 10}]",
                                "10",
                                "null"
                            ]
                        },
                        "tags": [
                            "technically_valid_json_body"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedRequestBodyInput": {
            "type": "structure",
            "members": {
                "int": {
                    "target": "smithy.api#Integer"
                },
                "float": {
                    "target": "smithy.api#Float"
                }
            }
        },
        "aws.protocoltests.restjson#MalformedShort": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedShortInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedShort/{shortInPath}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "body": "{ \"shortInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonPathShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonQueryShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "queryParams": [
                                "shortInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderShortUnderflowOverflow",
                        "documentation": "Underflow or overflow should result in SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "headers": {
                                "shortInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "40000",
                                "-40000",
                                "-9223372000000000000",
                                "9223372000000000000",
                                "123000000000000000000000"
                            ]
                        },
                        "tags": [
                            "underflow/overflow"
                        ]
                    },
                    {
                        "id": "RestJsonBodyShortMalformedValueRejected",
                        "documentation": "Malformed values in the body should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "body": "{ \"shortInBody\" : $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "\"123\"",
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ],
                            "tag": [
                                "string_coercion",
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "string_inf",
                                "negative_inf",
                                "string_negative_inf",
                                "nan",
                                "string_nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonPathShortMalformedValueRejected",
                        "documentation": "Malformed values in the path should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonQueryShortMalformedValueRejected",
                        "documentation": "Malformed values in query parameters should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "queryParams": [
                                "shortInQuery=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderShortMalformedValueRejected",
                        "documentation": "Malformed values in headers should be rejected",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedShort/1",
                            "headers": {
                                "shortInHeader": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1.001",
                                "2ABC",
                                "0x42",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ],
                            "tag": [
                                "boolean_coercion",
                                "float_truncation",
                                "trailing_chars",
                                "hex",
                                "inf",
                                "negative_inf",
                                "nan"
                            ]
                        },
                        "tags": [
                            "$tag:L"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedShortInput": {
            "type": "structure",
            "members": {
                "shortInBody": {
                    "target": "smithy.api#Short"
                },
                "shortInPath": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "shortInQuery": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpQuery": "shortInQuery"
                    }
                },
                "shortInHeader": {
                    "target": "smithy.api#Short",
                    "traits": {
                        "smithy.api#httpHeader": "shortInHeader"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedString",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderMalformedStringInvalidBase64MediaType",
                        "documentation": "When string with the mediaType trait is bound to a header, its value\nmust be base64 encoded. The server should reject values that aren't\nvalid base64 out of hand.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedString",
                            "headers": {
                                "content-type": "application/json",
                                "amz-media-typed-header": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "xyz",
                                "YmxvYg=",
                                "[][]",
                                "-_=="
                            ]
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedStringInput": {
            "type": "structure",
            "members": {
                "blob": {
                    "target": "aws.protocoltests.restjson#JsonHeaderString",
                    "traits": {
                        "smithy.api#httpHeader": "amz-media-typed-header"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDateTime": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampBodyDateTimeInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampBodyDateTime",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsHttpDate",
                        "documentation": "When the format is date-time, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT",
                                "Sun, 02 Jan 2000 20:34:56.000 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsEpochSeconds",
                        "documentation": "When the format is date-time, epoch-seconds timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsUTCOffsets",
                        "documentation": "When the format is date-time, RFC 3339 timestamps with a UTC offset are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDateTimeRejectsDifferent8601Formats",
                        "documentation": "When the format is date-time, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDateTime",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57+00",
                                "1996-12-19T16:39:57+00Z",
                                "1996-12-19T16:39:57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16:39:57Z",
                                "19961219T16:39:57",
                                "1996-12-19T16:39Z",
                                "1996-12-19T16:39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19 16:39:57Z",
                                "2011-12-03T10:15:30+01:00[Europe/Paris]"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDateTimeInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "date-time"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampBodyDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampBodyDefault",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsDateTime",
                        "documentation": "By default, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsStringifiedEpochSeconds",
                        "documentation": "By default, epoch second timestamps as strings are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsMalformedEpochSeconds",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "\"Infinity\"",
                                "-Infinity",
                                "\"-Infinity\"",
                                "NaN",
                                "\"NaN\""
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampDefaultRejectsHttpDate",
                        "documentation": "By default, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyDefault",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT",
                                "Sun, 02 Jan 2000 20:34:56.000 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyHttpDate": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampBodyHttpDateInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampBodyHttpDate",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonBodyTimestampHttpDateRejectsDateTime",
                        "documentation": "When the format is http-date, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyHttpDate",
                            "body": "{ \"timestamp\": $value:S }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonBodyTimestampHttpDateRejectsEpoch",
                        "documentation": "When the format is http-date, epoch-seconds timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampBodyHttpDate",
                            "body": "{ \"timestamp\": $value:L }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampBodyHttpDateInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDateTime": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDateTimeInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampHeaderDateTime",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderTimestampDateTimeRejectsHttpDate",
                        "documentation": "When the format is date-time, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDateTime",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT",
                                "Sun, 02 Jan 2000 20:34:56.000 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampDateTimeRejectsEpochSeconds",
                        "documentation": "When the format is date-time, epoch-seconds timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDateTime",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampDateTimeRejectsDifferent8601Formats",
                        "documentation": "When the format is date-time, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDateTime",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57+00",
                                "1996-12-19T16:39:57+00Z",
                                "1996-12-19T16:39:57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16:39:57Z",
                                "19961219T16:39:57",
                                "1996-12-19T16:39Z",
                                "1996-12-19T16:39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19 16:39:57Z",
                                "2011-12-03T10:15:30+01:00[Europe/Paris]"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDateTimeInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "date-time"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampHeaderDefault",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderTimestampDefaultRejectsDateTime",
                        "documentation": "By default, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDefault",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampDefaultRejectsEpochSeconds",
                        "documentation": "By default, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderDefault",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "timestamp",
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderEpoch": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampHeaderEpochInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampHeaderEpoch",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonHeaderTimestampEpochRejectsDateTime",
                        "documentation": "When the format is epoch-seconds, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderEpoch",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23:20:50.52Z",
                                "1985-04-12T23:20:50Z",
                                "1996-12-19T16:39:57-08:00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampEpochRejectsHttpDate",
                        "documentation": "When the format is epoch-seconds, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderEpoch",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue, 29 Apr 2014 18:30:38 GMT",
                                "Sun, 02 Jan 2000 20:34:56.000 GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonHeaderTimestampEpochRejectsMalformedValues",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampHeaderEpoch",
                            "headers": {
                                "timestamp": "$value:L"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampHeaderEpochInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampPathDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampPathDefault/{timestamp}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsHttpDate",
                        "documentation": "By default, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsEpochSeconds",
                        "documentation": "By default, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsUTCOffsets",
                        "documentation": "UTC offsets must be rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/1996-12-19T16%3A39%3A57-08%3A00"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampDefaultRejectsDifferent8601Formats",
                        "documentation": "By default, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathDefault/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16%3A39%3A57%2B00",
                                "1996-12-19T16%3A39%3A57%2B00Z",
                                "1996-12-19T16%3A39%3A57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16%3A39%3A57Z",
                                "19961219T16%3A39%3A57",
                                "1996-12-19T16%3A39Z",
                                "1996-12-19T16%3A39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19 16%3A39%3A57Z",
                                "2011-12-03T10%3A15%3A30%2B01%3A00%5BEurope%2FParis%5D"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathEpoch": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampPathEpochInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampPathEpoch/{timestamp}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonPathTimestampEpochRejectsDateTime",
                        "documentation": "When the format is epoch-seconds, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathEpoch/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampEpochRejectsHttpDate",
                        "documentation": "When the format is epoch-seconds, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathEpoch/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampEpochRejectsMalformedValues",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathEpoch/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathEpochInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathHttpDate": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampPathHttpDateInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampPathHttpDate/{timestamp}",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonPathTimestampHttpDateRejectsDateTime",
                        "documentation": "When the format is http-date, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathHttpDate/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonPathTimestampHttpDateRejectsEpochSeconds",
                        "documentation": "When the format is http-date,  epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampPathHttpDate/$value:L"
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampPathHttpDateInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryDefault": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampQueryDefaultInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampQueryDefault",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsHttpDate",
                        "documentation": "By default, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsEpochSeconds",
                        "documentation": "By default, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsUTCOffsets",
                        "documentation": "UTC offsets must be rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampDefaultRejectsDifferent8601Formats",
                        "documentation": "By default, maybe-valid ISO-8601 date-times not conforming to RFC 3339\nare rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryDefault",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1996-12-19T16:39:57+00",
                                "1996-12-19T16:39:57+00Z",
                                "1996-12-19T16:39:57",
                                "1996-12-19T163957",
                                "19961219T163957Z",
                                "19961219T163957",
                                "19961219T16:39:57Z",
                                "19961219T16:39:57",
                                "1996-12-19T16:39Z",
                                "1996-12-19T16:39",
                                "1996-12-19T1639",
                                "1996-12-19T16Z",
                                "1996-12-19T16",
                                "1996-12-19 16:39:57Z",
                                "2011-12-03T10:15:30+01:00[Europe/Paris]"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryDefaultInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "timestamp",
                        "smithy.api#required": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryEpoch": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampQueryEpochInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampQueryEpoch",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonQueryTimestampEpochRejectsDateTime",
                        "documentation": "When the format is epoch-seconds, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryEpoch",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampEpochRejectsHttpDate",
                        "documentation": "When the format is epoch-seconds, IMF-fixdate timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryEpoch",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "Tue%2C%2029%20Apr%202014%2018%3A30%3A38%20GMT",
                                "Sun%2C%2002%20Jan%202000%2020%3A34%3A56.000%20GMT"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampEpochRejectsMalformedValues",
                        "documentation": "Invalid values for epoch seconds are rejected with a 400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryEpoch",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "true",
                                "1515531081ABC",
                                "0x42",
                                "1515531081.123.456",
                                "Infinity",
                                "-Infinity",
                                "NaN"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryEpochInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryHttpDate": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedTimestampQueryHttpDateInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedTimestampQueryHttpDate",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonQueryTimestampHttpDateRejectsDateTime",
                        "documentation": "When the format is http-date, RFC3339 timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryHttpDate",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1985-04-12T23%3A20%3A50.52Z",
                                "1985-04-12T23%3A20%3A50Z",
                                "1996-12-19T16%3A39%3A57-08%3A00"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    },
                    {
                        "id": "RestJsonQueryTimestampHttpDateRejectsEpochSeconds",
                        "documentation": "When the format is http-date, epoch second timestamps are rejected with a\n400 SerializationException",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedTimestampQueryHttpDate",
                            "queryParams": [
                                "timestamp=$value:L"
                            ]
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        },
                        "testParameters": {
                            "value": [
                                "1515531081.1234",
                                "1515531081"
                            ]
                        },
                        "tags": [
                            "timestamp"
                        ]
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedTimestampQueryHttpDateInput": {
            "type": "structure",
            "members": {
                "timestamp": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpQuery": "timestamp",
                        "smithy.api#required": {},
                        "smithy.api#timestampFormat": "http-date"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MalformedUnion": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MalformedUnionInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/MalformedUnion",
                    "method": "POST"
                },
                "smithy.api#suppress": [
                    "UnstableTrait"
                ],
                "smithy.test#httpMalformedRequestTests": [
                    {
                        "id": "RestJsonMalformedUnionMultipleFieldsSet",
                        "documentation": "When the union has multiple fields set, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : { \"int\": 2, \"string\": \"three\" } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUnionKnownAndUnknownFieldsSet",
                        "documentation": "When the union has multiple fields set, even when only one is modeled,\nthe response should be a 400 SerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : { \"int\": 2, \"unknownField\": \"three\" } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUnionNoFieldsSet",
                        "documentation": "When the union has no fields set, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : { \"int\": null } }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    },
                    {
                        "id": "RestJsonMalformedUnionValueIsArray",
                        "documentation": "When the union value is actually an array, the response should be a 400\nSerializationException.",
                        "protocol": "aws.protocols#restJson1",
                        "request": {
                            "method": "POST",
                            "uri": "/MalformedUnion",
                            "body": "{ \"union\" : [\"int\"] }",
                            "headers": {
                                "content-type": "application/json"
                            }
                        },
                        "response": {
                            "code": 400,
                            "headers": {
                                "x-amzn-errortype": "SerializationException"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MalformedUnionInput": {
            "type": "structure",
            "members": {
                "union": {
                    "target": "aws.protocoltests.restjson#SimpleUnion"
                }
            }
        },
        "com.amazonaws.apigateway#MapOfStringToString": {
            "type": "map",
            "key": {
                "target": "com.amazonaws.apigateway#String"
            },
            "value": {
                "target": "com.amazonaws.apigateway#String"
            }
        },
        "aws.protocoltests.restjson#MediaTypeHeader": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#MediaTypeHeaderInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#MediaTypeHeaderOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example ensures that mediaType strings are base64 encoded in headers.",
                "smithy.api#http": {
                    "uri": "/MediaTypeHeader",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "MediaTypeHeaderInputBase64",
                        "documentation": "Headers that target strings with a mediaType are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/MediaTypeHeader",
                        "headers": {
                            "X-Json": "dHJ1ZQ=="
                        },
                        "body": "",
                        "params": {
                            "json": "true"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "MediaTypeHeaderOutputBase64",
                        "documentation": "Headers that target strings with a mediaType are base64 encoded",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-Json": "dHJ1ZQ=="
                        },
                        "params": {
                            "json": "true"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#MediaTypeHeaderInput": {
            "type": "structure",
            "members": {
                "json": {
                    "target": "aws.protocoltests.restjson#JsonValue",
                    "traits": {
                        "smithy.api#httpHeader": "X-Json"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#MediaTypeHeaderOutput": {
            "type": "structure",
            "members": {
                "json": {
                    "target": "aws.protocoltests.restjson#JsonValue",
                    "traits": {
                        "smithy.api#httpHeader": "X-Json"
                    }
                }
            }
        },
        "com.amazonaws.glacier#MissingParameterValueException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 400
            }
        },
        "aws.protocoltests.restjson#MyUnion": {
            "type": "union",
            "members": {
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "booleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "numberValue": {
                    "target": "smithy.api#Integer"
                },
                "blobValue": {
                    "target": "smithy.api#Blob"
                },
                "timestampValue": {
                    "target": "smithy.api#Timestamp"
                },
                "enumValue": {
                    "target": "aws.protocoltests.shared#FooEnum"
                },
                "listValue": {
                    "target": "aws.protocoltests.shared#StringList"
                },
                "mapValue": {
                    "target": "aws.protocoltests.shared#StringMap"
                },
                "structureValue": {
                    "target": "aws.protocoltests.shared#GreetingStruct"
                },
                "renamedStructureValue": {
                    "target": "aws.protocoltests.restjson.nested#GreetingStruct"
                }
            },
            "traits": {
                "smithy.api#documentation": "A union with a representative set of types for members."
            }
        },
        "aws.protocoltests.restjson#NestedPayload": {
            "type": "structure",
            "members": {
                "greeting": {
                    "target": "smithy.api#String"
                },
                "name": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.shared#NestedStringList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.shared#StringList"
            },
            "traits": {
                "smithy.api#documentation": "A list of lists of strings."
            }
        },
        "aws.protocoltests.restjson#NoInputAndNoOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input or output.\nWhile this should be rare, code generators must support this.",
                "smithy.api#http": {
                    "uri": "/NoInputAndNoOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonNoInputAndNoOutput",
                        "documentation": "No input serializes no payload. When clients do not need to\nserialize any data in the payload, they should omit a payload\naltogether.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndNoOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonNoInputAllowsAccept",
                        "documentation": "Servers should allow the accept header to be set to the\ndefault content-type.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndNoOutput",
                        "body": "",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonNoInputAndNoOutput",
                        "documentation": "When an operation does not define output, the service will respond\nwith an empty payload, and may optionally include the content-type\nheader.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": ""
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#NoInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#NoInputAndOutputOutput"
            },
            "traits": {
                "smithy.api#documentation": "The example tests how requests and responses are serialized when there's\nno request or response payload because the operation has no input and the\noutput is empty. While this should be rare, code generators must support\nthis.",
                "smithy.api#http": {
                    "uri": "/NoInputAndOutputOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonNoInputAndOutput",
                        "documentation": "No input serializes no payload. When clients do not need to\nserialize any data in the payload, they should omit a payload\naltogether.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndOutputOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonNoInputAndOutputAllowsAccept",
                        "documentation": "Servers should allow the accept header to be set to the\ndefault content-type.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/NoInputAndOutputOutput",
                        "body": "",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonNoInputAndOutputWithJson",
                        "documentation": "Operations that define output and do not bind anything to\nthe payload return a JSON object in the response.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        }
                    },
                    {
                        "id": "RestJsonNoInputAndOutputNoPayload",
                        "documentation": "This test is similar to RestJsonNoInputAndOutputWithJson, but\nit ensures that clients can gracefully handle responses that\nomit a JSON payload.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#NoInputAndOutputOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#output": {}
            }
        },
        "smithy.test#NonEmptyString": {
            "type": "string",
            "traits": {
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#private": {}
            }
        },
        "smithy.test#NonEmptyStringList": {
            "type": "list",
            "member": {
                "target": "smithy.test#NonEmptyString"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#NullAndEmptyHeadersClient": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "Null and empty headers are not sent over the wire.",
                "smithy.api#http": {
                    "uri": "/NullAndEmptyHeadersClient",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonNullAndEmptyHeaders",
                        "documentation": "Do not send null values, empty strings, or empty lists over the wire in headers",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/NullAndEmptyHeadersClient",
                        "forbidHeaders": [
                            "X-A",
                            "X-B",
                            "X-C"
                        ],
                        "body": "",
                        "params": {
                            "a": null,
                            "b": "",
                            "c": []
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#NullAndEmptyHeadersIO": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-A"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-B"
                    }
                },
                "c": {
                    "target": "aws.protocoltests.shared#StringList",
                    "traits": {
                        "smithy.api#httpHeader": "X-C"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#NullAndEmptyHeadersServer": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#NullAndEmptyHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "Null and empty headers are not sent over the wire.",
                "smithy.api#http": {
                    "uri": "/NullAndEmptyHeadersServer",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.api#tags": [
                    "server-only"
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonNullAndEmptyHeaders",
                        "documentation": "Do not send null or empty headers",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "forbidHeaders": [
                            "X-A",
                            "X-B",
                            "X-C"
                        ],
                        "params": {
                            "a": null,
                            "b": "",
                            "c": []
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "com.amazonaws.apigateway#NullableInteger": {
            "type": "integer",
            "traits": {
                "smithy.api#box": {}
            }
        },
        "aws.protocoltests.restjson#OmitsNullSerializesEmptyString": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#OmitsNullSerializesEmptyStringInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Omits null, but serializes empty string value.",
                "smithy.api#http": {
                    "uri": "/OmitsNullSerializesEmptyString",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonOmitsNullQuery",
                        "documentation": "Omits null query values",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "params": {
                            "nullValue": null
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonSerializesEmptyQueryValue",
                        "documentation": "Serializes empty query strings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "queryParams": [
                            "Empty="
                        ],
                        "params": {
                            "emptyString": ""
                        }
                    },
                    {
                        "id": "RestJsonServersAcceptStaticQueryParamAsEmptyString",
                        "documentation": "Servers accept static query params as empty strings.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/OmitsNullSerializesEmptyString",
                        "body": "",
                        "queryParams": [
                            "Empty"
                        ],
                        "params": {
                            "emptyString": ""
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#OmitsNullSerializesEmptyStringInput": {
            "type": "structure",
            "members": {
                "nullValue": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "Null"
                    }
                },
                "emptyString": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "Empty"
                    }
                }
            }
        },
        "aws.protocoltests.config#OperationConfig": {
            "type": "structure",
            "members": {
                "s3": {
                    "target": "aws.protocoltests.config#S3Config"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration that is set for the scope of a single operation."
            }
        },
        "aws.apigateway#PassThroughBehavior": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Defines the passThroughBehavior for the integration",
                "smithy.api#enum": [
                    {
                        "value": "when_no_templates",
                        "name": "WHEN_NO_TEMPLATES"
                    },
                    {
                        "value": "when_no_match",
                        "name": "WHEN_NO_MATCH"
                    },
                    {
                        "value": "never",
                        "name": "NEVER"
                    }
                ],
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#PayloadConfig": {
            "type": "structure",
            "members": {
                "data": {
                    "target": "smithy.api#Integer"
                }
            }
        },
        "aws.protocoltests.restjson#PlayerAction": {
            "type": "union",
            "members": {
                "quit": {
                    "target": "smithy.api#Unit",
                    "traits": {
                        "smithy.api#documentation": "Quit the game."
                    }
                }
            }
        },
        "aws.protocoltests.restjson#PostPlayerAction": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#PostPlayerActionInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#PostPlayerActionOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation defines a union with a Unit member.",
                "smithy.api#http": {
                    "uri": "/PostPlayerAction",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonInputUnionWithUnitMember",
                        "documentation": "Unit types in unions are serialized like normal structures in requests.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostPlayerAction",
                        "body": "{\n    \"action\": {\n        \"quit\": {}\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "action": {
                                "quit": {}
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonOutputUnionWithUnitMember",
                        "documentation": "Unit types in unions are serialized like normal structures in responses.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"action\": {\n        \"quit\": {}\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "action": {
                                "quit": {}
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#PostPlayerActionInput": {
            "type": "structure",
            "members": {
                "action": {
                    "target": "aws.protocoltests.restjson#PlayerAction"
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#PostPlayerActionOutput": {
            "type": "structure",
            "members": {
                "action": {
                    "target": "aws.protocoltests.restjson#PlayerAction",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.protocoltests.restjson#PostUnionWithJsonName": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#PostUnionWithJsonNameInput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#PostUnionWithJsonNameOutput"
            },
            "traits": {
                "smithy.api#documentation": "This operation defines a union that uses jsonName on some members.",
                "smithy.api#http": {
                    "uri": "/PostUnionWithJsonName",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "PostUnionWithJsonNameRequest1",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostUnionWithJsonName",
                        "body": "{\n    \"value\": {\n        \"FOO\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "foo": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameRequest2",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostUnionWithJsonName",
                        "body": "{\n    \"value\": {\n        \"_baz\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "baz": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameRequest3",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/PostUnionWithJsonName",
                        "body": "{\n    \"value\": {\n        \"bar\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "bar": "hi"
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "PostUnionWithJsonNameResponse1",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"value\": {\n        \"FOO\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "foo": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameResponse2",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"value\": {\n        \"_baz\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "baz": "hi"
                            }
                        }
                    },
                    {
                        "id": "PostUnionWithJsonNameResponse3",
                        "documentation": "Tests that jsonName works with union members.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"value\": {\n        \"bar\": \"hi\"\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "value": {
                                "bar": "hi"
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#PostUnionWithJsonNameInput": {
            "type": "structure",
            "members": {
                "value": {
                    "target": "aws.protocoltests.restjson#UnionWithJsonName",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#PostUnionWithJsonNameOutput": {
            "type": "structure",
            "members": {
                "value": {
                    "target": "aws.protocoltests.restjson#UnionWithJsonName",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.iam#PrincipalType": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "An IAM policy principal type.",
                "smithy.api#enum": [
                    {
                        "value": "Root",
                        "name": "ROOT"
                    },
                    {
                        "value": "IAMUser",
                        "name": "IAM_USER"
                    },
                    {
                        "value": "IAMRole",
                        "name": "IAM_ROLE"
                    },
                    {
                        "value": "FederatedUser",
                        "name": "FEDERATED_USER"
                    }
                ],
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFill": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFillInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "Automatically adds idempotency tokens.",
                "smithy.api#http": {
                    "uri": "/QueryIdempotencyTokenAutoFill",
                    "method": "POST"
                },
                "smithy.api#tags": [
                    "client-only"
                ],
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonQueryIdempotencyTokenAutoFill",
                        "documentation": "Automatically adds idempotency token when not set",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/QueryIdempotencyTokenAutoFill",
                        "body": "",
                        "queryParams": [
                            "token=00000000-0000-4000-8000-000000000000"
                        ],
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonQueryIdempotencyTokenAutoFillIsSet",
                        "documentation": "Uses the given idempotency token as-is",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/QueryIdempotencyTokenAutoFill",
                        "body": "",
                        "queryParams": [
                            "token=00000000-0000-4000-8000-000000000000"
                        ],
                        "params": {
                            "token": "00000000-0000-4000-8000-000000000000"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFillInput": {
            "type": "structure",
            "members": {
                "token": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "token",
                        "smithy.api#idempotencyToken": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#QueryParamsAsStringListMap": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#QueryParamsAsStringListMapInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/StringListMap",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonQueryParamsStringListMap",
                        "documentation": "Serialize query params from map of list strings",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StringListMap",
                        "body": "",
                        "queryParams": [
                            "corge=named",
                            "baz=bar",
                            "baz=qux"
                        ],
                        "params": {
                            "qux": "named",
                            "foo": {
                                "baz": [
                                    "bar",
                                    "qux"
                                ]
                            }
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersQueryParamsStringListMap",
                        "documentation": "Servers put all query params in map",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StringListMap",
                        "body": "",
                        "queryParams": [
                            "corge=named",
                            "baz=bar",
                            "baz=qux"
                        ],
                        "params": {
                            "qux": "named",
                            "foo": {
                                "corge": [
                                    "named"
                                ],
                                "baz": [
                                    "bar",
                                    "qux"
                                ]
                            }
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#QueryParamsAsStringListMapInput": {
            "type": "structure",
            "members": {
                "qux": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "corge"
                    }
                },
                "foo": {
                    "target": "aws.protocoltests.shared#StringListMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restjson#QueryPrecedence": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#QueryPrecedenceInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/Precedence",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonQueryPrecedence",
                        "documentation": "Prefer named query parameters when serializing",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/Precedence",
                        "body": "",
                        "queryParams": [
                            "bar=named",
                            "qux=alsoFromMap"
                        ],
                        "params": {
                            "foo": "named",
                            "baz": {
                                "bar": "fromMap",
                                "qux": "alsoFromMap"
                            }
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersPutAllQueryParamsInMap",
                        "documentation": "Servers put all query params in map",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/Precedence",
                        "body": "",
                        "queryParams": [
                            "bar=named",
                            "qux=fromMap"
                        ],
                        "params": {
                            "foo": "named",
                            "baz": {
                                "bar": "named",
                                "qux": "fromMap"
                            }
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#QueryPrecedenceInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpQuery": "bar"
                    }
                },
                "baz": {
                    "target": "aws.protocoltests.shared#StringMap",
                    "traits": {
                        "smithy.api#httpQueryParams": {}
                    }
                }
            },
            "traits": {
                "smithy.api#suppress": [
                    "HttpQueryParamsTrait"
                ]
            }
        },
        "aws.protocoltests.restjson#RecursiveShapes": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#RecursiveShapesInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#RecursiveShapesInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "Recursive shapes",
                "smithy.api#http": {
                    "uri": "/RecursiveShapes",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonRecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/RecursiveShapes",
                        "body": "{\n    \"nested\": {\n        \"foo\": \"Foo1\",\n        \"nested\": {\n            \"bar\": \"Bar1\",\n            \"recursiveMember\": {\n                \"foo\": \"Foo2\",\n                \"nested\": {\n                    \"bar\": \"Bar2\"\n                }\n            }\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonRecursiveShapes",
                        "documentation": "Serializes recursive structures",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"nested\": {\n        \"foo\": \"Foo1\",\n        \"nested\": {\n            \"bar\": \"Bar1\",\n            \"recursiveMember\": {\n                \"foo\": \"Foo2\",\n                \"nested\": {\n                    \"bar\": \"Bar2\"\n                }\n            }\n        }\n    }\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "nested": {
                                "foo": "Foo1",
                                "nested": {
                                    "bar": "Bar1",
                                    "recursiveMember": {
                                        "foo": "Foo2",
                                        "nested": {
                                            "bar": "Bar2"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#RecursiveShapesInputOutput": {
            "type": "structure",
            "members": {
                "nested": {
                    "target": "aws.protocoltests.restjson#RecursiveShapesInputOutputNested1"
                }
            }
        },
        "aws.protocoltests.restjson#RecursiveShapesInputOutputNested1": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String"
                },
                "nested": {
                    "target": "aws.protocoltests.restjson#RecursiveShapesInputOutputNested2"
                }
            }
        },
        "aws.protocoltests.restjson#RecursiveShapesInputOutputNested2": {
            "type": "structure",
            "members": {
                "bar": {
                    "target": "smithy.api#String"
                },
                "recursiveMember": {
                    "target": "aws.protocoltests.restjson#RecursiveShapesInputOutputNested1"
                }
            }
        },
        "aws.apigateway#RequestParameters": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#documentation": "<p>A mapping of integration request parameters to the API Gateway data mapping expression that should be used to populate the parameter.</p> <p><strong>Note:</strong> This feature is provided primarily to allow injecting static values and context variables for request parameters. Request data MAY be mapped to headers using the syntax described in <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html#mapping-response-parameters\">the API Gateway Developer Guide</a>; however, the data must be identified according to its location in the serialized request, which may differ from protocol to protocol. Here be dragons!</p>",
                "smithy.api#private": {}
            }
        },
        "com.amazonaws.glacier#RequestTimeoutException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 408
            }
        },
        "com.amazonaws.glacier#ResourceNotFoundException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 404
            }
        },
        "aws.protocoltests.restjson#ResponseCodeHttpFallback": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#ResponseCodeHttpFallbackInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#ResponseCodeHttpFallbackInputOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/responseCodeHttpFallback",
                    "code": 201
                },
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpResponseCodeNotSetFallsBackToHttpCode",
                        "documentation": "This test ensures that servers fall back to the code set\nby @http if @httpResponseCode is not set.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ResponseCodeHttpFallbackInputOutput": {
            "type": "structure",
            "members": {}
        },
        "aws.protocoltests.restjson#ResponseCodeRequired": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "aws.protocoltests.restjson#ResponseCodeRequiredOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "method": "GET",
                    "uri": "/responseCodeRequired",
                    "code": 200
                },
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonHttpResponseCodeRequired",
                        "documentation": "This test ensures that servers handle @httpResponseCode being @required.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 201,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "params": {
                            "responseCode": 201
                        },
                        "appliesTo": "server"
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#ResponseCodeRequiredOutput": {
            "type": "structure",
            "members": {
                "responseCode": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#httpResponseCode": {},
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#output": {}
            }
        },
        "aws.apigateway#ResponseParameters": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#documentation": "Specifies parameter mappings for the response. Only the header and body parameters of the integration response can be mapped to the header parameters of the method.",
                "smithy.api#private": {}
            }
        },
        "com.amazonaws.apigateway#RestApi": {
            "type": "structure",
            "members": {
                "id": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "name": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "description": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "createdDate": {
                    "target": "com.amazonaws.apigateway#Timestamp"
                },
                "version": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "warnings": {
                    "target": "com.amazonaws.apigateway#ListOfString"
                },
                "binaryMediaTypes": {
                    "target": "com.amazonaws.apigateway#ListOfString"
                },
                "minimumCompressionSize": {
                    "target": "com.amazonaws.apigateway#NullableInteger"
                },
                "apiKeySource": {
                    "target": "com.amazonaws.apigateway#ApiKeySourceType"
                },
                "endpointConfiguration": {
                    "target": "com.amazonaws.apigateway#EndpointConfiguration"
                },
                "policy": {
                    "target": "com.amazonaws.apigateway#String"
                },
                "tags": {
                    "target": "com.amazonaws.apigateway#MapOfStringToString"
                },
                "disableExecuteApiEndpoint": {
                    "target": "com.amazonaws.apigateway#Boolean"
                }
            }
        },
        "com.amazonaws.apigateway#RestApis": {
            "type": "structure",
            "members": {
                "items": {
                    "target": "com.amazonaws.apigateway#ListOfRestApi",
                    "traits": {
                        "smithy.api#jsonName": "item"
                    }
                },
                "position": {
                    "target": "com.amazonaws.apigateway#String",
                    "traits": {
                        "smithy.api#httpQuery": "position"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#RestJson": {
            "type": "service",
            "traits": {
                "aws.api#service": {
                    "sdkId": "Rest Json Protocol"
                },
                "aws.protocols#restJson1": {},
                "smithy.api#documentation": "A REST JSON service that sends JSON requests and responses."
            },
            "version": "2019-12-16",
            "operations": [
                {
                    "target": "aws.protocoltests.restjson#AllQueryStringTypes"
                },
                {
                    "target": "aws.protocoltests.restjson#ConstantAndVariableQueryString"
                },
                {
                    "target": "aws.protocoltests.restjson#ConstantQueryString"
                },
                {
                    "target": "aws.protocoltests.restjson#DocumentType"
                },
                {
                    "target": "aws.protocoltests.restjson#DocumentTypeAsPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#EmptyInputAndEmptyOutput"
                },
                {
                    "target": "aws.protocoltests.restjson#EndpointOperation"
                },
                {
                    "target": "aws.protocoltests.restjson#EndpointWithHostLabelOperation"
                },
                {
                    "target": "aws.protocoltests.restjson#GreetingWithErrors"
                },
                {
                    "target": "aws.protocoltests.restjson#HostWithPathOperation"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpChecksumRequired"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpEnumPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPayloadTraits"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPayloadTraitsWithMediaType"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPayloadWithStructure"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPrefixHeaders"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpPrefixHeadersInResponse"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithFloatLabels"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithGreedyLabelInPath"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithLabels"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithLabelsAndTimestampFormat"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpRequestWithRegexLiteral"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpResponseCode"
                },
                {
                    "target": "aws.protocoltests.restjson#HttpStringPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#IgnoreQueryParamsInResponse"
                },
                {
                    "target": "aws.protocoltests.restjson#InputAndOutputWithHeaders"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonBlobs"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonEnums"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonLists"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonMaps"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonTimestamps"
                },
                {
                    "target": "aws.protocoltests.restjson#JsonUnions"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedAcceptWithBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedAcceptWithGenericString"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedAcceptWithPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedBlob"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedBoolean"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedByte"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithGenericString"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithoutBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedContentTypeWithPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedDouble"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedFloat"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedInteger"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedList"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedLong"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedMap"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedRequestBody"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedShort"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedString"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampBodyDateTime"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampBodyDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampBodyHttpDate"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDateTime"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampHeaderDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampHeaderEpoch"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampPathDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampPathEpoch"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampPathHttpDate"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampQueryDefault"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampQueryEpoch"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedTimestampQueryHttpDate"
                },
                {
                    "target": "aws.protocoltests.restjson#MalformedUnion"
                },
                {
                    "target": "aws.protocoltests.restjson#MediaTypeHeader"
                },
                {
                    "target": "aws.protocoltests.restjson#NoInputAndNoOutput"
                },
                {
                    "target": "aws.protocoltests.restjson#NoInputAndOutput"
                },
                {
                    "target": "aws.protocoltests.restjson#NullAndEmptyHeadersClient"
                },
                {
                    "target": "aws.protocoltests.restjson#NullAndEmptyHeadersServer"
                },
                {
                    "target": "aws.protocoltests.restjson#OmitsNullSerializesEmptyString"
                },
                {
                    "target": "aws.protocoltests.restjson#PostPlayerAction"
                },
                {
                    "target": "aws.protocoltests.restjson#PostUnionWithJsonName"
                },
                {
                    "target": "aws.protocoltests.restjson#QueryIdempotencyTokenAutoFill"
                },
                {
                    "target": "aws.protocoltests.restjson#QueryParamsAsStringListMap"
                },
                {
                    "target": "aws.protocoltests.restjson#QueryPrecedence"
                },
                {
                    "target": "aws.protocoltests.restjson#RecursiveShapes"
                },
                {
                    "target": "aws.protocoltests.restjson#SimpleScalarProperties"
                },
                {
                    "target": "aws.protocoltests.restjson#StreamingTraits"
                },
                {
                    "target": "aws.protocoltests.restjson#StreamingTraitsRequireLength"
                },
                {
                    "target": "aws.protocoltests.restjson#StreamingTraitsWithMediaType"
                },
                {
                    "target": "aws.protocoltests.restjson#TestBodyStructure"
                },
                {
                    "target": "aws.protocoltests.restjson#TestNoPayload"
                },
                {
                    "target": "aws.protocoltests.restjson#TestPayloadBlob"
                },
                {
                    "target": "aws.protocoltests.restjson#TestPayloadStructure"
                },
                {
                    "target": "aws.protocoltests.restjson#TimestampFormatHeaders"
                },
                {
                    "target": "aws.protocoltests.restjson#UnitInputAndOutput"
                }
            ],
            "rename": {
                "aws.protocoltests.restjson.nested#GreetingStruct": "RenamedGreeting"
            }
        },
        "aws.protocoltests.config#RetryConfig": {
            "type": "structure",
            "members": {
                "mode": {
                    "target": "aws.protocoltests.config#RetryMode"
                },
                "max_attempts": {
                    "target": "smithy.api#Short"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration specific to retries."
            }
        },
        "aws.protocoltests.config#RetryMode": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Controls the strategy used for retries.",
                "smithy.api#enum": [
                    {
                        "value": "legacy",
                        "name": "LEGACY"
                    },
                    {
                        "value": "standard",
                        "name": "STANDARD"
                    },
                    {
                        "value": "adaptive",
                        "name": "ADAPTIVE"
                    }
                ]
            }
        },
        "aws.protocoltests.config#S3AddressingStyle": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Controls the S3 addressing bucket style.",
                "smithy.api#enum": [
                    {
                        "value": "auto",
                        "name": "AUTO"
                    },
                    {
                        "value": "path",
                        "name": "PATH"
                    },
                    {
                        "value": "virtual",
                        "name": "VIRTUAL"
                    }
                ]
            }
        },
        "aws.protocoltests.config#S3Config": {
            "type": "structure",
            "members": {
                "addressing_style": {
                    "target": "aws.protocoltests.config#S3AddressingStyle"
                },
                "use_accelerate_endpoint": {
                    "target": "smithy.api#Boolean"
                },
                "use_dualstack_endpoint": {
                    "target": "smithy.api#Boolean"
                }
            },
            "traits": {
                "smithy.api#documentation": "Configuration specific to S3."
            }
        },
        "aws.protocoltests.config#ScopedConfig": {
            "type": "structure",
            "members": {
                "environment": {
                    "target": "aws.protocoltests.config#EnvironmentConfig"
                },
                "configFile": {
                    "target": "aws.protocoltests.config#ConfigFile"
                },
                "credentialsFile": {
                    "target": "aws.protocoltests.config#ConfigFile"
                },
                "client": {
                    "target": "aws.protocoltests.config#ClientConfig"
                },
                "operation": {
                    "target": "aws.protocoltests.config#OperationConfig"
                }
            },
            "traits": {
                "smithy.api#documentation": "Config settings that are scoped to different sources, such as environment\nvariables or the AWS config file."
            }
        },
        "com.amazonaws.glacier#ServiceUnavailableException": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "com.amazonaws.glacier#string"
                },
                "code": {
                    "target": "com.amazonaws.glacier#string"
                },
                "message": {
                    "target": "com.amazonaws.glacier#string"
                }
            },
            "traits": {
                "smithy.api#error": "server",
                "smithy.api#httpError": 500
            }
        },
        "aws.protocoltests.restjson#SimpleList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.restjson#SimpleMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.restjson#SimpleScalarProperties": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#SimpleScalarPropertiesInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#SimpleScalarPropertiesInputOutput"
            },
            "traits": {
                "smithy.api#http": {
                    "uri": "/SimpleScalarProperties",
                    "method": "PUT"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonSimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"stringValue\": \"string\",\n    \"trueBooleanValue\": true,\n    \"falseBooleanValue\": false,\n    \"byteValue\": 1,\n    \"shortValue\": 2,\n    \"integerValue\": 3,\n    \"longValue\": 4,\n    \"floatValue\": 5.5,\n    \"DoubleDribble\": 6.5\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "RestJsonDoesntSerializeNullStructureValues",
                        "documentation": "Rest Json should not serialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": null
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersDontSerializeNullStructureValues",
                        "documentation": "Rest Json should not deserialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"stringValue\": null\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {},
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"DoubleDribble\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"DoubleDribble\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/SimpleScalarProperties",
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"DoubleDribble\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonSimpleScalarProperties",
                        "documentation": "Serializes simple scalar properties",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": \"string\",\n    \"trueBooleanValue\": true,\n    \"falseBooleanValue\": false,\n    \"byteValue\": 1,\n    \"shortValue\": 2,\n    \"integerValue\": 3,\n    \"longValue\": 4,\n    \"floatValue\": 5.5,\n    \"DoubleDribble\": 6.5\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo",
                            "stringValue": "string",
                            "trueBooleanValue": true,
                            "falseBooleanValue": false,
                            "byteValue": 1,
                            "shortValue": 2,
                            "integerValue": 3,
                            "longValue": 4,
                            "floatValue": 5.5,
                            "doubleValue": 6.5
                        }
                    },
                    {
                        "id": "RestJsonDoesntDeserializeNullStructureValues",
                        "documentation": "Rest Json should not deserialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"stringValue\": null\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {},
                        "appliesTo": "client"
                    },
                    {
                        "id": "RestJsonServersDontSerializeNullStructureValues",
                        "documentation": "Rest Json should not serialize null structure values",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "stringValue": null
                        },
                        "appliesTo": "server"
                    },
                    {
                        "id": "RestJsonSupportsNaNFloatInputs",
                        "documentation": "Supports handling NaN float values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"NaN\",\n    \"DoubleDribble\": \"NaN\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "NaN",
                            "doubleValue": "NaN"
                        }
                    },
                    {
                        "id": "RestJsonSupportsInfinityFloatInputs",
                        "documentation": "Supports handling Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"Infinity\",\n    \"DoubleDribble\": \"Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "Infinity",
                            "doubleValue": "Infinity"
                        }
                    },
                    {
                        "id": "RestJsonSupportsNegativeInfinityFloatInputs",
                        "documentation": "Supports handling -Infinity float values.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "{\n    \"floatValue\": \"-Infinity\",\n    \"DoubleDribble\": \"-Infinity\"\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "params": {
                            "floatValue": "-Infinity",
                            "doubleValue": "-Infinity"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#SimpleScalarPropertiesInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "stringValue": {
                    "target": "smithy.api#String"
                },
                "trueBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "falseBooleanValue": {
                    "target": "smithy.api#Boolean"
                },
                "byteValue": {
                    "target": "smithy.api#Byte"
                },
                "shortValue": {
                    "target": "smithy.api#Short"
                },
                "integerValue": {
                    "target": "smithy.api#Integer"
                },
                "longValue": {
                    "target": "smithy.api#Long"
                },
                "floatValue": {
                    "target": "smithy.api#Float"
                },
                "doubleValue": {
                    "target": "smithy.api#Double",
                    "traits": {
                        "smithy.api#jsonName": "DoubleDribble"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#SimpleUnion": {
            "type": "union",
            "members": {
                "int": {
                    "target": "smithy.api#Integer"
                },
                "string": {
                    "target": "smithy.api#String"
                }
            }
        },
        "aws.protocoltests.restjson#SparseBooleanMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Boolean"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.restjson#SparseNumberMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#Integer"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.restjson#SparseSetMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#StringSet"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.shared#SparseStringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.shared#SparseStringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "aws.protocoltests.restjson#SparseStructMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#GreetingStruct"
            },
            "traits": {
                "smithy.api#sparse": {}
            }
        },
        "com.amazonaws.glacier#Stream": {
            "type": "blob",
            "traits": {
                "smithy.api#streaming": {}
            }
        },
        "aws.protocoltests.restjson#StreamingBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#streaming": {}
            }
        },
        "aws.protocoltests.restjson#StreamingTextPlainBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#mediaType": "text/plain",
                "smithy.api#streaming": {}
            }
        },
        "aws.protocoltests.restjson#StreamingTraits": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StreamingTraitsInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#StreamingTraitsInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a streaming blob shape in the request body.\n\nIn this example, no JSON document is synthesized because the payload is\nnot a structure or a union type.",
                "smithy.api#http": {
                    "uri": "/StreamingTraits",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraits",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "application/octet-stream"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonStreamingTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraits",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "application/octet-stream"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonStreamingTraitsWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.restjson#StreamingBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsRequireLength": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StreamingTraitsRequireLengthInput"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a streaming blob shape with a required content\nlength in the request body.\n\nIn this example, no JSON document is synthesized because the payload is\nnot a structure or a union type.",
                "smithy.api#http": {
                    "uri": "/StreamingTraitsRequireLength",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonStreamingTraitsRequireLengthWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a required length",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraitsRequireLength",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "application/octet-stream"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    },
                    {
                        "id": "RestJsonStreamingTraitsRequireLengthWithNoBlobBody",
                        "documentation": "Serializes an empty blob in the HTTP payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraitsRequireLength",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo"
                        },
                        "params": {
                            "foo": "Foo"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsRequireLengthInput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.restjson#FiniteStreamingBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            },
            "traits": {
                "smithy.api#input": {}
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsWithMediaType": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#StreamingTraitsWithMediaTypeInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#StreamingTraitsWithMediaTypeInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This examples serializes a streaming media-typed blob shape in the request body.\n\nThis examples uses a `@mediaType` trait on the payload to force a custom\ncontent-type to be serialized.",
                "smithy.api#http": {
                    "uri": "/StreamingTraitsWithMediaType",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/StreamingTraitsWithMediaType",
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonStreamingTraitsWithMediaTypeWithBlob",
                        "documentation": "Serializes a blob in the HTTP payload with a content-type",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": "blobby blob blob",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "X-Foo": "Foo",
                            "Content-Type": "text/plain"
                        },
                        "params": {
                            "foo": "Foo",
                            "blob": "blobby blob blob"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#StreamingTraitsWithMediaTypeInputOutput": {
            "type": "structure",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Foo"
                    }
                },
                "blob": {
                    "target": "aws.protocoltests.restjson#StreamingTextPlainBlob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "com.amazonaws.apigateway#String": {
            "type": "string"
        },
        "aws.protocoltests.restjson#StringEnum": {
            "type": "string",
            "traits": {
                "smithy.api#enum": [
                    {
                        "value": "enumvalue",
                        "name": "V"
                    }
                ]
            }
        },
        "smithy.test#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.shared#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.auth#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocols#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.apigateway#StringList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            }
        },
        "aws.protocoltests.shared#StringListMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.protocoltests.shared#StringList"
            }
        },
        "aws.protocoltests.shared#StringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            }
        },
        "smithy.test#StringMap": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#StringPayloadInput": {
            "type": "structure",
            "members": {
                "payload": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.shared#StringSet": {
            "type": "list",
            "member": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#uniqueItems": {}
            }
        },
        "aws.cloudformation#StructureIdList": {
            "type": "list",
            "member": {
                "target": "smithy.api#String",
                "traits": {
                    "smithy.api#idRef": {
                        "failWhenMissing": true,
                        "selector": "structure"
                    }
                }
            },
            "traits": {
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#StructureList": {
            "type": "list",
            "member": {
                "target": "aws.protocoltests.restjson#StructureListMember"
            }
        },
        "aws.protocoltests.restjson#StructureListMember": {
            "type": "structure",
            "members": {
                "a": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "value"
                    }
                },
                "b": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "other"
                    }
                }
            }
        },
        "aws.apigateway#Templates": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "smithy.api#String"
            },
            "traits": {
                "smithy.api#documentation": "<p>A map of MIME types to velocity templates allowing you to craft a new integration message from received data.</p><p><strong>Note:</strong> This feature is provided primarily to allow injecting static values and context variables for request parameters. Request data MAY be mapped to headers using the syntax described in <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/request-response-data-mappings.html#mapping-response-parameters\">the API Gateway Developer Guide</a>; however, the data must be identified according to its location in the serialized request, which may differ from protocol to protocol. Here be dragons!</p>",
                "smithy.api#private": {}
            }
        },
        "aws.protocoltests.restjson#TestBodyStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestBodyStructureInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestBodyStructureInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a structure in the HTTP body.\n\nIt should ensure Content-Type: application/json is\nused in all requests and that an \"empty\" body is\nan empty JSON document ({}).\n",
                "smithy.api#http": {
                    "uri": "/body",
                    "method": "POST"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonTestBodyStructure",
                        "documentation": "Serializes a structure",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/body",
                        "body": "{\"testConfig\":\n    {\"timeout\": 10}\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "testConfig": {
                                "timeout": 10
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpWithEmptyBody",
                        "documentation": "Serializes an empty structure in the body",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/body",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {}
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestBodyStructureInputOutput": {
            "type": "structure",
            "members": {
                "testId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-test-id"
                    }
                },
                "testConfig": {
                    "target": "aws.protocoltests.restjson#TestConfig"
                }
            }
        },
        "aws.protocoltests.restjson#TestConfig": {
            "type": "structure",
            "members": {
                "timeout": {
                    "target": "smithy.api#Integer"
                }
            }
        },
        "aws.protocoltests.restjson#TestNoPayload": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestNoPayloadInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestNoPayloadInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a request without an HTTP body.\n\nThese tests are to ensure we do not attach a body or related headers\n(Content-Length, Content-Type) to operations that semantically\ncannot produce an HTTP body.\n",
                "smithy.api#http": {
                    "uri": "/no_payload",
                    "method": "GET"
                },
                "smithy.api#readonly": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpWithNoModeledBody",
                        "documentation": "Serializes a GET request with no modeled body",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/no_payload",
                        "body": "",
                        "forbidHeaders": [
                            "Content-Length",
                            "Content-Type"
                        ],
                        "params": {}
                    },
                    {
                        "id": "RestJsonHttpWithHeaderMemberNoModeledBody",
                        "documentation": "Serializes a GET request with header member but no modeled body",
                        "protocol": "aws.protocols#restJson1",
                        "method": "GET",
                        "uri": "/no_payload",
                        "body": "",
                        "headers": {
                            "X-Amz-Test-Id": "t-12345"
                        },
                        "forbidHeaders": [
                            "Content-Length",
                            "Content-Type"
                        ],
                        "params": {
                            "testId": "t-12345"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestNoPayloadInputOutput": {
            "type": "structure",
            "members": {
                "testId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "X-Amz-Test-Id"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#TestPayloadBlob": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestPayloadBlobInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestPayloadBlobInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a payload targeting a blob.\n\nThe Blob shape is not structured content and we cannot\nmake assumptions about what data will be sent. This test ensures\nonly a generic \"Content-Type: application/octet-stream\" header\nis used, and that we are not treating an empty body as an\nempty JSON document.\n",
                "smithy.api#http": {
                    "uri": "/blob_payload",
                    "method": "POST"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpWithEmptyBlobPayload",
                        "documentation": "Serializes a payload targeting an empty blob",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/blob_payload",
                        "body": "",
                        "bodyMediaType": "application/octet-stream",
                        "headers": {
                            "Content-Type": "application/octet-stream"
                        },
                        "params": {}
                    },
                    {
                        "id": "RestJsonTestPayloadBlob",
                        "documentation": "Serializes a payload targeting a blob",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/blob_payload",
                        "body": "1234",
                        "bodyMediaType": "image/jpg",
                        "headers": {
                            "Content-Type": "image/jpg"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "contentType": "image/jpg",
                            "data": "1234"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestPayloadBlobInputOutput": {
            "type": "structure",
            "members": {
                "contentType": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Type"
                    }
                },
                "data": {
                    "target": "smithy.api#Blob",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.restjson#TestPayloadStructure": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TestPayloadStructureInputOutput"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TestPayloadStructureInputOutput"
            },
            "traits": {
                "smithy.api#documentation": "This example operation serializes a payload targeting a structure.\n\nThis enforces the same requirements as TestBodyStructure\nbut with the body specified by the @httpPayload trait.\n",
                "smithy.api#http": {
                    "uri": "/payload",
                    "method": "POST"
                },
                "smithy.api#idempotent": {},
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonHttpWithEmptyStructurePayload",
                        "documentation": "Serializes a payload targeting an empty structure",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/payload",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {}
                    },
                    {
                        "id": "RestJsonTestPayloadStructure",
                        "documentation": "Serializes a payload targeting a structure",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/payload",
                        "body": "{\"data\": 25\n}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "payloadConfig": {
                                "data": 25
                            }
                        }
                    },
                    {
                        "id": "RestJsonHttpWithHeadersButNoPayload",
                        "documentation": "Serializes an request with header members but no payload",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/payload",
                        "body": "{}",
                        "bodyMediaType": "application/json",
                        "headers": {
                            "Content-Type": "application/json",
                            "X-Amz-Test-Id": "t-12345"
                        },
                        "requireHeaders": [
                            "Content-Length"
                        ],
                        "params": {
                            "testId": "t-12345"
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TestPayloadStructureInputOutput": {
            "type": "structure",
            "members": {
                "testId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-test-id"
                    }
                },
                "payloadConfig": {
                    "target": "aws.protocoltests.restjson#PayloadConfig",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "aws.protocoltests.shared#TextPlainBlob": {
            "type": "blob",
            "traits": {
                "smithy.api#mediaType": "text/plain"
            }
        },
        "com.amazonaws.apigateway#Timestamp": {
            "type": "timestamp"
        },
        "aws.protocoltests.restjson#TimestampFormatHeaders": {
            "type": "operation",
            "input": {
                "target": "aws.protocoltests.restjson#TimestampFormatHeadersIO"
            },
            "output": {
                "target": "aws.protocoltests.restjson#TimestampFormatHeadersIO"
            },
            "traits": {
                "smithy.api#documentation": "This example tests how timestamp request and response headers are serialized.",
                "smithy.api#http": {
                    "uri": "/TimestampFormatHeaders",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonTimestampFormatHeaders",
                        "documentation": "Tests how timestamp request headers are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/TimestampFormatHeaders",
                        "headers": {
                            "X-memberEpochSeconds": "1576540098",
                            "X-memberHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-memberDateTime": "2019-12-16T23:48:18Z",
                            "X-defaultFormat": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetEpochSeconds": "1576540098",
                            "X-targetHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetDateTime": "2019-12-16T23:48:18Z"
                        },
                        "body": "",
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonTimestampFormatHeaders",
                        "documentation": "Tests how timestamp response headers are serialized",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "headers": {
                            "X-memberEpochSeconds": "1576540098",
                            "X-memberHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-memberDateTime": "2019-12-16T23:48:18Z",
                            "X-defaultFormat": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetEpochSeconds": "1576540098",
                            "X-targetHttpDate": "Mon, 16 Dec 2019 23:48:18 GMT",
                            "X-targetDateTime": "2019-12-16T23:48:18Z"
                        },
                        "params": {
                            "memberEpochSeconds": 1576540098,
                            "memberHttpDate": 1576540098,
                            "memberDateTime": 1576540098,
                            "defaultFormat": 1576540098,
                            "targetEpochSeconds": 1576540098,
                            "targetHttpDate": 1576540098,
                            "targetDateTime": 1576540098
                        }
                    }
                ]
            }
        },
        "aws.protocoltests.restjson#TimestampFormatHeadersIO": {
            "type": "structure",
            "members": {
                "memberEpochSeconds": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberEpochSeconds",
                        "smithy.api#timestampFormat": "epoch-seconds"
                    }
                },
                "memberHttpDate": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberHttpDate",
                        "smithy.api#timestampFormat": "http-date"
                    }
                },
                "memberDateTime": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-memberDateTime",
                        "smithy.api#timestampFormat": "date-time"
                    }
                },
                "defaultFormat": {
                    "target": "smithy.api#Timestamp",
                    "traits": {
                        "smithy.api#httpHeader": "X-defaultFormat"
                    }
                },
                "targetEpochSeconds": {
                    "target": "aws.protocoltests.shared#EpochSeconds",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetEpochSeconds"
                    }
                },
                "targetHttpDate": {
                    "target": "aws.protocoltests.shared#HttpDate",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetHttpDate"
                    }
                },
                "targetDateTime": {
                    "target": "aws.protocoltests.shared#DateTime",
                    "traits": {
                        "smithy.api#httpHeader": "X-targetDateTime"
                    }
                }
            }
        },
        "aws.protocoltests.shared#TimestampList": {
            "type": "list",
            "member": {
                "target": "smithy.api#Timestamp"
            }
        },
        "com.amazonaws.apigateway#TooManyRequestsException": {
            "type": "structure",
            "members": {
                "retryAfterSeconds": {
                    "target": "com.amazonaws.apigateway#String",
                    "traits": {
                        "smithy.api#httpHeader": "Retry-After"
                    }
                },
                "message": {
                    "target": "com.amazonaws.apigateway#String"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 429
            }
        },
        "com.amazonaws.apigateway#UnauthorizedException": {
            "type": "structure",
            "members": {
                "message": {
                    "target": "com.amazonaws.apigateway#String"
                }
            },
            "traits": {
                "smithy.api#error": "client",
                "smithy.api#httpError": 401
            }
        },
        "aws.protocoltests.restjson#UnionInputOutput": {
            "type": "structure",
            "members": {
                "contents": {
                    "target": "aws.protocoltests.restjson#MyUnion"
                }
            },
            "traits": {
                "smithy.api#documentation": "A shared structure that contains a single union member."
            }
        },
        "aws.protocoltests.restjson#UnionWithJsonName": {
            "type": "union",
            "members": {
                "foo": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "FOO"
                    }
                },
                "bar": {
                    "target": "smithy.api#String"
                },
                "baz": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#jsonName": "_baz"
                    }
                }
            }
        },
        "aws.protocoltests.restjson#UnitInputAndOutput": {
            "type": "operation",
            "input": {
                "target": "smithy.api#Unit"
            },
            "output": {
                "target": "smithy.api#Unit"
            },
            "traits": {
                "smithy.api#documentation": "This test is similar to NoInputAndNoOutput, but uses explicit Unit types.",
                "smithy.api#http": {
                    "uri": "/UnitInputAndOutput",
                    "method": "POST"
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "RestJsonUnitInputAndOutput",
                        "documentation": "A unit type input serializes no payload. When clients do not\nneed to serialize any data in the payload, they should omit\na payload altogether.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/UnitInputAndOutput",
                        "body": ""
                    },
                    {
                        "id": "RestJsonUnitInputAllowsAccept",
                        "documentation": "Servers should allow the accept header to be set to the\ndefault content-type.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/UnitInputAndOutput",
                        "body": "",
                        "headers": {
                            "Accept": "application/json"
                        },
                        "appliesTo": "server"
                    }
                ],
                "smithy.test#httpResponseTests": [
                    {
                        "id": "RestJsonUnitInputAndOutputNoOutput",
                        "documentation": "When an operation defines Unit output, the service will respond\nwith an empty payload, and may optionally include the content-type\nheader.",
                        "protocol": "aws.protocols#restJson1",
                        "code": 200,
                        "body": ""
                    }
                ]
            }
        },
        "com.amazonaws.glacier#UploadArchive": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.glacier#UploadArchiveInput"
            },
            "output": {
                "target": "com.amazonaws.glacier#ArchiveCreationOutput"
            },
            "errors": [
                {
                    "target": "com.amazonaws.glacier#InvalidParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#MissingParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#RequestTimeoutException"
                },
                {
                    "target": "com.amazonaws.glacier#ResourceNotFoundException"
                },
                {
                    "target": "com.amazonaws.glacier#ServiceUnavailableException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "method": "POST",
                    "uri": "/{accountId}/vaults/{vaultName}/archives",
                    "code": 201
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "GlacierVersionHeader",
                        "documentation": "Glacier requires that a version header be set on all requests.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/foo/vaults/bar/archives",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01"
                        },
                        "body": "",
                        "params": {
                            "accountId": "foo",
                            "vaultName": "bar"
                        }
                    },
                    {
                        "id": "GlacierChecksums",
                        "documentation": "Glacier requires checksum headers that are cumbersome to provide.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/foo/vaults/bar/archives",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01",
                            "X-Amz-Content-Sha256": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
                            "X-Amz-Sha256-Tree-Hash": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
                        },
                        "body": "hello world",
                        "params": {
                            "accountId": "foo",
                            "vaultName": "bar",
                            "body": "hello world"
                        },
                        "appliesTo": "client"
                    },
                    {
                        "id": "GlacierAccountId",
                        "documentation": "Glacier requires that the account id be set, but you can just use a\nhyphen (-) to indicate the current account. This should be default\nbehavior if the customer provides a null or empty string.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "POST",
                        "uri": "/-/vaults/bar/archives",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01"
                        },
                        "body": "",
                        "params": {
                            "accountId": "",
                            "vaultName": "bar"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "com.amazonaws.glacier#UploadArchiveInput": {
            "type": "structure",
            "members": {
                "vaultName": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "accountId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "archiveDescription": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-archive-description"
                    }
                },
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                },
                "body": {
                    "target": "com.amazonaws.glacier#Stream",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "com.amazonaws.glacier#UploadMultipartPart": {
            "type": "operation",
            "input": {
                "target": "com.amazonaws.glacier#UploadMultipartPartInput"
            },
            "output": {
                "target": "com.amazonaws.glacier#UploadMultipartPartOutput"
            },
            "errors": [
                {
                    "target": "com.amazonaws.glacier#InvalidParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#MissingParameterValueException"
                },
                {
                    "target": "com.amazonaws.glacier#RequestTimeoutException"
                },
                {
                    "target": "com.amazonaws.glacier#ResourceNotFoundException"
                },
                {
                    "target": "com.amazonaws.glacier#ServiceUnavailableException"
                }
            ],
            "traits": {
                "smithy.api#http": {
                    "method": "PUT",
                    "uri": "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
                    "code": 204
                },
                "smithy.test#httpRequestTests": [
                    {
                        "id": "GlacierMultipartChecksums",
                        "documentation": "Glacier requires checksum headers that are cumbersome to provide.",
                        "protocol": "aws.protocols#restJson1",
                        "method": "PUT",
                        "uri": "/foo/vaults/bar/multipart-uploads/baz",
                        "headers": {
                            "X-Amz-Glacier-Version": "2012-06-01",
                            "X-Amz-Content-Sha256": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
                            "X-Amz-Sha256-Tree-Hash": "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9"
                        },
                        "body": "hello world",
                        "params": {
                            "accountId": "foo",
                            "vaultName": "bar",
                            "uploadId": "baz",
                            "body": "hello world"
                        },
                        "appliesTo": "client"
                    }
                ]
            }
        },
        "com.amazonaws.glacier#UploadMultipartPartInput": {
            "type": "structure",
            "members": {
                "accountId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "vaultName": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "uploadId": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpLabel": {},
                        "smithy.api#required": {}
                    }
                },
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                },
                "range": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "Content-Range"
                    }
                },
                "body": {
                    "target": "com.amazonaws.glacier#Stream",
                    "traits": {
                        "smithy.api#httpPayload": {}
                    }
                }
            }
        },
        "com.amazonaws.glacier#UploadMultipartPartOutput": {
            "type": "structure",
            "members": {
                "checksum": {
                    "target": "com.amazonaws.glacier#string",
                    "traits": {
                        "smithy.api#httpHeader": "x-amz-sha256-tree-hash"
                    }
                }
            }
        },
        "aws.iam#actionPermissionDescription": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "A brief description of what granting the user permission to invoke an operation would entail. This description should begin with something similar to 'Enables the user to...' or 'Grants permission to...'",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "aws.apigateway#apiKeySource": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Specifies the source of the caller identifier that will be used to throttle API methods that require a key.",
                "smithy.api#externalDocumentation": {
                    "Developer Guide": "https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-api-key-source.html"
                },
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.api#arn": {
            "type": "structure",
            "members": {
                "template": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "absolute": {
                    "target": "smithy.api#Boolean"
                },
                "noRegion": {
                    "target": "smithy.api#Boolean"
                },
                "noAccount": {
                    "target": "smithy.api#Boolean"
                }
            },
            "traits": {
                "smithy.api#documentation": "Specifies an ARN template for the resource.",
                "smithy.api#externalDocumentation": {
                    "Reference": "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
                },
                "smithy.api#trait": {
                    "selector": "resource"
                }
            }
        },
        "aws.api#arnReference": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "smithy.api#String"
                },
                "resource": {
                    "target": "smithy.api#String"
                },
                "service": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#documentation": "Marks a string as containing an ARN.",
                "smithy.api#trait": {
                    "selector": "string"
                }
            }
        },
        "aws.apigateway#authorizer": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Attaches an authorizer to a service, resource, or operation.",
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": ":test(service, resource, operation)"
                }
            }
        },
        "aws.apigateway#authorizers": {
            "type": "map",
            "key": {
                "target": "smithy.api#String"
            },
            "value": {
                "target": "aws.apigateway#AuthorizerDefinition"
            },
            "traits": {
                "smithy.api#documentation": "A list of API Gateway authorizers to augment the service's declared authentication mechanisms.",
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.protocols#awsJson1_0": {
            "type": "structure",
            "members": {
                "http": {
                    "target": "aws.protocols#StringList"
                },
                "eventStreamHttp": {
                    "target": "aws.protocols#StringList"
                }
            },
            "traits": {
                "smithy.api#documentation": "An RPC-based protocol that sends JSON payloads. This protocol does not use HTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#jsonName",
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.protocols#awsJson1_1": {
            "type": "structure",
            "members": {
                "http": {
                    "target": "aws.protocols#StringList"
                },
                "eventStreamHttp": {
                    "target": "aws.protocols#StringList"
                }
            },
            "traits": {
                "smithy.api#documentation": "An RPC-based protocol that sends JSON payloads. This protocol does not use HTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#jsonName",
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.protocols#awsQuery": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#deprecated": {},
                "smithy.api#documentation": "An RPC-based protocol that sends 'POST' requests in the body as `x-www-form-urlencoded` strings and responses in XML documents. This protocol does not use HTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "noInlineDocumentSupport": true,
                    "traits": [
                        "aws.protocols#awsQueryError",
                        "smithy.api#xmlAttribute",
                        "smithy.api#xmlFlattened",
                        "smithy.api#xmlName",
                        "smithy.api#xmlNamespace",
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service [trait|xmlNamespace]"
                }
            }
        },
        "aws.protocols#awsQueryError": {
            "type": "structure",
            "members": {
                "code": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The value used to distinguish this error shape during serialization.",
                        "smithy.api#required": {}
                    }
                },
                "httpResponseCode": {
                    "target": "smithy.api#Integer",
                    "traits": {
                        "smithy.api#documentation": "The HTTP response code used on a response containing this error shape.",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Provides the value in the 'Code' distinguishing field and HTTP response code for an operation error.",
                "smithy.api#trait": {
                    "selector": "structure [trait|error]",
                    "breakingChanges": [
                        {
                            "change": "any"
                        }
                    ]
                }
            }
        },
        "aws.cloudformation#cfnAdditionalIdentifier": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates that the CloudFormation property generated from this member is an\nadditional identifier for the resource.",
                "smithy.api#trait": {
                    "selector": "structure > :test(member > string)",
                    "conflicts": [
                        "aws.cloudformation#cfnExcludeProperty"
                    ],
                    "breakingChanges": [
                        {
                            "change": "remove"
                        }
                    ]
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.cloudformation#cfnExcludeProperty": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates that a structure member should not be included in generated\nCloudFormation resource definitions.",
                "smithy.api#trait": {
                    "selector": "structure > member",
                    "conflicts": [
                        "aws.cloudformation#cfnAdditionalIdentifier",
                        "aws.cloudformation#cfnMutability"
                    ],
                    "breakingChanges": [
                        {
                            "change": "add"
                        }
                    ]
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.cloudformation#cfnMutability": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Indicates an explicit CloudFormation mutability of the structure member\nwhen part of a CloudFormation resource.",
                "smithy.api#enum": [
                    {
                        "value": "full",
                        "name": "FULL",
                        "documentation": "Indicates that the CloudFormation property generated from this\nmember does not have any mutability restrictions, meaning that it\ncan be specified by the user and returned in a `read` or `list`\nrequest."
                    },
                    {
                        "value": "create-and-read",
                        "name": "CREATE_AND_READ",
                        "documentation": "Indicates that the CloudFormation property generated from this\nmember can be specified only during resource creation and can be\nreturned in a `read` or `list` request."
                    },
                    {
                        "value": "create",
                        "name": "CREATE",
                        "documentation": "Indicates that the CloudFormation property generated from this\nmember can be specified only during resource creation and cannot\nbe returned in a `read` or `list` request. MUST NOT be set if the\nmember is also marked with the `@additionalIdentifier` trait."
                    },
                    {
                        "value": "read",
                        "name": "READ",
                        "documentation": "Indicates that the CloudFormation property generated from this\nmember can be returned by a `read` or `list` request, but\ncannot be set by the user."
                    },
                    {
                        "value": "write",
                        "name": "WRITE",
                        "documentation": "Indicates that the CloudFormation property generated from this\nmember can be specified by the user, but cannot be returned by a\n`read` or `list` request. MUST NOT be set if the member is also\nmarked with the `@additionalIdentifier` trait."
                    }
                ],
                "smithy.api#trait": {
                    "selector": "structure > member",
                    "conflicts": [
                        "aws.cloudformation#cfnExcludeProperty"
                    ]
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.cloudformation#cfnName": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "The cloudFormationName trait allows a CloudFormation resource property name\nto differ from a structure member name used in the model.",
                "smithy.api#trait": {
                    "selector": "structure > member",
                    "breakingChanges": [
                        {
                            "change": "any"
                        }
                    ]
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.cloudformation#cfnResource": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Provides a custom CloudFormation resource name."
                    }
                },
                "additionalSchemas": {
                    "target": "aws.cloudformation#StructureIdList",
                    "traits": {
                        "smithy.api#documentation": "A list of additional shape IDs of structures that will have their\nproperties added to the CloudFormation resource."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Indicates that a Smithy resource is a CloudFormation resource.",
                "smithy.api#trait": {
                    "selector": "resource",
                    "breakingChanges": [
                        {
                            "change": "presence"
                        }
                    ]
                },
                "smithy.api#unstable": {}
            }
        },
        "aws.api#clientDiscoveredEndpoint": {
            "type": "structure",
            "members": {
                "required": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Indicates that the target operation should use the client's endpoint discovery logic.",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "aws.api#clientEndpointDiscovery": {
            "type": "structure",
            "members": {
                "operation": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Indicates the operation that clients should use to discover endpoints for the service.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true,
                            "selector": "operation"
                        },
                        "smithy.api#required": {}
                    }
                },
                "error": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Indicates the error that tells clients that the endpoint they are using is no longer valid. This error MUST be bound to any operation bound to the service which is marked with the aws.api#clientDiscoveredEndpoint trait.",
                        "smithy.api#idRef": {
                            "failWhenMissing": true,
                            "selector": "structure[trait|error]"
                        },
                        "smithy.api#recommended": {}
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Configures endpoint discovery for the service.",
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.api#clientEndpointDiscoveryId": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates members of the operation input which should be use to discover endpoints.",
                "smithy.api#trait": {
                    "selector": "operation[trait|aws.api#clientDiscoveredEndpoint] -[input]-> structure > :test(member[trait|required] > string)"
                }
            }
        },
        "aws.auth#cognitoUserPools": {
            "type": "structure",
            "members": {
                "providerArns": {
                    "target": "aws.auth#StringList",
                    "traits": {
                        "smithy.api#documentation": "A list of the Amazon Cognito user pool ARNs. Each element is of this format: arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}.",
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#authDefinition": {},
                "smithy.api#documentation": "Configures an Amazon Cognito User Pools auth scheme.",
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.iam#conditionKeys": {
            "type": "list",
            "member": {
                "target": "aws.iam#IamIdentifier"
            },
            "traits": {
                "smithy.api#documentation": "Applies condition keys by name to a resource or operation.",
                "smithy.api#trait": {
                    "selector": ":test(resource, operation)"
                }
            }
        },
        "aws.api#controlPlane": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Defines a service, resource, or operation as operating on the control plane.",
                "smithy.api#trait": {
                    "selector": ":test(service, resource, operation)",
                    "conflicts": [
                        "aws.api#dataPlane"
                    ]
                }
            }
        },
        "aws.api#data": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Designates the target as containing data of a known classification level.",
                "smithy.api#enum": [
                    {
                        "value": "content",
                        "name": "CUSTOMER_CONTENT",
                        "documentation": "Customer content means any software (including machine images), data, text, audio, video or images that customers or any customer end user transfers to AWS for processing, storage or hosting by AWS services in connection with the customer?s accounts and any computational results that customers or any customer end user derive from the foregoing through their use of AWS services."
                    },
                    {
                        "value": "account",
                        "name": "CUSTOMER_ACCOUNT_INFORMATION",
                        "documentation": "Account information means information about customers that customers provide to AWS in connection with the creation or administration of customers? accounts."
                    },
                    {
                        "value": "usage",
                        "name": "SERVICE_ATTRIBUTES",
                        "documentation": "Service Attributes means service usage data related to a customer?s account, such as resource identifiers, metadata tags, security and access roles, rules, usage policies, permissions, usage statistics, logging data, and analytics."
                    },
                    {
                        "value": "tagging",
                        "name": "TAG_DATA",
                        "documentation": "Designates metadata tags applied to AWS resources."
                    },
                    {
                        "value": "permissions",
                        "name": "PERMISSIONS_DATA",
                        "documentation": "Designates security and access roles, rules, usage policies, and permissions."
                    }
                ],
                "smithy.api#trait": {
                    "selector": ":test(simpleType, collection, structure, union, member)"
                }
            }
        },
        "aws.api#dataPlane": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Defines a service, resource, or operation as operating on the data plane.",
                "smithy.api#trait": {
                    "selector": ":test(service, resource, operation)",
                    "conflicts": [
                        "aws.api#controlPlane"
                    ]
                }
            }
        },
        "aws.iam#defineConditionKeys": {
            "type": "map",
            "key": {
                "target": "aws.iam#IamIdentifier"
            },
            "value": {
                "target": "aws.iam#ConditionKeyDefinition"
            },
            "traits": {
                "smithy.api#documentation": "Defines the set of condition keys that appear within a service in addition to inferred and global condition keys.",
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.iam#disableConditionKeyInference": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Disables the automatic inference of condition keys of a resource.",
                "smithy.api#trait": {
                    "selector": "resource"
                }
            }
        },
        "aws.protocols#ec2Query": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#deprecated": {},
                "smithy.api#documentation": "An RPC-based protocol that sends 'POST' requests in the body as Amazon EC2 formatted `x-www-form-urlencoded` strings and responses in XML documents. This protocol does not use HTTP binding traits.",
                "smithy.api#protocolDefinition": {
                    "noInlineDocumentSupport": true,
                    "traits": [
                        "aws.protocols#ec2QueryName",
                        "smithy.api#xmlAttribute",
                        "smithy.api#xmlFlattened",
                        "smithy.api#xmlName",
                        "smithy.api#xmlNamespace",
                        "smithy.api#timestampFormat",
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service [trait|xmlNamespace]"
                }
            }
        },
        "aws.protocols#ec2QueryName": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Indicates the serialized name of a structure member when that structure is serialized for the input of an EC2 operation.",
                "smithy.api#pattern": "^[a-zA-Z_][a-zA-Z_0-9-]*$",
                "smithy.api#trait": {
                    "selector": "structure > member"
                }
            }
        },
        "aws.protocols#httpChecksum": {
            "type": "structure",
            "members": {
                "requestAlgorithmMember": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines a top-level operation input member that is used to configure request checksum behavior."
                    }
                },
                "requestChecksumRequired": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#documentation": "Indicates an operation requires a checksum in its HTTP request."
                    }
                },
                "requestValidationModeMember": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "Defines a top-level operation input member used to opt-in to response checksum validation."
                    }
                },
                "responseAlgorithms": {
                    "target": "aws.protocols#ChecksumAlgorithmSet",
                    "traits": {
                        "smithy.api#documentation": "Defines the checksum algorithms clients should look for when performing HTTP response checksum validation."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Indicates that an operation supports checksum validation.",
                "smithy.api#trait": {
                    "selector": "operation"
                },
                "smithy.api#unstable": {}
            }
        },
        "smithy.test#httpMalformedRequestTests": {
            "type": "list",
            "member": {
                "target": "smithy.test#HttpMalformedRequestTestCase"
            },
            "traits": {
                "smithy.api#documentation": "Define how a malformed HTTP request is rejected by a server given a specific protocol",
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#trait": {
                    "selector": "operation"
                },
                "smithy.api#unstable": {}
            }
        },
        "smithy.test#httpRequestTests": {
            "type": "list",
            "member": {
                "target": "smithy.test#HttpRequestTestCase"
            },
            "traits": {
                "smithy.api#documentation": "Define how an HTTP request is serialized given a specific protocol,\nauthentication scheme, and set of input parameters.",
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "smithy.test#httpResponseTests": {
            "type": "list",
            "member": {
                "target": "smithy.test#HttpResponseTestCase"
            },
            "traits": {
                "smithy.api#documentation": "Define how an HTTP response is serialized given a specific protocol,\nauthentication scheme, and set of output or error parameters.",
                "smithy.api#length": {
                    "min": 1
                },
                "smithy.api#trait": {
                    "selector": ":test(operation, structure[trait|error])"
                }
            }
        },
        "aws.iam#iamResource": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The name of the resource in AWS IAM."
                    }
                }
            },
            "traits": {
                "smithy.api#documentation": "Indicates properties of a Smithy resource in AWS IAM.",
                "smithy.api#trait": {
                    "selector": "resource"
                }
            }
        },
        "aws.apigateway#integration": {
            "type": "structure",
            "members": {
                "type": {
                    "target": "aws.apigateway#IntegrationType",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "uri": {
                    "target": "aws.apigateway#Arn",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "credentials": {
                    "target": "aws.apigateway#IamRoleArn"
                },
                "httpMethod": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "passThroughBehavior": {
                    "target": "aws.apigateway#PassThroughBehavior"
                },
                "contentHandling": {
                    "target": "aws.apigateway#ContentHandling"
                },
                "timeoutInMillis": {
                    "target": "smithy.api#Integer"
                },
                "connectionId": {
                    "target": "smithy.api#String"
                },
                "connectionType": {
                    "target": "aws.apigateway#ConnectionType"
                },
                "cacheNamespace": {
                    "target": "smithy.api#String"
                },
                "payloadFormatVersion": {
                    "target": "smithy.api#String"
                },
                "cacheKeyParameters": {
                    "target": "aws.apigateway#StringList"
                },
                "requestParameters": {
                    "target": "aws.apigateway#RequestParameters"
                },
                "requestTemplates": {
                    "target": "aws.apigateway#Templates"
                },
                "responses": {
                    "target": "aws.apigateway#IntegrationResponses"
                }
            },
            "traits": {
                "smithy.api#documentation": "Defines an API Gateway integration.",
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": ":test(service, resource, operation)",
                    "conflicts": [
                        "aws.apigateway#mockIntegration"
                    ]
                }
            }
        },
        "aws.apigateway#mockIntegration": {
            "type": "structure",
            "members": {
                "passThroughBehavior": {
                    "target": "aws.apigateway#PassThroughBehavior"
                },
                "requestParameters": {
                    "target": "aws.apigateway#RequestParameters"
                },
                "requestTemplates": {
                    "target": "aws.apigateway#Templates"
                },
                "responses": {
                    "target": "aws.apigateway#IntegrationResponses"
                }
            },
            "traits": {
                "smithy.api#documentation": "Defines an API Gateway mock integration.",
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": ":test(service, resource, operation)",
                    "conflicts": [
                        "aws.apigateway#integration"
                    ]
                }
            }
        },
        "smithy.mqtt#mqttJson": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#protocolDefinition": {},
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "smithy.mqtt#publish": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^[^#+]+$",
                "smithy.api#trait": {
                    "selector": "operation :not(-[output]-> * > member)",
                    "conflicts": [
                        "smithy.mqtt#subscribe"
                    ],
                    "breakingChanges": [
                        {
                            "change": "any"
                        }
                    ]
                }
            }
        },
        "aws.apigateway#requestValidator": {
            "type": "string",
            "traits": {
                "smithy.api#documentation": "Selects which request validation strategy to use. One of: 'full', 'params-only', 'body-only'",
                "smithy.api#internal": {},
                "smithy.api#tags": [
                    "internal"
                ],
                "smithy.api#trait": {
                    "selector": ":test(service, operation)"
                }
            }
        },
        "aws.iam#requiredActions": {
            "type": "list",
            "member": {
                "target": "aws.iam#IamIdentifier"
            },
            "traits": {
                "smithy.api#documentation": "Other actions that the invoker must be authorized to perform when executing the targeted operation.",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "aws.protocols#restJson1": {
            "type": "structure",
            "members": {
                "http": {
                    "target": "aws.protocols#StringList"
                },
                "eventStreamHttp": {
                    "target": "aws.protocols#StringList"
                }
            },
            "traits": {
                "smithy.api#documentation": "A RESTful protocol that sends JSON in structured payloads.",
                "smithy.api#protocolDefinition": {
                    "traits": [
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel",
                        "smithy.api#http",
                        "smithy.api#httpError",
                        "smithy.api#httpHeader",
                        "smithy.api#httpLabel",
                        "smithy.api#httpPayload",
                        "smithy.api#httpPrefixHeaders",
                        "smithy.api#httpQuery",
                        "smithy.api#httpQueryParams",
                        "smithy.api#httpResponseCode",
                        "smithy.api#jsonName",
                        "smithy.api#timestampFormat"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.protocols#restXml": {
            "type": "structure",
            "members": {
                "http": {
                    "target": "aws.protocols#StringList"
                },
                "eventStreamHttp": {
                    "target": "aws.protocols#StringList"
                },
                "noErrorWrapping": {
                    "target": "smithy.api#Boolean",
                    "traits": {
                        "smithy.api#deprecated": {},
                        "smithy.api#documentation": "Disables the serialization wrapping of error properties in an 'Error' XML element."
                    }
                }
            },
            "traits": {
                "smithy.api#deprecated": {},
                "smithy.api#documentation": "A RESTful protocol that sends XML in structured payloads.",
                "smithy.api#protocolDefinition": {
                    "noInlineDocumentSupport": true,
                    "traits": [
                        "smithy.api#cors",
                        "smithy.api#endpoint",
                        "smithy.api#hostLabel",
                        "smithy.api#http",
                        "smithy.api#httpError",
                        "smithy.api#httpHeader",
                        "smithy.api#httpLabel",
                        "smithy.api#httpPayload",
                        "smithy.api#httpPrefixHeaders",
                        "smithy.api#httpQuery",
                        "smithy.api#httpQueryParams",
                        "smithy.api#httpResponseCode",
                        "smithy.api#xmlAttribute",
                        "smithy.api#xmlFlattened",
                        "smithy.api#xmlName",
                        "smithy.api#xmlNamespace"
                    ]
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.customizations#s3UnwrappedXmlOutput": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates the response body from S3 is not wrapped in the aws-restxml-protocol operation-level XML node. Intended to only be used by AWS S3.",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        },
        "aws.api#service": {
            "type": "structure",
            "members": {
                "sdkId": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#required": {}
                    }
                },
                "arnNamespace": {
                    "target": "aws.api#ArnNamespace"
                },
                "cloudFormationName": {
                    "target": "aws.api#CloudFormationName"
                },
                "cloudTrailEventSource": {
                    "target": "smithy.api#String"
                },
                "endpointPrefix": {
                    "target": "smithy.api#String"
                }
            },
            "traits": {
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "aws.auth#sigv4": {
            "type": "structure",
            "members": {
                "name": {
                    "target": "smithy.api#String",
                    "traits": {
                        "smithy.api#documentation": "The signature version 4 service signing name to use in the credential scope when signing requests. This value SHOULD match the `arnNamespace` property of the `aws.api#service-trait`.",
                        "smithy.api#externalDocumentation": {
                            "Reference": "https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html"
                        },
                        "smithy.api#length": {
                            "min": 1
                        },
                        "smithy.api#required": {}
                    }
                }
            },
            "traits": {
                "smithy.api#authDefinition": {
                    "traits": [
                        "aws.auth#unsignedPayload"
                    ]
                },
                "smithy.api#documentation": "Signature Version 4 is the process to add authentication information to AWS requests sent by HTTP. For security, most requests to AWS must be signed with an access key, which consists of an access key ID and secret access key. These two keys are commonly referred to as your security credentials.",
                "smithy.api#externalDocumentation": {
                    "Reference": "https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"
                },
                "smithy.api#trait": {
                    "selector": "service"
                }
            }
        },
        "com.amazonaws.glacier#string": {
            "type": "string"
        },
        "smithy.mqtt#subscribe": {
            "type": "string",
            "traits": {
                "smithy.api#pattern": "^[^#+]+$",
                "smithy.api#trait": {
                    "selector": "operation:test(-[output]-> structure > member > union[trait|streaming])",
                    "conflicts": [
                        "smithy.mqtt#publish"
                    ],
                    "breakingChanges": [
                        {
                            "change": "any"
                        }
                    ]
                }
            }
        },
        "aws.iam#supportedPrincipalTypes": {
            "type": "list",
            "member": {
                "target": "aws.iam#PrincipalType"
            },
            "traits": {
                "smithy.api#documentation": "The principal types that can use the service or operation.",
                "smithy.api#trait": {
                    "selector": ":test(service, operation)"
                }
            }
        },
        "smithy.mqtt#topicLabel": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#trait": {
                    "selector": "member[trait|required] :test(> :test(string, byte, short, integer, long, boolean, timestamp))"
                }
            }
        },
        "aws.auth#unsignedPayload": {
            "type": "structure",
            "members": {},
            "traits": {
                "smithy.api#documentation": "Indicates that the request payload of a signed request is not to be used as part of the signature.",
                "smithy.api#trait": {
                    "selector": "operation"
                }
            }
        }
    }
}
