include: package:lints/recommended.yaml

analyzer:
  language:
    strict-casts: true
    strict-inference: true
  errors:
    depend_on_referenced_packages: error               # To prevent issues publishing.

linter:
  rules:
    - always_declare_return_types                      # To ensure that functions do not implicitly return dynamic.
    - avoid_catches_without_on_clauses                 # To encourage thoughtfulness when introducing catch clauses and to avoid catching Errors unless specifically required.
    - avoid_equals_and_hash_code_on_mutable_classes    # To prevent issues with hash sets and maps.
    - avoid_positional_boolean_parameters              # To avoid function calls lacking context.
    - avoid_print                                      # To avoid printing debug information in release mode.
    - avoid_type_to_string                             # To avoid issues when compiling to Web.
    - avoid_unused_constructor_parameters              # To keep code concise and purposeful.
    - avoid_void_async                                 # To provide context via the type system and allow the ability to await when necessary.
    - cancel_subscriptions                             # To avoid memory leaks and to prevent code from firing after a subscription is no longer being used.
    - close_sinks                                      # To avoid memory leaks.
    - depend_on_referenced_packages                    # To prevent issues publishing.
    - directives_ordering                              # To maintain visual separation of a fileâ€™s imports.
    - missing_whitespace_between_adjacent_strings      # To prevent sentences which are smashedtogether.
    - only_throw_errors                                # To ensure downstream exception handling always works.
    - package_api_docs                                 # To ensure public APIs have proper context and explanation.
    - prefer_asserts_with_message                      # To provide context to developers and users.
    - prefer_const_constructors                        # To allow for compile-time optimizations.
    - prefer_const_constructors_in_immutables          # To allow for compile-time optimizations.
    - prefer_const_declarations                        # To utilize compile-time optimizations.
    - prefer_const_literals_to_create_immutables       # To utilize compile-time optimizations.
    - prefer_single_quotes                             # To encourage consistent styling.
    - public_member_api_docs                           # To provide users with ample context and explanation.
    - sort_unnamed_constructors_first                  # To provide organization and quick exploration.
    - sort_pub_dependencies                            # To simplify searching a large list.
    - type_annotate_public_apis                        # To ensure public APIs provide type safety.
    - unnecessary_await_in_return                      # To make code more concise and to encourage mindfulness about where Futures are awaited.
    - unnecessary_lambdas                              # To make code more concise.
