//
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class AmplifyNativeLegacyPluginPigeonCodecReader: FlutterStandardReader {
}

private class AmplifyNativeLegacyPluginPigeonCodecWriter: FlutterStandardWriter {
}

private class AmplifyNativeLegacyPluginPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return AmplifyNativeLegacyPluginPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return AmplifyNativeLegacyPluginPigeonCodecWriter(data: data)
  }
}

class AmplifyNativeLegacyPluginPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = AmplifyNativeLegacyPluginPigeonCodec(readerWriter: AmplifyNativeLegacyPluginPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LegacyNativePlugin {
  func configure(config: String, completion: @escaping (Result<Void, Error>) -> Void)
  func signOut(completion: @escaping (Result<Void, Error>) -> Void)
  func signIn(username: String, password: String, completion: @escaping (Result<Void, Error>) -> Void)
  func rememberDevice(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LegacyNativePluginSetup {
  static var codec: FlutterStandardMessageCodec { AmplifyNativeLegacyPluginPigeonCodec.shared }
  /// Sets up an instance of `LegacyNativePlugin` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LegacyNativePlugin?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let configureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_native_legacy_wrapper.LegacyNativePlugin.configure\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      configureChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! String
        api.configure(config: configArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      configureChannel.setMessageHandler(nil)
    }
    let signOutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_native_legacy_wrapper.LegacyNativePlugin.signOut\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signOutChannel.setMessageHandler { _, reply in
        api.signOut { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      signOutChannel.setMessageHandler(nil)
    }
    let signInChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_native_legacy_wrapper.LegacyNativePlugin.signIn\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signInChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usernameArg = args[0] as! String
        let passwordArg = args[1] as! String
        api.signIn(username: usernameArg, password: passwordArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      signInChannel.setMessageHandler(nil)
    }
    let rememberDeviceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_native_legacy_wrapper.LegacyNativePlugin.rememberDevice\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      rememberDeviceChannel.setMessageHandler { _, reply in
        api.rememberDevice { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      rememberDeviceChannel.setMessageHandler(nil)
    }
  }
}
