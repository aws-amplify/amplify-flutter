// ignore_for_file: camel_case_types, non_constant_identifier_names, require_trailing_commas, sort_constructors_first

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;
import '../glib/glib.dart' as glib;

/// Bindings to gio
class Gio {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Gio(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Gio.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<pkg_ffi.Utf8> g_application_get_application_id(
    ffi.Pointer<GApplication> application,
  ) {
    return _g_application_get_application_id(
      application,
    );
  }

  late final _g_application_get_application_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Utf8> Function(
              ffi.Pointer<GApplication>)>>('g_application_get_application_id');
  late final _g_application_get_application_id =
      _g_application_get_application_idPtr.asFunction<
          ffi.Pointer<pkg_ffi.Utf8> Function(ffi.Pointer<GApplication>)>();

  ffi.Pointer<GApplication> g_application_get_default() {
    return _g_application_get_default();
  }

  late final _g_application_get_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GApplication> Function()>>(
          'g_application_get_default');
  late final _g_application_get_default = _g_application_get_defaultPtr
      .asFunction<ffi.Pointer<GApplication> Function()>();
}

typedef GApplication = _GApplication;

final class _GApplication extends ffi.Struct {
  external glib.GObject parent_instance;

  external ffi.Pointer<GApplicationPrivate> priv;
}

typedef GApplicationPrivate = _GApplicationPrivate;

final class _GApplicationPrivate extends ffi.Opaque {}
