// ignore_for_file: camel_case_types, non_constant_identifier_names, require_trailing_commas, sort_constructors_first

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to glib
class Glib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Glib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Glib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<GHashTable> g_hash_table_new(
    GHashFunc hash_func,
    GEqualFunc key_equal_func,
  ) {
    return _g_hash_table_new(
      hash_func,
      key_equal_func,
    );
  }

  late final _g_hash_table_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GHashTable> Function(
              GHashFunc, GEqualFunc)>>('g_hash_table_new');
  late final _g_hash_table_new = _g_hash_table_newPtr
      .asFunction<ffi.Pointer<GHashTable> Function(GHashFunc, GEqualFunc)>();

  void g_hash_table_destroy(
    ffi.Pointer<GHashTable> hash_table,
  ) {
    return _g_hash_table_destroy(
      hash_table,
    );
  }

  late final _g_hash_table_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GHashTable>)>>(
          'g_hash_table_destroy');
  late final _g_hash_table_destroy = _g_hash_table_destroyPtr
      .asFunction<void Function(ffi.Pointer<GHashTable>)>();

  int g_hash_table_insert(
    ffi.Pointer<GHashTable> hash_table,
    gpointer key,
    gpointer value,
  ) {
    return _g_hash_table_insert(
      hash_table,
      key,
      value,
    );
  }

  late final _g_hash_table_insertPtr = _lookup<
      ffi.NativeFunction<
          gboolean Function(ffi.Pointer<GHashTable>, gpointer,
              gpointer)>>('g_hash_table_insert');
  late final _g_hash_table_insert = _g_hash_table_insertPtr
      .asFunction<int Function(ffi.Pointer<GHashTable>, gpointer, gpointer)>();
}

class GError extends ffi.Struct {
  @GQuark()
  external int domain;

  @gint()
  external int code;

  external ffi.Pointer<gchar> message;
}

typedef GQuark = ffi.Int;
typedef gint = ffi.Int;
typedef gchar = ffi.Char;
typedef GHashTable = _GHashTable;

class _GHashTable extends ffi.Opaque {}

typedef GHashFunc
    = ffi.Pointer<ffi.NativeFunction<guint Function(gconstpointer)>>;
typedef guint = ffi.UnsignedInt;
typedef gconstpointer = ffi.Pointer<ffi.Void>;
typedef GEqualFunc = ffi.Pointer<
    ffi.NativeFunction<gboolean Function(gconstpointer, gconstpointer)>>;
typedef gboolean = gint;
typedef gpointer = ffi.Pointer<ffi.Void>;

class GObject extends ffi.Struct {
  external GTypeInstance g_type_instance;

  @ffi.Int()
  external int ref_count;

  external ffi.Pointer<ffi.Int> qdata;
}

typedef GTypeInstance = _GTypeInstance;

class _GTypeInstance extends ffi.Struct {
  external ffi.Pointer<GTypeClass> g_class;
}

typedef GTypeClass = _GTypeClass;

class _GTypeClass extends ffi.Struct {
  @ffi.Int()
  external int g_type;
}

class GCancellable extends ffi.Struct {
  @ffi.Int()
  external int parent_instance;

  external ffi.Pointer<GCancellablePrivate> priv;
}

typedef GCancellablePrivate = _GCancellablePrivate;

class _GCancellablePrivate extends ffi.Opaque {}
