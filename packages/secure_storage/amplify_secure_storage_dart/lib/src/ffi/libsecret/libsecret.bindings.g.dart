// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to libsecret
class Libsecret {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Libsecret(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Libsecret.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int secret_password_storev_sync(
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<ffi.Int32> attributes,
    ffi.Pointer<ffi.Int32> collection,
    ffi.Pointer<ffi.Int32> label,
    ffi.Pointer<ffi.Int32> password,
    ffi.Pointer<ffi.Int32> cancellable,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> error,
  ) {
    return _secret_password_storev_sync(
      schema,
      attributes,
      collection,
      label,
      password,
      cancellable,
      error,
    );
  }

  late final _secret_password_storev_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      'secret_password_storev_sync');
  late final _secret_password_storev_sync =
      _secret_password_storev_syncPtr.asFunction<
          int Function(
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  ffi.Pointer<ffi.Int32> secret_password_lookupv_sync(
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<ffi.Int32> attributes,
    ffi.Pointer<ffi.Int32> cancellable,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> error,
  ) {
    return _secret_password_lookupv_sync(
      schema,
      attributes,
      cancellable,
      error,
    );
  }

  late final _secret_password_lookupv_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int32> Function(
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      'secret_password_lookupv_sync');
  late final _secret_password_lookupv_sync =
      _secret_password_lookupv_syncPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Pointer<SecretSchema>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  int secret_password_clearv_sync(
    ffi.Pointer<SecretSchema> schema,
    ffi.Pointer<ffi.Int32> attributes,
    ffi.Pointer<ffi.Int32> cancellable,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> error,
  ) {
    return _secret_password_clearv_sync(
      schema,
      attributes,
      cancellable,
      error,
    );
  }

  late final _secret_password_clearv_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<SecretSchema>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      'secret_password_clearv_sync');
  late final _secret_password_clearv_sync =
      _secret_password_clearv_syncPtr.asFunction<
          int Function(ffi.Pointer<SecretSchema>, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  void secret_password_free(
    ffi.Pointer<ffi.Int32> password,
  ) {
    return _secret_password_free(
      password,
    );
  }

  late final _secret_password_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'secret_password_free');
  late final _secret_password_free = _secret_password_freePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();
}

abstract class SecretSchemaFlags {
  static const int SECRET_SCHEMA_NONE = 0;
  static const int SECRET_SCHEMA_DONT_MATCH_NAME = 2;
}

abstract class SecretSchemaAttributeType {
  static const int SECRET_SCHEMA_ATTRIBUTE_STRING = 0;
  static const int SECRET_SCHEMA_ATTRIBUTE_INTEGER = 1;
  static const int SECRET_SCHEMA_ATTRIBUTE_BOOLEAN = 2;
}

typedef SecretSchema = UnnamedStruct1;

class UnnamedStruct1 extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> name;

  @ffi.Int32()
  external int flags;

  @ffi.Array.multi([32])
  external ffi.Array<SecretSchemaAttribute> attributes;

  @ffi.Int32()
  external int reserved;

  @ffi.Int32()
  external int reserved1;

  @ffi.Int32()
  external int reserved2;

  @ffi.Int32()
  external int reserved3;

  @ffi.Int32()
  external int reserved4;

  @ffi.Int32()
  external int reserved5;

  @ffi.Int32()
  external int reserved6;

  @ffi.Int32()
  external int reserved7;
}

typedef SecretSchemaAttribute = UnnamedStruct2;

class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> name;

  @ffi.Int32()
  external int type;
}
