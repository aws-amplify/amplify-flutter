// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to macOS & iOS Keychain APIs
class Keychain {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Keychain(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Keychain.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFStringRef SecCopyErrorMessageString(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              OSStatus, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString = _SecCopyErrorMessageStringPtr
      .asFunction<CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanTrue =
      _lookup<CFBooleanRef>('kCFBooleanTrue');

  CFBooleanRef get kCFBooleanTrue => _kCFBooleanTrue.value;

  set kCFBooleanTrue(CFBooleanRef value) => _kCFBooleanTrue.value = value;

  CFDictionaryRef CFDictionaryCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  late final ffi.Pointer<CFStringRef> _kSecClass =
      _lookup<CFStringRef>('kSecClass');

  CFStringRef get kSecClass => _kSecClass.value;

  set kSecClass(CFStringRef value) => _kSecClass.value = value;

  late final ffi.Pointer<CFStringRef> _kSecClassGenericPassword =
      _lookup<CFStringRef>('kSecClassGenericPassword');

  CFStringRef get kSecClassGenericPassword => _kSecClassGenericPassword.value;

  set kSecClassGenericPassword(CFStringRef value) =>
      _kSecClassGenericPassword.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrAccount =
      _lookup<CFStringRef>('kSecAttrAccount');

  CFStringRef get kSecAttrAccount => _kSecAttrAccount.value;

  set kSecAttrAccount(CFStringRef value) => _kSecAttrAccount.value = value;

  late final ffi.Pointer<CFStringRef> _kSecAttrService =
      _lookup<CFStringRef>('kSecAttrService');

  CFStringRef get kSecAttrService => _kSecAttrService.value;

  set kSecAttrService(CFStringRef value) => _kSecAttrService.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchLimit =
      _lookup<CFStringRef>('kSecMatchLimit');

  CFStringRef get kSecMatchLimit => _kSecMatchLimit.value;

  set kSecMatchLimit(CFStringRef value) => _kSecMatchLimit.value = value;

  late final ffi.Pointer<CFStringRef> _kSecMatchLimitOne =
      _lookup<CFStringRef>('kSecMatchLimitOne');

  CFStringRef get kSecMatchLimitOne => _kSecMatchLimitOne.value;

  set kSecMatchLimitOne(CFStringRef value) => _kSecMatchLimitOne.value = value;

  late final ffi.Pointer<CFStringRef> _kSecReturnData =
      _lookup<CFStringRef>('kSecReturnData');

  CFStringRef get kSecReturnData => _kSecReturnData.value;

  set kSecReturnData(CFStringRef value) => _kSecReturnData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecValueData =
      _lookup<CFStringRef>('kSecValueData');

  CFStringRef get kSecValueData => _kSecValueData.value;

  set kSecValueData(CFStringRef value) => _kSecValueData.value = value;

  int SecItemCopyMatching(
    CFDictionaryRef query,
    ffi.Pointer<CFTypeRef> result,
  ) {
    return _SecItemCopyMatching(
      query,
      result,
    );
  }

  late final _SecItemCopyMatchingPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              CFDictionaryRef, ffi.Pointer<CFTypeRef>)>>('SecItemCopyMatching');
  late final _SecItemCopyMatching = _SecItemCopyMatchingPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<CFTypeRef>)>();

  int SecItemAdd(
    CFDictionaryRef attributes,
    ffi.Pointer<CFTypeRef> result,
  ) {
    return _SecItemAdd(
      attributes,
      result,
    );
  }

  late final _SecItemAddPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              CFDictionaryRef, ffi.Pointer<CFTypeRef>)>>('SecItemAdd');
  late final _SecItemAdd = _SecItemAddPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<CFTypeRef>)>();

  int SecItemUpdate(
    CFDictionaryRef query,
    CFDictionaryRef attributesToUpdate,
  ) {
    return _SecItemUpdate(
      query,
      attributesToUpdate,
    );
  }

  late final _SecItemUpdatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              CFDictionaryRef, CFDictionaryRef)>>('SecItemUpdate');
  late final _SecItemUpdate = _SecItemUpdatePtr.asFunction<
      int Function(CFDictionaryRef, CFDictionaryRef)>();

  int SecItemDelete(
    CFDictionaryRef query,
  ) {
    return _SecItemDelete(
      query,
    );
  }

  late final _SecItemDeletePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(CFDictionaryRef)>>(
          'SecItemDelete');
  late final _SecItemDelete =
      _SecItemDeletePtr.asFunction<int Function(CFDictionaryRef)>();

  CFDataRef CFDataCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr =
      _CFDataGetBytePtrPtr.asFunction<ffi.Pointer<UInt8> Function(CFDataRef)>();

  CFStringRef CFStringCreateWithCString(
    CFAllocatorRef alloc,
    ffi.Pointer<ffi.Int8> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Int8>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(CFStringRef, int)>();
}

typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef CFStringRef = ffi.Pointer<CFString>;

class CFString extends ffi.Opaque {}

typedef OSStatus = SInt32;
typedef SInt32 = ffi.Int32;
typedef CFBooleanRef = ffi.Pointer<__CFBoolean>;

class __CFBoolean extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<CFDictionary>;

class CFDictionary extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

class __CFAllocator extends ffi.Opaque {}

typedef CFIndex = ffi.Int64;

class CFDictionaryKeyCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

typedef CFDictionaryRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef Boolean = ffi.Uint8;
typedef CFDictionaryHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;
typedef CFHashCode = ffi.Uint64;

class CFDictionaryValueCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

typedef CFDataRef = ffi.Pointer<CFData>;

class CFData extends ffi.Opaque {}

typedef UInt8 = ffi.Uint8;
typedef CFStringEncoding = UInt32;
typedef UInt32 = ffi.Uint32;

const int errSecSuccess = 0;

const int errSecUserCanceled = -128;

const int errSecAuthFailed = -25293;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecInteractionRequired = -25315;

const int kCFStringEncodingUTF8 = 134217984;
