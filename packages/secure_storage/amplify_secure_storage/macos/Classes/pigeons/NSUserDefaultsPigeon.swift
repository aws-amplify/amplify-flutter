// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// 
// Autogenerated from Pigeon (v11.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// A pigeon for interacting with the NSUserDefaults API on iOS and macOS.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NSUserDefaultsPigeon {
  func setBool(key: String, value: Bool) throws
  func boolFor(key: String) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NSUserDefaultsPigeonSetup {
  /// The codec used by NSUserDefaultsPigeon.
  /// Sets up an instance of `NSUserDefaultsPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NSUserDefaultsPigeon?) {
    let setBoolChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_secure_storage.NSUserDefaultsPigeon.setBool", binaryMessenger: binaryMessenger)
    if let api = api {
      setBoolChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        let valueArg = args[1] as! Bool
        do {
          try api.setBool(key: keyArg, value: valueArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setBoolChannel.setMessageHandler(nil)
    }
    let boolForChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_secure_storage.NSUserDefaultsPigeon.boolFor", binaryMessenger: binaryMessenger)
    if let api = api {
      boolForChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        do {
          let result = try api.boolFor(key: keyArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      boolForChannel.setMessageHandler(nil)
    }
  }
}
