// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}



@interface NSUserDefaultsAPICodecReader : FlutterStandardReader
@end
@implementation NSUserDefaultsAPICodecReader
@end

@interface NSUserDefaultsAPICodecWriter : FlutterStandardWriter
@end
@implementation NSUserDefaultsAPICodecWriter
@end

@interface NSUserDefaultsAPICodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NSUserDefaultsAPICodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NSUserDefaultsAPICodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NSUserDefaultsAPICodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NSUserDefaultsAPIGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    NSUserDefaultsAPICodecReaderWriter *readerWriter = [[NSUserDefaultsAPICodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void NSUserDefaultsAPISetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NSUserDefaultsAPI> *api) {
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NSUserDefaultsAPI.setBool"
        binaryMessenger:binaryMessenger
        codec:NSUserDefaultsAPIGetCodec()
        taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setBoolKey:value:completion:)], @"NSUserDefaultsAPI api (%@) doesn't respond to @selector(setBoolKey:value:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_value = GetNullableObjectAtIndex(args, 1);
        [api setBoolKey:arg_key value:arg_value completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    NSObject<FlutterTaskQueue> *taskQueue = [binaryMessenger makeBackgroundTaskQueue];
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NSUserDefaultsAPI.boolFor"
        binaryMessenger:binaryMessenger
        codec:NSUserDefaultsAPIGetCodec()
        taskQueue:taskQueue];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(boolForKey:completion:)], @"NSUserDefaultsAPI api (%@) doesn't respond to @selector(boolForKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        [api boolForKey:arg_key completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
