// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAuthSession (
  val isSignedIn: Boolean,
  val userSub: String? = null,
  val userPoolTokens: NativeUserPoolTokens? = null,
  val identityId: String? = null,
  val awsCredentials: NativeAWSCredentials? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAuthSession {
      val isSignedIn = list[0] as Boolean
      val userSub = list[1] as String?
      val userPoolTokens: NativeUserPoolTokens? = (list[2] as List<Any?>?)?.let {
        NativeUserPoolTokens.fromList(it)
      }
      val identityId = list[3] as String?
      val awsCredentials: NativeAWSCredentials? = (list[4] as List<Any?>?)?.let {
        NativeAWSCredentials.fromList(it)
      }
      return NativeAuthSession(isSignedIn, userSub, userPoolTokens, identityId, awsCredentials)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      isSignedIn,
      userSub,
      userPoolTokens?.toList(),
      identityId,
      awsCredentials?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAuthUser (
  val userId: String,
  val username: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAuthUser {
      val userId = list[0] as String
      val username = list[1] as String
      return NativeAuthUser(userId, username)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
      username,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserPoolTokens (
  val accessToken: String,
  val refreshToken: String,
  val idToken: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeUserPoolTokens {
      val accessToken = list[0] as String
      val refreshToken = list[1] as String
      val idToken = list[2] as String
      return NativeUserPoolTokens(accessToken, refreshToken, idToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      accessToken,
      refreshToken,
      idToken,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAWSCredentials (
  val accessKeyId: String,
  val secretAccessKey: String,
  val sessionToken: String? = null,
  val expirationIso8601Utc: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAWSCredentials {
      val accessKeyId = list[0] as String
      val secretAccessKey = list[1] as String
      val sessionToken = list[2] as String?
      val expirationIso8601Utc = list[3] as String?
      return NativeAWSCredentials(accessKeyId, secretAccessKey, sessionToken, expirationIso8601Utc)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationIso8601Utc,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object NativeAuthPluginCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAWSCredentials.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAuthSession.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserPoolTokens.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAWSCredentials -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeAuthSession -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeUserPoolTokens -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NativeAuthPlugin(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NativeAuthPlugin. */
    val codec: MessageCodec<Any?> by lazy {
      NativeAuthPluginCodec
    }
  }
  fun fetchAuthSession(callback: (NativeAuthSession) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeAuthPlugin.fetchAuthSession", codec)
    channel.send(null) {
      val result = it as NativeAuthSession
      callback(result)
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NativeApiPlugin(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NativeApiPlugin. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun getLatestAuthToken(providerNameArg: String, callback: (String?) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeApiPlugin.getLatestAuthToken", codec)
    channel.send(listOf(providerNameArg)) {
      val result = it as String?
      callback(result)
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object NativeAuthBridgeCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAuthUser.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAuthUser -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeAuthBridge {
  fun addAuthPlugin(callback: (Result<Unit>) -> Unit)
  fun updateCurrentUser(user: NativeAuthUser?)

  companion object {
    /** The codec used by NativeAuthBridge. */
    val codec: MessageCodec<Any?> by lazy {
      NativeAuthBridgeCodec
    }
    /** Sets up an instance of `NativeAuthBridge` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeAuthBridge?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.addAuthPlugin", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.addAuthPlugin() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.updateCurrentUser", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as NativeAuthUser?
            var wrapped: List<Any?>
            try {
              api.updateCurrentUser(userArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeApiBridge {
  fun addApiPlugin(authProvidersList: List<String>, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by NativeApiBridge. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `NativeApiBridge` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeApiBridge?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NativeApiBridge.addApiPlugin", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authProvidersListArg = args[0] as List<String>
            api.addApiPlugin(authProvidersListArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
