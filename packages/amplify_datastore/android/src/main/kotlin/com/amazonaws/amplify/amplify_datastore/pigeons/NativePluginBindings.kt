//
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.amazonaws.amplify.amplify_datastore.pigeons

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object NativePluginBindingsPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAuthSession (
  val isSignedIn: Boolean,
  val userSub: String? = null,
  val userPoolTokens: NativeUserPoolTokens? = null,
  val identityId: String? = null,
  val awsCredentials: NativeAWSCredentials? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeAuthSession {
      val isSignedIn = pigeonVar_list[0] as Boolean
      val userSub = pigeonVar_list[1] as String?
      val userPoolTokens = pigeonVar_list[2] as NativeUserPoolTokens?
      val identityId = pigeonVar_list[3] as String?
      val awsCredentials = pigeonVar_list[4] as NativeAWSCredentials?
      return NativeAuthSession(isSignedIn, userSub, userPoolTokens, identityId, awsCredentials)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      isSignedIn,
      userSub,
      userPoolTokens,
      identityId,
      awsCredentials,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeAuthSession) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAuthUser (
  val userId: String,
  val username: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeAuthUser {
      val userId = pigeonVar_list[0] as String
      val username = pigeonVar_list[1] as String
      return NativeAuthUser(userId, username)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      userId,
      username,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeAuthUser) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserPoolTokens (
  val accessToken: String,
  val refreshToken: String,
  val idToken: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeUserPoolTokens {
      val accessToken = pigeonVar_list[0] as String
      val refreshToken = pigeonVar_list[1] as String
      val idToken = pigeonVar_list[2] as String
      return NativeUserPoolTokens(accessToken, refreshToken, idToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      accessToken,
      refreshToken,
      idToken,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeUserPoolTokens) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAWSCredentials (
  val accessKeyId: String,
  val secretAccessKey: String,
  val sessionToken: String? = null,
  val expirationIso8601Utc: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeAWSCredentials {
      val accessKeyId = pigeonVar_list[0] as String
      val secretAccessKey = pigeonVar_list[1] as String
      val sessionToken = pigeonVar_list[2] as String?
      val expirationIso8601Utc = pigeonVar_list[3] as String?
      return NativeAWSCredentials(accessKeyId, secretAccessKey, sessionToken, expirationIso8601Utc)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationIso8601Utc,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeAWSCredentials) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LegacyCredentialStoreData (
  val identityId: String? = null,
  val accessKeyId: String? = null,
  val secretAccessKey: String? = null,
  val sessionToken: String? = null,
  val expirationMsSinceEpoch: Long? = null,
  val accessToken: String? = null,
  val refreshToken: String? = null,
  val idToken: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): LegacyCredentialStoreData {
      val identityId = pigeonVar_list[0] as String?
      val accessKeyId = pigeonVar_list[1] as String?
      val secretAccessKey = pigeonVar_list[2] as String?
      val sessionToken = pigeonVar_list[3] as String?
      val expirationMsSinceEpoch = pigeonVar_list[4] as Long?
      val accessToken = pigeonVar_list[5] as String?
      val refreshToken = pigeonVar_list[6] as String?
      val idToken = pigeonVar_list[7] as String?
      return LegacyCredentialStoreData(identityId, accessKeyId, secretAccessKey, sessionToken, expirationMsSinceEpoch, accessToken, refreshToken, idToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      identityId,
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationMsSinceEpoch,
      accessToken,
      refreshToken,
      idToken,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is LegacyCredentialStoreData) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeGraphQLResponse (
  val payloadJson: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeGraphQLResponse {
      val payloadJson = pigeonVar_list[0] as String?
      return NativeGraphQLResponse(payloadJson)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      payloadJson,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeGraphQLResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeGraphQLSubscriptionResponse (
  val type: String,
  val subscriptionId: String,
  val payloadJson: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeGraphQLSubscriptionResponse {
      val type = pigeonVar_list[0] as String
      val subscriptionId = pigeonVar_list[1] as String
      val payloadJson = pigeonVar_list[2] as String?
      return NativeGraphQLSubscriptionResponse(type, subscriptionId, payloadJson)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      subscriptionId,
      payloadJson,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeGraphQLSubscriptionResponse) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeGraphQLRequest (
  val document: String,
  val apiName: String? = null,
  val variablesJson: String? = null,
  val responseType: String? = null,
  val decodePath: String? = null,
  val options: String? = null,
  val authMode: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeGraphQLRequest {
      val document = pigeonVar_list[0] as String
      val apiName = pigeonVar_list[1] as String?
      val variablesJson = pigeonVar_list[2] as String?
      val responseType = pigeonVar_list[3] as String?
      val decodePath = pigeonVar_list[4] as String?
      val options = pigeonVar_list[5] as String?
      val authMode = pigeonVar_list[6] as String?
      return NativeGraphQLRequest(document, apiName, variablesJson, responseType, decodePath, options, authMode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      document,
      apiName,
      variablesJson,
      responseType,
      decodePath,
      options,
      authMode,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeGraphQLRequest) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativePluginBindingsPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class NativePluginBindingsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAuthSession.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAuthUser.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserPoolTokens.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAWSCredentials.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LegacyCredentialStoreData.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeGraphQLResponse.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeGraphQLSubscriptionResponse.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeGraphQLRequest.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAuthSession -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeAuthUser -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeUserPoolTokens -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeAWSCredentials -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is LegacyCredentialStoreData -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeGraphQLResponse -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeGraphQLSubscriptionResponse -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is NativeGraphQLRequest -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/**
 * Bridge for calling Auth from Native into Flutter
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class NativeAuthPlugin(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by NativeAuthPlugin. */
    val codec: MessageCodec<Any?> by lazy {
      NativePluginBindingsPigeonCodec()
    }
  }
  fun fetchAuthSession(callback: (Result<NativeAuthSession>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeAuthPlugin.fetchAuthSession$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as NativeAuthSession
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Bridge for calling API plugin from Native into Flutter
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class NativeApiPlugin(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by NativeApiPlugin. */
    val codec: MessageCodec<Any?> by lazy {
      NativePluginBindingsPigeonCodec()
    }
  }
  fun getLatestAuthToken(providerNameArg: String, callback: (Result<String?>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.getLatestAuthToken$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(providerNameArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          val output = it[0] as String?
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun mutate(requestArg: NativeGraphQLRequest, callback: (Result<NativeGraphQLResponse>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.mutate$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(requestArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as NativeGraphQLResponse
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun query(requestArg: NativeGraphQLRequest, callback: (Result<NativeGraphQLResponse>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.query$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(requestArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as NativeGraphQLResponse
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun subscribe(requestArg: NativeGraphQLRequest, callback: (Result<NativeGraphQLSubscriptionResponse>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.subscribe$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(requestArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else if (it[0] == null) {
          callback(Result.failure(FlutterError("null-error", "Flutter api returned null value for non-null return value.", "")))
        } else {
          val output = it[0] as NativeGraphQLSubscriptionResponse
          callback(Result.success(output))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun unsubscribe(subscriptionIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.unsubscribe$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(subscriptionIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun deviceOffline(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.deviceOffline$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onStop(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.onStop$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(NativePluginBindingsPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Bridge for calling Amplify from Flutter into Native
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface NativeAmplifyBridge {
  fun configure(version: String, config: String, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by NativeAmplifyBridge. */
    val codec: MessageCodec<Any?> by lazy {
      NativePluginBindingsPigeonCodec()
    }
    /** Sets up an instance of `NativeAmplifyBridge` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeAmplifyBridge?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_datastore.NativeAmplifyBridge.configure$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val versionArg = args[0] as String
            val configArg = args[1] as String
            api.configure(versionArg, configArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativePluginBindingsPigeonUtils.wrapError(error))
              } else {
                reply.reply(NativePluginBindingsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Bridge for calling Auth plugin from Flutter into Native
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface NativeAuthBridge {
  fun addAuthPlugin(callback: (Result<Unit>) -> Unit)
  fun updateCurrentUser(user: NativeAuthUser?)

  companion object {
    /** The codec used by NativeAuthBridge. */
    val codec: MessageCodec<Any?> by lazy {
      NativePluginBindingsPigeonCodec()
    }
    /** Sets up an instance of `NativeAuthBridge` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeAuthBridge?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_datastore.NativeAuthBridge.addAuthPlugin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.addAuthPlugin{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativePluginBindingsPigeonUtils.wrapError(error))
              } else {
                reply.reply(NativePluginBindingsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_datastore.NativeAuthBridge.updateCurrentUser$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val userArg = args[0] as NativeAuthUser?
            val wrapped: List<Any?> = try {
              api.updateCurrentUser(userArg)
              listOf(null)
            } catch (exception: Throwable) {
              NativePluginBindingsPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/**
 * Bridge for calling API methods from Flutter into Native
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface NativeApiBridge {
  fun addApiPlugin(authProvidersList: List<String>, endpoints: Map<String, String>, callback: (Result<Unit>) -> Unit)
  fun sendSubscriptionEvent(event: NativeGraphQLSubscriptionResponse, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by NativeApiBridge. */
    val codec: MessageCodec<Any?> by lazy {
      NativePluginBindingsPigeonCodec()
    }
    /** Sets up an instance of `NativeApiBridge` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeApiBridge?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_datastore.NativeApiBridge.addApiPlugin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authProvidersListArg = args[0] as List<String>
            val endpointsArg = args[1] as Map<String, String>
            api.addApiPlugin(authProvidersListArg, endpointsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativePluginBindingsPigeonUtils.wrapError(error))
              } else {
                reply.reply(NativePluginBindingsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_datastore.NativeApiBridge.sendSubscriptionEvent$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val eventArg = args[0] as NativeGraphQLSubscriptionResponse
            api.sendSubscriptionEvent(eventArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativePluginBindingsPigeonUtils.wrapError(error))
              } else {
                reply.reply(NativePluginBindingsPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
