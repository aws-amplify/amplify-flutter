//
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsNativePluginBindings(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsNativePluginBindings(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsNativePluginBindings(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashNativePluginBindings(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashNativePluginBindings(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashNativePluginBindings(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAuthSession: Hashable {
  var isSignedIn: Bool
  var userSub: String? = nil
  var userPoolTokens: NativeUserPoolTokens? = nil
  var identityId: String? = nil
  var awsCredentials: NativeAWSCredentials? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeAuthSession? {
    let isSignedIn = pigeonVar_list[0] as! Bool
    let userSub: String? = nilOrValue(pigeonVar_list[1])
    let userPoolTokens: NativeUserPoolTokens? = nilOrValue(pigeonVar_list[2])
    let identityId: String? = nilOrValue(pigeonVar_list[3])
    let awsCredentials: NativeAWSCredentials? = nilOrValue(pigeonVar_list[4])

    return NativeAuthSession(
      isSignedIn: isSignedIn,
      userSub: userSub,
      userPoolTokens: userPoolTokens,
      identityId: identityId,
      awsCredentials: awsCredentials
    )
  }
  func toList() -> [Any?] {
    return [
      isSignedIn,
      userSub,
      userPoolTokens,
      identityId,
      awsCredentials,
    ]
  }
  static func == (lhs: NativeAuthSession, rhs: NativeAuthSession) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAuthUser: Hashable {
  var userId: String
  var username: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeAuthUser? {
    let userId = pigeonVar_list[0] as! String
    let username = pigeonVar_list[1] as! String

    return NativeAuthUser(
      userId: userId,
      username: username
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      username,
    ]
  }
  static func == (lhs: NativeAuthUser, rhs: NativeAuthUser) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserPoolTokens: Hashable {
  var accessToken: String
  var refreshToken: String
  var idToken: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeUserPoolTokens? {
    let accessToken = pigeonVar_list[0] as! String
    let refreshToken = pigeonVar_list[1] as! String
    let idToken = pigeonVar_list[2] as! String

    return NativeUserPoolTokens(
      accessToken: accessToken,
      refreshToken: refreshToken,
      idToken: idToken
    )
  }
  func toList() -> [Any?] {
    return [
      accessToken,
      refreshToken,
      idToken,
    ]
  }
  static func == (lhs: NativeUserPoolTokens, rhs: NativeUserPoolTokens) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAWSCredentials: Hashable {
  var accessKeyId: String
  var secretAccessKey: String
  var sessionToken: String? = nil
  var expirationIso8601Utc: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeAWSCredentials? {
    let accessKeyId = pigeonVar_list[0] as! String
    let secretAccessKey = pigeonVar_list[1] as! String
    let sessionToken: String? = nilOrValue(pigeonVar_list[2])
    let expirationIso8601Utc: String? = nilOrValue(pigeonVar_list[3])

    return NativeAWSCredentials(
      accessKeyId: accessKeyId,
      secretAccessKey: secretAccessKey,
      sessionToken: sessionToken,
      expirationIso8601Utc: expirationIso8601Utc
    )
  }
  func toList() -> [Any?] {
    return [
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationIso8601Utc,
    ]
  }
  static func == (lhs: NativeAWSCredentials, rhs: NativeAWSCredentials) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LegacyCredentialStoreData: Hashable {
  var identityId: String? = nil
  var accessKeyId: String? = nil
  var secretAccessKey: String? = nil
  var sessionToken: String? = nil
  var expirationMsSinceEpoch: Int64? = nil
  var accessToken: String? = nil
  var refreshToken: String? = nil
  var idToken: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> LegacyCredentialStoreData? {
    let identityId: String? = nilOrValue(pigeonVar_list[0])
    let accessKeyId: String? = nilOrValue(pigeonVar_list[1])
    let secretAccessKey: String? = nilOrValue(pigeonVar_list[2])
    let sessionToken: String? = nilOrValue(pigeonVar_list[3])
    let expirationMsSinceEpoch: Int64? = nilOrValue(pigeonVar_list[4])
    let accessToken: String? = nilOrValue(pigeonVar_list[5])
    let refreshToken: String? = nilOrValue(pigeonVar_list[6])
    let idToken: String? = nilOrValue(pigeonVar_list[7])

    return LegacyCredentialStoreData(
      identityId: identityId,
      accessKeyId: accessKeyId,
      secretAccessKey: secretAccessKey,
      sessionToken: sessionToken,
      expirationMsSinceEpoch: expirationMsSinceEpoch,
      accessToken: accessToken,
      refreshToken: refreshToken,
      idToken: idToken
    )
  }
  func toList() -> [Any?] {
    return [
      identityId,
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationMsSinceEpoch,
      accessToken,
      refreshToken,
      idToken,
    ]
  }
  static func == (lhs: LegacyCredentialStoreData, rhs: LegacyCredentialStoreData) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeGraphQLResponse: Hashable {
  var payloadJson: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeGraphQLResponse? {
    let payloadJson: String? = nilOrValue(pigeonVar_list[0])

    return NativeGraphQLResponse(
      payloadJson: payloadJson
    )
  }
  func toList() -> [Any?] {
    return [
      payloadJson
    ]
  }
  static func == (lhs: NativeGraphQLResponse, rhs: NativeGraphQLResponse) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeGraphQLSubscriptionResponse: Hashable {
  var type: String
  var subscriptionId: String
  var payloadJson: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeGraphQLSubscriptionResponse? {
    let type = pigeonVar_list[0] as! String
    let subscriptionId = pigeonVar_list[1] as! String
    let payloadJson: String? = nilOrValue(pigeonVar_list[2])

    return NativeGraphQLSubscriptionResponse(
      type: type,
      subscriptionId: subscriptionId,
      payloadJson: payloadJson
    )
  }
  func toList() -> [Any?] {
    return [
      type,
      subscriptionId,
      payloadJson,
    ]
  }
  static func == (lhs: NativeGraphQLSubscriptionResponse, rhs: NativeGraphQLSubscriptionResponse) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeGraphQLRequest: Hashable {
  var document: String
  var apiName: String? = nil
  var variablesJson: String? = nil
  var responseType: String? = nil
  var decodePath: String? = nil
  var options: String? = nil
  var authMode: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> NativeGraphQLRequest? {
    let document = pigeonVar_list[0] as! String
    let apiName: String? = nilOrValue(pigeonVar_list[1])
    let variablesJson: String? = nilOrValue(pigeonVar_list[2])
    let responseType: String? = nilOrValue(pigeonVar_list[3])
    let decodePath: String? = nilOrValue(pigeonVar_list[4])
    let options: String? = nilOrValue(pigeonVar_list[5])
    let authMode: String? = nilOrValue(pigeonVar_list[6])

    return NativeGraphQLRequest(
      document: document,
      apiName: apiName,
      variablesJson: variablesJson,
      responseType: responseType,
      decodePath: decodePath,
      options: options,
      authMode: authMode
    )
  }
  func toList() -> [Any?] {
    return [
      document,
      apiName,
      variablesJson,
      responseType,
      decodePath,
      options,
      authMode,
    ]
  }
  static func == (lhs: NativeGraphQLRequest, rhs: NativeGraphQLRequest) -> Bool {
    return deepEqualsNativePluginBindings(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashNativePluginBindings(value: toList(), hasher: &hasher)
  }
}

private class NativePluginBindingsPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return NativeAuthSession.fromList(self.readValue() as! [Any?])
    case 130:
      return NativeAuthUser.fromList(self.readValue() as! [Any?])
    case 131:
      return NativeUserPoolTokens.fromList(self.readValue() as! [Any?])
    case 132:
      return NativeAWSCredentials.fromList(self.readValue() as! [Any?])
    case 133:
      return LegacyCredentialStoreData.fromList(self.readValue() as! [Any?])
    case 134:
      return NativeGraphQLResponse.fromList(self.readValue() as! [Any?])
    case 135:
      return NativeGraphQLSubscriptionResponse.fromList(self.readValue() as! [Any?])
    case 136:
      return NativeGraphQLRequest.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class NativePluginBindingsPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeAuthSession {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAuthUser {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserPoolTokens {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAWSCredentials {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? LegacyCredentialStoreData {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? NativeGraphQLResponse {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? NativeGraphQLSubscriptionResponse {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? NativeGraphQLRequest {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativePluginBindingsPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativePluginBindingsPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativePluginBindingsPigeonCodecWriter(data: data)
  }
}

class NativePluginBindingsPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = NativePluginBindingsPigeonCodec(readerWriter: NativePluginBindingsPigeonCodecReaderWriter())
}


/// Bridge for calling Auth from Native into Flutter
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol NativeAuthPluginProtocol {
  func fetchAuthSession(completion: @escaping (Result<NativeAuthSession, PigeonError>) -> Void)
}
class NativeAuthPlugin: NativeAuthPluginProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: NativePluginBindingsPigeonCodec {
    return NativePluginBindingsPigeonCodec.shared
  }
  func fetchAuthSession(completion: @escaping (Result<NativeAuthSession, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeAuthPlugin.fetchAuthSession\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! NativeAuthSession
        completion(.success(result))
      }
    }
  }
}
/// Bridge for calling API plugin from Native into Flutter
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol NativeApiPluginProtocol {
  func getLatestAuthToken(providerName providerNameArg: String, completion: @escaping (Result<String?, PigeonError>) -> Void)
  func mutate(request requestArg: NativeGraphQLRequest, completion: @escaping (Result<NativeGraphQLResponse, PigeonError>) -> Void)
  func query(request requestArg: NativeGraphQLRequest, completion: @escaping (Result<NativeGraphQLResponse, PigeonError>) -> Void)
  func subscribe(request requestArg: NativeGraphQLRequest, completion: @escaping (Result<NativeGraphQLSubscriptionResponse, PigeonError>) -> Void)
  func unsubscribe(subscriptionId subscriptionIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func deviceOffline(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onStop(completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class NativeApiPlugin: NativeApiPluginProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: NativePluginBindingsPigeonCodec {
    return NativePluginBindingsPigeonCodec.shared
  }
  func getLatestAuthToken(providerName providerNameArg: String, completion: @escaping (Result<String?, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.getLatestAuthToken\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([providerNameArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: String? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  func mutate(request requestArg: NativeGraphQLRequest, completion: @escaping (Result<NativeGraphQLResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.mutate\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! NativeGraphQLResponse
        completion(.success(result))
      }
    }
  }
  func query(request requestArg: NativeGraphQLRequest, completion: @escaping (Result<NativeGraphQLResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.query\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! NativeGraphQLResponse
        completion(.success(result))
      }
    }
  }
  func subscribe(request requestArg: NativeGraphQLRequest, completion: @escaping (Result<NativeGraphQLSubscriptionResponse, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.subscribe\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(.failure(PigeonError(code: "null-error", message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! NativeGraphQLSubscriptionResponse
        completion(.success(result))
      }
    }
  }
  func unsubscribe(subscriptionId subscriptionIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.unsubscribe\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([subscriptionIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func deviceOffline(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.deviceOffline\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onStop(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.onStop\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
/// Bridge for calling Amplify from Flutter into Native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeAmplifyBridge {
  func configure(version: String, config: String, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeAmplifyBridgeSetup {
  static var codec: FlutterStandardMessageCodec { NativePluginBindingsPigeonCodec.shared }
  /// Sets up an instance of `NativeAmplifyBridge` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeAmplifyBridge?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let configureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_datastore.NativeAmplifyBridge.configure\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      configureChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let versionArg = args[0] as! String
        let configArg = args[1] as! String
        api.configure(version: versionArg, config: configArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      configureChannel.setMessageHandler(nil)
    }
  }
}
/// Bridge for calling Auth plugin from Flutter into Native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeAuthBridge {
  func addAuthPlugin(completion: @escaping (Result<Void, Error>) -> Void)
  func updateCurrentUser(user: NativeAuthUser?) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeAuthBridgeSetup {
  static var codec: FlutterStandardMessageCodec { NativePluginBindingsPigeonCodec.shared }
  /// Sets up an instance of `NativeAuthBridge` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeAuthBridge?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let addAuthPluginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_datastore.NativeAuthBridge.addAuthPlugin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addAuthPluginChannel.setMessageHandler { _, reply in
        api.addAuthPlugin { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      addAuthPluginChannel.setMessageHandler(nil)
    }
    let updateCurrentUserChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_datastore.NativeAuthBridge.updateCurrentUser\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateCurrentUserChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg: NativeAuthUser? = nilOrValue(args[0])
        do {
          try api.updateCurrentUser(user: userArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateCurrentUserChannel.setMessageHandler(nil)
    }
  }
}
/// Bridge for calling API methods from Flutter into Native
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeApiBridge {
  func addApiPlugin(authProvidersList: [String], endpoints: [String: String], completion: @escaping (Result<Void, Error>) -> Void)
  func sendSubscriptionEvent(event: NativeGraphQLSubscriptionResponse, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeApiBridgeSetup {
  static var codec: FlutterStandardMessageCodec { NativePluginBindingsPigeonCodec.shared }
  /// Sets up an instance of `NativeApiBridge` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeApiBridge?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let addApiPluginChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_datastore.NativeApiBridge.addApiPlugin\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addApiPluginChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let authProvidersListArg = args[0] as! [String]
        let endpointsArg = args[1] as! [String: String]
        api.addApiPlugin(authProvidersList: authProvidersListArg, endpoints: endpointsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      addApiPluginChannel.setMessageHandler(nil)
    }
    let sendSubscriptionEventChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.amplify_datastore.NativeApiBridge.sendSubscriptionEvent\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendSubscriptionEventChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventArg = args[0] as! NativeGraphQLSubscriptionResponse
        api.sendSubscriptionEvent(event: eventArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendSubscriptionEventChannel.setMessageHandler(nil)
    }
  }
}
