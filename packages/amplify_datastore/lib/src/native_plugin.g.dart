//
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

class NativeAuthSession {
  NativeAuthSession({
    required this.isSignedIn,
    this.userSub,
    this.userPoolTokens,
    this.identityId,
    this.awsCredentials,
  });

  bool isSignedIn;

  String? userSub;

  NativeUserPoolTokens? userPoolTokens;

  String? identityId;

  NativeAWSCredentials? awsCredentials;

  List<Object?> _toList() {
    return <Object?>[
      isSignedIn,
      userSub,
      userPoolTokens,
      identityId,
      awsCredentials,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NativeAuthSession decode(Object result) {
    result as List<Object?>;
    return NativeAuthSession(
      isSignedIn: result[0]! as bool,
      userSub: result[1] as String?,
      userPoolTokens: result[2] as NativeUserPoolTokens?,
      identityId: result[3] as String?,
      awsCredentials: result[4] as NativeAWSCredentials?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeAuthSession || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NativeAuthUser {
  NativeAuthUser({required this.userId, required this.username});

  String userId;

  String username;

  List<Object?> _toList() {
    return <Object?>[userId, username];
  }

  Object encode() {
    return _toList();
  }

  static NativeAuthUser decode(Object result) {
    result as List<Object?>;
    return NativeAuthUser(
      userId: result[0]! as String,
      username: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeAuthUser || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NativeUserPoolTokens {
  NativeUserPoolTokens({
    required this.accessToken,
    required this.refreshToken,
    required this.idToken,
  });

  String accessToken;

  String refreshToken;

  String idToken;

  List<Object?> _toList() {
    return <Object?>[accessToken, refreshToken, idToken];
  }

  Object encode() {
    return _toList();
  }

  static NativeUserPoolTokens decode(Object result) {
    result as List<Object?>;
    return NativeUserPoolTokens(
      accessToken: result[0]! as String,
      refreshToken: result[1]! as String,
      idToken: result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeUserPoolTokens || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NativeAWSCredentials {
  NativeAWSCredentials({
    required this.accessKeyId,
    required this.secretAccessKey,
    this.sessionToken,
    this.expirationIso8601Utc,
  });

  String accessKeyId;

  String secretAccessKey;

  String? sessionToken;

  String? expirationIso8601Utc;

  List<Object?> _toList() {
    return <Object?>[
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationIso8601Utc,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NativeAWSCredentials decode(Object result) {
    result as List<Object?>;
    return NativeAWSCredentials(
      accessKeyId: result[0]! as String,
      secretAccessKey: result[1]! as String,
      sessionToken: result[2] as String?,
      expirationIso8601Utc: result[3] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeAWSCredentials || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class LegacyCredentialStoreData {
  LegacyCredentialStoreData({
    this.identityId,
    this.accessKeyId,
    this.secretAccessKey,
    this.sessionToken,
    this.expirationMsSinceEpoch,
    this.accessToken,
    this.refreshToken,
    this.idToken,
  });

  String? identityId;

  String? accessKeyId;

  String? secretAccessKey;

  String? sessionToken;

  int? expirationMsSinceEpoch;

  String? accessToken;

  String? refreshToken;

  String? idToken;

  List<Object?> _toList() {
    return <Object?>[
      identityId,
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationMsSinceEpoch,
      accessToken,
      refreshToken,
      idToken,
    ];
  }

  Object encode() {
    return _toList();
  }

  static LegacyCredentialStoreData decode(Object result) {
    result as List<Object?>;
    return LegacyCredentialStoreData(
      identityId: result[0] as String?,
      accessKeyId: result[1] as String?,
      secretAccessKey: result[2] as String?,
      sessionToken: result[3] as String?,
      expirationMsSinceEpoch: result[4] as int?,
      accessToken: result[5] as String?,
      refreshToken: result[6] as String?,
      idToken: result[7] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! LegacyCredentialStoreData ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NativeGraphQLResponse {
  NativeGraphQLResponse({this.payloadJson});

  String? payloadJson;

  List<Object?> _toList() {
    return <Object?>[payloadJson];
  }

  Object encode() {
    return _toList();
  }

  static NativeGraphQLResponse decode(Object result) {
    result as List<Object?>;
    return NativeGraphQLResponse(payloadJson: result[0] as String?);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeGraphQLResponse || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NativeGraphQLSubscriptionResponse {
  NativeGraphQLSubscriptionResponse({
    required this.type,
    required this.subscriptionId,
    this.payloadJson,
  });

  String type;

  String subscriptionId;

  String? payloadJson;

  List<Object?> _toList() {
    return <Object?>[type, subscriptionId, payloadJson];
  }

  Object encode() {
    return _toList();
  }

  static NativeGraphQLSubscriptionResponse decode(Object result) {
    result as List<Object?>;
    return NativeGraphQLSubscriptionResponse(
      type: result[0]! as String,
      subscriptionId: result[1]! as String,
      payloadJson: result[2] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeGraphQLSubscriptionResponse ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class NativeGraphQLRequest {
  NativeGraphQLRequest({
    required this.document,
    this.apiName,
    this.variablesJson,
    this.responseType,
    this.decodePath,
    this.options,
    this.authMode,
  });

  String document;

  String? apiName;

  String? variablesJson;

  String? responseType;

  String? decodePath;

  String? options;

  String? authMode;

  List<Object?> _toList() {
    return <Object?>[
      document,
      apiName,
      variablesJson,
      responseType,
      decodePath,
      options,
      authMode,
    ];
  }

  Object encode() {
    return _toList();
  }

  static NativeGraphQLRequest decode(Object result) {
    result as List<Object?>;
    return NativeGraphQLRequest(
      document: result[0]! as String,
      apiName: result[1] as String?,
      variablesJson: result[2] as String?,
      responseType: result[3] as String?,
      decodePath: result[4] as String?,
      options: result[5] as String?,
      authMode: result[6] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NativeGraphQLRequest || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is NativeAuthSession) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeAuthUser) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserPoolTokens) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NativeAWSCredentials) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is LegacyCredentialStoreData) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is NativeGraphQLResponse) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is NativeGraphQLSubscriptionResponse) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is NativeGraphQLRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return NativeAuthSession.decode(readValue(buffer)!);
      case 130:
        return NativeAuthUser.decode(readValue(buffer)!);
      case 131:
        return NativeUserPoolTokens.decode(readValue(buffer)!);
      case 132:
        return NativeAWSCredentials.decode(readValue(buffer)!);
      case 133:
        return LegacyCredentialStoreData.decode(readValue(buffer)!);
      case 134:
        return NativeGraphQLResponse.decode(readValue(buffer)!);
      case 135:
        return NativeGraphQLSubscriptionResponse.decode(readValue(buffer)!);
      case 136:
        return NativeGraphQLRequest.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Bridge for calling Auth from Native into Flutter
abstract class NativeAuthPlugin {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<NativeAuthSession> fetchAuthSession();

  static void setUp(
    NativeAuthPlugin? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeAuthPlugin.fetchAuthSession$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            final NativeAuthSession output = await api.fetchAuthSession();
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

/// Bridge for calling API plugin from Native into Flutter
abstract class NativeApiPlugin {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  Future<String?> getLatestAuthToken(String providerName);

  Future<NativeGraphQLResponse> mutate(NativeGraphQLRequest request);

  Future<NativeGraphQLResponse> query(NativeGraphQLRequest request);

  Future<NativeGraphQLSubscriptionResponse> subscribe(
    NativeGraphQLRequest request,
  );

  Future<void> unsubscribe(String subscriptionId);

  Future<void> deviceOffline();

  Future<void> onStop();

  static void setUp(
    NativeApiPlugin? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty
        ? '.$messageChannelSuffix'
        : '';
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.getLatestAuthToken$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.getLatestAuthToken was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_providerName = (args[0] as String?);
          assert(
            arg_providerName != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.getLatestAuthToken was null, expected non-null String.',
          );
          try {
            final String? output = await api.getLatestAuthToken(
              arg_providerName!,
            );
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.mutate$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.mutate was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeGraphQLRequest? arg_request =
              (args[0] as NativeGraphQLRequest?);
          assert(
            arg_request != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.mutate was null, expected non-null NativeGraphQLRequest.',
          );
          try {
            final NativeGraphQLResponse output = await api.mutate(arg_request!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.query$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.query was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeGraphQLRequest? arg_request =
              (args[0] as NativeGraphQLRequest?);
          assert(
            arg_request != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.query was null, expected non-null NativeGraphQLRequest.',
          );
          try {
            final NativeGraphQLResponse output = await api.query(arg_request!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.subscribe$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.subscribe was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final NativeGraphQLRequest? arg_request =
              (args[0] as NativeGraphQLRequest?);
          assert(
            arg_request != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.subscribe was null, expected non-null NativeGraphQLRequest.',
          );
          try {
            final NativeGraphQLSubscriptionResponse output = await api
                .subscribe(arg_request!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.unsubscribe$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.unsubscribe was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_subscriptionId = (args[0] as String?);
          assert(
            arg_subscriptionId != null,
            'Argument for dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.unsubscribe was null, expected non-null String.',
          );
          try {
            await api.unsubscribe(arg_subscriptionId!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.deviceOffline$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            await api.deviceOffline();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?>
      pigeonVar_channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amplify_datastore.NativeApiPlugin.onStop$messageChannelSuffix',
        pigeonChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          try {
            await api.onStop();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}

/// Bridge for calling Amplify from Flutter into Native
class NativeAmplifyBridge {
  /// Constructor for [NativeAmplifyBridge].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeAmplifyBridge({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> configure(String version, String config) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.amplify_datastore.NativeAmplifyBridge.configure$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[version, config],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

/// Bridge for calling Auth plugin from Flutter into Native
class NativeAuthBridge {
  /// Constructor for [NativeAuthBridge].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeAuthBridge({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> addAuthPlugin() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.amplify_datastore.NativeAuthBridge.addAuthPlugin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateCurrentUser(NativeAuthUser? user) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.amplify_datastore.NativeAuthBridge.updateCurrentUser$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[user],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

/// Bridge for calling API methods from Flutter into Native
class NativeApiBridge {
  /// Constructor for [NativeApiBridge].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeApiBridge({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty
           ? '.$messageChannelSuffix'
           : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> addApiPlugin(
    List<String> authProvidersList,
    Map<String, String> endpoints,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.amplify_datastore.NativeApiBridge.addApiPlugin$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[authProvidersList, endpoints],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendSubscriptionEvent(
    NativeGraphQLSubscriptionResponse event,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.amplify_datastore.NativeApiBridge.sendSubscriptionEvent$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(
      <Object?>[event],
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
