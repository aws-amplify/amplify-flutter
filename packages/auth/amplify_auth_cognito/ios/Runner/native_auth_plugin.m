// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "native_auth_plugin.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface NativeUserContextData ()
+ (NativeUserContextData *)fromList:(NSArray *)list;
+ (nullable NativeUserContextData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LegacyCredentialStoreData ()
+ (LegacyCredentialStoreData *)fromList:(NSArray *)list;
+ (nullable LegacyCredentialStoreData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LegacyDeviceDetailsSecret ()
+ (LegacyDeviceDetailsSecret *)fromList:(NSArray *)list;
+ (nullable LegacyDeviceDetailsSecret *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation NativeUserContextData
+ (instancetype)makeWithDeviceName:(nullable NSString *)deviceName
    thirdPartyDeviceId:(nullable NSString *)thirdPartyDeviceId
    deviceFingerprint:(nullable NSString *)deviceFingerprint
    applicationName:(nullable NSString *)applicationName
    applicationVersion:(nullable NSString *)applicationVersion
    deviceLanguage:(nullable NSString *)deviceLanguage
    deviceOsReleaseVersion:(nullable NSString *)deviceOsReleaseVersion
    screenHeightPixels:(nullable NSNumber *)screenHeightPixels
    screenWidthPixels:(nullable NSNumber *)screenWidthPixels {
  NativeUserContextData* pigeonResult = [[NativeUserContextData alloc] init];
  pigeonResult.deviceName = deviceName;
  pigeonResult.thirdPartyDeviceId = thirdPartyDeviceId;
  pigeonResult.deviceFingerprint = deviceFingerprint;
  pigeonResult.applicationName = applicationName;
  pigeonResult.applicationVersion = applicationVersion;
  pigeonResult.deviceLanguage = deviceLanguage;
  pigeonResult.deviceOsReleaseVersion = deviceOsReleaseVersion;
  pigeonResult.screenHeightPixels = screenHeightPixels;
  pigeonResult.screenWidthPixels = screenWidthPixels;
  return pigeonResult;
}
+ (NativeUserContextData *)fromList:(NSArray *)list {
  NativeUserContextData *pigeonResult = [[NativeUserContextData alloc] init];
  pigeonResult.deviceName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.thirdPartyDeviceId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.deviceFingerprint = GetNullableObjectAtIndex(list, 2);
  pigeonResult.applicationName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.applicationVersion = GetNullableObjectAtIndex(list, 4);
  pigeonResult.deviceLanguage = GetNullableObjectAtIndex(list, 5);
  pigeonResult.deviceOsReleaseVersion = GetNullableObjectAtIndex(list, 6);
  pigeonResult.screenHeightPixels = GetNullableObjectAtIndex(list, 7);
  pigeonResult.screenWidthPixels = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable NativeUserContextData *)nullableFromList:(NSArray *)list {
  return (list) ? [NativeUserContextData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.deviceName ?: [NSNull null]),
    (self.thirdPartyDeviceId ?: [NSNull null]),
    (self.deviceFingerprint ?: [NSNull null]),
    (self.applicationName ?: [NSNull null]),
    (self.applicationVersion ?: [NSNull null]),
    (self.deviceLanguage ?: [NSNull null]),
    (self.deviceOsReleaseVersion ?: [NSNull null]),
    (self.screenHeightPixels ?: [NSNull null]),
    (self.screenWidthPixels ?: [NSNull null]),
  ];
}
@end

@implementation LegacyCredentialStoreData
+ (instancetype)makeWithIdentityId:(nullable NSString *)identityId
    accessKeyId:(nullable NSString *)accessKeyId
    secretAccessKey:(nullable NSString *)secretAccessKey
    sessionToken:(nullable NSString *)sessionToken
    expirationMsSinceEpoch:(nullable NSNumber *)expirationMsSinceEpoch
    accessToken:(nullable NSString *)accessToken
    refreshToken:(nullable NSString *)refreshToken
    idToken:(nullable NSString *)idToken {
  LegacyCredentialStoreData* pigeonResult = [[LegacyCredentialStoreData alloc] init];
  pigeonResult.identityId = identityId;
  pigeonResult.accessKeyId = accessKeyId;
  pigeonResult.secretAccessKey = secretAccessKey;
  pigeonResult.sessionToken = sessionToken;
  pigeonResult.expirationMsSinceEpoch = expirationMsSinceEpoch;
  pigeonResult.accessToken = accessToken;
  pigeonResult.refreshToken = refreshToken;
  pigeonResult.idToken = idToken;
  return pigeonResult;
}
+ (LegacyCredentialStoreData *)fromList:(NSArray *)list {
  LegacyCredentialStoreData *pigeonResult = [[LegacyCredentialStoreData alloc] init];
  pigeonResult.identityId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.accessKeyId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.secretAccessKey = GetNullableObjectAtIndex(list, 2);
  pigeonResult.sessionToken = GetNullableObjectAtIndex(list, 3);
  pigeonResult.expirationMsSinceEpoch = GetNullableObjectAtIndex(list, 4);
  pigeonResult.accessToken = GetNullableObjectAtIndex(list, 5);
  pigeonResult.refreshToken = GetNullableObjectAtIndex(list, 6);
  pigeonResult.idToken = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable LegacyCredentialStoreData *)nullableFromList:(NSArray *)list {
  return (list) ? [LegacyCredentialStoreData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.identityId ?: [NSNull null]),
    (self.accessKeyId ?: [NSNull null]),
    (self.secretAccessKey ?: [NSNull null]),
    (self.sessionToken ?: [NSNull null]),
    (self.expirationMsSinceEpoch ?: [NSNull null]),
    (self.accessToken ?: [NSNull null]),
    (self.refreshToken ?: [NSNull null]),
    (self.idToken ?: [NSNull null]),
  ];
}
@end

@implementation LegacyDeviceDetailsSecret
+ (instancetype)makeWithDeviceKey:(nullable NSString *)deviceKey
    deviceGroupKey:(nullable NSString *)deviceGroupKey
    devicePassword:(nullable NSString *)devicePassword
    asfDeviceId:(nullable NSString *)asfDeviceId {
  LegacyDeviceDetailsSecret* pigeonResult = [[LegacyDeviceDetailsSecret alloc] init];
  pigeonResult.deviceKey = deviceKey;
  pigeonResult.deviceGroupKey = deviceGroupKey;
  pigeonResult.devicePassword = devicePassword;
  pigeonResult.asfDeviceId = asfDeviceId;
  return pigeonResult;
}
+ (LegacyDeviceDetailsSecret *)fromList:(NSArray *)list {
  LegacyDeviceDetailsSecret *pigeonResult = [[LegacyDeviceDetailsSecret alloc] init];
  pigeonResult.deviceKey = GetNullableObjectAtIndex(list, 0);
  pigeonResult.deviceGroupKey = GetNullableObjectAtIndex(list, 1);
  pigeonResult.devicePassword = GetNullableObjectAtIndex(list, 2);
  pigeonResult.asfDeviceId = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable LegacyDeviceDetailsSecret *)nullableFromList:(NSArray *)list {
  return (list) ? [LegacyDeviceDetailsSecret fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.deviceKey ?: [NSNull null]),
    (self.deviceGroupKey ?: [NSNull null]),
    (self.devicePassword ?: [NSNull null]),
    (self.asfDeviceId ?: [NSNull null]),
  ];
}
@end

NSObject<FlutterMessageCodec> *NativeAuthPluginGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface NativeAuthPlugin ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NativeAuthPlugin

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)exchangeParams:(NSDictionary<NSString *, NSString *> *)arg_params completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthPlugin.exchange"
      binaryMessenger:self.binaryMessenger
      codec:NativeAuthPluginGetCodec()];
  [channel sendMessage:@[arg_params ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

@interface NativeAuthBridgeCodecReader : FlutterStandardReader
@end
@implementation NativeAuthBridgeCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [LegacyCredentialStoreData fromList:[self readValue]];
    case 129: 
      return [LegacyDeviceDetailsSecret fromList:[self readValue]];
    case 130: 
      return [NativeUserContextData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface NativeAuthBridgeCodecWriter : FlutterStandardWriter
@end
@implementation NativeAuthBridgeCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[LegacyCredentialStoreData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LegacyDeviceDetailsSecret class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[NativeUserContextData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface NativeAuthBridgeCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativeAuthBridgeCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NativeAuthBridgeCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NativeAuthBridgeCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NativeAuthBridgeGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    NativeAuthBridgeCodecReaderWriter *readerWriter = [[NativeAuthBridgeCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void NativeAuthBridgeSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativeAuthBridge> *api) {
  /// Sign in by presenting [url] and waiting for a response to a URL with
  /// [callbackUrlScheme].
  ///
  /// If [preferPrivateSession] is `true`, do not persist session cookies.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.signInWithUrl"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInWithUrlUrl:callbackUrlScheme:preferPrivateSession:browserPackageName:completion:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(signInWithUrlUrl:callbackUrlScheme:preferPrivateSession:browserPackageName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_url = GetNullableObjectAtIndex(args, 0);
        NSString *arg_callbackUrlScheme = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_preferPrivateSession = GetNullableObjectAtIndex(args, 2);
        NSString *arg_browserPackageName = GetNullableObjectAtIndex(args, 3);
        [api signInWithUrlUrl:arg_url callbackUrlScheme:arg_callbackUrlScheme preferPrivateSession:arg_preferPrivateSession browserPackageName:arg_browserPackageName completion:^(NSDictionary<NSString *, NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Sign out by presenting [url] and waiting for a response to a URL with
  /// [callbackUrlScheme].
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.signOutWithUrl"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signOutWithUrlUrl:callbackUrlScheme:preferPrivateSession:browserPackageName:completion:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(signOutWithUrlUrl:callbackUrlScheme:preferPrivateSession:browserPackageName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_url = GetNullableObjectAtIndex(args, 0);
        NSString *arg_callbackUrlScheme = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_preferPrivateSession = GetNullableObjectAtIndex(args, 2);
        NSString *arg_browserPackageName = GetNullableObjectAtIndex(args, 3);
        [api signOutWithUrlUrl:arg_url callbackUrlScheme:arg_callbackUrlScheme preferPrivateSession:arg_preferPrivateSession browserPackageName:arg_browserPackageName completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Retrieves the validation data for the current iOS/Android device.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getValidationData"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getValidationDataWithError:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(getValidationDataWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSDictionary<NSString *, NSString *> *output = [api getValidationDataWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Retrieves context data as required for advanced security features (ASF).
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getContextData"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getContextDataWithError:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(getContextDataWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NativeUserContextData *output = [api getContextDataWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getBundleId"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getBundleIdWithError:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(getBundleIdWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getBundleIdWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Fetch legacy credentials stored by native SDKs.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getLegacyCredentials"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLegacyCredentialsIdentityPoolId:appClientId:completion:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(getLegacyCredentialsIdentityPoolId:appClientId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_identityPoolId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_appClientId = GetNullableObjectAtIndex(args, 1);
        [api getLegacyCredentialsIdentityPoolId:arg_identityPoolId appClientId:arg_appClientId completion:^(LegacyCredentialStoreData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Clears the legacy credential store data.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.clearLegacyCredentials"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearLegacyCredentialsWithCompletion:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(clearLegacyCredentialsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api clearLegacyCredentialsWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Fetch legacy device secrets stored by native SDKs.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.fetchLegacyDeviceSecrets"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchLegacyDeviceSecretsUserPoolId:appClientId:completion:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(fetchLegacyDeviceSecretsUserPoolId:appClientId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_userPoolId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_appClientId = GetNullableObjectAtIndex(args, 1);
        [api fetchLegacyDeviceSecretsUserPoolId:arg_userPoolId appClientId:arg_appClientId completion:^(LegacyDeviceDetailsSecret *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Clears the legacy device secrets.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.deleteLegacyDeviceSecrets"
        binaryMessenger:binaryMessenger
        codec:NativeAuthBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deleteLegacyDeviceSecretsUserPoolId:appClientId:completion:)], @"NativeAuthBridge api (%@) doesn't respond to @selector(deleteLegacyDeviceSecretsUserPoolId:appClientId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_userPoolId = GetNullableObjectAtIndex(args, 0);
        NSString *arg_appClientId = GetNullableObjectAtIndex(args, 1);
        [api deleteLegacyDeviceSecretsUserPoolId:arg_userPoolId appClientId:arg_appClientId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
