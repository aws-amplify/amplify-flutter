// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class NativeUserContextData;
@class LegacyCredentialStoreData;
@class LegacyDeviceDetailsSecret;

@interface NativeUserContextData : NSObject
+ (instancetype)makeWithDeviceName:(nullable NSString *)deviceName
    thirdPartyDeviceId:(nullable NSString *)thirdPartyDeviceId
    deviceFingerprint:(nullable NSString *)deviceFingerprint
    applicationName:(nullable NSString *)applicationName
    applicationVersion:(nullable NSString *)applicationVersion
    deviceLanguage:(nullable NSString *)deviceLanguage
    deviceOsReleaseVersion:(nullable NSString *)deviceOsReleaseVersion
    screenHeightPixels:(nullable NSNumber *)screenHeightPixels
    screenWidthPixels:(nullable NSNumber *)screenWidthPixels;
@property(nonatomic, copy, nullable) NSString * deviceName;
@property(nonatomic, copy, nullable) NSString * thirdPartyDeviceId;
@property(nonatomic, copy, nullable) NSString * deviceFingerprint;
@property(nonatomic, copy, nullable) NSString * applicationName;
@property(nonatomic, copy, nullable) NSString * applicationVersion;
@property(nonatomic, copy, nullable) NSString * deviceLanguage;
@property(nonatomic, copy, nullable) NSString * deviceOsReleaseVersion;
@property(nonatomic, strong, nullable) NSNumber * screenHeightPixels;
@property(nonatomic, strong, nullable) NSNumber * screenWidthPixels;
@end

@interface LegacyCredentialStoreData : NSObject
+ (instancetype)makeWithIdentityId:(nullable NSString *)identityId
    accessKeyId:(nullable NSString *)accessKeyId
    secretAccessKey:(nullable NSString *)secretAccessKey
    sessionToken:(nullable NSString *)sessionToken
    expirationMsSinceEpoch:(nullable NSNumber *)expirationMsSinceEpoch
    accessToken:(nullable NSString *)accessToken
    refreshToken:(nullable NSString *)refreshToken
    idToken:(nullable NSString *)idToken;
@property(nonatomic, copy, nullable) NSString * identityId;
@property(nonatomic, copy, nullable) NSString * accessKeyId;
@property(nonatomic, copy, nullable) NSString * secretAccessKey;
@property(nonatomic, copy, nullable) NSString * sessionToken;
@property(nonatomic, strong, nullable) NSNumber * expirationMsSinceEpoch;
@property(nonatomic, copy, nullable) NSString * accessToken;
@property(nonatomic, copy, nullable) NSString * refreshToken;
@property(nonatomic, copy, nullable) NSString * idToken;
@end

@interface LegacyDeviceDetailsSecret : NSObject
+ (instancetype)makeWithDeviceKey:(nullable NSString *)deviceKey
    deviceGroupKey:(nullable NSString *)deviceGroupKey
    devicePassword:(nullable NSString *)devicePassword
    asfDeviceId:(nullable NSString *)asfDeviceId;
@property(nonatomic, copy, nullable) NSString * deviceKey;
@property(nonatomic, copy, nullable) NSString * deviceGroupKey;
@property(nonatomic, copy, nullable) NSString * devicePassword;
@property(nonatomic, copy, nullable) NSString * asfDeviceId;
@end

/// The codec used by NativeAuthPlugin.
NSObject<FlutterMessageCodec> *NativeAuthPluginGetCodec(void);

@interface NativeAuthPlugin : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
/// Exchanges the route parameters used to launch the app, i.e. if the app
/// was closed and a redirect happened to the custom URI scheme (iOS) or an
/// intent was launched with the redirect parameters (Android).
- (void)exchangeParams:(NSDictionary<NSString *, NSString *> *)params completion:(void (^)(FlutterError *_Nullable))completion;
@end

/// The codec used by NativeAuthBridge.
NSObject<FlutterMessageCodec> *NativeAuthBridgeGetCodec(void);

@protocol NativeAuthBridge
/// Sign in by presenting [url] and waiting for a response to a URL with
/// [callbackUrlScheme].
///
/// If [preferPrivateSession] is `true`, do not persist session cookies.
- (void)signInWithUrlUrl:(NSString *)url callbackUrlScheme:(NSString *)callbackUrlScheme preferPrivateSession:(NSNumber *)preferPrivateSession browserPackageName:(nullable NSString *)browserPackageName completion:(void (^)(NSDictionary<NSString *, NSString *> *_Nullable, FlutterError *_Nullable))completion;
/// Sign out by presenting [url] and waiting for a response to a URL with
/// [callbackUrlScheme].
- (void)signOutWithUrlUrl:(NSString *)url callbackUrlScheme:(NSString *)callbackUrlScheme preferPrivateSession:(NSNumber *)preferPrivateSession browserPackageName:(nullable NSString *)browserPackageName completion:(void (^)(FlutterError *_Nullable))completion;
/// Retrieves the validation data for the current iOS/Android device.
///
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, NSString *> *)getValidationDataWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Retrieves context data as required for advanced security features (ASF).
///
/// @return `nil` only when `error != nil`.
- (nullable NativeUserContextData *)getContextDataWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getBundleIdWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Fetch legacy credentials stored by native SDKs.
- (void)getLegacyCredentialsIdentityPoolId:(nullable NSString *)identityPoolId appClientId:(nullable NSString *)appClientId completion:(void (^)(LegacyCredentialStoreData *_Nullable, FlutterError *_Nullable))completion;
/// Clears the legacy credential store data.
- (void)clearLegacyCredentialsWithCompletion:(void (^)(FlutterError *_Nullable))completion;
/// Fetch legacy device secrets stored by native SDKs.
- (void)fetchLegacyDeviceSecretsUserPoolId:(nullable NSString *)userPoolId appClientId:(nullable NSString *)appClientId completion:(void (^)(LegacyDeviceDetailsSecret *_Nullable, FlutterError *_Nullable))completion;
/// Clears the legacy device secrets.
- (void)deleteLegacyDeviceSecretsUserPoolId:(nullable NSString *)userPoolId appClientId:(nullable NSString *)appClientId completion:(void (^)(FlutterError *_Nullable))completion;
@end

extern void NativeAuthBridgeSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativeAuthBridge> *_Nullable api);

NS_ASSUME_NONNULL_END
