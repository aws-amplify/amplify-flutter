//
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.amazonaws.amplify.amplify_auth_cognito

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object NativeAuthPluginBindingsPigeonPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserContextData (
  val deviceName: String? = null,
  val thirdPartyDeviceId: String? = null,
  val deviceFingerprint: String? = null,
  val applicationName: String? = null,
  val applicationVersion: String? = null,
  val deviceLanguage: String? = null,
  val deviceOsReleaseVersion: String? = null,
  val screenHeightPixels: Long? = null,
  val screenWidthPixels: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeUserContextData {
      val deviceName = pigeonVar_list[0] as String?
      val thirdPartyDeviceId = pigeonVar_list[1] as String?
      val deviceFingerprint = pigeonVar_list[2] as String?
      val applicationName = pigeonVar_list[3] as String?
      val applicationVersion = pigeonVar_list[4] as String?
      val deviceLanguage = pigeonVar_list[5] as String?
      val deviceOsReleaseVersion = pigeonVar_list[6] as String?
      val screenHeightPixels = pigeonVar_list[7] as Long?
      val screenWidthPixels = pigeonVar_list[8] as Long?
      return NativeUserContextData(deviceName, thirdPartyDeviceId, deviceFingerprint, applicationName, applicationVersion, deviceLanguage, deviceOsReleaseVersion, screenHeightPixels, screenWidthPixels)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceName,
      thirdPartyDeviceId,
      deviceFingerprint,
      applicationName,
      applicationVersion,
      deviceLanguage,
      deviceOsReleaseVersion,
      screenHeightPixels,
      screenWidthPixels,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is NativeUserContextData) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeAuthPluginBindingsPigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LegacyCredentialStoreData (
  val identityId: String? = null,
  val accessKeyId: String? = null,
  val secretAccessKey: String? = null,
  val sessionToken: String? = null,
  val expirationMsSinceEpoch: Long? = null,
  val accessToken: String? = null,
  val refreshToken: String? = null,
  val idToken: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): LegacyCredentialStoreData {
      val identityId = pigeonVar_list[0] as String?
      val accessKeyId = pigeonVar_list[1] as String?
      val secretAccessKey = pigeonVar_list[2] as String?
      val sessionToken = pigeonVar_list[3] as String?
      val expirationMsSinceEpoch = pigeonVar_list[4] as Long?
      val accessToken = pigeonVar_list[5] as String?
      val refreshToken = pigeonVar_list[6] as String?
      val idToken = pigeonVar_list[7] as String?
      return LegacyCredentialStoreData(identityId, accessKeyId, secretAccessKey, sessionToken, expirationMsSinceEpoch, accessToken, refreshToken, idToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      identityId,
      accessKeyId,
      secretAccessKey,
      sessionToken,
      expirationMsSinceEpoch,
      accessToken,
      refreshToken,
      idToken,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is LegacyCredentialStoreData) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeAuthPluginBindingsPigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LegacyDeviceDetailsSecret (
  val deviceKey: String? = null,
  val deviceGroupKey: String? = null,
  val devicePassword: String? = null,
  val asfDeviceId: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): LegacyDeviceDetailsSecret {
      val deviceKey = pigeonVar_list[0] as String?
      val deviceGroupKey = pigeonVar_list[1] as String?
      val devicePassword = pigeonVar_list[2] as String?
      val asfDeviceId = pigeonVar_list[3] as String?
      return LegacyDeviceDetailsSecret(deviceKey, deviceGroupKey, devicePassword, asfDeviceId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      deviceKey,
      deviceGroupKey,
      devicePassword,
      asfDeviceId,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is LegacyDeviceDetailsSecret) {
      return false
    }
    if (this === other) {
      return true
    }
    return NativeAuthPluginBindingsPigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class NativeAuthPluginBindingsPigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserContextData.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LegacyCredentialStoreData.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LegacyDeviceDetailsSecret.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeUserContextData -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is LegacyCredentialStoreData -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is LegacyDeviceDetailsSecret -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class NativeAuthPlugin(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by NativeAuthPlugin. */
    val codec: MessageCodec<Any?> by lazy {
      NativeAuthPluginBindingsPigeonPigeonCodec()
    }
  }
  /**
   * Exchanges the route parameters used to launch the app, i.e. if the app
   * was closed and a redirect happened to the custom URI scheme (iOS) or an
   * intent was launched with the redirect parameters (Android).
   */
  fun exchange(paramsArg: Map<String, String>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthPlugin.exchange$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(paramsArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(NativeAuthPluginBindingsPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeAuthBridge {
  /**
   * Sign in by presenting [url] and waiting for a response to a URL with
   * [callbackUrlScheme].
   *
   * If [preferPrivateSession] is `true`, do not persist session cookies.
   */
  fun signInWithUrl(url: String, callbackUrlScheme: String, preferPrivateSession: Boolean, browserPackageName: String?, callback: (Result<Map<String, String>>) -> Unit)
  /**
   * Sign out by presenting [url] and waiting for a response to a URL with
   * [callbackUrlScheme].
   */
  fun signOutWithUrl(url: String, callbackUrlScheme: String, preferPrivateSession: Boolean, browserPackageName: String?, callback: (Result<Unit>) -> Unit)
  /** Retrieves the validation data for the current iOS/Android device. */
  fun getValidationData(): Map<String, String>
  /** Retrieves context data as required for advanced security features (ASF). */
  fun getContextData(): NativeUserContextData
  fun getBundleId(): String
  /** Fetch legacy credentials stored by native SDKs. */
  fun getLegacyCredentials(identityPoolId: String?, appClientId: String?, callback: (Result<LegacyCredentialStoreData>) -> Unit)
  /** Clears the legacy credential store data. */
  fun clearLegacyCredentials(callback: (Result<Unit>) -> Unit)
  /** Fetch legacy device secrets stored by native SDKs. */
  fun fetchLegacyDeviceSecrets(username: String, userPoolId: String, callback: (Result<LegacyDeviceDetailsSecret?>) -> Unit)
  /** Clears the legacy device secrets. */
  fun deleteLegacyDeviceSecrets(username: String, userPoolId: String, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by NativeAuthBridge. */
    val codec: MessageCodec<Any?> by lazy {
      NativeAuthPluginBindingsPigeonPigeonCodec()
    }
    /** Sets up an instance of `NativeAuthBridge` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeAuthBridge?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.signInWithUrl$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val callbackUrlSchemeArg = args[1] as String
            val preferPrivateSessionArg = args[2] as Boolean
            val browserPackageNameArg = args[3] as String?
            api.signInWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg) { result: Result<Map<String, String>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.signOutWithUrl$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val callbackUrlSchemeArg = args[1] as String
            val preferPrivateSessionArg = args[2] as Boolean
            val browserPackageNameArg = args[3] as String?
            api.signOutWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getValidationData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getValidationData())
            } catch (exception: Throwable) {
              NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getContextData$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getContextData())
            } catch (exception: Throwable) {
              NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getBundleId$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getBundleId())
            } catch (exception: Throwable) {
              NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.getLegacyCredentials$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identityPoolIdArg = args[0] as String?
            val appClientIdArg = args[1] as String?
            api.getLegacyCredentials(identityPoolIdArg, appClientIdArg) { result: Result<LegacyCredentialStoreData> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.clearLegacyCredentials$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.clearLegacyCredentials{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.fetchLegacyDeviceSecrets$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val usernameArg = args[0] as String
            val userPoolIdArg = args[1] as String
            api.fetchLegacyDeviceSecrets(usernameArg, userPoolIdArg) { result: Result<LegacyDeviceDetailsSecret?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.amplify_auth_cognito.NativeAuthBridge.deleteLegacyDeviceSecrets$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val usernameArg = args[0] as String
            val userPoolIdArg = args[1] as String
            api.deleteLegacyDeviceSecrets(usernameArg, userPoolIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(NativeAuthPluginBindingsPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
