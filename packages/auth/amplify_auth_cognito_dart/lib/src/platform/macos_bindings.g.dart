// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// ignore_for_file: type=lint
// ignore_for_file: return_of_invalid_type

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for Foundation and supporting frameworks (AppKit/IOKit).
///
/// Regenerate bindings with `dart run ffigen --config=ffigen.macos.yaml`.
///
class NativeMacOsFramework {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeMacOsFramework(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeMacOsFramework.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int uname(
    ffi.Pointer<utsname> arg0,
  ) {
    return _uname(
      arg0,
    );
  }

  late final _unamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<utsname>)>>(
          'uname');
  late final _uname =
      _unamePtr.asFunction<int Function(ffi.Pointer<utsname>)>();

  /// This is a synonym for NULL, if you'd rather use a named constant.
  late final ffi.Pointer<ffi.Pointer<__CFAllocator>> _kCFAllocatorDefault =
      _lookup<ffi.Pointer<__CFAllocator>>('kCFAllocatorDefault');

  ffi.Pointer<__CFAllocator> get kCFAllocatorDefault =>
      _kCFAllocatorDefault.value;

  set kCFAllocatorDefault(ffi.Pointer<__CFAllocator> value) =>
      _kCFAllocatorDefault.value = value;

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  ffi.Pointer<CFDictionary> CFDictionaryCreate(
    ffi.Pointer<__CFAllocator> allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CFDictionary> Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Long,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      ffi.Pointer<CFDictionary> Function(
          ffi.Pointer<__CFAllocator>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  ffi.Pointer<CFData> CFDataCreate(
    ffi.Pointer<__CFAllocator> allocator,
    ffi.Pointer<ffi.UnsignedChar> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CFData> Function(ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.UnsignedChar>, ffi.Long)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      ffi.Pointer<CFData> Function(
          ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  ffi.Pointer<ffi.UnsignedChar> CFDataGetBytePtr(
    ffi.Pointer<CFData> theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<CFData>)>>('CFDataGetBytePtr');
  late final _CFDataGetBytePtr = _CFDataGetBytePtrPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<CFData>)>();

  ffi.Pointer<CFString> CFStringCreateWithCString(
    ffi.Pointer<__CFAllocator> alloc,
    ffi.Pointer<ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CFString> Function(
              ffi.Pointer<__CFAllocator>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          ffi.Pointer<CFString> Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> CFStringGetCStringPtr(
    ffi.Pointer<CFString> theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<CFString>,
              ffi.UnsignedInt)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<CFString>, int)>();

  /// The bundle identifier (for CFBundleGetBundleWithIdentifier())
  late final ffi.Pointer<ffi.Pointer<CFString>> _kCFBundleVersionKey =
      _lookup<ffi.Pointer<CFString>>('kCFBundleVersionKey');

  ffi.Pointer<CFString> get kCFBundleVersionKey => _kCFBundleVersionKey.value;

  set kCFBundleVersionKey(ffi.Pointer<CFString> value) =>
      _kCFBundleVersionKey.value = value;

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    if (clazz == ffi.nullptr) {
      throw Exception('Failed to load Objective-C class: $name');
    }
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_retain(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_retain(
      value,
    );
  }

  late final __objc_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('objc_retain');
  late final __objc_retain = __objc_retainPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  void _objc_release(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_release(
      value,
    );
  }

  late final __objc_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_release');
  late final __objc_release =
      __objc_releasePtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  late final _objc_releaseFinalizer2 =
      ffi.NativeFinalizer(__objc_releasePtr.cast());
  late final _class_NSObject1 = _getClass1("NSObject");
  late final _sel_load1 = _registerName1("load");
  void _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initialize1 = _registerName1("initialize");
  late final _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_new1 = _registerName1("new");
  late final _sel_allocWithZone_1 = _registerName1("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_alloc1 = _registerName1("alloc");
  late final _sel_dealloc1 = _registerName1("dealloc");
  late final _sel_finalize1 = _registerName1("finalize");
  late final _sel_copy1 = _registerName1("copy");
  late final _sel_mutableCopy1 = _registerName1("mutableCopy");
  late final _sel_copyWithZone_1 = _registerName1("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
      clazz,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isKindOfClass_1 = _registerName1("isKindOfClass:");
  late final _class_Protocol1 = _getClass1("Protocol");
  late final _sel_conformsToProtocol_1 = _registerName1("conformsToProtocol:");
  bool _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      protocol,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodForSelector_1 = _registerName1("methodForSelector:");
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSInvocation1 = _getClass1("NSInvocation");
  late final _sel_forwardInvocation_1 = _registerName1("forwardInvocation:");
  void _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSMethodSignature1 = _getClass1("NSMethodSignature");
  late final _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final _sel_allowsWeakReference1 = _registerName1("allowsWeakReference");
  bool _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_retainWeakReference1 = _registerName1("retainWeakReference");
  late final _sel_isSubclassOfClass_1 = _registerName1("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = _registerName1("resolveClassMethod:");
  late final _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final _sel_hash1 = _registerName1("hash");
  int _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_superclass1 = _registerName1("superclass");
  late final _sel_class1 = _registerName1("class");
  late final _class_NSString1 = _getClass1("NSString");
  late final _sel_length1 = _registerName1("length");
  late final _sel_characterAtIndex_1 = _registerName1("characterAtIndex:");
  int _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _class_NSCoder1 = _getClass1("NSCoder");
  late final _sel_encodeValueOfObjCType_at_1 =
      _registerName1("encodeValueOfObjCType:at:");
  void _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
      type,
      addr,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  late final _class_NSData1 = _getClass1("NSData");
  late final _sel_bytes1 = _registerName1("bytes");
  ffi.Pointer<ffi.Void> _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeDataObject_1 = _registerName1("encodeDataObject:");
  void _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
      data,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDataObject1 = _registerName1("decodeDataObject");
  ffi.Pointer<ObjCObject> _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_decodeValueOfObjCType_at_size_1 =
      _registerName1("decodeValueOfObjCType:at:size:");
  void _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
      type,
      data,
      size,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  late final _sel_versionForClassName_1 =
      _registerName1("versionForClassName:");
  int _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> className,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      className,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeObject_1 = _registerName1("encodeObject:");
  void _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      object,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeRootObject_1 = _registerName1("encodeRootObject:");
  late final _sel_encodeBycopyObject_1 = _registerName1("encodeBycopyObject:");
  late final _sel_encodeByrefObject_1 = _registerName1("encodeByrefObject:");
  late final _sel_encodeConditionalObject_1 =
      _registerName1("encodeConditionalObject:");
  late final _sel_encodeValuesOfObjCTypes_1 =
      _registerName1("encodeValuesOfObjCTypes:");
  void _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> types,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      types,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_encodeArrayOfObjCType_count_at_1 =
      _registerName1("encodeArrayOfObjCType:count:at:");
  void _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    int count,
    ffi.Pointer<ffi.Void> array,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
      type,
      count,
      array,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  late final _sel_encodeBytes_length_1 = _registerName1("encodeBytes:length:");
  void _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> byteaddr,
    int length,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      byteaddr,
      length,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_decodeObject1 = _registerName1("decodeObject");
  late final _class_NSError1 = _getClass1("NSError");
  late final _sel_decodeTopLevelObjectAndReturnError_1 =
      _registerName1("decodeTopLevelObjectAndReturnError:");
  ffi.Pointer<ObjCObject> _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_decodeValuesOfObjCTypes_1 =
      _registerName1("decodeValuesOfObjCTypes:");
  late final _sel_decodeArrayOfObjCType_count_at_1 =
      _registerName1("decodeArrayOfObjCType:count:at:");
  late final _sel_decodeBytesWithReturnedLength_1 =
      _registerName1("decodeBytesWithReturnedLength:");
  ffi.Pointer<ffi.Void> _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      lengthp,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLong>)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.UnsignedLong>)>();

  late final _sel_encodePropertyList_1 = _registerName1("encodePropertyList:");
  late final _sel_decodePropertyList1 = _registerName1("decodePropertyList");
  late final _sel_setObjectZone_1 = _registerName1("setObjectZone:");
  void _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_objectZone1 = _registerName1("objectZone");
  ffi.Pointer<_NSZone> _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_NSZone> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      ffi.Pointer<_NSZone> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_systemVersion1 = _registerName1("systemVersion");
  int _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_allowsKeyedCoding1 = _registerName1("allowsKeyedCoding");
  late final _sel_encodeObject_forKey_1 =
      _registerName1("encodeObject:forKey:");
  void _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      object,
      key,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeConditionalObject_forKey_1 =
      _registerName1("encodeConditionalObject:forKey:");
  late final _sel_encodeBool_forKey_1 = _registerName1("encodeBool:forKey:");
  void _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt_forKey_1 = _registerName1("encodeInt:forKey:");
  void _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt32_forKey_1 = _registerName1("encodeInt32:forKey:");
  void _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt64_forKey_1 = _registerName1("encodeInt64:forKey:");
  void _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeFloat_forKey_1 = _registerName1("encodeFloat:forKey:");
  void _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeDouble_forKey_1 =
      _registerName1("encodeDouble:forKey:");
  void _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeBytes_length_forKey_1 =
      _registerName1("encodeBytes:length:forKey:");
  void _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Uint8> bytes,
    int length,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
      bytes,
      length,
      key,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Uint8>,
              ffi.UnsignedLong,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_containsValueForKey_1 =
      _registerName1("containsValueForKey:");
  bool _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeObjectForKey_1 = _registerName1("decodeObjectForKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeTopLevelObjectForKey_error_1 =
      _registerName1("decodeTopLevelObjectForKey:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
      key,
      error,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_decodeBoolForKey_1 = _registerName1("decodeBoolForKey:");
  late final _sel_decodeIntForKey_1 = _registerName1("decodeIntForKey:");
  int _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_40(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeInt32ForKey_1 = _registerName1("decodeInt32ForKey:");
  int _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_41(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeInt64ForKey_1 = _registerName1("decodeInt64ForKey:");
  int _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeFloatForKey_1 = _registerName1("decodeFloatForKey:");
  double _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDoubleForKey_1 = _registerName1("decodeDoubleForKey:");
  double _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeBytesForKey_returnedLength_1 =
      _registerName1("decodeBytesForKey:returnedLength:");
  ffi.Pointer<ffi.Uint8> _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.UnsignedLong> lengthp,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
      key,
      lengthp,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedLong>)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.UnsignedLong>)>();

  late final _sel_encodeInteger_forKey_1 =
      _registerName1("encodeInteger:forKey:");
  void _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeIntegerForKey_1 =
      _registerName1("decodeIntegerForKey:");
  late final _sel_requiresSecureCoding1 =
      _registerName1("requiresSecureCoding");
  late final _sel_decodeObjectOfClass_forKey_1 =
      _registerName1("decodeObjectOfClass:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
      aClass,
      key,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeTopLevelObjectOfClass_forKey_error_1 =
      _registerName1("decodeTopLevelObjectOfClass:forKey:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
      aClass,
      key,
      error,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _class_NSArray1 = _getClass1("NSArray");
  late final _sel_count1 = _registerName1("count");
  late final _sel_objectAtIndex_1 = _registerName1("objectAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithObjects_count_1 =
      _registerName1("initWithObjects:count:");
  instancetype _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int cnt,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
      objects,
      cnt,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final _sel_initWithCoder_1 = _registerName1("initWithCoder:");
  instancetype _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayByAddingObject_1 =
      _registerName1("arrayByAddingObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayByAddingObjectsFromArray_1 =
      _registerName1("arrayByAddingObjectsFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_componentsJoinedByString_1 =
      _registerName1("componentsJoinedByString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> separator,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
      separator,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_containsObject_1 = _registerName1("containsObject:");
  late final _sel_description1 = _registerName1("description");
  ffi.Pointer<ObjCObject> _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_descriptionWithLocale_indent_1 =
      _registerName1("descriptionWithLocale:indent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
    int level,
  ) {
    return __objc_msgSend_57(
      obj,
      sel,
      locale,
      level,
    );
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_firstObjectCommonWithArray_1 =
      _registerName1("firstObjectCommonWithArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_getObjects_range_1 = _registerName1("getObjects:range:");
  void _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    _NSRange range,
  ) {
    return __objc_msgSend_59(
      obj,
      sel,
      objects,
      range,
    );
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, _NSRange)>();

  late final _sel_indexOfObject_1 = _registerName1("indexOfObject:");
  int _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_60(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_indexOfObject_inRange_1 =
      _registerName1("indexOfObject:inRange:");
  int _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    _NSRange range,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_indexOfObjectIdenticalTo_1 =
      _registerName1("indexOfObjectIdenticalTo:");
  late final _sel_indexOfObjectIdenticalTo_inRange_1 =
      _registerName1("indexOfObjectIdenticalTo:inRange:");
  late final _sel_isEqualToArray_1 = _registerName1("isEqualToArray:");
  bool _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_firstObject1 = _registerName1("firstObject");
  late final _sel_lastObject1 = _registerName1("lastObject");
  late final _class_NSEnumerator1 = _getClass1("NSEnumerator");
  late final _sel_nextObject1 = _registerName1("nextObject");
  late final _sel_allObjects1 = _registerName1("allObjects");
  late final _sel_objectEnumerator1 = _registerName1("objectEnumerator");
  ffi.Pointer<ObjCObject> _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_reverseObjectEnumerator1 =
      _registerName1("reverseObjectEnumerator");
  late final _sel_sortedArrayHint1 = _registerName1("sortedArrayHint");
  late final _sel_sortedArrayUsingFunction_context_1 =
      _registerName1("sortedArrayUsingFunction:context:");
  ffi.Pointer<ObjCObject> _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      comparator,
      context,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortedArrayUsingFunction_context_hint_1 =
      _registerName1("sortedArrayUsingFunction:context:hint:");
  ffi.Pointer<ObjCObject> _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ObjCObject> hint,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
      comparator,
      context,
      hint,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_sortedArrayUsingSelector_1 =
      _registerName1("sortedArrayUsingSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> comparator,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
      comparator,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_subarrayWithRange_1 = _registerName1("subarrayWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _class_NSURL1 = _getClass1("NSURL");
  late final _sel_writeToURL_error_1 = _registerName1("writeToURL:error:");
  bool _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_makeObjectsPerformSelector_1 =
      _registerName1("makeObjectsPerformSelector:");
  late final _sel_makeObjectsPerformSelector_withObject_1 =
      _registerName1("makeObjectsPerformSelector:withObject:");
  void _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> argument,
  ) {
    return __objc_msgSend_69(
      obj,
      sel,
      aSelector,
      argument,
    );
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSIndexSet1 = _getClass1("NSIndexSet");
  late final _sel_indexSet1 = _registerName1("indexSet");
  late final _sel_indexSetWithIndex_1 = _registerName1("indexSetWithIndex:");
  late final _sel_indexSetWithIndexesInRange_1 =
      _registerName1("indexSetWithIndexesInRange:");
  instancetype _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_initWithIndexesInRange_1 =
      _registerName1("initWithIndexesInRange:");
  late final _sel_initWithIndexSet_1 = _registerName1("initWithIndexSet:");
  instancetype _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithIndex_1 = _registerName1("initWithIndex:");
  late final _sel_isEqualToIndexSet_1 = _registerName1("isEqualToIndexSet:");
  bool _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_firstIndex1 = _registerName1("firstIndex");
  late final _sel_lastIndex1 = _registerName1("lastIndex");
  late final _sel_indexGreaterThanIndex_1 =
      _registerName1("indexGreaterThanIndex:");
  int _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_indexLessThanIndex_1 = _registerName1("indexLessThanIndex:");
  late final _sel_indexGreaterThanOrEqualToIndex_1 =
      _registerName1("indexGreaterThanOrEqualToIndex:");
  late final _sel_indexLessThanOrEqualToIndex_1 =
      _registerName1("indexLessThanOrEqualToIndex:");
  late final _sel_getIndexes_maxCount_inIndexRange_1 =
      _registerName1("getIndexes:maxCount:inIndexRange:");
  int _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLong> indexBuffer,
    int bufferSize,
    ffi.Pointer<_NSRange> range,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
      indexBuffer,
      bufferSize,
      range,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedLong,
              ffi.Pointer<_NSRange>)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedLong>, int, ffi.Pointer<_NSRange>)>();

  late final _sel_countOfIndexesInRange_1 =
      _registerName1("countOfIndexesInRange:");
  int _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_containsIndex_1 = _registerName1("containsIndex:");
  bool _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_containsIndexesInRange_1 =
      _registerName1("containsIndexesInRange:");
  bool _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_containsIndexes_1 = _registerName1("containsIndexes:");
  late final _sel_intersectsIndexesInRange_1 =
      _registerName1("intersectsIndexesInRange:");
  ffi.Pointer<_ObjCBlockDesc> _newBlockDesc1() {
    final d =
        pkg_ffi.calloc.allocate<_ObjCBlockDesc>(ffi.sizeOf<_ObjCBlockDesc>());
    d.ref.reserved = 0;
    d.ref.size = ffi.sizeOf<_ObjCBlock>();
    d.ref.copy_helper = ffi.nullptr;
    d.ref.dispose_helper = ffi.nullptr;
    d.ref.signature = ffi.nullptr;
    return d;
  }

  late final _objc_block_desc1 = _newBlockDesc1();
  late final _objc_concrete_global_block1 =
      _lookup<ffi.Void>('_NSConcreteGlobalBlock');
  ffi.Pointer<_ObjCBlock> _newBlock1(
      ffi.Pointer<ffi.Void> invoke, ffi.Pointer<ffi.Void> target) {
    final b = pkg_ffi.calloc.allocate<_ObjCBlock>(ffi.sizeOf<_ObjCBlock>());
    b.ref.isa = _objc_concrete_global_block1;
    b.ref.flags = 0;
    b.ref.reserved = 0;
    b.ref.invoke = invoke;
    b.ref.target = target;
    b.ref.descriptor = _objc_block_desc1;
    final copy = _Block_copy(b.cast()).cast<_ObjCBlock>();
    pkg_ffi.calloc.free(b);
    return copy;
  }

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_copy(
      value,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> value,
  ) {
    return __Block_release(
      value,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  late final _objc_releaseFinalizer11 =
      ffi.NativeFinalizer(__Block_releasePtr.cast());
  late final _sel_enumerateIndexesUsingBlock_1 =
      _registerName1("enumerateIndexesUsingBlock:");
  void _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateIndexesWithOptions_usingBlock_1 =
      _registerName1("enumerateIndexesWithOptions:usingBlock:");
  void _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateIndexesInRange_options_usingBlock_1 =
      _registerName1("enumerateIndexesInRange:options:usingBlock:");
  void _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexPassingTest_1 = _registerName1("indexPassingTest:");
  int _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexWithOptions_passingTest_1 =
      _registerName1("indexWithOptions:passingTest:");
  int _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexInRange_options_passingTest_1 =
      _registerName1("indexInRange:options:passingTest:");
  int _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              _NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesPassingTest_1 = _registerName1("indexesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesWithOptions_passingTest_1 =
      _registerName1("indexesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesInRange_options_passingTest_1 =
      _registerName1("indexesInRange:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              _NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, _NSRange, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesUsingBlock_1 =
      _registerName1("enumerateRangesUsingBlock:");
  void _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_87(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesWithOptions_usingBlock_1 =
      _registerName1("enumerateRangesWithOptions:usingBlock:");
  void _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateRangesInRange_options_usingBlock_1 =
      _registerName1("enumerateRangesInRange:options:usingBlock:");
  void _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsAtIndexes_1 = _registerName1("objectsAtIndexes:");
  ffi.Pointer<ObjCObject> _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
      indexes,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_objectAtIndexedSubscript_1 =
      _registerName1("objectAtIndexedSubscript:");
  late final _sel_enumerateObjectsUsingBlock_1 =
      _registerName1("enumerateObjectsUsingBlock:");
  void _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateObjectsWithOptions:usingBlock:");
  void _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsAtIndexes_options_usingBlock_1 =
      _registerName1("enumerateObjectsAtIndexes:options:usingBlock:");
  void _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
      s,
      opts,
      block,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectPassingTest_1 =
      _registerName1("indexOfObjectPassingTest:");
  int _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectWithOptions_passingTest_1 =
      _registerName1("indexOfObjectWithOptions:passingTest:");
  int _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectAtIndexes_options_passingTest_1 =
      _registerName1("indexOfObjectAtIndexes:options:passingTest:");
  int _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsPassingTest_1 =
      _registerName1("indexesOfObjectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsWithOptions_passingTest_1 =
      _registerName1("indexesOfObjectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsAtIndexes_options_passingTest_1 =
      _registerName1("indexesOfObjectsAtIndexes:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortedArrayUsingComparator_1 =
      _registerName1("sortedArrayUsingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortedArrayWithOptions_usingComparator_1 =
      _registerName1("sortedArrayWithOptions:usingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObject_inSortedRange_options_usingComparator_1 =
      _registerName1("indexOfObject:inSortedRange:options:usingComparator:");
  int _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> obj1,
    _NSRange r,
    int opts,
    ffi.Pointer<_ObjCBlock> cmp,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
      obj1,
      r,
      opts,
      cmp,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              _NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_array1 = _registerName1("array");
  late final _sel_arrayWithObject_1 = _registerName1("arrayWithObject:");
  instancetype _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_103(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayWithObjects_count_1 =
      _registerName1("arrayWithObjects:count:");
  late final _sel_arrayWithObjects_1 = _registerName1("arrayWithObjects:");
  late final _sel_arrayWithArray_1 = _registerName1("arrayWithArray:");
  late final _sel_initWithObjects_1 = _registerName1("initWithObjects:");
  late final _sel_initWithArray_1 = _registerName1("initWithArray:");
  late final _sel_initWithArray_copyItems_1 =
      _registerName1("initWithArray:copyItems:");
  instancetype _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> array,
    bool flag,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
      array,
      flag,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithContentsOfURL_error_1 =
      _registerName1("initWithContentsOfURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_arrayWithContentsOfURL_error_1 =
      _registerName1("arrayWithContentsOfURL:error:");
  late final _sel_differenceFromArray_withOptions_usingEquivalenceTest_1 =
      _registerName1("differenceFromArray:withOptions:usingEquivalenceTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
      other,
      options,
      block,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_differenceFromArray_withOptions_1 =
      _registerName1("differenceFromArray:withOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
      other,
      options,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_differenceFromArray_1 =
      _registerName1("differenceFromArray:");
  late final _sel_arrayByApplyingDifference_1 =
      _registerName1("arrayByApplyingDifference:");
  late final _sel_getObjects_1 = _registerName1("getObjects:");
  void _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
      objects,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_arrayWithContentsOfFile_1 =
      _registerName1("arrayWithContentsOfFile:");
  ffi.Pointer<ObjCObject> _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_arrayWithContentsOfURL_1 =
      _registerName1("arrayWithContentsOfURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithContentsOfFile_1 =
      _registerName1("initWithContentsOfFile:");
  late final _sel_initWithContentsOfURL_1 =
      _registerName1("initWithContentsOfURL:");
  late final _sel_writeToFile_atomically_1 =
      _registerName1("writeToFile:atomically:");
  bool _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool useAuxiliaryFile,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
      path,
      useAuxiliaryFile,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_writeToURL_atomically_1 =
      _registerName1("writeToURL:atomically:");
  bool _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool atomically,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
      url,
      atomically,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_decodeArrayOfObjectsOfClass_forKey_1 =
      _registerName1("decodeArrayOfObjectsOfClass:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> cls,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      cls,
      key,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSDictionary1 = _getClass1("NSDictionary");
  late final _sel_objectForKey_1 = _registerName1("objectForKey:");
  late final _sel_keyEnumerator1 = _registerName1("keyEnumerator");
  late final _sel_initWithObjects_forKeys_count_1 =
      _registerName1("initWithObjects:forKeys:count:");
  instancetype _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_allKeys1 = _registerName1("allKeys");
  ffi.Pointer<ObjCObject> _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_allKeysForObject_1 = _registerName1("allKeysForObject:");
  late final _sel_allValues1 = _registerName1("allValues");
  late final _sel_descriptionInStringsFileFormat1 =
      _registerName1("descriptionInStringsFileFormat");
  late final _sel_isEqualToDictionary_1 =
      _registerName1("isEqualToDictionary:");
  bool _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      otherDictionary,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_objectsForKeys_notFoundMarker_1 =
      _registerName1("objectsForKeys:notFoundMarker:");
  ffi.Pointer<ObjCObject> _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> marker,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
      keys,
      marker,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_keysSortedByValueUsingSelector_1 =
      _registerName1("keysSortedByValueUsingSelector:");
  late final _sel_getObjects_andKeys_count_1 =
      _registerName1("getObjects:andKeys:count:");
  void _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int count,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
      objects,
      keys,
      count,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_objectForKeyedSubscript_1 =
      _registerName1("objectForKeyedSubscript:");
  late final _sel_enumerateKeysAndObjectsUsingBlock_1 =
      _registerName1("enumerateKeysAndObjectsUsingBlock:");
  void _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateKeysAndObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateKeysAndObjectsWithOptions:usingBlock:");
  void _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysSortedByValueUsingComparator_1 =
      _registerName1("keysSortedByValueUsingComparator:");
  late final _sel_keysSortedByValueWithOptions_usingComparator_1 =
      _registerName1("keysSortedByValueWithOptions:usingComparator:");
  late final _sel_keysOfEntriesPassingTest_1 =
      _registerName1("keysOfEntriesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysOfEntriesWithOptions_passingTest_1 =
      _registerName1("keysOfEntriesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_getObjects_andKeys_1 = _registerName1("getObjects:andKeys:");
  void _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_dictionaryWithContentsOfFile_1 =
      _registerName1("dictionaryWithContentsOfFile:");
  ffi.Pointer<ObjCObject> _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithContentsOfURL_1 =
      _registerName1("dictionaryWithContentsOfURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionary1 = _registerName1("dictionary");
  late final _sel_dictionaryWithObject_forKey_1 =
      _registerName1("dictionaryWithObject:forKey:");
  instancetype _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
      object,
      key,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithObjects_forKeys_count_1 =
      _registerName1("dictionaryWithObjects:forKeys:count:");
  late final _sel_dictionaryWithObjectsAndKeys_1 =
      _registerName1("dictionaryWithObjectsAndKeys:");
  late final _sel_dictionaryWithDictionary_1 =
      _registerName1("dictionaryWithDictionary:");
  instancetype _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dict,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
      dict,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithObjects_forKeys_1 =
      _registerName1("dictionaryWithObjects:forKeys:");
  instancetype _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objects,
    ffi.Pointer<ObjCObject> keys,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithObjectsAndKeys_1 =
      _registerName1("initWithObjectsAndKeys:");
  late final _sel_initWithDictionary_1 = _registerName1("initWithDictionary:");
  late final _sel_initWithDictionary_copyItems_1 =
      _registerName1("initWithDictionary:copyItems:");
  instancetype _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
    bool flag,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
      otherDictionary,
      flag,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithObjects_forKeys_1 =
      _registerName1("initWithObjects:forKeys:");
  ffi.Pointer<ObjCObject> _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_dictionaryWithContentsOfURL_error_1 =
      _registerName1("dictionaryWithContentsOfURL:error:");
  late final _sel_sharedKeySetForKeys_1 =
      _registerName1("sharedKeySetForKeys:");
  late final _sel_countByEnumeratingWithState_objects_count_1 =
      _registerName1("countByEnumeratingWithState:objects:count:");
  int _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSFastEnumerationState> state,
    ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
    int len,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      state,
      buffer,
      len,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSFastEnumerationState>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1 =
      _registerName1("decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyCls,
    ffi.Pointer<ObjCObject> objectCls,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
      keyCls,
      objectCls,
      key,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSSet1 = _getClass1("NSSet");
  late final _sel_member_1 = _registerName1("member:");
  late final _sel_anyObject1 = _registerName1("anyObject");
  late final _sel_intersectsSet_1 = _registerName1("intersectsSet:");
  bool _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherSet,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      otherSet,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToSet_1 = _registerName1("isEqualToSet:");
  late final _sel_isSubsetOfSet_1 = _registerName1("isSubsetOfSet:");
  late final _sel_setByAddingObject_1 = _registerName1("setByAddingObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setByAddingObjectsFromSet_1 =
      _registerName1("setByAddingObjectsFromSet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
      other,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setByAddingObjectsFromArray_1 =
      _registerName1("setByAddingObjectsFromArray:");
  ffi.Pointer<ObjCObject> _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
      other,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  void _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsPassingTest_1 = _registerName1("objectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsWithOptions_passingTest_1 =
      _registerName1("objectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_set1 = _registerName1("set");
  late final _sel_setWithObject_1 = _registerName1("setWithObject:");
  late final _sel_setWithObjects_count_1 =
      _registerName1("setWithObjects:count:");
  late final _sel_setWithObjects_1 = _registerName1("setWithObjects:");
  late final _sel_setWithSet_1 = _registerName1("setWithSet:");
  instancetype _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> set1,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      set1,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setWithArray_1 = _registerName1("setWithArray:");
  late final _sel_initWithSet_1 = _registerName1("initWithSet:");
  late final _sel_initWithSet_copyItems_1 =
      _registerName1("initWithSet:copyItems:");
  instancetype _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> set1,
    bool flag,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
      set1,
      flag,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_decodeObjectOfClasses_forKey_1 =
      _registerName1("decodeObjectOfClasses:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> classes,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      classes,
      key,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeTopLevelObjectOfClasses_forKey_error_1 =
      _registerName1("decodeTopLevelObjectOfClasses:forKey:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> classes,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
      classes,
      key,
      error,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_decodeArrayOfObjectsOfClasses_forKey_1 =
      _registerName1("decodeArrayOfObjectsOfClasses:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> classes,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      classes,
      key,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1 =
      _registerName1(
          "decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyClasses,
    ffi.Pointer<ObjCObject> objectClasses,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      keyClasses,
      objectClasses,
      key,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodePropertyListForKey_1 =
      _registerName1("decodePropertyListForKey:");
  late final _sel_allowedClasses1 = _registerName1("allowedClasses");
  ffi.Pointer<ObjCObject> _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_failWithError_1 = _registerName1("failWithError:");
  void _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodingFailurePolicy1 =
      _registerName1("decodingFailurePolicy");
  int _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_error1 = _registerName1("error");
  ffi.Pointer<ObjCObject> _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeNXObject_1 = _registerName1("encodeNXObject:");
  late final _sel_decodeNXObject1 = _registerName1("decodeNXObject");
  late final _sel_decodeValueOfObjCType_at_1 =
      _registerName1("decodeValueOfObjCType:at:");
  late final _sel_encodePoint_1 = _registerName1("encodePoint:");
  void _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_decodePoint1 = _registerName1("decodePoint");
  CGPoint _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeSize_1 = _registerName1("encodeSize:");
  void _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_decodeSize1 = _registerName1("decodeSize");
  CGSize _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodeRect_1 = _registerName1("encodeRect:");
  void _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_decodeRect1 = _registerName1("decodeRect");
  CGRect _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_encodePoint_forKey_1 = _registerName1("encodePoint:forKey:");
  void _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
      point,
      key,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGPoint, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeSize_forKey_1 = _registerName1("encodeSize:forKey:");
  void _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
      size,
      key,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGSize, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeRect_forKey_1 = _registerName1("encodeRect:forKey:");
  void _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
      rect,
      key,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodePointForKey_1 = _registerName1("decodePointForKey:");
  CGPoint _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      CGPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeSizeForKey_1 = _registerName1("decodeSizeForKey:");
  CGSize _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      CGSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeRectForKey_1 = _registerName1("decodeRectForKey:");
  CGRect _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_substringFromIndex_1 = _registerName1("substringFromIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int from,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
      from,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_substringToIndex_1 = _registerName1("substringToIndex:");
  late final _sel_substringWithRange_1 = _registerName1("substringWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_getCharacters_range_1 =
      _registerName1("getCharacters:range:");
  void _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedShort> buffer,
    _NSRange range,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
      buffer,
      range,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedShort>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedShort>, _NSRange)>();

  late final _sel_compare_1 = _registerName1("compare:");
  int _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
      string,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_compare_options_1 = _registerName1("compare:options:");
  int _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
      string,
      mask,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_compare_options_range_1 =
      _registerName1("compare:options:range:");
  int _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    _NSRange rangeOfReceiverToCompare,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, _NSRange)>();

  late final _sel_compare_options_range_locale_1 =
      _registerName1("compare:options:range:locale:");
  int _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    _NSRange rangeOfReceiverToCompare,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
      locale,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              _NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, _NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_caseInsensitiveCompare_1 =
      _registerName1("caseInsensitiveCompare:");
  late final _sel_localizedCompare_1 = _registerName1("localizedCompare:");
  late final _sel_localizedCaseInsensitiveCompare_1 =
      _registerName1("localizedCaseInsensitiveCompare:");
  late final _sel_localizedStandardCompare_1 =
      _registerName1("localizedStandardCompare:");
  late final _sel_isEqualToString_1 = _registerName1("isEqualToString:");
  late final _sel_hasPrefix_1 = _registerName1("hasPrefix:");
  late final _sel_hasSuffix_1 = _registerName1("hasSuffix:");
  late final _sel_commonPrefixWithString_options_1 =
      _registerName1("commonPrefixWithString:options:");
  ffi.Pointer<ObjCObject> _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
    int mask,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
      str,
      mask,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_containsString_1 = _registerName1("containsString:");
  late final _sel_localizedCaseInsensitiveContainsString_1 =
      _registerName1("localizedCaseInsensitiveContainsString:");
  late final _sel_localizedStandardContainsString_1 =
      _registerName1("localizedStandardContainsString:");
  late final _sel_localizedStandardRangeOfString_1 =
      _registerName1("localizedStandardRangeOfString:");
  _NSRange _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
      str,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_rangeOfString_1 = _registerName1("rangeOfString:");
  late final _sel_rangeOfString_options_1 =
      _registerName1("rangeOfString:options:");
  _NSRange _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      searchString,
      mask,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_rangeOfString_options_range_1 =
      _registerName1("rangeOfString:options:range:");
  _NSRange _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, _NSRange)>();

  late final _class_NSLocale1 = _getClass1("NSLocale");
  late final _sel_displayNameForKey_value_1 =
      _registerName1("displayNameForKey:value:");
  ffi.Pointer<ObjCObject> _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      key,
      value,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithLocaleIdentifier_1 =
      _registerName1("initWithLocaleIdentifier:");
  late final _sel_localeIdentifier1 = _registerName1("localeIdentifier");
  late final _sel_localizedStringForLocaleIdentifier_1 =
      _registerName1("localizedStringForLocaleIdentifier:");
  late final _sel_languageCode1 = _registerName1("languageCode");
  late final _sel_localizedStringForLanguageCode_1 =
      _registerName1("localizedStringForLanguageCode:");
  late final _sel_countryCode1 = _registerName1("countryCode");
  late final _sel_localizedStringForCountryCode_1 =
      _registerName1("localizedStringForCountryCode:");
  late final _sel_scriptCode1 = _registerName1("scriptCode");
  late final _sel_localizedStringForScriptCode_1 =
      _registerName1("localizedStringForScriptCode:");
  late final _sel_variantCode1 = _registerName1("variantCode");
  late final _sel_localizedStringForVariantCode_1 =
      _registerName1("localizedStringForVariantCode:");
  late final _class_NSCharacterSet1 = _getClass1("NSCharacterSet");
  late final _sel_exemplarCharacterSet1 =
      _registerName1("exemplarCharacterSet");
  ffi.Pointer<ObjCObject> _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_calendarIdentifier1 = _registerName1("calendarIdentifier");
  late final _sel_localizedStringForCalendarIdentifier_1 =
      _registerName1("localizedStringForCalendarIdentifier:");
  late final _sel_collationIdentifier1 = _registerName1("collationIdentifier");
  late final _sel_localizedStringForCollationIdentifier_1 =
      _registerName1("localizedStringForCollationIdentifier:");
  late final _sel_usesMetricSystem1 = _registerName1("usesMetricSystem");
  late final _sel_decimalSeparator1 = _registerName1("decimalSeparator");
  late final _sel_groupingSeparator1 = _registerName1("groupingSeparator");
  late final _sel_currencySymbol1 = _registerName1("currencySymbol");
  late final _sel_currencyCode1 = _registerName1("currencyCode");
  late final _sel_localizedStringForCurrencyCode_1 =
      _registerName1("localizedStringForCurrencyCode:");
  late final _sel_collatorIdentifier1 = _registerName1("collatorIdentifier");
  late final _sel_localizedStringForCollatorIdentifier_1 =
      _registerName1("localizedStringForCollatorIdentifier:");
  late final _sel_quotationBeginDelimiter1 =
      _registerName1("quotationBeginDelimiter");
  late final _sel_quotationEndDelimiter1 =
      _registerName1("quotationEndDelimiter");
  late final _sel_alternateQuotationBeginDelimiter1 =
      _registerName1("alternateQuotationBeginDelimiter");
  late final _sel_alternateQuotationEndDelimiter1 =
      _registerName1("alternateQuotationEndDelimiter");
  late final _sel_autoupdatingCurrentLocale1 =
      _registerName1("autoupdatingCurrentLocale");
  ffi.Pointer<ObjCObject> _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_currentLocale1 = _registerName1("currentLocale");
  late final _sel_systemLocale1 = _registerName1("systemLocale");
  late final _sel_localeWithLocaleIdentifier_1 =
      _registerName1("localeWithLocaleIdentifier:");
  late final _sel_availableLocaleIdentifiers1 =
      _registerName1("availableLocaleIdentifiers");
  late final _sel_ISOLanguageCodes1 = _registerName1("ISOLanguageCodes");
  late final _sel_ISOCountryCodes1 = _registerName1("ISOCountryCodes");
  late final _sel_ISOCurrencyCodes1 = _registerName1("ISOCurrencyCodes");
  late final _sel_commonISOCurrencyCodes1 =
      _registerName1("commonISOCurrencyCodes");
  late final _sel_preferredLanguages1 = _registerName1("preferredLanguages");
  late final _sel_componentsFromLocaleIdentifier_1 =
      _registerName1("componentsFromLocaleIdentifier:");
  late final _sel_localeIdentifierFromComponents_1 =
      _registerName1("localeIdentifierFromComponents:");
  ffi.Pointer<ObjCObject> _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dict,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
      dict,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_canonicalLocaleIdentifierFromString_1 =
      _registerName1("canonicalLocaleIdentifierFromString:");
  late final _sel_canonicalLanguageIdentifierFromString_1 =
      _registerName1("canonicalLanguageIdentifierFromString:");
  late final _sel_localeIdentifierFromWindowsLocaleCode_1 =
      _registerName1("localeIdentifierFromWindowsLocaleCode:");
  ffi.Pointer<ObjCObject> _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int lcid,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
      lcid,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Uint32)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_windowsLocaleCodeFromLocaleIdentifier_1 =
      _registerName1("windowsLocaleCodeFromLocaleIdentifier:");
  int _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> localeIdentifier,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
      localeIdentifier,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_characterDirectionForLanguage_1 =
      _registerName1("characterDirectionForLanguage:");
  int _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> isoLangCode,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
      isoLangCode,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_lineDirectionForLanguage_1 =
      _registerName1("lineDirectionForLanguage:");
  late final _sel_rangeOfString_options_range_locale_1 =
      _registerName1("rangeOfString:options:range:locale:");
  _NSRange _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    _NSRange rangeOfReceiverToSearch,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_181(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
      locale,
    );
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              _NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, _NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_rangeOfCharacterFromSet_1 =
      _registerName1("rangeOfCharacterFromSet:");
  _NSRange _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchSet,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
      searchSet,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_rangeOfCharacterFromSet_options_1 =
      _registerName1("rangeOfCharacterFromSet:options:");
  _NSRange _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchSet,
    int mask,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
      searchSet,
      mask,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_rangeOfCharacterFromSet_options_range_1 =
      _registerName1("rangeOfCharacterFromSet:options:range:");
  _NSRange _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchSet,
    int mask,
    _NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
      searchSet,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, _NSRange)>();

  late final _sel_rangeOfComposedCharacterSequenceAtIndex_1 =
      _registerName1("rangeOfComposedCharacterSequenceAtIndex:");
  _NSRange _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_rangeOfComposedCharacterSequencesForRange_1 =
      _registerName1("rangeOfComposedCharacterSequencesForRange:");
  _NSRange _objc_msgSend_186(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_186(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_186Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_186 = __objc_msgSend_186Ptr.asFunction<
      _NSRange Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_stringByAppendingString_1 =
      _registerName1("stringByAppendingString:");
  late final _sel_stringByAppendingFormat_1 =
      _registerName1("stringByAppendingFormat:");
  late final _sel_doubleValue1 = _registerName1("doubleValue");
  double _objc_msgSend_187(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_187(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_187Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_187 = __objc_msgSend_187Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_floatValue1 = _registerName1("floatValue");
  double _objc_msgSend_188(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_188(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_188 = __objc_msgSend_188Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_intValue1 = _registerName1("intValue");
  int _objc_msgSend_189(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_189(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_189Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_189 = __objc_msgSend_189Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_integerValue1 = _registerName1("integerValue");
  int _objc_msgSend_190(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_190(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_190Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_190 = __objc_msgSend_190Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_longLongValue1 = _registerName1("longLongValue");
  int _objc_msgSend_191(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_191(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_191Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_191 = __objc_msgSend_191Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_boolValue1 = _registerName1("boolValue");
  late final _sel_uppercaseString1 = _registerName1("uppercaseString");
  late final _sel_lowercaseString1 = _registerName1("lowercaseString");
  late final _sel_capitalizedString1 = _registerName1("capitalizedString");
  late final _sel_localizedUppercaseString1 =
      _registerName1("localizedUppercaseString");
  late final _sel_localizedLowercaseString1 =
      _registerName1("localizedLowercaseString");
  late final _sel_localizedCapitalizedString1 =
      _registerName1("localizedCapitalizedString");
  late final _sel_uppercaseStringWithLocale_1 =
      _registerName1("uppercaseStringWithLocale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_192(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_192(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_192 = __objc_msgSend_192Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_lowercaseStringWithLocale_1 =
      _registerName1("lowercaseStringWithLocale:");
  late final _sel_capitalizedStringWithLocale_1 =
      _registerName1("capitalizedStringWithLocale:");
  late final _sel_getLineStart_end_contentsEnd_forRange_1 =
      _registerName1("getLineStart:end:contentsEnd:forRange:");
  void _objc_msgSend_193(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLong> startPtr,
    ffi.Pointer<ffi.UnsignedLong> lineEndPtr,
    ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
    _NSRange range,
  ) {
    return __objc_msgSend_193(
      obj,
      sel,
      startPtr,
      lineEndPtr,
      contentsEndPtr,
      range,
    );
  }

  late final __objc_msgSend_193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.UnsignedLong>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_193 = __objc_msgSend_193Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.UnsignedLong>,
          _NSRange)>();

  late final _sel_lineRangeForRange_1 = _registerName1("lineRangeForRange:");
  late final _sel_getParagraphStart_end_contentsEnd_forRange_1 =
      _registerName1("getParagraphStart:end:contentsEnd:forRange:");
  late final _sel_paragraphRangeForRange_1 =
      _registerName1("paragraphRangeForRange:");
  late final _sel_enumerateSubstringsInRange_options_usingBlock_1 =
      _registerName1("enumerateSubstringsInRange:options:usingBlock:");
  void _objc_msgSend_194(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_194(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_194Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_194 = __objc_msgSend_194Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateLinesUsingBlock_1 =
      _registerName1("enumerateLinesUsingBlock:");
  void _objc_msgSend_195(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_195(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_195 = __objc_msgSend_195Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_UTF8String1 = _registerName1("UTF8String");
  ffi.Pointer<ffi.Char> _objc_msgSend_196(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_196(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_196 = __objc_msgSend_196Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_fastestEncoding1 = _registerName1("fastestEncoding");
  late final _sel_smallestEncoding1 = _registerName1("smallestEncoding");
  late final _sel_dataUsingEncoding_allowLossyConversion_1 =
      _registerName1("dataUsingEncoding:allowLossyConversion:");
  ffi.Pointer<ObjCObject> _objc_msgSend_197(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
    bool lossy,
  ) {
    return __objc_msgSend_197(
      obj,
      sel,
      encoding,
      lossy,
    );
  }

  late final __objc_msgSend_197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_197 = __objc_msgSend_197Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, bool)>();

  late final _sel_dataUsingEncoding_1 = _registerName1("dataUsingEncoding:");
  ffi.Pointer<ObjCObject> _objc_msgSend_198(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_198(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_198Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_198 = __objc_msgSend_198Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_canBeConvertedToEncoding_1 =
      _registerName1("canBeConvertedToEncoding:");
  late final _sel_cStringUsingEncoding_1 =
      _registerName1("cStringUsingEncoding:");
  ffi.Pointer<ffi.Char> _objc_msgSend_199(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_199(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_199Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_199 = __objc_msgSend_199Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_getCString_maxLength_encoding_1 =
      _registerName1("getCString:maxLength:encoding:");
  bool _objc_msgSend_200(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferCount,
    int encoding,
  ) {
    return __objc_msgSend_200(
      obj,
      sel,
      buffer,
      maxBufferCount,
      encoding,
    );
  }

  late final __objc_msgSend_200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_200 = __objc_msgSend_200Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, int)>();

  late final _sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1 =
      _registerName1(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
  bool _objc_msgSend_201(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
    int maxBufferCount,
    ffi.Pointer<ffi.UnsignedLong> usedBufferCount,
    int encoding,
    int options,
    _NSRange range,
    ffi.Pointer<_NSRange> leftover,
  ) {
    return __objc_msgSend_201(
      obj,
      sel,
      buffer,
      maxBufferCount,
      usedBufferCount,
      encoding,
      options,
      range,
      leftover,
    );
  }

  late final __objc_msgSend_201Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedLong,
              ffi.Int32,
              _NSRange,
              ffi.Pointer<_NSRange>)>>('objc_msgSend');
  late final __objc_msgSend_201 = __objc_msgSend_201Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.UnsignedLong>,
          int,
          int,
          _NSRange,
          ffi.Pointer<_NSRange>)>();

  late final _sel_maximumLengthOfBytesUsingEncoding_1 =
      _registerName1("maximumLengthOfBytesUsingEncoding:");
  late final _sel_lengthOfBytesUsingEncoding_1 =
      _registerName1("lengthOfBytesUsingEncoding:");
  late final _sel_availableStringEncodings1 =
      _registerName1("availableStringEncodings");
  ffi.Pointer<ffi.UnsignedLong> _objc_msgSend_202(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_202(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_202Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedLong> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_202 = __objc_msgSend_202Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedLong> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_localizedNameOfStringEncoding_1 =
      _registerName1("localizedNameOfStringEncoding:");
  late final _sel_defaultCStringEncoding1 =
      _registerName1("defaultCStringEncoding");
  late final _sel_decomposedStringWithCanonicalMapping1 =
      _registerName1("decomposedStringWithCanonicalMapping");
  late final _sel_precomposedStringWithCanonicalMapping1 =
      _registerName1("precomposedStringWithCanonicalMapping");
  late final _sel_decomposedStringWithCompatibilityMapping1 =
      _registerName1("decomposedStringWithCompatibilityMapping");
  late final _sel_precomposedStringWithCompatibilityMapping1 =
      _registerName1("precomposedStringWithCompatibilityMapping");
  late final _sel_componentsSeparatedByString_1 =
      _registerName1("componentsSeparatedByString:");
  late final _sel_componentsSeparatedByCharactersInSet_1 =
      _registerName1("componentsSeparatedByCharactersInSet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_203(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> separator,
  ) {
    return __objc_msgSend_203(
      obj,
      sel,
      separator,
    );
  }

  late final __objc_msgSend_203Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_203 = __objc_msgSend_203Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByTrimmingCharactersInSet_1 =
      _registerName1("stringByTrimmingCharactersInSet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_204(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> set1,
  ) {
    return __objc_msgSend_204(
      obj,
      sel,
      set1,
    );
  }

  late final __objc_msgSend_204Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_204 = __objc_msgSend_204Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByPaddingToLength_withString_startingAtIndex_1 =
      _registerName1("stringByPaddingToLength:withString:startingAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_205(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int newLength,
    ffi.Pointer<ObjCObject> padString,
    int padIndex,
  ) {
    return __objc_msgSend_205(
      obj,
      sel,
      newLength,
      padString,
      padIndex,
    );
  }

  late final __objc_msgSend_205Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong,
              ffi.Pointer<ObjCObject>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_205 = __objc_msgSend_205Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_stringByFoldingWithOptions_locale_1 =
      _registerName1("stringByFoldingWithOptions:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_206(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
      options,
      locale,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_206 = __objc_msgSend_206Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByReplacingOccurrencesOfString_withString_options_range_1 =
      _registerName1(
          "stringByReplacingOccurrencesOfString:withString:options:range:");
  ffi.Pointer<ObjCObject> _objc_msgSend_207(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    _NSRange searchRange,
  ) {
    return __objc_msgSend_207(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_207 = __objc_msgSend_207Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          _NSRange)>();

  late final _sel_stringByReplacingOccurrencesOfString_withString_1 =
      _registerName1("stringByReplacingOccurrencesOfString:withString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_208(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
  ) {
    return __objc_msgSend_208(
      obj,
      sel,
      target,
      replacement,
    );
  }

  late final __objc_msgSend_208Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_208 = __objc_msgSend_208Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByReplacingCharactersInRange_withString_1 =
      _registerName1("stringByReplacingCharactersInRange:withString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_209(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> replacement,
  ) {
    return __objc_msgSend_209(
      obj,
      sel,
      range,
      replacement,
    );
  }

  late final __objc_msgSend_209Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              _NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_209 = __objc_msgSend_209Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, _NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByApplyingTransform_reverse_1 =
      _registerName1("stringByApplyingTransform:reverse:");
  ffi.Pointer<ObjCObject> _objc_msgSend_210(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> transform,
    bool reverse,
  ) {
    return __objc_msgSend_210(
      obj,
      sel,
      transform,
      reverse,
    );
  }

  late final __objc_msgSend_210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_210 = __objc_msgSend_210Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_writeToURL_atomically_encoding_error_1 =
      _registerName1("writeToURL:atomically:encoding:error:");
  bool _objc_msgSend_211(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_211(
      obj,
      sel,
      url,
      useAuxiliaryFile,
      enc,
      error,
    );
  }

  late final __objc_msgSend_211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_211 = __objc_msgSend_211Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_writeToFile_atomically_encoding_error_1 =
      _registerName1("writeToFile:atomically:encoding:error:");
  bool _objc_msgSend_212(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_212(
      obj,
      sel,
      path,
      useAuxiliaryFile,
      enc,
      error,
    );
  }

  late final __objc_msgSend_212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_212 = __objc_msgSend_212Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithCharactersNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCharactersNoCopy:length:freeWhenDone:");
  instancetype _objc_msgSend_213(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_213(
      obj,
      sel,
      characters,
      length,
      freeBuffer,
    );
  }

  late final __objc_msgSend_213Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.UnsignedLong,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_213 = __objc_msgSend_213Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedShort>, int, bool)>();

  late final _sel_initWithCharactersNoCopy_length_deallocator_1 =
      _registerName1("initWithCharactersNoCopy:length:deallocator:");
  instancetype _objc_msgSend_214(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedShort> chars,
    int len,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_214(
      obj,
      sel,
      chars,
      len,
      deallocator,
    );
  }

  late final __objc_msgSend_214Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.UnsignedLong,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_214 = __objc_msgSend_214Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedShort>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_initWithCharacters_length_1 =
      _registerName1("initWithCharacters:length:");
  instancetype _objc_msgSend_215(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedShort> characters,
    int length,
  ) {
    return __objc_msgSend_215(
      obj,
      sel,
      characters,
      length,
    );
  }

  late final __objc_msgSend_215Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedShort>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_215 = __objc_msgSend_215Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedShort>, int)>();

  late final _sel_initWithUTF8String_1 = _registerName1("initWithUTF8String:");
  instancetype _objc_msgSend_216(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
  ) {
    return __objc_msgSend_216(
      obj,
      sel,
      nullTerminatedCString,
    );
  }

  late final __objc_msgSend_216Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_216 = __objc_msgSend_216Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithString_1 = _registerName1("initWithString:");
  late final _sel_initWithFormat_1 = _registerName1("initWithFormat:");
  late final _sel_initWithFormat_arguments_1 =
      _registerName1("initWithFormat:arguments:");
  instancetype _objc_msgSend_217(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ffi.Char> argList,
  ) {
    return __objc_msgSend_217(
      obj,
      sel,
      format,
      argList,
    );
  }

  late final __objc_msgSend_217Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_217 = __objc_msgSend_217Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithFormat_locale_1 =
      _registerName1("initWithFormat:locale:");
  instancetype _objc_msgSend_218(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_218(
      obj,
      sel,
      format,
      locale,
    );
  }

  late final __objc_msgSend_218Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_218 = __objc_msgSend_218Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithFormat_locale_arguments_1 =
      _registerName1("initWithFormat:locale:arguments:");
  instancetype _objc_msgSend_219(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
    ffi.Pointer<ffi.Char> argList,
  ) {
    return __objc_msgSend_219(
      obj,
      sel,
      format,
      locale,
      argList,
    );
  }

  late final __objc_msgSend_219Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_219 = __objc_msgSend_219Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_error_1 =
      _registerName1("initWithValidatedFormat:validFormatSpecifiers:error:");
  instancetype _objc_msgSend_220(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_220(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      error,
    );
  }

  late final __objc_msgSend_220Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_220 = __objc_msgSend_220Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1 =
      _registerName1(
          "initWithValidatedFormat:validFormatSpecifiers:locale:error:");
  instancetype _objc_msgSend_221(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ObjCObject> locale,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_221(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      locale,
      error,
    );
  }

  late final __objc_msgSend_221Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_221 = __objc_msgSend_221Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1 =
      _registerName1(
          "initWithValidatedFormat:validFormatSpecifiers:arguments:error:");
  instancetype _objc_msgSend_222(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ffi.Char> argList,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_222(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      argList,
      error,
    );
  }

  late final __objc_msgSend_222Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_222 = __objc_msgSend_222Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1 =
      _registerName1(
          "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
  instancetype _objc_msgSend_223(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> validFormatSpecifiers,
    ffi.Pointer<ObjCObject> locale,
    ffi.Pointer<ffi.Char> argList,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_223(
      obj,
      sel,
      format,
      validFormatSpecifiers,
      locale,
      argList,
      error,
    );
  }

  late final __objc_msgSend_223Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_223 = __objc_msgSend_223Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithData_encoding_1 =
      _registerName1("initWithData:encoding:");
  instancetype _objc_msgSend_224(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    int encoding,
  ) {
    return __objc_msgSend_224(
      obj,
      sel,
      data,
      encoding,
    );
  }

  late final __objc_msgSend_224Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_224 = __objc_msgSend_224Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_initWithBytes_length_encoding_1 =
      _registerName1("initWithBytes:length:encoding:");
  instancetype _objc_msgSend_225(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
  ) {
    return __objc_msgSend_225(
      obj,
      sel,
      bytes,
      len,
      encoding,
    );
  }

  late final __objc_msgSend_225Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_225 = __objc_msgSend_225Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int)>();

  late final _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:freeWhenDone:");
  instancetype _objc_msgSend_226(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    bool freeBuffer,
  ) {
    return __objc_msgSend_226(
      obj,
      sel,
      bytes,
      len,
      encoding,
      freeBuffer,
    );
  }

  late final __objc_msgSend_226Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.UnsignedLong,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_226 = __objc_msgSend_226Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, bool)>();

  late final _sel_initWithBytesNoCopy_length_encoding_deallocator_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:deallocator:");
  instancetype _objc_msgSend_227(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_227(
      obj,
      sel,
      bytes,
      len,
      encoding,
      deallocator,
    );
  }

  late final __objc_msgSend_227Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.UnsignedLong,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_227 = __objc_msgSend_227Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_string1 = _registerName1("string");
  late final _sel_stringWithString_1 = _registerName1("stringWithString:");
  late final _sel_stringWithCharacters_length_1 =
      _registerName1("stringWithCharacters:length:");
  late final _sel_stringWithUTF8String_1 =
      _registerName1("stringWithUTF8String:");
  late final _sel_stringWithFormat_1 = _registerName1("stringWithFormat:");
  late final _sel_localizedStringWithFormat_1 =
      _registerName1("localizedStringWithFormat:");
  late final _sel_stringWithValidatedFormat_validFormatSpecifiers_error_1 =
      _registerName1("stringWithValidatedFormat:validFormatSpecifiers:error:");
  late final _sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1 =
      _registerName1(
          "localizedStringWithValidatedFormat:validFormatSpecifiers:error:");
  late final _sel_initWithCString_encoding_1 =
      _registerName1("initWithCString:encoding:");
  instancetype _objc_msgSend_228(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
    int encoding,
  ) {
    return __objc_msgSend_228(
      obj,
      sel,
      nullTerminatedCString,
      encoding,
    );
  }

  late final __objc_msgSend_228Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_228 = __objc_msgSend_228Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_stringWithCString_encoding_1 =
      _registerName1("stringWithCString:encoding:");
  late final _sel_initWithContentsOfURL_encoding_error_1 =
      _registerName1("initWithContentsOfURL:encoding:error:");
  instancetype _objc_msgSend_229(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_229(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_229Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_229 = __objc_msgSend_229Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithContentsOfFile_encoding_error_1 =
      _registerName1("initWithContentsOfFile:encoding:error:");
  instancetype _objc_msgSend_230(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_230(
      obj,
      sel,
      path,
      enc,
      error,
    );
  }

  late final __objc_msgSend_230Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_230 = __objc_msgSend_230Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_stringWithContentsOfURL_encoding_error_1 =
      _registerName1("stringWithContentsOfURL:encoding:error:");
  late final _sel_stringWithContentsOfFile_encoding_error_1 =
      _registerName1("stringWithContentsOfFile:encoding:error:");
  late final _sel_initWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("initWithContentsOfURL:usedEncoding:error:");
  instancetype _objc_msgSend_231(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_231(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_231Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_231 = __objc_msgSend_231Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("initWithContentsOfFile:usedEncoding:error:");
  instancetype _objc_msgSend_232(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<ffi.UnsignedLong> enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_232(
      obj,
      sel,
      path,
      enc,
      error,
    );
  }

  late final __objc_msgSend_232Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_232 = __objc_msgSend_232Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_stringWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfURL:usedEncoding:error:");
  late final _sel_stringWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfFile:usedEncoding:error:");
  late final _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1 =
      _registerName1(
          "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:");
  int _objc_msgSend_233(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> opts,
    ffi.Pointer<ffi.Pointer<ObjCObject>> string,
    ffi.Pointer<ffi.Bool> usedLossyConversion,
  ) {
    return __objc_msgSend_233(
      obj,
      sel,
      data,
      opts,
      string,
      usedLossyConversion,
    );
  }

  late final __objc_msgSend_233Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Bool>)>>('objc_msgSend');
  late final __objc_msgSend_233 = __objc_msgSend_233Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Bool>)>();

  late final _sel_propertyList1 = _registerName1("propertyList");
  late final _sel_propertyListFromStringsFileFormat1 =
      _registerName1("propertyListFromStringsFileFormat");
  ffi.Pointer<ObjCObject> _objc_msgSend_234(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_234(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_234Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_234 = __objc_msgSend_234Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_cString1 = _registerName1("cString");
  late final _sel_lossyCString1 = _registerName1("lossyCString");
  late final _sel_cStringLength1 = _registerName1("cStringLength");
  late final _sel_getCString_1 = _registerName1("getCString:");
  late final _sel_getCString_maxLength_1 =
      _registerName1("getCString:maxLength:");
  void _objc_msgSend_235(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
  ) {
    return __objc_msgSend_235(
      obj,
      sel,
      bytes,
      maxLength,
    );
  }

  late final __objc_msgSend_235Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_235 = __objc_msgSend_235Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_getCString_maxLength_range_remainingRange_1 =
      _registerName1("getCString:maxLength:range:remainingRange:");
  void _objc_msgSend_236(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
    _NSRange aRange,
    ffi.Pointer<_NSRange> leftoverRange,
  ) {
    return __objc_msgSend_236(
      obj,
      sel,
      bytes,
      maxLength,
      aRange,
      leftoverRange,
    );
  }

  late final __objc_msgSend_236Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong,
              _NSRange,
              ffi.Pointer<_NSRange>)>>('objc_msgSend');
  late final __objc_msgSend_236 = __objc_msgSend_236Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, _NSRange, ffi.Pointer<_NSRange>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_237(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_237(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_237Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_237 = __objc_msgSend_237Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringWithContentsOfFile_1 =
      _registerName1("stringWithContentsOfFile:");
  late final _sel_stringWithContentsOfURL_1 =
      _registerName1("stringWithContentsOfURL:");
  late final _sel_initWithCStringNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCStringNoCopy:length:freeWhenDone:");
  ffi.Pointer<ObjCObject> _objc_msgSend_238(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_238(
      obj,
      sel,
      bytes,
      length,
      freeBuffer,
    );
  }

  late final __objc_msgSend_238Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_238 = __objc_msgSend_238Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>, int, bool)>();

  late final _sel_initWithCString_length_1 =
      _registerName1("initWithCString:length:");
  late final _sel_initWithCString_1 = _registerName1("initWithCString:");
  late final _sel_stringWithCString_length_1 =
      _registerName1("stringWithCString:length:");
  late final _sel_stringWithCString_1 = _registerName1("stringWithCString:");
  late final _sel_getCharacters_1 = _registerName1("getCharacters:");
  void _objc_msgSend_239(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedShort> buffer,
  ) {
    return __objc_msgSend_239(
      obj,
      sel,
      buffer,
    );
  }

  late final __objc_msgSend_239Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedShort>)>>('objc_msgSend');
  late final __objc_msgSend_239 = __objc_msgSend_239Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedShort>)>();

  late final _sel_variantFittingPresentationWidth_1 =
      _registerName1("variantFittingPresentationWidth:");
  ffi.Pointer<ObjCObject> _objc_msgSend_240(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int width,
  ) {
    return __objc_msgSend_240(
      obj,
      sel,
      width,
    );
  }

  late final __objc_msgSend_240Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_240 = __objc_msgSend_240Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_debugDescription1 = _registerName1("debugDescription");
  late final _sel_version1 = _registerName1("version");
  late final _sel_setVersion_1 = _registerName1("setVersion:");
  void _objc_msgSend_241(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aVersion,
  ) {
    return __objc_msgSend_241(
      obj,
      sel,
      aVersion,
    );
  }

  late final __objc_msgSend_241Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_241 = __objc_msgSend_241Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_classForCoder1 = _registerName1("classForCoder");
  late final _sel_replacementObjectForCoder_1 =
      _registerName1("replacementObjectForCoder:");
  late final _sel_awakeAfterUsingCoder_1 =
      _registerName1("awakeAfterUsingCoder:");
  late final _sel_poseAsClass_1 = _registerName1("poseAsClass:");
  late final _sel_autoContentAccessingProxy1 =
      _registerName1("autoContentAccessingProxy");
  late final _class_NSValue1 = _getClass1("NSValue");
  late final _sel_getValue_size_1 = _registerName1("getValue:size:");
  late final _sel_objCType1 = _registerName1("objCType");
  late final _sel_initWithBytes_objCType_1 =
      _registerName1("initWithBytes:objCType:");
  instancetype _objc_msgSend_242(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_242(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_242Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_242 = __objc_msgSend_242Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  late final _sel_valueWithBytes_objCType_1 =
      _registerName1("valueWithBytes:objCType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_243(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_243(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_243Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_243 = __objc_msgSend_243Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_value_withObjCType_1 = _registerName1("value:withObjCType:");
  late final _sel_valueWithNonretainedObject_1 =
      _registerName1("valueWithNonretainedObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_244(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_244(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_244Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_244 = __objc_msgSend_244Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_nonretainedObjectValue1 =
      _registerName1("nonretainedObjectValue");
  late final _sel_valueWithPointer_1 = _registerName1("valueWithPointer:");
  ffi.Pointer<ObjCObject> _objc_msgSend_245(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return __objc_msgSend_245(
      obj,
      sel,
      pointer,
    );
  }

  late final __objc_msgSend_245Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_245 = __objc_msgSend_245Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>();

  late final _sel_pointerValue1 = _registerName1("pointerValue");
  late final _sel_isEqualToValue_1 = _registerName1("isEqualToValue:");
  bool _objc_msgSend_246(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_246(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_246Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_246 = __objc_msgSend_246Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_getValue_1 = _registerName1("getValue:");
  void _objc_msgSend_247(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
  ) {
    return __objc_msgSend_247(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_247Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_247 = __objc_msgSend_247Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_valueWithRange_1 = _registerName1("valueWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_248(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_248(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_248Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_248 = __objc_msgSend_248Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_rangeValue1 = _registerName1("rangeValue");
  _NSRange _objc_msgSend_249(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_249(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_249Ptr = _lookup<
      ffi.NativeFunction<
          _NSRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_249 = __objc_msgSend_249Ptr.asFunction<
      _NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_valueWithPoint_1 = _registerName1("valueWithPoint:");
  ffi.Pointer<ObjCObject> _objc_msgSend_250(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGPoint point,
  ) {
    return __objc_msgSend_250(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_250Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGPoint)>>('objc_msgSend');
  late final __objc_msgSend_250 = __objc_msgSend_250Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGPoint)>();

  late final _sel_valueWithSize_1 = _registerName1("valueWithSize:");
  ffi.Pointer<ObjCObject> _objc_msgSend_251(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGSize size,
  ) {
    return __objc_msgSend_251(
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_251Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGSize)>>('objc_msgSend');
  late final __objc_msgSend_251 = __objc_msgSend_251Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGSize)>();

  late final _sel_valueWithRect_1 = _registerName1("valueWithRect:");
  ffi.Pointer<ObjCObject> _objc_msgSend_252(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_252(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_252Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, CGRect)>>('objc_msgSend');
  late final __objc_msgSend_252 = __objc_msgSend_252Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_valueWithEdgeInsets_1 =
      _registerName1("valueWithEdgeInsets:");
  ffi.Pointer<ObjCObject> _objc_msgSend_253(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSEdgeInsets insets,
  ) {
    return __objc_msgSend_253(
      obj,
      sel,
      insets,
    );
  }

  late final __objc_msgSend_253Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSEdgeInsets)>>('objc_msgSend');
  late final __objc_msgSend_253 = __objc_msgSend_253Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSEdgeInsets)>();

  late final _sel_pointValue1 = _registerName1("pointValue");
  late final _sel_sizeValue1 = _registerName1("sizeValue");
  late final _sel_rectValue1 = _registerName1("rectValue");
  late final _sel_edgeInsetsValue1 = _registerName1("edgeInsetsValue");
  NSEdgeInsets _objc_msgSend_254(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_254(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_254Ptr = _lookup<
      ffi.NativeFunction<
          NSEdgeInsets Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_254 = __objc_msgSend_254Ptr.asFunction<
      NSEdgeInsets Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSNumber1 = _getClass1("NSNumber");
  late final _sel_initWithChar_1 = _registerName1("initWithChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_255(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_255(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_255Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_255 = __objc_msgSend_255Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedChar_1 =
      _registerName1("initWithUnsignedChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_256(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_256(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_256 = __objc_msgSend_256Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithShort_1 = _registerName1("initWithShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_257(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_257(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_257Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_257 = __objc_msgSend_257Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedShort_1 =
      _registerName1("initWithUnsignedShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_258(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_258(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_258Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_258 = __objc_msgSend_258Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithInt_1 = _registerName1("initWithInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_259(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_259(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_259Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_259 = __objc_msgSend_259Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedInt_1 =
      _registerName1("initWithUnsignedInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_260(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_260(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_260Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_260 = __objc_msgSend_260Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLong_1 = _registerName1("initWithLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_261(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_261(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_261Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_261 = __objc_msgSend_261Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLong_1 =
      _registerName1("initWithUnsignedLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_262(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_262(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_262Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_262 = __objc_msgSend_262Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLongLong_1 = _registerName1("initWithLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_263(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_263(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_263Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_263 = __objc_msgSend_263Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLongLong_1 =
      _registerName1("initWithUnsignedLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_264(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_264(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_264Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_264 = __objc_msgSend_264Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithFloat_1 = _registerName1("initWithFloat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_265(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_265(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_265Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_265 = __objc_msgSend_265Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithDouble_1 = _registerName1("initWithDouble:");
  ffi.Pointer<ObjCObject> _objc_msgSend_266(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_266(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_266Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_266 = __objc_msgSend_266Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithBool_1 = _registerName1("initWithBool:");
  ffi.Pointer<ObjCObject> _objc_msgSend_267(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_267(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_267Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_267 = __objc_msgSend_267Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_initWithInteger_1 = _registerName1("initWithInteger:");
  late final _sel_initWithUnsignedInteger_1 =
      _registerName1("initWithUnsignedInteger:");
  late final _sel_charValue1 = _registerName1("charValue");
  int _objc_msgSend_268(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_268(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_268Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_268 = __objc_msgSend_268Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedCharValue1 = _registerName1("unsignedCharValue");
  int _objc_msgSend_269(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_269(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_269Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_269 = __objc_msgSend_269Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_shortValue1 = _registerName1("shortValue");
  int _objc_msgSend_270(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_270(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_270Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_270 = __objc_msgSend_270Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedShortValue1 = _registerName1("unsignedShortValue");
  int _objc_msgSend_271(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_271(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_271Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_271 = __objc_msgSend_271Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntValue1 = _registerName1("unsignedIntValue");
  late final _sel_longValue1 = _registerName1("longValue");
  late final _sel_unsignedLongValue1 = _registerName1("unsignedLongValue");
  late final _sel_unsignedLongLongValue1 =
      _registerName1("unsignedLongLongValue");
  int _objc_msgSend_272(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_272(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_272Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_272 = __objc_msgSend_272Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntegerValue1 =
      _registerName1("unsignedIntegerValue");
  late final _sel_stringValue1 = _registerName1("stringValue");
  int _objc_msgSend_273(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_273(
      obj,
      sel,
      otherNumber,
    );
  }

  late final __objc_msgSend_273Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_273 = __objc_msgSend_273Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToNumber_1 = _registerName1("isEqualToNumber:");
  bool _objc_msgSend_274(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> number,
  ) {
    return __objc_msgSend_274(
      obj,
      sel,
      number,
    );
  }

  late final __objc_msgSend_274Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_274 = __objc_msgSend_274Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_numberWithChar_1 = _registerName1("numberWithChar:");
  late final _sel_numberWithUnsignedChar_1 =
      _registerName1("numberWithUnsignedChar:");
  late final _sel_numberWithShort_1 = _registerName1("numberWithShort:");
  late final _sel_numberWithUnsignedShort_1 =
      _registerName1("numberWithUnsignedShort:");
  late final _sel_numberWithInt_1 = _registerName1("numberWithInt:");
  late final _sel_numberWithUnsignedInt_1 =
      _registerName1("numberWithUnsignedInt:");
  late final _sel_numberWithLong_1 = _registerName1("numberWithLong:");
  late final _sel_numberWithUnsignedLong_1 =
      _registerName1("numberWithUnsignedLong:");
  late final _sel_numberWithLongLong_1 = _registerName1("numberWithLongLong:");
  late final _sel_numberWithUnsignedLongLong_1 =
      _registerName1("numberWithUnsignedLongLong:");
  late final _sel_numberWithFloat_1 = _registerName1("numberWithFloat:");
  late final _sel_numberWithDouble_1 = _registerName1("numberWithDouble:");
  late final _sel_numberWithBool_1 = _registerName1("numberWithBool:");
  late final _sel_numberWithInteger_1 = _registerName1("numberWithInteger:");
  late final _sel_numberWithUnsignedInteger_1 =
      _registerName1("numberWithUnsignedInteger:");
  late final _class_NSMutableArray1 = _getClass1("NSMutableArray");
  late final _sel_addObject_1 = _registerName1("addObject:");
  late final _sel_insertObject_atIndex_1 =
      _registerName1("insertObject:atIndex:");
  void _objc_msgSend_275(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int index,
  ) {
    return __objc_msgSend_275(
      obj,
      sel,
      anObject,
      index,
    );
  }

  late final __objc_msgSend_275Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_275 = __objc_msgSend_275Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_removeLastObject1 = _registerName1("removeLastObject");
  late final _sel_removeObjectAtIndex_1 =
      _registerName1("removeObjectAtIndex:");
  void _objc_msgSend_276(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_276(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_276Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_276 = __objc_msgSend_276Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_replaceObjectAtIndex_withObject_1 =
      _registerName1("replaceObjectAtIndex:withObject:");
  void _objc_msgSend_277(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_277(
      obj,
      sel,
      index,
      anObject,
    );
  }

  late final __objc_msgSend_277Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_277 = __objc_msgSend_277Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithCapacity_1 = _registerName1("initWithCapacity:");
  late final _sel_addObjectsFromArray_1 =
      _registerName1("addObjectsFromArray:");
  void _objc_msgSend_278(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_278(
      obj,
      sel,
      otherArray,
    );
  }

  late final __objc_msgSend_278Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_278 = __objc_msgSend_278Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_exchangeObjectAtIndex_withObjectAtIndex_1 =
      _registerName1("exchangeObjectAtIndex:withObjectAtIndex:");
  void _objc_msgSend_279(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx1,
    int idx2,
  ) {
    return __objc_msgSend_279(
      obj,
      sel,
      idx1,
      idx2,
    );
  }

  late final __objc_msgSend_279Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLong, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_279 = __objc_msgSend_279Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_removeAllObjects1 = _registerName1("removeAllObjects");
  late final _sel_removeObject_inRange_1 =
      _registerName1("removeObject:inRange:");
  void _objc_msgSend_280(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    _NSRange range,
  ) {
    return __objc_msgSend_280(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_280Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_280 = __objc_msgSend_280Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_removeObject_1 = _registerName1("removeObject:");
  late final _sel_removeObjectIdenticalTo_inRange_1 =
      _registerName1("removeObjectIdenticalTo:inRange:");
  late final _sel_removeObjectIdenticalTo_1 =
      _registerName1("removeObjectIdenticalTo:");
  late final _sel_removeObjectsFromIndices_numIndices_1 =
      _registerName1("removeObjectsFromIndices:numIndices:");
  void _objc_msgSend_281(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLong> indices,
    int cnt,
  ) {
    return __objc_msgSend_281(
      obj,
      sel,
      indices,
      cnt,
    );
  }

  late final __objc_msgSend_281Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_281 = __objc_msgSend_281Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedLong>, int)>();

  late final _sel_removeObjectsInArray_1 =
      _registerName1("removeObjectsInArray:");
  late final _sel_removeObjectsInRange_1 =
      _registerName1("removeObjectsInRange:");
  void _objc_msgSend_282(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
  ) {
    return __objc_msgSend_282(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_282Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_282 = __objc_msgSend_282Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange)>();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_range_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:range:");
  void _objc_msgSend_283(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
    _NSRange otherRange,
  ) {
    return __objc_msgSend_283(
      obj,
      sel,
      range,
      otherArray,
      otherRange,
    );
  }

  late final __objc_msgSend_283Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Pointer<ObjCObject>, _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_283 = __objc_msgSend_283Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          ffi.Pointer<ObjCObject>, _NSRange)>();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:");
  void _objc_msgSend_284(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_284(
      obj,
      sel,
      range,
      otherArray,
    );
  }

  late final __objc_msgSend_284Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_284 = __objc_msgSend_284Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setArray_1 = _registerName1("setArray:");
  late final _sel_sortUsingFunction_context_1 =
      _registerName1("sortUsingFunction:context:");
  void _objc_msgSend_285(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Long Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_285(
      obj,
      sel,
      compare,
      context,
    );
  }

  late final __objc_msgSend_285Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Long Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_285 = __objc_msgSend_285Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortUsingSelector_1 = _registerName1("sortUsingSelector:");
  late final _sel_insertObjects_atIndexes_1 =
      _registerName1("insertObjects:atIndexes:");
  void _objc_msgSend_286(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objects,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_286(
      obj,
      sel,
      objects,
      indexes,
    );
  }

  late final __objc_msgSend_286Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_286 = __objc_msgSend_286Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_removeObjectsAtIndexes_1 =
      _registerName1("removeObjectsAtIndexes:");
  void _objc_msgSend_287(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
  ) {
    return __objc_msgSend_287(
      obj,
      sel,
      indexes,
    );
  }

  late final __objc_msgSend_287Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_287 = __objc_msgSend_287Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replaceObjectsAtIndexes_withObjects_1 =
      _registerName1("replaceObjectsAtIndexes:withObjects:");
  void _objc_msgSend_288(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexes,
    ffi.Pointer<ObjCObject> objects,
  ) {
    return __objc_msgSend_288(
      obj,
      sel,
      indexes,
      objects,
    );
  }

  late final __objc_msgSend_288Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_288 = __objc_msgSend_288Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_setObject_atIndexedSubscript_1 =
      _registerName1("setObject:atIndexedSubscript:");
  late final _sel_sortUsingComparator_1 =
      _registerName1("sortUsingComparator:");
  void _objc_msgSend_289(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_289(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_289Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_289 = __objc_msgSend_289Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortWithOptions_usingComparator_1 =
      _registerName1("sortWithOptions:usingComparator:");
  void _objc_msgSend_290(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> cmptr,
  ) {
    return __objc_msgSend_290(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_290Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_290 = __objc_msgSend_290Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_arrayWithCapacity_1 = _registerName1("arrayWithCapacity:");
  ffi.Pointer<ObjCObject> _objc_msgSend_291(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_291(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_291Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_291 = __objc_msgSend_291Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_292(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_292(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_292Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_292 = __objc_msgSend_292Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_applyDifference_1 = _registerName1("applyDifference:");
  late final _class_NSItemProvider1 = _getClass1("NSItemProvider");
  late final _class_NSProgress1 = _getClass1("NSProgress");
  late final _sel_currentProgress1 = _registerName1("currentProgress");
  ffi.Pointer<ObjCObject> _objc_msgSend_293(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_293(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_293Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_293 = __objc_msgSend_293Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_progressWithTotalUnitCount_1 =
      _registerName1("progressWithTotalUnitCount:");
  ffi.Pointer<ObjCObject> _objc_msgSend_294(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
  ) {
    return __objc_msgSend_294(
      obj,
      sel,
      unitCount,
    );
  }

  late final __objc_msgSend_294Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_294 = __objc_msgSend_294Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_discreteProgressWithTotalUnitCount_1 =
      _registerName1("discreteProgressWithTotalUnitCount:");
  late final _sel_progressWithTotalUnitCount_parent_pendingUnitCount_1 =
      _registerName1("progressWithTotalUnitCount:parent:pendingUnitCount:");
  ffi.Pointer<ObjCObject> _objc_msgSend_295(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
    ffi.Pointer<ObjCObject> parent,
    int portionOfParentTotalUnitCount,
  ) {
    return __objc_msgSend_295(
      obj,
      sel,
      unitCount,
      parent,
      portionOfParentTotalUnitCount,
    );
  }

  late final __objc_msgSend_295Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int64,
              ffi.Pointer<ObjCObject>,
              ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_295 = __objc_msgSend_295Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_initWithParent_userInfo_1 =
      _registerName1("initWithParent:userInfo:");
  instancetype _objc_msgSend_296(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> parentProgressOrNil,
    ffi.Pointer<ObjCObject> userInfoOrNil,
  ) {
    return __objc_msgSend_296(
      obj,
      sel,
      parentProgressOrNil,
      userInfoOrNil,
    );
  }

  late final __objc_msgSend_296Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_296 = __objc_msgSend_296Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_becomeCurrentWithPendingUnitCount_1 =
      _registerName1("becomeCurrentWithPendingUnitCount:");
  void _objc_msgSend_297(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
  ) {
    return __objc_msgSend_297(
      obj,
      sel,
      unitCount,
    );
  }

  late final __objc_msgSend_297Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_297 = __objc_msgSend_297Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_performAsCurrentWithPendingUnitCount_usingBlock_1 =
      _registerName1("performAsCurrentWithPendingUnitCount:usingBlock:");
  void _objc_msgSend_298(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
    ffi.Pointer<_ObjCBlock> work,
  ) {
    return __objc_msgSend_298(
      obj,
      sel,
      unitCount,
      work,
    );
  }

  late final __objc_msgSend_298Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_298 = __objc_msgSend_298Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_resignCurrent1 = _registerName1("resignCurrent");
  late final _sel_addChild_withPendingUnitCount_1 =
      _registerName1("addChild:withPendingUnitCount:");
  void _objc_msgSend_299(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> child,
    int inUnitCount,
  ) {
    return __objc_msgSend_299(
      obj,
      sel,
      child,
      inUnitCount,
    );
  }

  late final __objc_msgSend_299Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_299 = __objc_msgSend_299Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_totalUnitCount1 = _registerName1("totalUnitCount");
  int _objc_msgSend_300(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_300(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_300Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_300 = __objc_msgSend_300Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTotalUnitCount_1 = _registerName1("setTotalUnitCount:");
  void _objc_msgSend_301(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_301(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_301Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_301 = __objc_msgSend_301Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_completedUnitCount1 = _registerName1("completedUnitCount");
  late final _sel_setCompletedUnitCount_1 =
      _registerName1("setCompletedUnitCount:");
  late final _sel_localizedDescription1 =
      _registerName1("localizedDescription");
  late final _sel_setLocalizedDescription_1 =
      _registerName1("setLocalizedDescription:");
  void _objc_msgSend_302(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_302(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_302Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_302 = __objc_msgSend_302Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_localizedAdditionalDescription1 =
      _registerName1("localizedAdditionalDescription");
  late final _sel_setLocalizedAdditionalDescription_1 =
      _registerName1("setLocalizedAdditionalDescription:");
  late final _sel_isCancellable1 = _registerName1("isCancellable");
  late final _sel_setCancellable_1 = _registerName1("setCancellable:");
  void _objc_msgSend_303(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_303(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_303Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_303 = __objc_msgSend_303Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_isPausable1 = _registerName1("isPausable");
  late final _sel_setPausable_1 = _registerName1("setPausable:");
  late final _sel_isCancelled1 = _registerName1("isCancelled");
  late final _sel_isPaused1 = _registerName1("isPaused");
  late final _sel_cancellationHandler1 = _registerName1("cancellationHandler");
  ffi.Pointer<_ObjCBlock> _objc_msgSend_304(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_304(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_304Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_ObjCBlock> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_304 = __objc_msgSend_304Ptr.asFunction<
      ffi.Pointer<_ObjCBlock> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setCancellationHandler_1 =
      _registerName1("setCancellationHandler:");
  void _objc_msgSend_305(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> value,
  ) {
    return __objc_msgSend_305(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_305Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_305 = __objc_msgSend_305Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_pausingHandler1 = _registerName1("pausingHandler");
  late final _sel_setPausingHandler_1 = _registerName1("setPausingHandler:");
  late final _sel_resumingHandler1 = _registerName1("resumingHandler");
  late final _sel_setResumingHandler_1 = _registerName1("setResumingHandler:");
  late final _sel_setUserInfoObject_forKey_1 =
      _registerName1("setUserInfoObject:forKey:");
  late final _sel_isIndeterminate1 = _registerName1("isIndeterminate");
  late final _sel_fractionCompleted1 = _registerName1("fractionCompleted");
  late final _sel_isFinished1 = _registerName1("isFinished");
  late final _sel_cancel1 = _registerName1("cancel");
  late final _sel_pause1 = _registerName1("pause");
  late final _sel_resume1 = _registerName1("resume");
  late final _sel_userInfo1 = _registerName1("userInfo");
  late final _sel_kind1 = _registerName1("kind");
  late final _sel_setKind_1 = _registerName1("setKind:");
  late final _sel_estimatedTimeRemaining1 =
      _registerName1("estimatedTimeRemaining");
  ffi.Pointer<ObjCObject> _objc_msgSend_306(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_306(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_306Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_306 = __objc_msgSend_306Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setEstimatedTimeRemaining_1 =
      _registerName1("setEstimatedTimeRemaining:");
  void _objc_msgSend_307(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_307(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_307Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_307 = __objc_msgSend_307Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_throughput1 = _registerName1("throughput");
  late final _sel_setThroughput_1 = _registerName1("setThroughput:");
  late final _sel_fileOperationKind1 = _registerName1("fileOperationKind");
  late final _sel_setFileOperationKind_1 =
      _registerName1("setFileOperationKind:");
  late final _sel_fileURL1 = _registerName1("fileURL");
  ffi.Pointer<ObjCObject> _objc_msgSend_308(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_308(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_308Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_308 = __objc_msgSend_308Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setFileURL_1 = _registerName1("setFileURL:");
  void _objc_msgSend_309(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_309(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_309Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_309 = __objc_msgSend_309Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_fileTotalCount1 = _registerName1("fileTotalCount");
  late final _sel_setFileTotalCount_1 = _registerName1("setFileTotalCount:");
  late final _sel_fileCompletedCount1 = _registerName1("fileCompletedCount");
  late final _sel_setFileCompletedCount_1 =
      _registerName1("setFileCompletedCount:");
  late final _sel_publish1 = _registerName1("publish");
  late final _sel_unpublish1 = _registerName1("unpublish");
  late final _sel_addSubscriberForFileURL_withPublishingHandler_1 =
      _registerName1("addSubscriberForFileURL:withPublishingHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_310(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<_ObjCBlock> publishingHandler,
  ) {
    return __objc_msgSend_310(
      obj,
      sel,
      url,
      publishingHandler,
    );
  }

  late final __objc_msgSend_310Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_310 = __objc_msgSend_310Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_removeSubscriber_1 = _registerName1("removeSubscriber:");
  late final _sel_isOld1 = _registerName1("isOld");
  late final _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1 =
      _registerName1(
          "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:");
  void _objc_msgSend_311(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_311(
      obj,
      sel,
      typeIdentifier,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_311Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_311 = __objc_msgSend_311Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1 =
      _registerName1(
          "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:");
  void _objc_msgSend_312(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_312(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_312Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_312 = __objc_msgSend_312Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_registeredTypeIdentifiers1 =
      _registerName1("registeredTypeIdentifiers");
  late final _sel_registeredTypeIdentifiersWithFileOptions_1 =
      _registerName1("registeredTypeIdentifiersWithFileOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_313(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int fileOptions,
  ) {
    return __objc_msgSend_313(
      obj,
      sel,
      fileOptions,
    );
  }

  late final __objc_msgSend_313Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_313 = __objc_msgSend_313Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_hasItemConformingToTypeIdentifier_1 =
      _registerName1("hasItemConformingToTypeIdentifier:");
  late final _sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1 =
      _registerName1(
          "hasRepresentationConformingToTypeIdentifier:fileOptions:");
  bool _objc_msgSend_314(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
  ) {
    return __objc_msgSend_314(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
    );
  }

  late final __objc_msgSend_314Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_314 = __objc_msgSend_314Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_loadDataRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadDataRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_315(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_315(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_315Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_315 = __objc_msgSend_315Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_loadFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadFileRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_316(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_316(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_316Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_316 = __objc_msgSend_316Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_317(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_317(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_317Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_317 = __objc_msgSend_317Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_suggestedName1 = _registerName1("suggestedName");
  late final _sel_setSuggestedName_1 = _registerName1("setSuggestedName:");
  late final _sel_initWithObject_1 = _registerName1("initWithObject:");
  late final _sel_registerObject_visibility_1 =
      _registerName1("registerObject:visibility:");
  void _objc_msgSend_318(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    int visibility,
  ) {
    return __objc_msgSend_318(
      obj,
      sel,
      object,
      visibility,
    );
  }

  late final __objc_msgSend_318Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_318 = __objc_msgSend_318Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_registerObjectOfClass_visibility_loadHandler_1 =
      _registerName1("registerObjectOfClass:visibility:loadHandler:");
  void _objc_msgSend_319(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_319(
      obj,
      sel,
      aClass,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_319Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_319 = __objc_msgSend_319Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_canLoadObjectOfClass_1 =
      _registerName1("canLoadObjectOfClass:");
  late final _sel_loadObjectOfClass_completionHandler_1 =
      _registerName1("loadObjectOfClass:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_320(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_320(
      obj,
      sel,
      aClass,
      completionHandler,
    );
  }

  late final __objc_msgSend_320Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_320 = __objc_msgSend_320Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_initWithItem_typeIdentifier_1 =
      _registerName1("initWithItem:typeIdentifier:");
  late final _sel_registerItemForTypeIdentifier_loadHandler_1 =
      _registerName1("registerItemForTypeIdentifier:loadHandler:");
  void _objc_msgSend_321(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_321(
      obj,
      sel,
      typeIdentifier,
      loadHandler,
    );
  }

  late final __objc_msgSend_321Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_321 = __objc_msgSend_321Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_loadItemForTypeIdentifier_options_completionHandler_1 =
      _registerName1("loadItemForTypeIdentifier:options:completionHandler:");
  void _objc_msgSend_322(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> options,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_322(
      obj,
      sel,
      typeIdentifier,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_322Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_322 = __objc_msgSend_322Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_previewImageHandler1 = _registerName1("previewImageHandler");
  ffi.Pointer<_ObjCBlock> _objc_msgSend_323(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_323(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_323Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_ObjCBlock> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_323 = __objc_msgSend_323Ptr.asFunction<
      ffi.Pointer<_ObjCBlock> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setPreviewImageHandler_1 =
      _registerName1("setPreviewImageHandler:");
  void _objc_msgSend_324(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> value,
  ) {
    return __objc_msgSend_324(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_324Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_324 = __objc_msgSend_324Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_loadPreviewImageWithOptions_completionHandler_1 =
      _registerName1("loadPreviewImageWithOptions:completionHandler:");
  void _objc_msgSend_325(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> options,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_325(
      obj,
      sel,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_325Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_325 = __objc_msgSend_325Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _class_NSMutableString1 = _getClass1("NSMutableString");
  late final _sel_replaceCharactersInRange_withString_1 =
      _registerName1("replaceCharactersInRange:withString:");
  void _objc_msgSend_326(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    _NSRange range,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_326(
      obj,
      sel,
      range,
      aString,
    );
  }

  late final __objc_msgSend_326Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              _NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_326 = __objc_msgSend_326Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, _NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_insertString_atIndex_1 =
      _registerName1("insertString:atIndex:");
  void _objc_msgSend_327(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
    int loc,
  ) {
    return __objc_msgSend_327(
      obj,
      sel,
      aString,
      loc,
    );
  }

  late final __objc_msgSend_327Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_327 = __objc_msgSend_327Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_deleteCharactersInRange_1 =
      _registerName1("deleteCharactersInRange:");
  late final _sel_appendString_1 = _registerName1("appendString:");
  void _objc_msgSend_328(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_328(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_328Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_328 = __objc_msgSend_328Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_appendFormat_1 = _registerName1("appendFormat:");
  late final _sel_setString_1 = _registerName1("setString:");
  late final _sel_replaceOccurrencesOfString_withString_options_range_1 =
      _registerName1("replaceOccurrencesOfString:withString:options:range:");
  int _objc_msgSend_329(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    _NSRange searchRange,
  ) {
    return __objc_msgSend_329(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_329Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              _NSRange)>>('objc_msgSend');
  late final __objc_msgSend_329 = __objc_msgSend_329Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, int, _NSRange)>();

  late final _sel_applyTransform_reverse_range_updatedRange_1 =
      _registerName1("applyTransform:reverse:range:updatedRange:");
  bool _objc_msgSend_330(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> transform,
    bool reverse,
    _NSRange range,
    ffi.Pointer<_NSRange> resultingRange,
  ) {
    return __objc_msgSend_330(
      obj,
      sel,
      transform,
      reverse,
      range,
      resultingRange,
    );
  }

  late final __objc_msgSend_330Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              _NSRange,
              ffi.Pointer<_NSRange>)>>('objc_msgSend');
  late final __objc_msgSend_330 = __objc_msgSend_330Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool, _NSRange, ffi.Pointer<_NSRange>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_331(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int capacity,
  ) {
    return __objc_msgSend_331(
      obj,
      sel,
      capacity,
    );
  }

  late final __objc_msgSend_331Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_331 = __objc_msgSend_331Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_stringWithCapacity_1 = _registerName1("stringWithCapacity:");
  late final _class_NSMutableDictionary1 = _getClass1("NSMutableDictionary");
  late final _sel_removeObjectForKey_1 = _registerName1("removeObjectForKey:");
  late final _sel_setObject_forKey_1 = _registerName1("setObject:forKey:");
  void _objc_msgSend_332(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_332(
      obj,
      sel,
      anObject,
      aKey,
    );
  }

  late final __objc_msgSend_332Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_332 = __objc_msgSend_332Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_addEntriesFromDictionary_1 =
      _registerName1("addEntriesFromDictionary:");
  void _objc_msgSend_333(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
  ) {
    return __objc_msgSend_333(
      obj,
      sel,
      otherDictionary,
    );
  }

  late final __objc_msgSend_333Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_333 = __objc_msgSend_333Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_removeObjectsForKeys_1 =
      _registerName1("removeObjectsForKeys:");
  late final _sel_setDictionary_1 = _registerName1("setDictionary:");
  late final _sel_setObject_forKeyedSubscript_1 =
      _registerName1("setObject:forKeyedSubscript:");
  late final _sel_dictionaryWithCapacity_1 =
      _registerName1("dictionaryWithCapacity:");
  ffi.Pointer<ObjCObject> _objc_msgSend_334(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_334(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_334Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_334 = __objc_msgSend_334Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_335(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_335(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_335Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_335 = __objc_msgSend_335Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_dictionaryWithSharedKeySet_1 =
      _registerName1("dictionaryWithSharedKeySet:");
  ffi.Pointer<ObjCObject> _objc_msgSend_336(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyset,
  ) {
    return __objc_msgSend_336(
      obj,
      sel,
      keyset,
    );
  }

  late final __objc_msgSend_336Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_336 = __objc_msgSend_336Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _class_NSMutableSet1 = _getClass1("NSMutableSet");
  late final _sel_intersectSet_1 = _registerName1("intersectSet:");
  void _objc_msgSend_337(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherSet,
  ) {
    return __objc_msgSend_337(
      obj,
      sel,
      otherSet,
    );
  }

  late final __objc_msgSend_337Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_337 = __objc_msgSend_337Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_minusSet_1 = _registerName1("minusSet:");
  late final _sel_unionSet_1 = _registerName1("unionSet:");
  late final _sel_setSet_1 = _registerName1("setSet:");
  late final _sel_setWithCapacity_1 = _registerName1("setWithCapacity:");
  late final _class_NSNotification1 = _getClass1("NSNotification");
  late final _sel_name1 = _registerName1("name");
  late final _sel_object1 = _registerName1("object");
  late final _sel_initWithName_object_userInfo_1 =
      _registerName1("initWithName:object:userInfo:");
  instancetype _objc_msgSend_338(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> userInfo,
  ) {
    return __objc_msgSend_338(
      obj,
      sel,
      name,
      object,
      userInfo,
    );
  }

  late final __objc_msgSend_338Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_338 = __objc_msgSend_338Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_notificationWithName_object_1 =
      _registerName1("notificationWithName:object:");
  late final _sel_notificationWithName_object_userInfo_1 =
      _registerName1("notificationWithName:object:userInfo:");
  late final _class_NSBundle1 = _getClass1("NSBundle");
  late final _sel_mainBundle1 = _registerName1("mainBundle");
  ffi.Pointer<ObjCObject> _objc_msgSend_339(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_339(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_339Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_339 = __objc_msgSend_339Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_bundleWithPath_1 = _registerName1("bundleWithPath:");
  late final _sel_initWithPath_1 = _registerName1("initWithPath:");
  late final _sel_bundleWithURL_1 = _registerName1("bundleWithURL:");
  late final _sel_initWithURL_1 = _registerName1("initWithURL:");
  late final _sel_bundleForClass_1 = _registerName1("bundleForClass:");
  ffi.Pointer<ObjCObject> _objc_msgSend_340(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return __objc_msgSend_340(
      obj,
      sel,
      aClass,
    );
  }

  late final __objc_msgSend_340Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_340 = __objc_msgSend_340Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_bundleWithIdentifier_1 =
      _registerName1("bundleWithIdentifier:");
  ffi.Pointer<ObjCObject> _objc_msgSend_341(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> identifier,
  ) {
    return __objc_msgSend_341(
      obj,
      sel,
      identifier,
    );
  }

  late final __objc_msgSend_341Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_341 = __objc_msgSend_341Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_allBundles1 = _registerName1("allBundles");
  late final _sel_allFrameworks1 = _registerName1("allFrameworks");
  late final _sel_isLoaded1 = _registerName1("isLoaded");
  late final _sel_unload1 = _registerName1("unload");
  late final _sel_preflightAndReturnError_1 =
      _registerName1("preflightAndReturnError:");
  bool _objc_msgSend_342(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_342(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_342Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_342 = __objc_msgSend_342Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_loadAndReturnError_1 = _registerName1("loadAndReturnError:");
  late final _sel_bundleURL1 = _registerName1("bundleURL");
  late final _sel_resourceURL1 = _registerName1("resourceURL");
  late final _sel_executableURL1 = _registerName1("executableURL");
  late final _sel_URLForAuxiliaryExecutable_1 =
      _registerName1("URLForAuxiliaryExecutable:");
  ffi.Pointer<ObjCObject> _objc_msgSend_343(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> executableName,
  ) {
    return __objc_msgSend_343(
      obj,
      sel,
      executableName,
    );
  }

  late final __objc_msgSend_343Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_343 = __objc_msgSend_343Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_privateFrameworksURL1 =
      _registerName1("privateFrameworksURL");
  late final _sel_sharedFrameworksURL1 = _registerName1("sharedFrameworksURL");
  late final _sel_sharedSupportURL1 = _registerName1("sharedSupportURL");
  late final _sel_builtInPlugInsURL1 = _registerName1("builtInPlugInsURL");
  late final _sel_appStoreReceiptURL1 = _registerName1("appStoreReceiptURL");
  late final _sel_bundlePath1 = _registerName1("bundlePath");
  late final _sel_resourcePath1 = _registerName1("resourcePath");
  late final _sel_executablePath1 = _registerName1("executablePath");
  late final _sel_pathForAuxiliaryExecutable_1 =
      _registerName1("pathForAuxiliaryExecutable:");
  late final _sel_privateFrameworksPath1 =
      _registerName1("privateFrameworksPath");
  late final _sel_sharedFrameworksPath1 =
      _registerName1("sharedFrameworksPath");
  late final _sel_sharedSupportPath1 = _registerName1("sharedSupportPath");
  late final _sel_builtInPlugInsPath1 = _registerName1("builtInPlugInsPath");
  late final _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1 =
      _registerName1(
          "URLForResource:withExtension:subdirectory:inBundleWithURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_344(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> bundleURL,
  ) {
    return __objc_msgSend_344(
      obj,
      sel,
      name,
      ext,
      subpath,
      bundleURL,
    );
  }

  late final __objc_msgSend_344Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_344 = __objc_msgSend_344Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1 =
      _registerName1(
          "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_345(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> bundleURL,
  ) {
    return __objc_msgSend_345(
      obj,
      sel,
      ext,
      subpath,
      bundleURL,
    );
  }

  late final __objc_msgSend_345Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_345 = __objc_msgSend_345Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLForResource_withExtension_1 =
      _registerName1("URLForResource:withExtension:");
  ffi.Pointer<ObjCObject> _objc_msgSend_346(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
  ) {
    return __objc_msgSend_346(
      obj,
      sel,
      name,
      ext,
    );
  }

  late final __objc_msgSend_346Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_346 = __objc_msgSend_346Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLForResource_withExtension_subdirectory_1 =
      _registerName1("URLForResource:withExtension:subdirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_347(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
  ) {
    return __objc_msgSend_347(
      obj,
      sel,
      name,
      ext,
      subpath,
    );
  }

  late final __objc_msgSend_347Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_347 = __objc_msgSend_347Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLForResource_withExtension_subdirectory_localization_1 =
      _registerName1("URLForResource:withExtension:subdirectory:localization:");
  ffi.Pointer<ObjCObject> _objc_msgSend_348(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> localizationName,
  ) {
    return __objc_msgSend_348(
      obj,
      sel,
      name,
      ext,
      subpath,
      localizationName,
    );
  }

  late final __objc_msgSend_348Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_348 = __objc_msgSend_348Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLsForResourcesWithExtension_subdirectory_1 =
      _registerName1("URLsForResourcesWithExtension:subdirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_349(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
  ) {
    return __objc_msgSend_349(
      obj,
      sel,
      ext,
      subpath,
    );
  }

  late final __objc_msgSend_349Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_349 = __objc_msgSend_349Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_URLsForResourcesWithExtension_subdirectory_localization_1 =
      _registerName1(
          "URLsForResourcesWithExtension:subdirectory:localization:");
  ffi.Pointer<ObjCObject> _objc_msgSend_350(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> localizationName,
  ) {
    return __objc_msgSend_350(
      obj,
      sel,
      ext,
      subpath,
      localizationName,
    );
  }

  late final __objc_msgSend_350Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_350 = __objc_msgSend_350Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathForResource_ofType_inDirectory_1 =
      _registerName1("pathForResource:ofType:inDirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_351(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> bundlePath,
  ) {
    return __objc_msgSend_351(
      obj,
      sel,
      name,
      ext,
      bundlePath,
    );
  }

  late final __objc_msgSend_351Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_351 = __objc_msgSend_351Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathsForResourcesOfType_inDirectory_1 =
      _registerName1("pathsForResourcesOfType:inDirectory:");
  late final _sel_pathForResource_ofType_1 =
      _registerName1("pathForResource:ofType:");
  late final _sel_pathForResource_ofType_inDirectory_forLocalization_1 =
      _registerName1("pathForResource:ofType:inDirectory:forLocalization:");
  ffi.Pointer<ObjCObject> _objc_msgSend_352(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> ext,
    ffi.Pointer<ObjCObject> subpath,
    ffi.Pointer<ObjCObject> localizationName,
  ) {
    return __objc_msgSend_352(
      obj,
      sel,
      name,
      ext,
      subpath,
      localizationName,
    );
  }

  late final __objc_msgSend_352Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_352 = __objc_msgSend_352Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_pathsForResourcesOfType_inDirectory_forLocalization_1 =
      _registerName1("pathsForResourcesOfType:inDirectory:forLocalization:");
  late final _sel_localizedStringForKey_value_table_1 =
      _registerName1("localizedStringForKey:value:table:");
  late final _class_NSAttributedString1 = _getClass1("NSAttributedString");
  late final _sel_localizedAttributedStringForKey_value_table_1 =
      _registerName1("localizedAttributedStringForKey:value:table:");
  ffi.Pointer<ObjCObject> _objc_msgSend_353(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ObjCObject> value,
    ffi.Pointer<ObjCObject> tableName,
  ) {
    return __objc_msgSend_353(
      obj,
      sel,
      key,
      value,
      tableName,
    );
  }

  late final __objc_msgSend_353Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_353 = __objc_msgSend_353Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_bundleIdentifier1 = _registerName1("bundleIdentifier");
  late final _sel_infoDictionary1 = _registerName1("infoDictionary");
  late final _sel_localizedInfoDictionary1 =
      _registerName1("localizedInfoDictionary");
  late final _sel_objectForInfoDictionaryKey_1 =
      _registerName1("objectForInfoDictionaryKey:");
  late final _sel_classNamed_1 = _registerName1("classNamed:");
  late final _sel_principalClass1 = _registerName1("principalClass");
  late final _sel_preferredLocalizations1 =
      _registerName1("preferredLocalizations");
  late final _sel_localizations1 = _registerName1("localizations");
  late final _sel_developmentLocalization1 =
      _registerName1("developmentLocalization");
  late final _sel_preferredLocalizationsFromArray_1 =
      _registerName1("preferredLocalizationsFromArray:");
  late final _sel_preferredLocalizationsFromArray_forPreferences_1 =
      _registerName1("preferredLocalizationsFromArray:forPreferences:");
  ffi.Pointer<ObjCObject> _objc_msgSend_354(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> localizationsArray,
    ffi.Pointer<ObjCObject> preferencesArray,
  ) {
    return __objc_msgSend_354(
      obj,
      sel,
      localizationsArray,
      preferencesArray,
    );
  }

  late final __objc_msgSend_354Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_354 = __objc_msgSend_354Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_executableArchitectures1 =
      _registerName1("executableArchitectures");
  late final _sel_setPreservationPriority_forTags_1 =
      _registerName1("setPreservationPriority:forTags:");
  void _objc_msgSend_355(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double priority,
    ffi.Pointer<ObjCObject> tags,
  ) {
    return __objc_msgSend_355(
      obj,
      sel,
      priority,
      tags,
    );
  }

  late final __objc_msgSend_355Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_355 = __objc_msgSend_355Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_preservationPriorityForTag_1 =
      _registerName1("preservationPriorityForTag:");
  late final _class_NSDate1 = _getClass1("NSDate");
  late final _sel_timeIntervalSinceReferenceDate1 =
      _registerName1("timeIntervalSinceReferenceDate");
  late final _sel_initWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("initWithTimeIntervalSinceReferenceDate:");
  instancetype _objc_msgSend_356(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double ti,
  ) {
    return __objc_msgSend_356(
      obj,
      sel,
      ti,
    );
  }

  late final __objc_msgSend_356Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_356 = __objc_msgSend_356Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_timeIntervalSinceDate_1 =
      _registerName1("timeIntervalSinceDate:");
  double _objc_msgSend_357(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_357(
      obj,
      sel,
      anotherDate,
    );
  }

  late final __objc_msgSend_357Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_357 = __objc_msgSend_357Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_timeIntervalSinceNow1 =
      _registerName1("timeIntervalSinceNow");
  late final _sel_timeIntervalSince19701 =
      _registerName1("timeIntervalSince1970");
  late final _sel_addTimeInterval_1 = _registerName1("addTimeInterval:");
  late final _sel_dateByAddingTimeInterval_1 =
      _registerName1("dateByAddingTimeInterval:");
  late final _sel_earlierDate_1 = _registerName1("earlierDate:");
  ffi.Pointer<ObjCObject> _objc_msgSend_358(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_358(
      obj,
      sel,
      anotherDate,
    );
  }

  late final __objc_msgSend_358Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_358 = __objc_msgSend_358Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_laterDate_1 = _registerName1("laterDate:");
  int _objc_msgSend_359(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
  ) {
    return __objc_msgSend_359(
      obj,
      sel,
      other,
    );
  }

  late final __objc_msgSend_359Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_359 = __objc_msgSend_359Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToDate_1 = _registerName1("isEqualToDate:");
  bool _objc_msgSend_360(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDate,
  ) {
    return __objc_msgSend_360(
      obj,
      sel,
      otherDate,
    );
  }

  late final __objc_msgSend_360Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_360 = __objc_msgSend_360Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_date1 = _registerName1("date");
  late final _sel_dateWithTimeIntervalSinceNow_1 =
      _registerName1("dateWithTimeIntervalSinceNow:");
  late final _sel_dateWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("dateWithTimeIntervalSinceReferenceDate:");
  late final _sel_dateWithTimeIntervalSince1970_1 =
      _registerName1("dateWithTimeIntervalSince1970:");
  late final _sel_dateWithTimeInterval_sinceDate_1 =
      _registerName1("dateWithTimeInterval:sinceDate:");
  instancetype _objc_msgSend_361(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double secsToBeAdded,
    ffi.Pointer<ObjCObject> date,
  ) {
    return __objc_msgSend_361(
      obj,
      sel,
      secsToBeAdded,
      date,
    );
  }

  late final __objc_msgSend_361Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_361 = __objc_msgSend_361Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          double, ffi.Pointer<ObjCObject>)>();

  late final _sel_distantFuture1 = _registerName1("distantFuture");
  ffi.Pointer<ObjCObject> _objc_msgSend_362(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_362(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_362Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_362 = __objc_msgSend_362Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_distantPast1 = _registerName1("distantPast");
  late final _sel_now1 = _registerName1("now");
  late final _sel_initWithTimeIntervalSinceNow_1 =
      _registerName1("initWithTimeIntervalSinceNow:");
  late final _sel_initWithTimeIntervalSince1970_1 =
      _registerName1("initWithTimeIntervalSince1970:");
  late final _sel_initWithTimeInterval_sinceDate_1 =
      _registerName1("initWithTimeInterval:sinceDate:");
  late final _class_NSProcessInfo1 = _getClass1("NSProcessInfo");
  late final _sel_processInfo1 = _registerName1("processInfo");
  ffi.Pointer<ObjCObject> _objc_msgSend_363(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_363(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_363Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_363 = __objc_msgSend_363Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_environment1 = _registerName1("environment");
  late final _sel_arguments1 = _registerName1("arguments");
  late final _sel_hostName1 = _registerName1("hostName");
  late final _sel_processName1 = _registerName1("processName");
  late final _sel_setProcessName_1 = _registerName1("setProcessName:");
  late final _sel_processIdentifier1 = _registerName1("processIdentifier");
  late final _sel_globallyUniqueString1 =
      _registerName1("globallyUniqueString");
  late final _sel_operatingSystem1 = _registerName1("operatingSystem");
  late final _sel_operatingSystemName1 = _registerName1("operatingSystemName");
  late final _sel_operatingSystemVersionString1 =
      _registerName1("operatingSystemVersionString");
  late final _sel_operatingSystemVersion1 =
      _registerName1("operatingSystemVersion");
  NSOperatingSystemVersion _objc_msgSend_364(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_364(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_364Ptr = _lookup<
      ffi.NativeFunction<
          NSOperatingSystemVersion Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_364 = __objc_msgSend_364Ptr.asFunction<
      NSOperatingSystemVersion Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_processorCount1 = _registerName1("processorCount");
  late final _sel_activeProcessorCount1 =
      _registerName1("activeProcessorCount");
  late final _sel_physicalMemory1 = _registerName1("physicalMemory");
  late final _sel_isOperatingSystemAtLeastVersion_1 =
      _registerName1("isOperatingSystemAtLeastVersion:");
  bool _objc_msgSend_365(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSOperatingSystemVersion version,
  ) {
    return __objc_msgSend_365(
      obj,
      sel,
      version,
    );
  }

  late final __objc_msgSend_365Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSOperatingSystemVersion)>>('objc_msgSend');
  late final __objc_msgSend_365 = __objc_msgSend_365Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSOperatingSystemVersion)>();

  late final _sel_systemUptime1 = _registerName1("systemUptime");
  late final _sel_disableSuddenTermination1 =
      _registerName1("disableSuddenTermination");
  late final _sel_enableSuddenTermination1 =
      _registerName1("enableSuddenTermination");
  late final _sel_disableAutomaticTermination_1 =
      _registerName1("disableAutomaticTermination:");
  late final _sel_enableAutomaticTermination_1 =
      _registerName1("enableAutomaticTermination:");
  late final _sel_automaticTerminationSupportEnabled1 =
      _registerName1("automaticTerminationSupportEnabled");
  late final _sel_setAutomaticTerminationSupportEnabled_1 =
      _registerName1("setAutomaticTerminationSupportEnabled:");
  late final _sel_beginActivityWithOptions_reason_1 =
      _registerName1("beginActivityWithOptions:reason:");
  ffi.Pointer<ObjCObject> _objc_msgSend_366(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> reason,
  ) {
    return __objc_msgSend_366(
      obj,
      sel,
      options,
      reason,
    );
  }

  late final __objc_msgSend_366Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_366 = __objc_msgSend_366Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_endActivity_1 = _registerName1("endActivity:");
  late final _sel_performActivityWithOptions_reason_usingBlock_1 =
      _registerName1("performActivityWithOptions:reason:usingBlock:");
  void _objc_msgSend_367(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> reason,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_367(
      obj,
      sel,
      options,
      reason,
      block,
    );
  }

  late final __objc_msgSend_367Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_367 = __objc_msgSend_367Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_performExpiringActivityWithReason_usingBlock_1 =
      _registerName1("performExpiringActivityWithReason:usingBlock:");
  void _objc_msgSend_368(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> reason,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_368(
      obj,
      sel,
      reason,
      block,
    );
  }

  late final __objc_msgSend_368Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_368 = __objc_msgSend_368Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_userName1 = _registerName1("userName");
  late final _sel_fullUserName1 = _registerName1("fullUserName");
  late final _sel_thermalState1 = _registerName1("thermalState");
  int _objc_msgSend_369(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_369(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_369Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_369 = __objc_msgSend_369Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_isLowPowerModeEnabled1 =
      _registerName1("isLowPowerModeEnabled");
  late final _sel_isMacCatalystApp1 = _registerName1("isMacCatalystApp");
  late final _sel_isiOSAppOnMac1 = _registerName1("isiOSAppOnMac");
  late final _class_NSScreen1 = _getClass1("NSScreen");
  late final _sel_screens1 = _registerName1("screens");
  late final _sel_mainScreen1 = _registerName1("mainScreen");
  ffi.Pointer<ObjCObject> _objc_msgSend_370(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_370(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_370Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_370 = __objc_msgSend_370Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_deepestScreen1 = _registerName1("deepestScreen");
  late final _sel_screensHaveSeparateSpaces1 =
      _registerName1("screensHaveSeparateSpaces");
  late final _sel_depth1 = _registerName1("depth");
  int _objc_msgSend_371(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_371(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_371Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_371 = __objc_msgSend_371Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_frame1 = _registerName1("frame");
  late final _sel_visibleFrame1 = _registerName1("visibleFrame");
  late final _sel_deviceDescription1 = _registerName1("deviceDescription");
  late final _class_NSColorSpace1 = _getClass1("NSColorSpace");
  late final _sel_colorSpace1 = _registerName1("colorSpace");
  ffi.Pointer<ObjCObject> _objc_msgSend_372(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_372(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_372Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_372 = __objc_msgSend_372Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_supportedWindowDepths1 =
      _registerName1("supportedWindowDepths");
  ffi.Pointer<ffi.Int32> _objc_msgSend_373(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_373(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_373Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int32> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_373 = __objc_msgSend_373Ptr.asFunction<
      ffi.Pointer<ffi.Int32> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_canRepresentDisplayGamut_1 =
      _registerName1("canRepresentDisplayGamut:");
  bool _objc_msgSend_374(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int displayGamut,
  ) {
    return __objc_msgSend_374(
      obj,
      sel,
      displayGamut,
    );
  }

  late final __objc_msgSend_374Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_374 = __objc_msgSend_374Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_convertRectToBacking_1 =
      _registerName1("convertRectToBacking:");
  CGRect _objc_msgSend_375(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
  ) {
    return __objc_msgSend_375(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_375Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              CGRect)>>('objc_msgSend');
  late final __objc_msgSend_375 = __objc_msgSend_375Ptr.asFunction<
      CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect)>();

  late final _sel_convertRectFromBacking_1 =
      _registerName1("convertRectFromBacking:");
  late final _sel_backingAlignedRect_options_1 =
      _registerName1("backingAlignedRect:options:");
  CGRect _objc_msgSend_376(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    CGRect rect,
    int options,
  ) {
    return __objc_msgSend_376(
      obj,
      sel,
      rect,
      options,
    );
  }

  late final __objc_msgSend_376Ptr = _lookup<
      ffi.NativeFunction<
          CGRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_376 = __objc_msgSend_376Ptr.asFunction<
      CGRect Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, CGRect, int)>();

  late final _sel_backingScaleFactor1 = _registerName1("backingScaleFactor");
  late final _sel_localizedName1 = _registerName1("localizedName");
  late final _sel_safeAreaInsets1 = _registerName1("safeAreaInsets");
  late final _sel_auxiliaryTopLeftArea1 =
      _registerName1("auxiliaryTopLeftArea");
  late final _sel_auxiliaryTopRightArea1 =
      _registerName1("auxiliaryTopRightArea");
  late final _sel_maximumExtendedDynamicRangeColorComponentValue1 =
      _registerName1("maximumExtendedDynamicRangeColorComponentValue");
  late final _sel_maximumPotentialExtendedDynamicRangeColorComponentValue1 =
      _registerName1("maximumPotentialExtendedDynamicRangeColorComponentValue");
  late final _sel_maximumReferenceExtendedDynamicRangeColorComponentValue1 =
      _registerName1("maximumReferenceExtendedDynamicRangeColorComponentValue");
  late final _sel_maximumFramesPerSecond1 =
      _registerName1("maximumFramesPerSecond");
  late final _sel_minimumRefreshInterval1 =
      _registerName1("minimumRefreshInterval");
  late final _sel_maximumRefreshInterval1 =
      _registerName1("maximumRefreshInterval");
  late final _sel_displayUpdateGranularity1 =
      _registerName1("displayUpdateGranularity");
  late final _sel_lastDisplayUpdateTimestamp1 =
      _registerName1("lastDisplayUpdateTimestamp");
  late final _sel_userSpaceScaleFactor1 =
      _registerName1("userSpaceScaleFactor");

  /// ! @const kIOMasterPortDefault
  /// @abstract Deprecated name for kIOMainPortDefault.
  late final ffi.Pointer<ffi.UnsignedInt> _kIOMasterPortDefault =
      _lookup<ffi.UnsignedInt>('kIOMasterPortDefault');

  int get kIOMasterPortDefault => _kIOMasterPortDefault.value;

  set kIOMasterPortDefault(int value) => _kIOMasterPortDefault.value = value;

  /// ! @function IOObjectRelease
  /// @abstract Releases an object handle previously returned by IOKitLib.
  /// @discussion All objects returned by IOKitLib should be released with this function when access to them is no longer needed. Using the object after it has been released may or may not return an error, depending on how many references the task has to the same object in the kernel.
  /// @param object The IOKit object to release.
  /// @result A kern_return_t error code.
  int IOObjectRelease(
    int object,
  ) {
    return _IOObjectRelease(
      object,
    );
  }

  late final _IOObjectReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'IOObjectRelease');
  late final _IOObjectRelease =
      _IOObjectReleasePtr.asFunction<int Function(int)>();

  /// !
  /// @function IOServiceGetMatchingService
  /// @abstract Look up a registered IOService object that matches a matching dictionary.
  /// @discussion This is the preferred method of finding IOService objects currently registered by IOKit (that is, objects that have had their registerService() methods invoked). To find IOService objects that aren't yet registered, use an iterator as created by IORegistryEntryCreateIterator(). IOServiceAddMatchingNotification can also supply this information and install a notification of new IOServices. The matching information used in the matching dictionary may vary depending on the class of service being looked up.
  /// @param mainPort The main port obtained from IOMainPort(). Pass kIOMainPortDefault to look up the default main port.
  /// @param matching A CF dictionary containing matching information, of which one reference is always consumed by this function (Note prior to the Tiger release there was a small chance that the dictionary might not be released if there was an error attempting to serialize the dictionary). IOKitLib can construct matching dictionaries for common criteria with helper functions such as IOServiceMatching, IOServiceNameMatching, IOBSDNameMatching.
  /// @result The first service matched is returned on success. The service must be released by the caller.
  int IOServiceGetMatchingService(
    int mainPort,
    ffi.Pointer<CFDictionary> matching,
  ) {
    return _IOServiceGetMatchingService(
      mainPort,
      matching,
    );
  }

  late final _IOServiceGetMatchingServicePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt,
              ffi.Pointer<CFDictionary>)>>('IOServiceGetMatchingService');
  late final _IOServiceGetMatchingService = _IOServiceGetMatchingServicePtr
      .asFunction<int Function(int, ffi.Pointer<CFDictionary>)>();

  /// ! @function IORegistryEntryCreateCFProperty
  /// @abstract Create a CF representation of a registry entry's property.
  /// @discussion This function creates an instantaneous snapshot of a registry entry property, creating a CF container analogue in the caller's task. Not every object available in the kernel is represented as a CF container; currently OSDictionary, OSArray, OSSet, OSSymbol, OSString, OSData, OSNumber, OSBoolean are created as their CF counterparts.
  /// @param entry The registry entry handle whose property to copy.
  /// @param key A CFString specifying the property name.
  /// @param allocator The CF allocator to use when creating the CF container.
  /// @param options No options are currently defined.
  /// @result A CF container is created and returned the caller on success. The caller should release with CFRelease.
  CFTypeRef1 IORegistryEntryCreateCFProperty(
    int entry,
    ffi.Pointer<CFString> key,
    ffi.Pointer<__CFAllocator> allocator,
    int options,
  ) {
    return _IORegistryEntryCreateCFProperty(
      entry,
      key,
      allocator,
      options,
    );
  }

  late final _IORegistryEntryCreateCFPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef1 Function(
              ffi.UnsignedInt,
              ffi.Pointer<CFString>,
              ffi.Pointer<__CFAllocator>,
              ffi.UnsignedInt)>>('IORegistryEntryCreateCFProperty');
  late final _IORegistryEntryCreateCFProperty =
      _IORegistryEntryCreateCFPropertyPtr.asFunction<
          CFTypeRef1 Function(
              int, ffi.Pointer<CFString>, ffi.Pointer<__CFAllocator>, int)>();

  /// ! @function IOServiceMatching
  /// @abstract Create a matching dictionary that specifies an IOService class match.
  /// @discussion A very common matching criteria for IOService is based on its class. IOServiceMatching will create a matching dictionary that specifies any IOService of a class, or its subclasses. The class is specified by C-string name.
  /// @param name The class name, as a const C-string. Class matching is successful on IOService's of this class or any subclass.
  /// @result The matching dictionary created, is returned on success, or zero on failure. The dictionary is commonly passed to IOServiceGetMatchingServices or IOServiceAddNotification which will consume a reference, otherwise it should be released with CFRelease by the caller.
  ffi.Pointer<CFDictionary> IOServiceMatching(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _IOServiceMatching(
      name,
    );
  }

  late final _IOServiceMatchingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CFDictionary> Function(
              ffi.Pointer<ffi.Char>)>>('IOServiceMatching');
  late final _IOServiceMatching = _IOServiceMatchingPtr.asFunction<
      ffi.Pointer<CFDictionary> Function(ffi.Pointer<ffi.Char>)>();
}

final class utsname extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> sysname;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> nodename;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> release;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> version;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> machine;
}

final class __CFAllocator extends ffi.Opaque {}

/// Base "type" of all "CF objects", and polymorphic functions on them
typedef CFTypeRef = ffi.Pointer<ffi.Void>;

final class CFDictionary extends ffi.Opaque {}

final class CFDictionaryKeyCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CFString> Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> equal;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>)>>
      hash;
}

final class CFString extends ffi.Opaque {}

final class CFDictionaryValueCallBacks extends ffi.Struct {
  @ffi.Long()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__CFAllocator>, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<CFString> Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> equal;
}

final class CFData extends ffi.Opaque {}

abstract class CFStringBuiltInEncodings {
  static const int kCFStringEncodingMacRoman = 0;
  static const int kCFStringEncodingWindowsLatin1 = 1280;
  static const int kCFStringEncodingISOLatin1 = 513;
  static const int kCFStringEncodingNextStepLatin = 2817;
  static const int kCFStringEncodingASCII = 1536;
  static const int kCFStringEncodingUnicode = 256;
  static const int kCFStringEncodingUTF8 = 134217984;
  static const int kCFStringEncodingNonLossyASCII = 3071;
  static const int kCFStringEncodingUTF16 = 256;
  static const int kCFStringEncodingUTF16BE = 268435712;
  static const int kCFStringEncodingUTF16LE = 335544576;
  static const int kCFStringEncodingUTF32 = 201326848;
  static const int kCFStringEncodingUTF32BE = 402653440;
  static const int kCFStringEncodingUTF32LE = 469762304;
}

class _ObjCWrapper implements ffi.Finalizable {
  final ffi.Pointer<ObjCObject> _id;
  final NativeMacOsFramework _lib;
  bool _pendingRelease;

  _ObjCWrapper._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._objc_retain(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer2.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC object held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._objc_release(_id.cast());
      _lib._objc_releaseFinalizer2.detach(this);
    } else {
      throw StateError(
          'Released an ObjC object that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<ObjCObject> get pointer => _id;
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSObject1);
  }

  static void load(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(
      NativeMacOsFramework _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    return _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    return _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(
      NativeMacOsFramework _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
      NativeMacOsFramework _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol_(
      NativeMacOsFramework _lib, Protocol? protocol) {
    return _lib._objc_msgSend_5(_lib._class_NSObject1,
        _lib._sel_conformsToProtocol_1, protocol?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> methodForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      instanceMethodForSelector_(
          NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_7(
        _id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_8(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSInvocation? anInvocation) {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_forwardInvocation_1, anInvocation?._id ?? ffi.nullptr);
  }

  NSMethodSignature methodSignatureForSelector_(
      ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  static NSMethodSignature instanceMethodSignatureForSelector_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_10(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_11(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(NativeMacOsFramework _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod_(
      NativeMacOsFramework _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static int hash(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_12(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSString description(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_55(_lib._class_NSObject1, _lib._sel_description1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString debugDescription(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_55(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int version(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_190(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion_(NativeMacOsFramework _lib, int aVersion) {
    return _lib._objc_msgSend_241(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject replacementObjectForCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject awakeAfterUsingCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static void poseAsClass_(NativeMacOsFramework _lib, NSObject aClass) {
    return _lib._objc_msgSend_20(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

final class ObjCSel extends ffi.Opaque {}

final class ObjCObject extends ffi.Opaque {}

typedef instancetype = ffi.Pointer<ObjCObject>;

final class _NSZone extends ffi.Opaque {}

class Protocol extends _ObjCWrapper {
  Protocol._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [Protocol] that points to the same underlying object as [other].
  static Protocol castFrom<T extends _ObjCWrapper>(T other) {
    return Protocol._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [Protocol] that wraps the given raw object pointer.
  static Protocol castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return Protocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [Protocol].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_Protocol1);
  }
}

class NSInvocation extends _ObjCWrapper {
  NSInvocation._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInvocation] that points to the same underlying object as [other].
  static NSInvocation castFrom<T extends _ObjCWrapper>(T other) {
    return NSInvocation._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSInvocation] that wraps the given raw object pointer.
  static NSInvocation castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInvocation._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInvocation].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSInvocation1);
  }
}

class NSMethodSignature extends _ObjCWrapper {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMethodSignature] that points to the same underlying object as [other].
  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMethodSignature] that wraps the given raw object pointer.
  static NSMethodSignature castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMethodSignature._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMethodSignature].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMethodSignature1);
  }
}

class NSString extends NSObject {
  NSString._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSString1);
  }

  factory NSString(NativeMacOsFramework _lib, String str) {
    final cstr = str.toNativeUtf16();
    final nsstr = stringWithCharacters_length_(_lib, cstr.cast(), str.length);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() {
    final data =
        dataUsingEncoding_(0x94000100 /* NSUTF16LittleEndianStringEncoding */);
    return data.bytes.cast<pkg_ffi.Utf16>().toDartString(length: length);
  }

  int get length {
    return _lib._objc_msgSend_12(_id, _lib._sel_length1);
  }

  int characterAtIndex_(int index) {
    return _lib._objc_msgSend_13(_id, _lib._sel_characterAtIndex_1, index);
  }

  @override
  NSString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringFromIndex_(int from) {
    final _ret =
        _lib._objc_msgSend_163(_id, _lib._sel_substringFromIndex_1, from);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringToIndex_(int to) {
    final _ret = _lib._objc_msgSend_163(_id, _lib._sel_substringToIndex_1, to);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString substringWithRange_(_NSRange range) {
    final _ret =
        _lib._objc_msgSend_164(_id, _lib._sel_substringWithRange_1, range);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_range_(
      ffi.Pointer<ffi.UnsignedShort> buffer, _NSRange range) {
    return _lib._objc_msgSend_165(
        _id, _lib._sel_getCharacters_range_1, buffer, range);
  }

  int compare_(NSString? string) {
    return _lib._objc_msgSend_166(
        _id, _lib._sel_compare_1, string?._id ?? ffi.nullptr);
  }

  int compare_options_(NSString? string, int mask) {
    return _lib._objc_msgSend_167(
        _id, _lib._sel_compare_options_1, string?._id ?? ffi.nullptr, mask);
  }

  int compare_options_range_(
      NSString? string, int mask, _NSRange rangeOfReceiverToCompare) {
    return _lib._objc_msgSend_168(_id, _lib._sel_compare_options_range_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare);
  }

  int compare_options_range_locale_(NSString? string, int mask,
      _NSRange rangeOfReceiverToCompare, NSObject locale) {
    return _lib._objc_msgSend_169(_id, _lib._sel_compare_options_range_locale_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare, locale._id);
  }

  int caseInsensitiveCompare_(NSString? string) {
    return _lib._objc_msgSend_166(
        _id, _lib._sel_caseInsensitiveCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCompare_(NSString? string) {
    return _lib._objc_msgSend_166(
        _id, _lib._sel_localizedCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCaseInsensitiveCompare_(NSString? string) {
    return _lib._objc_msgSend_166(
        _id,
        _lib._sel_localizedCaseInsensitiveCompare_1,
        string?._id ?? ffi.nullptr);
  }

  int localizedStandardCompare_(NSString? string) {
    return _lib._objc_msgSend_166(
        _id, _lib._sel_localizedStandardCompare_1, string?._id ?? ffi.nullptr);
  }

  bool isEqualToString_(NSString? aString) {
    return _lib._objc_msgSend_37(
        _id, _lib._sel_isEqualToString_1, aString?._id ?? ffi.nullptr);
  }

  bool hasPrefix_(NSString? str) {
    return _lib._objc_msgSend_37(
        _id, _lib._sel_hasPrefix_1, str?._id ?? ffi.nullptr);
  }

  bool hasSuffix_(NSString? str) {
    return _lib._objc_msgSend_37(
        _id, _lib._sel_hasSuffix_1, str?._id ?? ffi.nullptr);
  }

  NSString commonPrefixWithString_options_(NSString? str, int mask) {
    final _ret = _lib._objc_msgSend_170(
        _id,
        _lib._sel_commonPrefixWithString_options_1,
        str?._id ?? ffi.nullptr,
        mask);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool containsString_(NSString? str) {
    return _lib._objc_msgSend_37(
        _id, _lib._sel_containsString_1, str?._id ?? ffi.nullptr);
  }

  bool localizedCaseInsensitiveContainsString_(NSString? str) {
    return _lib._objc_msgSend_37(
        _id,
        _lib._sel_localizedCaseInsensitiveContainsString_1,
        str?._id ?? ffi.nullptr);
  }

  bool localizedStandardContainsString_(NSString? str) {
    return _lib._objc_msgSend_37(_id,
        _lib._sel_localizedStandardContainsString_1, str?._id ?? ffi.nullptr);
  }

  _NSRange localizedStandardRangeOfString_(NSString? str) {
    return _lib._objc_msgSend_171(_id,
        _lib._sel_localizedStandardRangeOfString_1, str?._id ?? ffi.nullptr);
  }

  _NSRange rangeOfString_(NSString? searchString) {
    return _lib._objc_msgSend_171(
        _id, _lib._sel_rangeOfString_1, searchString?._id ?? ffi.nullptr);
  }

  _NSRange rangeOfString_options_(NSString? searchString, int mask) {
    return _lib._objc_msgSend_172(_id, _lib._sel_rangeOfString_options_1,
        searchString?._id ?? ffi.nullptr, mask);
  }

  _NSRange rangeOfString_options_range_(
      NSString? searchString, int mask, _NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_173(_id, _lib._sel_rangeOfString_options_range_1,
        searchString?._id ?? ffi.nullptr, mask, rangeOfReceiverToSearch);
  }

  _NSRange rangeOfString_options_range_locale_(NSString? searchString, int mask,
      _NSRange rangeOfReceiverToSearch, NSLocale? locale) {
    return _lib._objc_msgSend_181(
        _id,
        _lib._sel_rangeOfString_options_range_locale_1,
        searchString?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch,
        locale?._id ?? ffi.nullptr);
  }

  _NSRange rangeOfCharacterFromSet_(NSCharacterSet? searchSet) {
    return _lib._objc_msgSend_182(_id, _lib._sel_rangeOfCharacterFromSet_1,
        searchSet?._id ?? ffi.nullptr);
  }

  _NSRange rangeOfCharacterFromSet_options_(
      NSCharacterSet? searchSet, int mask) {
    return _lib._objc_msgSend_183(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_1,
        searchSet?._id ?? ffi.nullptr,
        mask);
  }

  _NSRange rangeOfCharacterFromSet_options_range_(
      NSCharacterSet? searchSet, int mask, _NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_184(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_range_1,
        searchSet?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch);
  }

  _NSRange rangeOfComposedCharacterSequenceAtIndex_(int index) {
    return _lib._objc_msgSend_185(
        _id, _lib._sel_rangeOfComposedCharacterSequenceAtIndex_1, index);
  }

  _NSRange rangeOfComposedCharacterSequencesForRange_(_NSRange range) {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_rangeOfComposedCharacterSequencesForRange_1, range);
  }

  NSString stringByAppendingString_(NSString? aString) {
    final _ret = _lib._objc_msgSend_54(
        _id, _lib._sel_stringByAppendingString_1, aString?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByAppendingFormat_(NSString? format) {
    final _ret = _lib._objc_msgSend_54(
        _id, _lib._sel_stringByAppendingFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  double get doubleValue {
    return _lib._objc_msgSend_187(_id, _lib._sel_doubleValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_188(_id, _lib._sel_floatValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_189(_id, _lib._sel_intValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_190(_id, _lib._sel_integerValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_191(_id, _lib._sel_longLongValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_boolValue1);
  }

  NSString? get uppercaseString {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_uppercaseString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get lowercaseString {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_lowercaseString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get capitalizedString {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_capitalizedString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedUppercaseString {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_localizedUppercaseString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedLowercaseString {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_localizedLowercaseString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get localizedCapitalizedString {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_localizedCapitalizedString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString uppercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_192(
        _id, _lib._sel_uppercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString lowercaseStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_192(
        _id, _lib._sel_lowercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString capitalizedStringWithLocale_(NSLocale? locale) {
    final _ret = _lib._objc_msgSend_192(_id,
        _lib._sel_capitalizedStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  void getLineStart_end_contentsEnd_forRange_(
      ffi.Pointer<ffi.UnsignedLong> startPtr,
      ffi.Pointer<ffi.UnsignedLong> lineEndPtr,
      ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
      _NSRange range) {
    return _lib._objc_msgSend_193(
        _id,
        _lib._sel_getLineStart_end_contentsEnd_forRange_1,
        startPtr,
        lineEndPtr,
        contentsEndPtr,
        range);
  }

  _NSRange lineRangeForRange_(_NSRange range) {
    return _lib._objc_msgSend_186(_id, _lib._sel_lineRangeForRange_1, range);
  }

  void getParagraphStart_end_contentsEnd_forRange_(
      ffi.Pointer<ffi.UnsignedLong> startPtr,
      ffi.Pointer<ffi.UnsignedLong> parEndPtr,
      ffi.Pointer<ffi.UnsignedLong> contentsEndPtr,
      _NSRange range) {
    return _lib._objc_msgSend_193(
        _id,
        _lib._sel_getParagraphStart_end_contentsEnd_forRange_1,
        startPtr,
        parEndPtr,
        contentsEndPtr,
        range);
  }

  _NSRange paragraphRangeForRange_(_NSRange range) {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_paragraphRangeForRange_1, range);
  }

  void enumerateSubstringsInRange_options_usingBlock_(
      _NSRange range, int opts, ObjCBlock11 block) {
    return _lib._objc_msgSend_194(
        _id,
        _lib._sel_enumerateSubstringsInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  void enumerateLinesUsingBlock_(ObjCBlock12 block) {
    return _lib._objc_msgSend_195(
        _id, _lib._sel_enumerateLinesUsingBlock_1, block._id);
  }

  ffi.Pointer<ffi.Char> get UTF8String {
    return _lib._objc_msgSend_196(_id, _lib._sel_UTF8String1);
  }

  int get fastestEncoding {
    return _lib._objc_msgSend_12(_id, _lib._sel_fastestEncoding1);
  }

  int get smallestEncoding {
    return _lib._objc_msgSend_12(_id, _lib._sel_smallestEncoding1);
  }

  NSData dataUsingEncoding_allowLossyConversion_(int encoding, bool lossy) {
    final _ret = _lib._objc_msgSend_197(_id,
        _lib._sel_dataUsingEncoding_allowLossyConversion_1, encoding, lossy);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData dataUsingEncoding_(int encoding) {
    final _ret =
        _lib._objc_msgSend_198(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  bool canBeConvertedToEncoding_(int encoding) {
    return _lib._objc_msgSend_76(
        _id, _lib._sel_canBeConvertedToEncoding_1, encoding);
  }

  ffi.Pointer<ffi.Char> cStringUsingEncoding_(int encoding) {
    return _lib._objc_msgSend_199(
        _id, _lib._sel_cStringUsingEncoding_1, encoding);
  }

  bool getCString_maxLength_encoding_(
      ffi.Pointer<ffi.Char> buffer, int maxBufferCount, int encoding) {
    return _lib._objc_msgSend_200(
        _id,
        _lib._sel_getCString_maxLength_encoding_1,
        buffer,
        maxBufferCount,
        encoding);
  }

  bool getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(
      ffi.Pointer<ffi.Void> buffer,
      int maxBufferCount,
      ffi.Pointer<ffi.UnsignedLong> usedBufferCount,
      int encoding,
      int options,
      _NSRange range,
      ffi.Pointer<_NSRange> leftover) {
    return _lib._objc_msgSend_201(
        _id,
        _lib._sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1,
        buffer,
        maxBufferCount,
        usedBufferCount,
        encoding,
        options,
        range,
        leftover);
  }

  int maximumLengthOfBytesUsingEncoding_(int enc) {
    return _lib._objc_msgSend_73(
        _id, _lib._sel_maximumLengthOfBytesUsingEncoding_1, enc);
  }

  int lengthOfBytesUsingEncoding_(int enc) {
    return _lib._objc_msgSend_73(
        _id, _lib._sel_lengthOfBytesUsingEncoding_1, enc);
  }

  static ffi.Pointer<ffi.UnsignedLong> getAvailableStringEncodings(
      NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_202(
        _lib._class_NSString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding_(
      NativeMacOsFramework _lib, int encoding) {
    final _ret = _lib._objc_msgSend_163(_lib._class_NSString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultCStringEncoding(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSString1, _lib._sel_defaultCStringEncoding1);
  }

  NSString? get decomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_decomposedStringWithCanonicalMapping1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get precomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_precomposedStringWithCanonicalMapping1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get decomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_decomposedStringWithCompatibilityMapping1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get precomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_55(
        _id, _lib._sel_precomposedStringWithCompatibilityMapping1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray componentsSeparatedByString_(NSString? separator) {
    final _ret = _lib._objc_msgSend_109(_id,
        _lib._sel_componentsSeparatedByString_1, separator?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray componentsSeparatedByCharactersInSet_(NSCharacterSet? separator) {
    final _ret = _lib._objc_msgSend_203(
        _id,
        _lib._sel_componentsSeparatedByCharactersInSet_1,
        separator?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByTrimmingCharactersInSet_(NSCharacterSet? set) {
    final _ret = _lib._objc_msgSend_204(_id,
        _lib._sel_stringByTrimmingCharactersInSet_1, set?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByPaddingToLength_withString_startingAtIndex_(
      int newLength, NSString? padString, int padIndex) {
    final _ret = _lib._objc_msgSend_205(
        _id,
        _lib._sel_stringByPaddingToLength_withString_startingAtIndex_1,
        newLength,
        padString?._id ?? ffi.nullptr,
        padIndex);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByFoldingWithOptions_locale_(int options, NSLocale? locale) {
    final _ret = _lib._objc_msgSend_206(
        _id,
        _lib._sel_stringByFoldingWithOptions_locale_1,
        options,
        locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_options_range_(
      NSString? target,
      NSString? replacement,
      int options,
      _NSRange searchRange) {
    final _ret = _lib._objc_msgSend_207(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingOccurrencesOfString_withString_(
      NSString? target, NSString? replacement) {
    final _ret = _lib._objc_msgSend_208(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByReplacingCharactersInRange_withString_(
      _NSRange range, NSString? replacement) {
    final _ret = _lib._objc_msgSend_209(
        _id,
        _lib._sel_stringByReplacingCharactersInRange_withString_1,
        range,
        replacement?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString stringByApplyingTransform_reverse_(
      NSString transform, bool reverse) {
    final _ret = _lib._objc_msgSend_210(_id,
        _lib._sel_stringByApplyingTransform_reverse_1, transform._id, reverse);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_atomically_encoding_error_(NSURL? url, bool useAuxiliaryFile,
      int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_211(
        _id,
        _lib._sel_writeToURL_atomically_encoding_error_1,
        url?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  bool writeToFile_atomically_encoding_error_(
      NSString? path,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_212(
        _id,
        _lib._sel_writeToFile_atomically_encoding_error_1,
        path?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int get hash {
    return _lib._objc_msgSend_12(_id, _lib._sel_hash1);
  }

  NSString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_213(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<ffi.UnsignedShort> chars, int len, ObjCBlock13 deallocator) {
    final _ret = _lib._objc_msgSend_214(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator._id);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharacters_length_(
      ffi.Pointer<ffi.UnsignedShort> characters, int length) {
    final _ret = _lib._objc_msgSend_215(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithUTF8String_(ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_216(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithString_(NSString? aString) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_initWithString_1, aString?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_(NSString? format) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_initWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_arguments_(
      NSString? format, ffi.Pointer<ffi.Char> argList) {
    final _ret = _lib._objc_msgSend_217(
        _id,
        _lib._sel_initWithFormat_arguments_1,
        format?._id ?? ffi.nullptr,
        argList);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_(NSString? format, NSObject locale) {
    final _ret = _lib._objc_msgSend_218(_id, _lib._sel_initWithFormat_locale_1,
        format?._id ?? ffi.nullptr, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_arguments_(
      NSString? format, NSObject locale, ffi.Pointer<ffi.Char> argList) {
    final _ret = _lib._objc_msgSend_219(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format?._id ?? ffi.nullptr,
        locale._id,
        argList);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithValidatedFormat_validFormatSpecifiers_error_(
      NSString? format,
      NSString? validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_220(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithValidatedFormat_validFormatSpecifiers_locale_error_(
      NSString? format,
      NSString? validFormatSpecifiers,
      NSObject locale,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_221(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        locale._id,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithValidatedFormat_validFormatSpecifiers_arguments_error_(
      NSString? format,
      NSString? validFormatSpecifiers,
      ffi.Pointer<ffi.Char> argList,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_222(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_arguments_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        argList,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString
      initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(
          NSString? format,
          NSString? validFormatSpecifiers,
          NSObject locale,
          ffi.Pointer<ffi.Char> argList,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_223(
        _id,
        _lib._sel_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        locale._id,
        argList,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithData_encoding_(NSData? data, int encoding) {
    final _ret = _lib._objc_msgSend_224(_id, _lib._sel_initWithData_encoding_1,
        data?._id ?? ffi.nullptr, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithBytes_length_encoding_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding) {
    final _ret = _lib._objc_msgSend_225(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_226(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      int len,
      int encoding,
      ObjCBlock14 deallocator) {
    final _ret = _lib._objc_msgSend_227(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator._id);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString string(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithString_(
      NativeMacOsFramework _lib, NSString? string) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCharacters_length_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.UnsignedShort> characters, int length) {
    final _ret = _lib._objc_msgSend_215(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithUTF8String_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_216(_lib._class_NSString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithFormat_(
      NativeMacOsFramework _lib, NSString? format) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString localizedStringWithFormat_(
      NativeMacOsFramework _lib, NSString? format) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithValidatedFormat_validFormatSpecifiers_error_(
      NativeMacOsFramework _lib,
      NSString? format,
      NSString? validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_220(
        _lib._class_NSString1,
        _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeMacOsFramework _lib,
          NSString? format,
          NSString? validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_220(
        _lib._class_NSString1,
        _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, int encoding) {
    final _ret = _lib._objc_msgSend_228(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCString_encoding_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_228(_lib._class_NSString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfURL_encoding_error_(
      NSURL? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_229(
        _id,
        _lib._sel_initWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfFile_encoding_error_(
      NSString? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_230(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfURL_encoding_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_229(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfFile_encoding_error_(
      NativeMacOsFramework _lib,
      NSString? path,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_230(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfURL_usedEncoding_error_(
      NSURL? url,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_231(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfFile_usedEncoding_error_(
      NSString? path,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_232(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfURL_usedEncoding_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_231(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfFile_usedEncoding_error_(
      NativeMacOsFramework _lib,
      NSString? path,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_232(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NativeMacOsFramework _lib,
          NSData? data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_233(
        _lib._class_NSString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  NSObject propertyList() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_propertyList1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary propertyListFromStringsFileFormat() {
    final _ret = _lib._objc_msgSend_234(
        _id, _lib._sel_propertyListFromStringsFileFormat1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Char> cString() {
    return _lib._objc_msgSend_196(_id, _lib._sel_cString1);
  }

  ffi.Pointer<ffi.Char> lossyCString() {
    return _lib._objc_msgSend_196(_id, _lib._sel_lossyCString1);
  }

  int cStringLength() {
    return _lib._objc_msgSend_12(_id, _lib._sel_cStringLength1);
  }

  void getCString_(ffi.Pointer<ffi.Char> bytes) {
    return _lib._objc_msgSend_21(_id, _lib._sel_getCString_1, bytes);
  }

  void getCString_maxLength_(ffi.Pointer<ffi.Char> bytes, int maxLength) {
    return _lib._objc_msgSend_235(
        _id, _lib._sel_getCString_maxLength_1, bytes, maxLength);
  }

  void getCString_maxLength_range_remainingRange_(ffi.Pointer<ffi.Char> bytes,
      int maxLength, _NSRange aRange, ffi.Pointer<_NSRange> leftoverRange) {
    return _lib._objc_msgSend_236(
        _id,
        _lib._sel_getCString_maxLength_range_remainingRange_1,
        bytes,
        maxLength,
        aRange,
        leftoverRange);
  }

  bool writeToFile_atomically_(NSString? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_111(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL? url, bool atomically) {
    return _lib._objc_msgSend_112(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  NSObject initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_237(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_237(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithCStringNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Char> bytes, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_238(
        _id,
        _lib._sel_initWithCStringNoCopy_length_freeWhenDone_1,
        bytes,
        length,
        freeBuffer);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject initWithCString_length_(ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_228(
        _id, _lib._sel_initWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret =
        _lib._objc_msgSend_216(_id, _lib._sel_initWithCString_1, bytes);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_length_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_228(_lib._class_NSString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_216(
        _lib._class_NSString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_(ffi.Pointer<ffi.UnsignedShort> buffer) {
    return _lib._objc_msgSend_239(_id, _lib._sel_getCharacters_1, buffer);
  }

  /// For strings with length variations, such as from a stringsdict file, this method returns the variant at the given width. If there is no variant at the given width, the one for the next smaller width is returned. And if there are none smaller, the smallest available is returned. For strings without variations, this method returns self. The unit that width is expressed in is decided by the application or framework. But it is intended to be some measurement indicative of the context a string would fit best to avoid truncation and wasted space.
  NSString variantFittingPresentationWidth_(int width) {
    final _ret = _lib._objc_msgSend_240(
        _id, _lib._sel_variantFittingPresentationWidth_1, width);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_new1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_alloc1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }
}

extension StringToNSString on String {
  NSString toNSString(NativeMacOsFramework lib) => NSString(lib, this);
}

class NSCoder extends NSObject {
  NSCoder._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends _ObjCWrapper>(T other) {
    return NSCoder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCoder1);
  }

  void encodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> addr) {
    return _lib._objc_msgSend_14(
        _id, _lib._sel_encodeValueOfObjCType_at_1, type, addr);
  }

  void encodeDataObject_(NSData? data) {
    return _lib._objc_msgSend_16(
        _id, _lib._sel_encodeDataObject_1, data?._id ?? ffi.nullptr);
  }

  NSData decodeDataObject() {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_decodeDataObject1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_size_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data, int size) {
    return _lib._objc_msgSend_18(
        _id, _lib._sel_decodeValueOfObjCType_at_size_1, type, data, size);
  }

  int versionForClassName_(NSString? className) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_versionForClassName_1, className?._id ?? ffi.nullptr);
  }

  void encodeObject_(NSObject object) {
    return _lib._objc_msgSend_20(_id, _lib._sel_encodeObject_1, object._id);
  }

  void encodeRootObject_(NSObject rootObject) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_encodeRootObject_1, rootObject._id);
  }

  void encodeBycopyObject_(NSObject anObject) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_encodeBycopyObject_1, anObject._id);
  }

  void encodeByrefObject_(NSObject anObject) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_encodeByrefObject_1, anObject._id);
  }

  void encodeConditionalObject_(NSObject object) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_encodeConditionalObject_1, object._id);
  }

  void encodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    return _lib._objc_msgSend_21(
        _id, _lib._sel_encodeValuesOfObjCTypes_1, types);
  }

  void encodeArrayOfObjCType_count_at_(
      ffi.Pointer<ffi.Char> type, int count, ffi.Pointer<ffi.Void> array) {
    return _lib._objc_msgSend_22(
        _id, _lib._sel_encodeArrayOfObjCType_count_at_1, type, count, array);
  }

  void encodeBytes_length_(ffi.Pointer<ffi.Void> byteaddr, int length) {
    return _lib._objc_msgSend_23(
        _id, _lib._sel_encodeBytes_length_1, byteaddr, length);
  }

  NSObject decodeObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodeObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectAndReturnError_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_24(
        _id, _lib._sel_decodeTopLevelObjectAndReturnError_1, error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    return _lib._objc_msgSend_21(
        _id, _lib._sel_decodeValuesOfObjCTypes_1, types);
  }

  void decodeArrayOfObjCType_count_at_(
      ffi.Pointer<ffi.Char> itemType, int count, ffi.Pointer<ffi.Void> array) {
    return _lib._objc_msgSend_22(_id,
        _lib._sel_decodeArrayOfObjCType_count_at_1, itemType, count, array);
  }

  ffi.Pointer<ffi.Void> decodeBytesWithReturnedLength_(
      ffi.Pointer<ffi.UnsignedLong> lengthp) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_decodeBytesWithReturnedLength_1, lengthp);
  }

  void encodePropertyList_(NSObject aPropertyList) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_encodePropertyList_1, aPropertyList._id);
  }

  NSObject decodePropertyList() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodePropertyList1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setObjectZone_(ffi.Pointer<_NSZone> zone) {
    return _lib._objc_msgSend_26(_id, _lib._sel_setObjectZone_1, zone);
  }

  ffi.Pointer<_NSZone> objectZone() {
    return _lib._objc_msgSend_27(_id, _lib._sel_objectZone1);
  }

  int get systemVersion {
    return _lib._objc_msgSend_28(_id, _lib._sel_systemVersion1);
  }

  bool get allowsKeyedCoding {
    return _lib._objc_msgSend_11(_id, _lib._sel_allowsKeyedCoding1);
  }

  void encodeObject_forKey_(NSObject object, NSString? key) {
    return _lib._objc_msgSend_29(_id, _lib._sel_encodeObject_forKey_1,
        object._id, key?._id ?? ffi.nullptr);
  }

  void encodeConditionalObject_forKey_(NSObject object, NSString? key) {
    return _lib._objc_msgSend_29(
        _id,
        _lib._sel_encodeConditionalObject_forKey_1,
        object._id,
        key?._id ?? ffi.nullptr);
  }

  void encodeBool_forKey_(bool value, NSString? key) {
    return _lib._objc_msgSend_30(
        _id, _lib._sel_encodeBool_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_31(
        _id, _lib._sel_encodeInt_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt32_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_32(
        _id, _lib._sel_encodeInt32_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt64_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_33(
        _id, _lib._sel_encodeInt64_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeFloat_forKey_(double value, NSString? key) {
    return _lib._objc_msgSend_34(
        _id, _lib._sel_encodeFloat_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeDouble_forKey_(double value, NSString? key) {
    return _lib._objc_msgSend_35(
        _id, _lib._sel_encodeDouble_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeBytes_length_forKey_(
      ffi.Pointer<ffi.Uint8> bytes, int length, NSString? key) {
    return _lib._objc_msgSend_36(_id, _lib._sel_encodeBytes_length_forKey_1,
        bytes, length, key?._id ?? ffi.nullptr);
  }

  bool containsValueForKey_(NSString? key) {
    return _lib._objc_msgSend_37(
        _id, _lib._sel_containsValueForKey_1, key?._id ?? ffi.nullptr);
  }

  NSObject decodeObjectForKey_(NSString? key) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_decodeObjectForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectForKey_error_(
      NSString? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_decodeTopLevelObjectForKey_error_1,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool decodeBoolForKey_(NSString? key) {
    return _lib._objc_msgSend_37(
        _id, _lib._sel_decodeBoolForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeIntForKey_(NSString? key) {
    return _lib._objc_msgSend_40(
        _id, _lib._sel_decodeIntForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeInt32ForKey_(NSString? key) {
    return _lib._objc_msgSend_41(
        _id, _lib._sel_decodeInt32ForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeInt64ForKey_(NSString? key) {
    return _lib._objc_msgSend_42(
        _id, _lib._sel_decodeInt64ForKey_1, key?._id ?? ffi.nullptr);
  }

  double decodeFloatForKey_(NSString? key) {
    return _lib._objc_msgSend_43(
        _id, _lib._sel_decodeFloatForKey_1, key?._id ?? ffi.nullptr);
  }

  double decodeDoubleForKey_(NSString? key) {
    return _lib._objc_msgSend_44(
        _id, _lib._sel_decodeDoubleForKey_1, key?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.Uint8> decodeBytesForKey_returnedLength_(
      NSString? key, ffi.Pointer<ffi.UnsignedLong> lengthp) {
    return _lib._objc_msgSend_45(
        _id,
        _lib._sel_decodeBytesForKey_returnedLength_1,
        key?._id ?? ffi.nullptr,
        lengthp);
  }

  void encodeInteger_forKey_(int value, NSString? key) {
    return _lib._objc_msgSend_46(
        _id, _lib._sel_encodeInteger_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  int decodeIntegerForKey_(NSString? key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_decodeIntegerForKey_1, key?._id ?? ffi.nullptr);
  }

  bool get requiresSecureCoding {
    return _lib._objc_msgSend_11(_id, _lib._sel_requiresSecureCoding1);
  }

  NSObject decodeObjectOfClass_forKey_(NSObject aClass, NSString? key) {
    final _ret = _lib._objc_msgSend_47(
        _id,
        _lib._sel_decodeObjectOfClass_forKey_1,
        aClass._id,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectOfClass_forKey_error_(NSObject aClass,
      NSString? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_48(
        _id,
        _lib._sel_decodeTopLevelObjectOfClass_forKey_error_1,
        aClass._id,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray decodeArrayOfObjectsOfClass_forKey_(NSObject cls, NSString? key) {
    final _ret = _lib._objc_msgSend_113(
        _id,
        _lib._sel_decodeArrayOfObjectsOfClass_forKey_1,
        cls._id,
        key?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_(
      NSObject keyCls, NSObject objectCls, NSString? key) {
    final _ret = _lib._objc_msgSend_132(
        _id,
        _lib._sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1,
        keyCls._id,
        objectCls._id,
        key?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeObjectOfClasses_forKey_(NSSet? classes, NSString? key) {
    final _ret = _lib._objc_msgSend_143(
        _id,
        _lib._sel_decodeObjectOfClasses_forKey_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectOfClasses_forKey_error_(NSSet? classes,
      NSString? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_144(
        _id,
        _lib._sel_decodeTopLevelObjectOfClasses_forKey_error_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray decodeArrayOfObjectsOfClasses_forKey_(NSSet? classes, NSString? key) {
    final _ret = _lib._objc_msgSend_145(
        _id,
        _lib._sel_decodeArrayOfObjectsOfClasses_forKey_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(
      NSSet? keyClasses, NSSet? objectClasses, NSString? key) {
    final _ret = _lib._objc_msgSend_146(
        _id,
        _lib._sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1,
        keyClasses?._id ?? ffi.nullptr,
        objectClasses?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodePropertyListForKey_(NSString? key) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_decodePropertyListForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSSet? get allowedClasses {
    final _ret = _lib._objc_msgSend_147(_id, _lib._sel_allowedClasses1);
    return _ret.address == 0
        ? null
        : NSSet._(_ret, _lib, retain: true, release: true);
  }

  void failWithError_(NSError? error) {
    return _lib._objc_msgSend_148(
        _id, _lib._sel_failWithError_1, error?._id ?? ffi.nullptr);
  }

  int get decodingFailurePolicy {
    return _lib._objc_msgSend_149(_id, _lib._sel_decodingFailurePolicy1);
  }

  NSError? get error {
    final _ret = _lib._objc_msgSend_150(_id, _lib._sel_error1);
    return _ret.address == 0
        ? null
        : NSError._(_ret, _lib, retain: true, release: true);
  }

  void encodeNXObject_(NSObject object) {
    return _lib._objc_msgSend_20(_id, _lib._sel_encodeNXObject_1, object._id);
  }

  NSObject decodeNXObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodeNXObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data) {
    return _lib._objc_msgSend_14(
        _id, _lib._sel_decodeValueOfObjCType_at_1, type, data);
  }

  void encodePoint_(CGPoint point) {
    return _lib._objc_msgSend_151(_id, _lib._sel_encodePoint_1, point);
  }

  CGPoint decodePoint() {
    return _lib._objc_msgSend_152(_id, _lib._sel_decodePoint1);
  }

  void encodeSize_(CGSize size) {
    return _lib._objc_msgSend_153(_id, _lib._sel_encodeSize_1, size);
  }

  CGSize decodeSize() {
    return _lib._objc_msgSend_154(_id, _lib._sel_decodeSize1);
  }

  void encodeRect_(CGRect rect) {
    return _lib._objc_msgSend_155(_id, _lib._sel_encodeRect_1, rect);
  }

  CGRect decodeRect() {
    return _lib._objc_msgSend_156(_id, _lib._sel_decodeRect1);
  }

  void encodePoint_forKey_(CGPoint point, NSString? key) {
    return _lib._objc_msgSend_157(
        _id, _lib._sel_encodePoint_forKey_1, point, key?._id ?? ffi.nullptr);
  }

  void encodeSize_forKey_(CGSize size, NSString? key) {
    return _lib._objc_msgSend_158(
        _id, _lib._sel_encodeSize_forKey_1, size, key?._id ?? ffi.nullptr);
  }

  void encodeRect_forKey_(CGRect rect, NSString? key) {
    return _lib._objc_msgSend_159(
        _id, _lib._sel_encodeRect_forKey_1, rect, key?._id ?? ffi.nullptr);
  }

  CGPoint decodePointForKey_(NSString? key) {
    return _lib._objc_msgSend_160(
        _id, _lib._sel_decodePointForKey_1, key?._id ?? ffi.nullptr);
  }

  CGSize decodeSizeForKey_(NSString? key) {
    return _lib._objc_msgSend_161(
        _id, _lib._sel_decodeSizeForKey_1, key?._id ?? ffi.nullptr);
  }

  CGRect decodeRectForKey_(NSString? key) {
    return _lib._objc_msgSend_162(
        _id, _lib._sel_decodeRectForKey_1, key?._id ?? ffi.nullptr);
  }

  static NSCoder new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_new1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_alloc1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }
}

class NSData extends _ObjCWrapper {
  NSData._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSData] that points to the same underlying object as [other].
  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSData] that wraps the given raw object pointer.
  static NSData castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSData1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_15(_id, _lib._sel_bytes1);
  }
}

class NSError extends _ObjCWrapper {
  NSError._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSError] that points to the same underlying object as [other].
  static NSError castFrom<T extends _ObjCWrapper>(T other) {
    return NSError._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSError] that wraps the given raw object pointer.
  static NSError castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSError._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSError].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSError1);
  }
}

class NSArray extends NSObject {
  NSArray._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSArray] that points to the same underlying object as [other].
  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSArray] that wraps the given raw object pointer.
  static NSArray castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSArray1);
  }

  int get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_49(_id, _lib._sel_objectAtIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_50(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObject_(NSObject anObject) {
    final _ret = _lib._objc_msgSend_52(
        _id, _lib._sel_arrayByAddingObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByAddingObjectsFromArray_(NSArray? otherArray) {
    final _ret = _lib._objc_msgSend_53(
        _id,
        _lib._sel_arrayByAddingObjectsFromArray_1,
        otherArray?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString componentsJoinedByString_(NSString? separator) {
    final _ret = _lib._objc_msgSend_54(_id,
        _lib._sel_componentsJoinedByString_1, separator?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(NSObject anObject) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_56(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_57(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject firstObjectCommonWithArray_(NSArray? otherArray) {
    final _ret = _lib._objc_msgSend_58(_id,
        _lib._sel_firstObjectCommonWithArray_1, otherArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_range_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, _NSRange range) {
    return _lib._objc_msgSend_59(
        _id, _lib._sel_getObjects_range_1, objects, range);
  }

  int indexOfObject_(NSObject anObject) {
    return _lib._objc_msgSend_60(_id, _lib._sel_indexOfObject_1, anObject._id);
  }

  int indexOfObject_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_indexOfObject_inRange_1, anObject._id, range);
  }

  int indexOfObjectIdenticalTo_(NSObject anObject) {
    return _lib._objc_msgSend_60(
        _id, _lib._sel_indexOfObjectIdenticalTo_1, anObject._id);
  }

  int indexOfObjectIdenticalTo_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_indexOfObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  bool isEqualToArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_62(
        _id, _lib._sel_isEqualToArray_1, otherArray?._id ?? ffi.nullptr);
  }

  NSObject get firstObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get lastObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_63(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator reverseObjectEnumerator() {
    final _ret = _lib._objc_msgSend_63(_id, _lib._sel_reverseObjectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSData? get sortedArrayHint {
    final _ret = _lib._objc_msgSend_17(_id, _lib._sel_sortedArrayHint1);
    return _ret.address == 0
        ? null
        : NSData._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context) {
    final _ret = _lib._objc_msgSend_64(
        _id, _lib._sel_sortedArrayUsingFunction_context_1, comparator, context);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingFunction_context_hint_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context,
      NSData? hint) {
    final _ret = _lib._objc_msgSend_65(
        _id,
        _lib._sel_sortedArrayUsingFunction_context_hint_1,
        comparator,
        context,
        hint?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_66(
        _id, _lib._sel_sortedArrayUsingSelector_1, comparator);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray subarrayWithRange_(_NSRange range) {
    final _ret =
        _lib._objc_msgSend_67(_id, _lib._sel_subarrayWithRange_1, range);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_68(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_7(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    return _lib._objc_msgSend_69(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSArray objectsAtIndexes_(NSIndexSet? indexes) {
    final _ret = _lib._objc_msgSend_90(
        _id, _lib._sel_objectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectAtIndexedSubscript_(int idx) {
    final _ret =
        _lib._objc_msgSend_49(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(ObjCBlock3 block) {
    return _lib._objc_msgSend_91(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._id);
  }

  void enumerateObjectsWithOptions_usingBlock_(int opts, ObjCBlock3 block) {
    return _lib._objc_msgSend_92(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(
      NSIndexSet? s, int opts, ObjCBlock3 block) {
    return _lib._objc_msgSend_93(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s?._id ?? ffi.nullptr,
        opts,
        block._id);
  }

  int indexOfObjectPassingTest_(ObjCBlock4 predicate) {
    return _lib._objc_msgSend_94(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._id);
  }

  int indexOfObjectWithOptions_passingTest_(int opts, ObjCBlock4 predicate) {
    return _lib._objc_msgSend_95(_id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1, opts, predicate._id);
  }

  int indexOfObjectAtIndexes_options_passingTest_(
      NSIndexSet? s, int opts, ObjCBlock4 predicate) {
    return _lib._objc_msgSend_96(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._id);
  }

  NSIndexSet indexesOfObjectsPassingTest_(ObjCBlock4 predicate) {
    final _ret = _lib._objc_msgSend_97(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest_(
      int opts, ObjCBlock4 predicate) {
    final _ret = _lib._objc_msgSend_98(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest_(
      NSIndexSet? s, int opts, ObjCBlock4 predicate) {
    final _ret = _lib._objc_msgSend_99(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayUsingComparator_(ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_100(
        _id, _lib._sel_sortedArrayUsingComparator_1, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray sortedArrayWithOptions_usingComparator_(int opts, ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_101(_id,
        _lib._sel_sortedArrayWithOptions_usingComparator_1, opts, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
      NSObject obj, _NSRange r, int opts, ObjCBlock5 cmp) {
    return _lib._objc_msgSend_102(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        obj._id,
        r,
        opts,
        cmp._id);
  }

  static NSArray array(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_count_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_50(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_(
      NativeMacOsFramework _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithArray_(NativeMacOsFramework _lib, NSArray? array) {
    final _ret = _lib._objc_msgSend_58(_lib._class_NSArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_103(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_(NSArray? array) {
    final _ret = _lib._objc_msgSend_58(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_copyItems_(NSArray? array, bool flag) {
    final _ret = _lib._objc_msgSend_104(_id,
        _lib._sel_initWithArray_copyItems_1, array?._id ?? ffi.nullptr, flag);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  NSArray initWithContentsOfURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_105(
        _id,
        _lib._sel_initWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithContentsOfURL_error_(NativeMacOsFramework _lib,
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_usingEquivalenceTest_(
      NSArray? other, int options, ObjCBlock6 block) {
    final _ret = _lib._objc_msgSend_106(
        _id,
        _lib._sel_differenceFromArray_withOptions_usingEquivalenceTest_1,
        other?._id ?? ffi.nullptr,
        options,
        block._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_(NSArray? other, int options) {
    final _ret = _lib._objc_msgSend_107(
        _id,
        _lib._sel_differenceFromArray_withOptions_1,
        other?._id ?? ffi.nullptr,
        options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_(NSArray? other) {
    final _ret = _lib._objc_msgSend_58(
        _id, _lib._sel_differenceFromArray_1, other?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSArray arrayByApplyingDifference_(NSObject? difference) {
    final _ret = _lib._objc_msgSend_52(_id,
        _lib._sel_arrayByApplyingDifference_1, difference?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects) {
    return _lib._objc_msgSend_108(_id, _lib._sel_getObjects_1, objects);
  }

  static NSArray arrayWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_109(_lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_110(_lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_109(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_110(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_111(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL? url, bool atomically) {
    return _lib._objc_msgSend_112(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSArray new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }
}

final class _NSRange extends ffi.Struct {
  @ffi.UnsignedLong()
  external int location;

  @ffi.UnsignedLong()
  external int length;
}

class NSEnumerator extends NSObject {
  NSEnumerator._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSEnumerator] that points to the same underlying object as [other].
  static NSEnumerator castFrom<T extends _ObjCWrapper>(T other) {
    return NSEnumerator._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSEnumerator] that wraps the given raw object pointer.
  static NSEnumerator castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSEnumerator._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSEnumerator].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSEnumerator1);
  }

  NSObject nextObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nextObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allObjects {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allObjects1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSEnumerator new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_new1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static NSEnumerator alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_alloc1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }
}

class NSURL extends _ObjCWrapper {
  NSURL._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURL] that points to the same underlying object as [other].
  static NSURL castFrom<T extends _ObjCWrapper>(T other) {
    return NSURL._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURL] that wraps the given raw object pointer.
  static NSURL castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURL._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURL].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURL1);
  }
}

class NSIndexSet extends NSObject {
  NSIndexSet._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSIndexSet] that points to the same underlying object as [other].
  static NSIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSIndexSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSIndexSet] that wraps the given raw object pointer.
  static NSIndexSet castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSIndexSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSIndexSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSIndexSet1);
  }

  static NSIndexSet indexSet(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_indexSet1);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndex_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_49(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndex_1, value);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexSet indexSetWithIndexesInRange_(
      NativeMacOsFramework _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_70(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexesInRange_(_NSRange range) {
    final _ret =
        _lib._objc_msgSend_70(_id, _lib._sel_initWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndexSet_(NSIndexSet? indexSet) {
    final _ret = _lib._objc_msgSend_71(
        _id, _lib._sel_initWithIndexSet_1, indexSet?._id ?? ffi.nullptr);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet initWithIndex_(int value) {
    final _ret = _lib._objc_msgSend_49(_id, _lib._sel_initWithIndex_1, value);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToIndexSet_(NSIndexSet? indexSet) {
    return _lib._objc_msgSend_72(
        _id, _lib._sel_isEqualToIndexSet_1, indexSet?._id ?? ffi.nullptr);
  }

  int get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  int get firstIndex {
    return _lib._objc_msgSend_12(_id, _lib._sel_firstIndex1);
  }

  int get lastIndex {
    return _lib._objc_msgSend_12(_id, _lib._sel_lastIndex1);
  }

  int indexGreaterThanIndex_(int value) {
    return _lib._objc_msgSend_73(_id, _lib._sel_indexGreaterThanIndex_1, value);
  }

  int indexLessThanIndex_(int value) {
    return _lib._objc_msgSend_73(_id, _lib._sel_indexLessThanIndex_1, value);
  }

  int indexGreaterThanOrEqualToIndex_(int value) {
    return _lib._objc_msgSend_73(
        _id, _lib._sel_indexGreaterThanOrEqualToIndex_1, value);
  }

  int indexLessThanOrEqualToIndex_(int value) {
    return _lib._objc_msgSend_73(
        _id, _lib._sel_indexLessThanOrEqualToIndex_1, value);
  }

  int getIndexes_maxCount_inIndexRange_(
      ffi.Pointer<ffi.UnsignedLong> indexBuffer,
      int bufferSize,
      ffi.Pointer<_NSRange> range) {
    return _lib._objc_msgSend_74(
        _id,
        _lib._sel_getIndexes_maxCount_inIndexRange_1,
        indexBuffer,
        bufferSize,
        range);
  }

  int countOfIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_75(_id, _lib._sel_countOfIndexesInRange_1, range);
  }

  bool containsIndex_(int value) {
    return _lib._objc_msgSend_76(_id, _lib._sel_containsIndex_1, value);
  }

  bool containsIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_77(
        _id, _lib._sel_containsIndexesInRange_1, range);
  }

  bool containsIndexes_(NSIndexSet? indexSet) {
    return _lib._objc_msgSend_72(
        _id, _lib._sel_containsIndexes_1, indexSet?._id ?? ffi.nullptr);
  }

  bool intersectsIndexesInRange_(_NSRange range) {
    return _lib._objc_msgSend_77(
        _id, _lib._sel_intersectsIndexesInRange_1, range);
  }

  void enumerateIndexesUsingBlock_(ObjCBlock block) {
    return _lib._objc_msgSend_78(
        _id, _lib._sel_enumerateIndexesUsingBlock_1, block._id);
  }

  void enumerateIndexesWithOptions_usingBlock_(int opts, ObjCBlock block) {
    return _lib._objc_msgSend_79(_id,
        _lib._sel_enumerateIndexesWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateIndexesInRange_options_usingBlock_(
      _NSRange range, int opts, ObjCBlock block) {
    return _lib._objc_msgSend_80(
        _id,
        _lib._sel_enumerateIndexesInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  int indexPassingTest_(ObjCBlock1 predicate) {
    return _lib._objc_msgSend_81(
        _id, _lib._sel_indexPassingTest_1, predicate._id);
  }

  int indexWithOptions_passingTest_(int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_82(
        _id, _lib._sel_indexWithOptions_passingTest_1, opts, predicate._id);
  }

  int indexInRange_options_passingTest_(
      _NSRange range, int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_83(
        _id,
        _lib._sel_indexInRange_options_passingTest_1,
        range,
        opts,
        predicate._id);
  }

  NSIndexSet indexesPassingTest_(ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_84(
        _id, _lib._sel_indexesPassingTest_1, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesWithOptions_passingTest_(int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_85(
        _id, _lib._sel_indexesWithOptions_passingTest_1, opts, predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  NSIndexSet indexesInRange_options_passingTest_(
      _NSRange range, int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_86(
        _id,
        _lib._sel_indexesInRange_options_passingTest_1,
        range,
        opts,
        predicate._id);
    return NSIndexSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateRangesUsingBlock_(ObjCBlock2 block) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_enumerateRangesUsingBlock_1, block._id);
  }

  void enumerateRangesWithOptions_usingBlock_(int opts, ObjCBlock2 block) {
    return _lib._objc_msgSend_88(_id,
        _lib._sel_enumerateRangesWithOptions_usingBlock_1, opts, block._id);
  }

  void enumerateRangesInRange_options_usingBlock_(
      _NSRange range, int opts, ObjCBlock2 block) {
    return _lib._objc_msgSend_89(
        _id,
        _lib._sel_enumerateRangesInRange_options_usingBlock_1,
        range,
        opts,
        block._id);
  }

  static NSIndexSet new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_new1);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexSet alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSIndexSet1, _lib._sel_alloc1);
    return NSIndexSet._(_ret, _lib, retain: false, release: true);
  }
}

class _ObjCBlockBase implements ffi.Finalizable {
  final ffi.Pointer<_ObjCBlock> _id;
  final NativeMacOsFramework _lib;
  bool _pendingRelease;

  _ObjCBlockBase._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._Block_copy(_id.cast());
    }
    if (release) {
      _lib._objc_releaseFinalizer11.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC block held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._Block_release(_id.cast());
      _lib._objc_releaseFinalizer11.detach(this);
    } else {
      throw StateError(
          'Released an ObjC block that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCBlockBase && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;

  /// Return a pointer to this object.
  ffi.Pointer<_ObjCBlock> get pointer => _id;
}

void _ObjCBlock_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
          .asFunction<void Function(int arg0, ffi.Pointer<ffi.Bool> arg1)>()(
      arg0, arg1);
}

final _ObjCBlock_closureRegistry = <int, Function>{};
int _ObjCBlock_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_registerClosure(Function fn) {
  final id = ++_ObjCBlock_closureRegistryIndex;
  _ObjCBlock_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock extends _ObjCBlockBase {
  ObjCBlock._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock.fromFunction(NativeMacOsFramework lib,
      void Function(int arg0, ffi.Pointer<ffi.Bool> arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock_closureTrampoline)
                    .cast(),
                _ObjCBlock_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(int arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block, int arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

final class _ObjCBlockDesc extends ffi.Struct {
  @ffi.UnsignedLong()
  external int reserved;

  @ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Void> copy_helper;

  external ffi.Pointer<ffi.Void> dispose_helper;

  external ffi.Pointer<ffi.Char> signature;
}

final class _ObjCBlock extends ffi.Struct {
  external ffi.Pointer<ffi.Void> isa;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int reserved;

  external ffi.Pointer<ffi.Void> invoke;

  external ffi.Pointer<_ObjCBlockDesc> descriptor;

  external ffi.Pointer<ffi.Void> target;
}

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

bool _ObjCBlock1_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
          .asFunction<bool Function(int arg0, ffi.Pointer<ffi.Bool> arg1)>()(
      arg0, arg1);
}

final _ObjCBlock1_closureRegistry = <int, Function>{};
int _ObjCBlock1_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock1_registerClosure(Function fn) {
  final id = ++_ObjCBlock1_closureRegistryIndex;
  _ObjCBlock1_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock1_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock1_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock1 extends _ObjCBlockBase {
  ObjCBlock1._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock1.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock1_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock1.fromFunction(NativeMacOsFramework lib,
      bool Function(int arg0, ffi.Pointer<ffi.Bool> arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.UnsignedLong arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock1_closureTrampoline, false)
                    .cast(),
                _ObjCBlock1_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(int arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.UnsignedLong arg0, ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            bool Function(ffi.Pointer<_ObjCBlock> block, int arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

void _ObjCBlock2_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, _NSRange arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(
              _NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>()(arg0, arg1);
}

final _ObjCBlock2_closureRegistry = <int, Function>{};
int _ObjCBlock2_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock2_registerClosure(Function fn) {
  final id = ++_ObjCBlock2_closureRegistryIndex;
  _ObjCBlock2_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock2_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, _NSRange arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock2_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock2 extends _ObjCBlockBase {
  ObjCBlock2._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock2.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                                _NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock2_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock2.fromFunction(NativeMacOsFramework lib,
      void Function(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                                _NSRange arg0, ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock2_closureTrampoline)
                    .cast(),
                _ObjCBlock2_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(_NSRange arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block, _NSRange arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block, _NSRange arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

void _ObjCBlock3_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock3_closureRegistry = <int, Function>{};
int _ObjCBlock3_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock3_registerClosure(Function fn) {
  final id = ++_ObjCBlock3_closureRegistryIndex;
  _ObjCBlock3_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock3_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock3_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock3 extends _ObjCBlockBase {
  ObjCBlock3._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock3.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock3_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock3.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock3_closureTrampoline)
                    .cast(),
                _ObjCBlock3_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(
      ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.UnsignedLong arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                int arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

bool _ObjCBlock4_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock4_closureRegistry = <int, Function>{};
int _ObjCBlock4_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock4_registerClosure(Function fn) {
  final id = ++_ObjCBlock4_closureRegistryIndex;
  _ObjCBlock4_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock4_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock4_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock4 extends _ObjCBlockBase {
  ObjCBlock4._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock4.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.UnsignedLong arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock4_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock4.fromFunction(
      NativeMacOsFramework lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.UnsignedLong arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock4_closureTrampoline, false)
                    .cast(),
                _ObjCBlock4_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(
      ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.UnsignedLong arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                int arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

int _ObjCBlock5_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          int Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock5_closureRegistry = <int, Function>{};
int _ObjCBlock5_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock5_registerClosure(Function fn) {
  final id = ++_ObjCBlock5_closureRegistryIndex;
  _ObjCBlock5_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

int _ObjCBlock5_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock5_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock5 extends _ObjCBlockBase {
  ObjCBlock5._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock5.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int32 Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock5_fnPtrTrampoline, 0)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock5.fromFunction(
      NativeMacOsFramework lib,
      int Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Int32 Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock5_closureTrampoline, 0)
                    .cast(),
                _ObjCBlock5_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  int call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            int Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_id, arg0, arg1);
  }
}

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

bool _ObjCBlock6_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock6_closureRegistry = <int, Function>{};
int _ObjCBlock6_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock6_registerClosure(Function fn) {
  final id = ++_ObjCBlock6_closureRegistryIndex;
  _ObjCBlock6_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock6_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock6_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock6 extends _ObjCBlockBase {
  ObjCBlock6._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock6.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock6_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock6.fromFunction(
      NativeMacOsFramework lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock6_closureTrampoline, false)
                    .cast(),
                _ObjCBlock6_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_id, arg0, arg1);
  }
}

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDictionary] that points to the same underlying object as [other].
  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDictionary] that wraps the given raw object pointer.
  static NSDictionary castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDictionary1);
  }

  int get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  NSObject objectForKey_(NSObject aKey) {
    final _ret =
        _lib._objc_msgSend_103(_id, _lib._sel_objectForKey_1, aKey._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator keyEnumerator() {
    final _ret = _lib._objc_msgSend_63(_id, _lib._sel_keyEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_114(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get allKeys {
    final _ret = _lib._objc_msgSend_115(_id, _lib._sel_allKeys1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray allKeysForObject_(NSObject anObject) {
    final _ret =
        _lib._objc_msgSend_52(_id, _lib._sel_allKeysForObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get allValues {
    final _ret = _lib._objc_msgSend_115(_id, _lib._sel_allValues1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get descriptionInStringsFileFormat {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_56(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_indent_(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_57(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToDictionary_(NSDictionary? otherDictionary) {
    return _lib._objc_msgSend_116(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_63(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  NSArray objectsForKeys_notFoundMarker_(NSArray? keys, NSObject marker) {
    final _ret = _lib._objc_msgSend_117(
        _id,
        _lib._sel_objectsForKeys_notFoundMarker_1,
        keys?._id ?? ffi.nullptr,
        marker._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_68(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  NSArray keysSortedByValueUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_66(
        _id, _lib._sel_keysSortedByValueUsingSelector_1, comparator);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_count_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    return _lib._objc_msgSend_118(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript_(NSObject key) {
    final _ret = _lib._objc_msgSend_103(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateKeysAndObjectsUsingBlock_(ObjCBlock7 block) {
    return _lib._objc_msgSend_119(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._id);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock7 block) {
    return _lib._objc_msgSend_120(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._id);
  }

  NSArray keysSortedByValueUsingComparator_(ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_100(
        _id, _lib._sel_keysSortedByValueUsingComparator_1, cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray keysSortedByValueWithOptions_usingComparator_(
      int opts, ObjCBlock5 cmptr) {
    final _ret = _lib._objc_msgSend_101(
        _id,
        _lib._sel_keysSortedByValueWithOptions_usingComparator_1,
        opts,
        cmptr._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesPassingTest_(ObjCBlock8 predicate) {
    final _ret = _lib._objc_msgSend_121(
        _id, _lib._sel_keysOfEntriesPassingTest_1, predicate._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesWithOptions_passingTest_(
      int opts, ObjCBlock8 predicate) {
    final _ret = _lib._objc_msgSend_122(_id,
        _lib._sel_keysOfEntriesWithOptions_passingTest_1, opts, predicate._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    return _lib._objc_msgSend_123(
        _id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  static NSDictionary dictionaryWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_124(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_125(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_124(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_125(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSString? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_111(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSURL? url, bool atomically) {
    return _lib._objc_msgSend_112(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObject_forKey_(
      NativeMacOsFramework _lib, NSObject object, NSObject? key) {
    final _ret = _lib._objc_msgSend_126(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1,
        object._id,
        key?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count_(
      NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_114(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjectsAndKeys_(
      NativeMacOsFramework _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_103(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithDictionary_(
      NativeMacOsFramework _lib, NSDictionary? dict) {
    final _ret = _lib._objc_msgSend_127(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_(
      NativeMacOsFramework _lib, NSArray? objects, NSArray? keys) {
    final _ret = _lib._objc_msgSend_128(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_103(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_(NSDictionary? otherDictionary) {
    final _ret = _lib._objc_msgSend_127(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_copyItems_(
      NSDictionary? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_129(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  NSDictionary initWithObjects_forKeys_(NSArray? objects, NSArray? keys) {
    final _ret = _lib._objc_msgSend_128(
        _id,
        _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithContentsOfURL_error_(
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_130(
        _id,
        _lib._sel_initWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithContentsOfURL_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_130(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(
      NativeMacOsFramework _lib, NSArray? keys) {
    final _ret = _lib._objc_msgSend_58(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int countByEnumeratingWithState_objects_count_(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_131(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  static NSDictionary new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_new1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_alloc1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }
}

void _ObjCBlock7_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock7_closureRegistry = <int, Function>{};
int _ObjCBlock7_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock7_registerClosure(Function fn) {
  final id = ++_ObjCBlock7_closureRegistryIndex;
  _ObjCBlock7_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock7_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock7_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock7 extends _ObjCBlockBase {
  ObjCBlock7._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock7.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock7_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock7.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock7_closureTrampoline)
                    .cast(),
                _ObjCBlock7_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

bool _ObjCBlock8_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          bool Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock8_closureRegistry = <int, Function>{};
int _ObjCBlock8_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock8_registerClosure(Function fn) {
  final id = ++_ObjCBlock8_closureRegistryIndex;
  _ObjCBlock8_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock8_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock8_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock8 extends _ObjCBlockBase {
  ObjCBlock8._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock8.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock8_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock8.fromFunction(
      NativeMacOsFramework lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock8_closureTrampoline, false)
                    .cast(),
                _ObjCBlock8_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ffi.Bool> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_id, arg0, arg1, arg2);
  }
}

final class NSFastEnumerationState extends ffi.Struct {
  @ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<ObjCObject>> itemsPtr;

  external ffi.Pointer<ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedLong> extra;
}

class NSSet extends NSObject {
  NSSet._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSSet] that points to the same underlying object as [other].
  static NSSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSSet] that wraps the given raw object pointer.
  static NSSet castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSSet1);
  }

  int get count {
    return _lib._objc_msgSend_12(_id, _lib._sel_count1);
  }

  NSObject member_(NSObject object) {
    final _ret = _lib._objc_msgSend_103(_id, _lib._sel_member_1, object._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSEnumerator objectEnumerator() {
    final _ret = _lib._objc_msgSend_63(_id, _lib._sel_objectEnumerator1);
    return NSEnumerator._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_50(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get allObjects {
    final _ret = _lib._objc_msgSend_115(_id, _lib._sel_allObjects1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject anyObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_anyObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(NSObject anObject) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_56(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool intersectsSet_(NSSet? otherSet) {
    return _lib._objc_msgSend_133(
        _id, _lib._sel_intersectsSet_1, otherSet?._id ?? ffi.nullptr);
  }

  bool isEqualToSet_(NSSet? otherSet) {
    return _lib._objc_msgSend_133(
        _id, _lib._sel_isEqualToSet_1, otherSet?._id ?? ffi.nullptr);
  }

  bool isSubsetOfSet_(NSSet? otherSet) {
    return _lib._objc_msgSend_133(
        _id, _lib._sel_isSubsetOfSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_7(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    return _lib._objc_msgSend_69(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSSet setByAddingObject_(NSObject anObject) {
    final _ret = _lib._objc_msgSend_134(
        _id, _lib._sel_setByAddingObject_1, anObject._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromSet_(NSSet? other) {
    final _ret = _lib._objc_msgSend_135(
        _id, _lib._sel_setByAddingObjectsFromSet_1, other?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet setByAddingObjectsFromArray_(NSArray? other) {
    final _ret = _lib._objc_msgSend_136(_id,
        _lib._sel_setByAddingObjectsFromArray_1, other?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(ObjCBlock9 block) {
    return _lib._objc_msgSend_137(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._id);
  }

  void enumerateObjectsWithOptions_usingBlock_(int opts, ObjCBlock9 block) {
    return _lib._objc_msgSend_138(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._id);
  }

  NSSet objectsPassingTest_(ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_139(
        _id, _lib._sel_objectsPassingTest_1, predicate._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet objectsWithOptions_passingTest_(int opts, ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_140(
        _id, _lib._sel_objectsWithOptions_passingTest_1, opts, predicate._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet set1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_set1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObject_(NativeMacOsFramework _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSSet1, _lib._sel_setWithObject_1, object._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_count_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_50(
        _lib._class_NSSet1, _lib._sel_setWithObjects_count_1, objects, cnt);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_(NativeMacOsFramework _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSSet1, _lib._sel_setWithObjects_1, firstObj._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithSet_(NativeMacOsFramework _lib, NSSet? set) {
    final _ret = _lib._objc_msgSend_141(
        _lib._class_NSSet1, _lib._sel_setWithSet_1, set?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithArray_(NativeMacOsFramework _lib, NSArray? array) {
    final _ret = _lib._objc_msgSend_58(_lib._class_NSSet1,
        _lib._sel_setWithArray_1, array?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_103(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_(NSSet? set) {
    final _ret = _lib._objc_msgSend_141(
        _id, _lib._sel_initWithSet_1, set?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_copyItems_(NSSet? set, bool flag) {
    final _ret = _lib._objc_msgSend_142(
        _id, _lib._sel_initWithSet_copyItems_1, set?._id ?? ffi.nullptr, flag);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  NSSet initWithArray_(NSArray? array) {
    final _ret = _lib._objc_msgSend_58(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_new1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static NSSet alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_alloc1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }
}

void _ObjCBlock9_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ffi.Bool> arg1)>()(arg0, arg1);
}

final _ObjCBlock9_closureRegistry = <int, Function>{};
int _ObjCBlock9_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock9_registerClosure(Function fn) {
  final id = ++_ObjCBlock9_closureRegistryIndex;
  _ObjCBlock9_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock9_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock9_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock9 extends _ObjCBlockBase {
  ObjCBlock9._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock9.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock9_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock9.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock9_closureTrampoline)
                    .cast(),
                _ObjCBlock9_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

bool _ObjCBlock10_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ffi.Bool> arg1)>()(arg0, arg1);
}

final _ObjCBlock10_closureRegistry = <int, Function>{};
int _ObjCBlock10_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock10_registerClosure(Function fn) {
  final id = ++_ObjCBlock10_closureRegistryIndex;
  _ObjCBlock10_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock10_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock10_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock10 extends _ObjCBlockBase {
  ObjCBlock10._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock10.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock10_fnPtrTrampoline, false)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock10.fromFunction(
      NativeMacOsFramework lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Bool Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock10_closureTrampoline, false)
                    .cast(),
                _ObjCBlock10_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

abstract class NSDecodingFailurePolicy {
  static const int NSDecodingFailurePolicyRaiseException = 0;
  static const int NSDecodingFailurePolicySetErrorAndReturn = 1;
}

final class CGPoint extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class CGSize extends ffi.Struct {
  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;
}

final class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

abstract class NSStringCompareOptions {
  static const int NSCaseInsensitiveSearch = 1;
  static const int NSLiteralSearch = 2;
  static const int NSBackwardsSearch = 4;
  static const int NSAnchoredSearch = 8;
  static const int NSNumericSearch = 64;
  static const int NSDiacriticInsensitiveSearch = 128;
  static const int NSWidthInsensitiveSearch = 256;
  static const int NSForcedOrderingSearch = 512;
  static const int NSRegularExpressionSearch = 1024;
}

class NSLocale extends NSObject {
  NSLocale._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSLocale] that points to the same underlying object as [other].
  static NSLocale castFrom<T extends _ObjCWrapper>(T other) {
    return NSLocale._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSLocale] that wraps the given raw object pointer.
  static NSLocale castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSLocale._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSLocale].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSLocale1);
  }

  NSObject objectForKey_(NSString key) {
    final _ret = _lib._objc_msgSend_38(_id, _lib._sel_objectForKey_1, key._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString displayNameForKey_value_(NSString key, NSObject value) {
    final _ret = _lib._objc_msgSend_174(
        _id, _lib._sel_displayNameForKey_value_1, key._id, value._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSLocale initWithLocaleIdentifier_(NSString? string) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_initWithLocaleIdentifier_1, string?._id ?? ffi.nullptr);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  NSLocale initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  /// same as NSLocaleIdentifier
  NSString? get localeIdentifier {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_localeIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForLocaleIdentifier_(NSString? localeIdentifier) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForLocaleIdentifier_1,
        localeIdentifier?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get languageCode {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_languageCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForLanguageCode_(NSString? languageCode) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForLanguageCode_1,
        languageCode?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get countryCode {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_countryCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForCountryCode_(NSString? countryCode) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForCountryCode_1,
        countryCode?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get scriptCode {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_scriptCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForScriptCode_(NSString? scriptCode) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForScriptCode_1,
        scriptCode?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get variantCode {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_variantCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForVariantCode_(NSString? variantCode) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForVariantCode_1,
        variantCode?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSCharacterSet? get exemplarCharacterSet {
    final _ret = _lib._objc_msgSend_175(_id, _lib._sel_exemplarCharacterSet1);
    return _ret.address == 0
        ? null
        : NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  NSString? get calendarIdentifier {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_calendarIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForCalendarIdentifier_(NSString? calendarIdentifier) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForCalendarIdentifier_1,
        calendarIdentifier?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get collationIdentifier {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_collationIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForCollationIdentifier_(
      NSString? collationIdentifier) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForCollationIdentifier_1,
        collationIdentifier?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  bool get usesMetricSystem {
    return _lib._objc_msgSend_11(_id, _lib._sel_usesMetricSystem1);
  }

  NSString? get decimalSeparator {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_decimalSeparator1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get groupingSeparator {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_groupingSeparator1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get currencySymbol {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_currencySymbol1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get currencyCode {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_currencyCode1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForCurrencyCode_(NSString? currencyCode) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForCurrencyCode_1,
        currencyCode?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get collatorIdentifier {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_collatorIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString localizedStringForCollatorIdentifier_(NSString? collatorIdentifier) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_localizedStringForCollatorIdentifier_1,
        collatorIdentifier?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get quotationBeginDelimiter {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_quotationBeginDelimiter1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get quotationEndDelimiter {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_quotationEndDelimiter1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get alternateQuotationBeginDelimiter {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_alternateQuotationBeginDelimiter1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get alternateQuotationEndDelimiter {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_alternateQuotationEndDelimiter1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  /// generally you should use this property
  static NSLocale? getAutoupdatingCurrentLocale(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_176(
        _lib._class_NSLocale1, _lib._sel_autoupdatingCurrentLocale1);
    return _ret.address == 0
        ? null
        : NSLocale._(_ret, _lib, retain: true, release: true);
  }

  /// an object representing the user's current locale
  static NSLocale? getCurrentLocale(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_176(_lib._class_NSLocale1, _lib._sel_currentLocale1);
    return _ret.address == 0
        ? null
        : NSLocale._(_ret, _lib, retain: true, release: true);
  }

  /// the default generic root locale with little localization
  static NSLocale? getSystemLocale(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_176(_lib._class_NSLocale1, _lib._sel_systemLocale1);
    return _ret.address == 0
        ? null
        : NSLocale._(_ret, _lib, retain: true, release: true);
  }

  static NSLocale localeWithLocaleIdentifier_(
      NativeMacOsFramework _lib, NSString? ident) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSLocale1,
        _lib._sel_localeWithLocaleIdentifier_1, ident?._id ?? ffi.nullptr);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  /// do not invoke; not a valid initializer for this class
  @override
  NSLocale init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? getAvailableLocaleIdentifiers(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSLocale1, _lib._sel_availableLocaleIdentifiers1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? getISOLanguageCodes(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSLocale1, _lib._sel_ISOLanguageCodes1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? getISOCountryCodes(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSLocale1, _lib._sel_ISOCountryCodes1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? getISOCurrencyCodes(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSLocale1, _lib._sel_ISOCurrencyCodes1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? getCommonISOCurrencyCodes(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSLocale1, _lib._sel_commonISOCurrencyCodes1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  /// note that this list does not indicate what language the app is actually running in; the NSBundle.mainBundle object determines that at launch and knows that information
  static NSArray? getPreferredLanguages(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSLocale1, _lib._sel_preferredLanguages1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary componentsFromLocaleIdentifier_(
      NativeMacOsFramework _lib, NSString? string) {
    final _ret = _lib._objc_msgSend_124(_lib._class_NSLocale1,
        _lib._sel_componentsFromLocaleIdentifier_1, string?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSString localeIdentifierFromComponents_(
      NativeMacOsFramework _lib, NSDictionary? dict) {
    final _ret = _lib._objc_msgSend_177(_lib._class_NSLocale1,
        _lib._sel_localeIdentifierFromComponents_1, dict?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString canonicalLocaleIdentifierFromString_(
      NativeMacOsFramework _lib, NSString? string) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSLocale1,
        _lib._sel_canonicalLocaleIdentifierFromString_1,
        string?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString canonicalLanguageIdentifierFromString_(
      NativeMacOsFramework _lib, NSString? string) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSLocale1,
        _lib._sel_canonicalLanguageIdentifierFromString_1,
        string?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString localeIdentifierFromWindowsLocaleCode_(
      NativeMacOsFramework _lib, int lcid) {
    final _ret = _lib._objc_msgSend_178(_lib._class_NSLocale1,
        _lib._sel_localeIdentifierFromWindowsLocaleCode_1, lcid);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int windowsLocaleCodeFromLocaleIdentifier_(
      NativeMacOsFramework _lib, NSString? localeIdentifier) {
    return _lib._objc_msgSend_179(
        _lib._class_NSLocale1,
        _lib._sel_windowsLocaleCodeFromLocaleIdentifier_1,
        localeIdentifier?._id ?? ffi.nullptr);
  }

  static int characterDirectionForLanguage_(
      NativeMacOsFramework _lib, NSString? isoLangCode) {
    return _lib._objc_msgSend_180(
        _lib._class_NSLocale1,
        _lib._sel_characterDirectionForLanguage_1,
        isoLangCode?._id ?? ffi.nullptr);
  }

  static int lineDirectionForLanguage_(
      NativeMacOsFramework _lib, NSString? isoLangCode) {
    return _lib._objc_msgSend_180(_lib._class_NSLocale1,
        _lib._sel_lineDirectionForLanguage_1, isoLangCode?._id ?? ffi.nullptr);
  }

  static NSLocale new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_new1);
    return NSLocale._(_ret, _lib, retain: false, release: true);
  }

  static NSLocale alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_alloc1);
    return NSLocale._(_ret, _lib, retain: false, release: true);
  }
}

class NSCharacterSet extends _ObjCWrapper {
  NSCharacterSet._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCharacterSet] that points to the same underlying object as [other].
  static NSCharacterSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSCharacterSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCharacterSet] that wraps the given raw object pointer.
  static NSCharacterSet castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCharacterSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCharacterSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSCharacterSet1);
  }
}

abstract class NSLocaleLanguageDirection {
  static const int NSLocaleLanguageDirectionUnknown = 0;
  static const int NSLocaleLanguageDirectionLeftToRight = 1;
  static const int NSLocaleLanguageDirectionRightToLeft = 2;
  static const int NSLocaleLanguageDirectionTopToBottom = 3;
  static const int NSLocaleLanguageDirectionBottomToTop = 4;
}

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

void _ObjCBlock11_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    _NSRange arg1,
    _NSRange arg2,
    ffi.Pointer<ffi.Bool> arg3) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, _NSRange arg1,
                  _NSRange arg2, ffi.Pointer<ffi.Bool> arg3)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              _NSRange arg1,
              _NSRange arg2,
              ffi.Pointer<ffi.Bool> arg3)>()(arg0, arg1, arg2, arg3);
}

final _ObjCBlock11_closureRegistry = <int, Function>{};
int _ObjCBlock11_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock11_registerClosure(Function fn) {
  final id = ++_ObjCBlock11_closureRegistryIndex;
  _ObjCBlock11_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock11_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    _NSRange arg1,
    _NSRange arg2,
    ffi.Pointer<ffi.Bool> arg3) {
  return _ObjCBlock11_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2, arg3);
}

class ObjCBlock11 extends _ObjCBlockBase {
  ObjCBlock11._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock11.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, _NSRange arg1,
                      _NSRange arg2, ffi.Pointer<ffi.Bool> arg3)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                _NSRange arg1,
                                _NSRange arg2,
                                ffi.Pointer<ffi.Bool> arg3)>(
                        _ObjCBlock11_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock11.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, _NSRange arg1, _NSRange arg2,
              ffi.Pointer<ffi.Bool> arg3)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                _NSRange arg1,
                                _NSRange arg2,
                                ffi.Pointer<ffi.Bool> arg3)>(
                        _ObjCBlock11_closureTrampoline)
                    .cast(),
                _ObjCBlock11_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, _NSRange arg1, _NSRange arg2,
      ffi.Pointer<ffi.Bool> arg3) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    _NSRange arg1,
                    _NSRange arg2,
                    ffi.Pointer<ffi.Bool> arg3)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                _NSRange arg1,
                _NSRange arg2,
                ffi.Pointer<ffi.Bool> arg3)>()(_id, arg0, arg1, arg2, arg3);
  }
}

void _ObjCBlock12_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ffi.Bool> arg1)>()(arg0, arg1);
}

final _ObjCBlock12_closureRegistry = <int, Function>{};
int _ObjCBlock12_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock12_registerClosure(Function fn) {
  final id = ++_ObjCBlock12_closureRegistryIndex;
  _ObjCBlock12_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock12_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock12_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock12 extends _ObjCBlockBase {
  ObjCBlock12._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock12.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock12_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock12.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ffi.Bool> arg1)>(
                        _ObjCBlock12_closureTrampoline)
                    .cast(),
                _ObjCBlock12_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_id, arg0, arg1);
  }
}

abstract class NSStringEncodingConversionOptions {
  static const int NSStringEncodingConversionAllowLossy = 1;
  static const int NSStringEncodingConversionExternalRepresentation = 2;
}

void _ObjCBlock13_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.UnsignedShort> arg0,
                  ffi.UnsignedLong arg1)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ffi.UnsignedShort> arg0, int arg1)>()(arg0, arg1);
}

final _ObjCBlock13_closureRegistry = <int, Function>{};
int _ObjCBlock13_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock13_registerClosure(Function fn) {
  final id = ++_ObjCBlock13_closureRegistryIndex;
  _ObjCBlock13_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock13_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) {
  return _ObjCBlock13_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock13 extends _ObjCBlockBase {
  ObjCBlock13._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock13.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.UnsignedShort> arg0,
                      ffi.UnsignedLong arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ffi.UnsignedShort> arg0,
                                ffi.UnsignedLong arg1)>(
                        _ObjCBlock13_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock13.fromFunction(NativeMacOsFramework lib,
      void Function(ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ffi.UnsignedShort> arg0,
                                ffi.UnsignedLong arg1)>(
                        _ObjCBlock13_closureTrampoline)
                    .cast(),
                _ObjCBlock13_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ffi.UnsignedShort> arg0, int arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ffi.UnsignedShort> arg0,
                    ffi.UnsignedLong arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ffi.UnsignedShort> arg0,
                int arg1)>()(_id, arg0, arg1);
  }
}

void _ObjCBlock14_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, int arg1) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)>>()
          .asFunction<void Function(ffi.Pointer<ffi.Void> arg0, int arg1)>()(
      arg0, arg1);
}

final _ObjCBlock14_closureRegistry = <int, Function>{};
int _ObjCBlock14_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock14_registerClosure(Function fn) {
  final id = ++_ObjCBlock14_closureRegistryIndex;
  _ObjCBlock14_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock14_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, int arg1) {
  return _ObjCBlock14_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock14 extends _ObjCBlockBase {
  ObjCBlock14._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock14.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ffi.Void> arg0,
                                ffi.UnsignedLong arg1)>(
                        _ObjCBlock14_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock14.fromFunction(NativeMacOsFramework lib,
      void Function(ffi.Pointer<ffi.Void> arg0, int arg1) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ffi.Void> arg0,
                                ffi.UnsignedLong arg1)>(
                        _ObjCBlock14_closureTrampoline)
                    .cast(),
                _ObjCBlock14_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ffi.Void> arg0, int arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ffi.Void> arg0, ffi.UnsignedLong arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ffi.Void> arg0, int arg1)>()(_id, arg0, arg1);
  }
}

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSValue] that points to the same underlying object as [other].
  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSValue] that wraps the given raw object pointer.
  static NSValue castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSValue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSValue1);
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, int size) {
    return _lib._objc_msgSend_23(_id, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _lib._objc_msgSend_196(_id, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_242(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSValue initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_243(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_243(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_244(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSObject get nonretainedObjectValue {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nonretainedObjectValue1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_245(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> get pointerValue {
    return _lib._objc_msgSend_15(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue_(NSValue? value) {
    return _lib._objc_msgSend_246(
        _id, _lib._sel_isEqualToValue_1, value?._id ?? ffi.nullptr);
  }

  void getValue_(ffi.Pointer<ffi.Void> value) {
    return _lib._objc_msgSend_247(_id, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange_(NativeMacOsFramework _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_248(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  _NSRange get rangeValue {
    return _lib._objc_msgSend_249(_id, _lib._sel_rangeValue1);
  }

  static NSValue valueWithPoint_(NativeMacOsFramework _lib, CGPoint point) {
    final _ret = _lib._objc_msgSend_250(
        _lib._class_NSValue1, _lib._sel_valueWithPoint_1, point);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithSize_(NativeMacOsFramework _lib, CGSize size) {
    final _ret = _lib._objc_msgSend_251(
        _lib._class_NSValue1, _lib._sel_valueWithSize_1, size);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRect_(NativeMacOsFramework _lib, CGRect rect) {
    final _ret = _lib._objc_msgSend_252(
        _lib._class_NSValue1, _lib._sel_valueWithRect_1, rect);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithEdgeInsets_(
      NativeMacOsFramework _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_253(
        _lib._class_NSValue1, _lib._sel_valueWithEdgeInsets_1, insets);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  CGPoint get pointValue {
    return _lib._objc_msgSend_152(_id, _lib._sel_pointValue1);
  }

  CGSize get sizeValue {
    return _lib._objc_msgSend_154(_id, _lib._sel_sizeValue1);
  }

  CGRect get rectValue {
    return _lib._objc_msgSend_156(_id, _lib._sel_rectValue1);
  }

  NSEdgeInsets get edgeInsetsValue {
    return _lib._objc_msgSend_254(_id, _lib._sel_edgeInsetsValue1);
  }

  static NSValue new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }
}

final class NSEdgeInsets extends ffi.Struct {
  @ffi.Double()
  external double top;

  @ffi.Double()
  external double left;

  @ffi.Double()
  external double bottom;

  @ffi.Double()
  external double right;
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNumber] that points to the same underlying object as [other].
  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNumber] that wraps the given raw object pointer.
  static NSNumber castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSNumber1);
  }

  @override
  NSNumber initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_255(_id, _lib._sel_initWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_256(_id, _lib._sel_initWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_257(_id, _lib._sel_initWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_258(_id, _lib._sel_initWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_259(_id, _lib._sel_initWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_260(_id, _lib._sel_initWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_261(_id, _lib._sel_initWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_262(_id, _lib._sel_initWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_263(_id, _lib._sel_initWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedLongLong_(int value) {
    final _ret = _lib._objc_msgSend_264(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_265(_id, _lib._sel_initWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_266(_id, _lib._sel_initWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_267(_id, _lib._sel_initWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithInteger_(int value) {
    final _ret =
        _lib._objc_msgSend_261(_id, _lib._sel_initWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSNumber initWithUnsignedInteger_(int value) {
    final _ret =
        _lib._objc_msgSend_262(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  int get charValue {
    return _lib._objc_msgSend_268(_id, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_269(_id, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_270(_id, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_271(_id, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_189(_id, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_28(_id, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_190(_id, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_191(_id, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_272(_id, _lib._sel_unsignedLongLongValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_188(_id, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return _lib._objc_msgSend_187(_id, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_boolValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_190(_id, _lib._sel_integerValue1);
  }

  int get unsignedIntegerValue {
    return _lib._objc_msgSend_12(_id, _lib._sel_unsignedIntegerValue1);
  }

  NSString? get stringValue {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_stringValue1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSNumber? otherNumber) {
    return _lib._objc_msgSend_273(
        _id, _lib._sel_compare_1, otherNumber?._id ?? ffi.nullptr);
  }

  bool isEqualToNumber_(NSNumber? number) {
    return _lib._objc_msgSend_274(
        _id, _lib._sel_isEqualToNumber_1, number?._id ?? ffi.nullptr);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_56(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithChar_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_255(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedChar_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_256(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithShort_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_257(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedShort_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_258(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInt_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_259(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInt_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_260(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLong_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_261(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLong_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithLongLong_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_263(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedLongLong_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_264(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithFloat_(NativeMacOsFramework _lib, double value) {
    final _ret = _lib._objc_msgSend_265(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithDouble_(NativeMacOsFramework _lib, double value) {
    final _ret = _lib._objc_msgSend_266(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithBool_(NativeMacOsFramework _lib, bool value) {
    final _ret = _lib._objc_msgSend_267(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithInteger_(NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_261(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber numberWithUnsignedInteger_(
      NativeMacOsFramework _lib, int value) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithBytes_objCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_243(_lib._class_NSNumber1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue value_withObjCType_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_243(
        _lib._class_NSNumber1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithNonretainedObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_244(_lib._class_NSNumber1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPointer_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_245(
        _lib._class_NSNumber1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRange_(NativeMacOsFramework _lib, _NSRange range) {
    final _ret = _lib._objc_msgSend_248(
        _lib._class_NSNumber1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithPoint_(NativeMacOsFramework _lib, CGPoint point) {
    final _ret = _lib._objc_msgSend_250(
        _lib._class_NSNumber1, _lib._sel_valueWithPoint_1, point);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithSize_(NativeMacOsFramework _lib, CGSize size) {
    final _ret = _lib._objc_msgSend_251(
        _lib._class_NSNumber1, _lib._sel_valueWithSize_1, size);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithRect_(NativeMacOsFramework _lib, CGRect rect) {
    final _ret = _lib._objc_msgSend_252(
        _lib._class_NSNumber1, _lib._sel_valueWithRect_1, rect);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSValue valueWithEdgeInsets_(
      NativeMacOsFramework _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_253(
        _lib._class_NSNumber1, _lib._sel_valueWithEdgeInsets_1, insets);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }
}

class NSMutableArray extends NSArray {
  NSMutableArray._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableArray] that points to the same underlying object as [other].
  static NSMutableArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableArray] that wraps the given raw object pointer.
  static NSMutableArray castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableArray1);
  }

  void addObject_(NSObject anObject) {
    return _lib._objc_msgSend_20(_id, _lib._sel_addObject_1, anObject._id);
  }

  void insertObject_atIndex_(NSObject anObject, int index) {
    return _lib._objc_msgSend_275(
        _id, _lib._sel_insertObject_atIndex_1, anObject._id, index);
  }

  void removeLastObject() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeLastObject1);
  }

  void removeObjectAtIndex_(int index) {
    return _lib._objc_msgSend_276(_id, _lib._sel_removeObjectAtIndex_1, index);
  }

  void replaceObjectAtIndex_withObject_(int index, NSObject anObject) {
    return _lib._objc_msgSend_277(
        _id, _lib._sel_replaceObjectAtIndex_withObject_1, index, anObject._id);
  }

  @override
  NSMutableArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_49(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_addObjectsFromArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    return _lib._objc_msgSend_279(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_280(
        _id, _lib._sel_removeObject_inRange_1, anObject._id, range);
  }

  void removeObject_(NSObject anObject) {
    return _lib._objc_msgSend_20(_id, _lib._sel_removeObject_1, anObject._id);
  }

  void removeObjectIdenticalTo_inRange_(NSObject anObject, _NSRange range) {
    return _lib._objc_msgSend_280(
        _id, _lib._sel_removeObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  void removeObjectIdenticalTo_(NSObject anObject) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_removeObjectIdenticalTo_1, anObject._id);
  }

  void removeObjectsFromIndices_numIndices_(
      ffi.Pointer<ffi.UnsignedLong> indices, int cnt) {
    return _lib._objc_msgSend_281(
        _id, _lib._sel_removeObjectsFromIndices_numIndices_1, indices, cnt);
  }

  void removeObjectsInArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_removeObjectsInArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void removeObjectsInRange_(_NSRange range) {
    return _lib._objc_msgSend_282(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range_(
      _NSRange range, NSArray? otherArray, _NSRange otherRange) {
    return _lib._objc_msgSend_283(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
        range,
        otherArray?._id ?? ffi.nullptr,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray_(
      _NSRange range, NSArray? otherArray) {
    return _lib._objc_msgSend_284(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
        range,
        otherArray?._id ?? ffi.nullptr);
  }

  void setArray_(NSArray? otherArray) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_setArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void sortUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Long Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_285(
        _id, _lib._sel_sortUsingFunction_context_1, compare, context);
  }

  void sortUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    return _lib._objc_msgSend_7(_id, _lib._sel_sortUsingSelector_1, comparator);
  }

  void insertObjects_atIndexes_(NSArray? objects, NSIndexSet? indexes) {
    return _lib._objc_msgSend_286(_id, _lib._sel_insertObjects_atIndexes_1,
        objects?._id ?? ffi.nullptr, indexes?._id ?? ffi.nullptr);
  }

  void removeObjectsAtIndexes_(NSIndexSet? indexes) {
    return _lib._objc_msgSend_287(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
  }

  void replaceObjectsAtIndexes_withObjects_(
      NSIndexSet? indexes, NSArray? objects) {
    return _lib._objc_msgSend_288(
        _id,
        _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes?._id ?? ffi.nullptr,
        objects?._id ?? ffi.nullptr);
  }

  void setObject_atIndexedSubscript_(NSObject obj, int idx) {
    return _lib._objc_msgSend_275(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void sortUsingComparator_(ObjCBlock5 cmptr) {
    return _lib._objc_msgSend_289(
        _id, _lib._sel_sortUsingComparator_1, cmptr._id);
  }

  void sortWithOptions_usingComparator_(int opts, ObjCBlock5 cmptr) {
    return _lib._objc_msgSend_290(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr._id);
  }

  static NSMutableArray arrayWithCapacity_(
      NativeMacOsFramework _lib, int numItems) {
    final _ret = _lib._objc_msgSend_49(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_291(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_292(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_291(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_292(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void applyDifference_(NSObject? difference) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_applyDifference_1, difference?._id ?? ffi.nullptr);
  }

  static NSMutableArray array(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_array1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObject_(
      NativeMacOsFramework _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_count_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_50(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_(
      NativeMacOsFramework _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_103(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithArray_(
      NativeMacOsFramework _lib, NSArray? array) {
    final _ret = _lib._objc_msgSend_58(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithContentsOfURL_error_(NativeMacOsFramework _lib,
      NSURL? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_new1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableArray alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_alloc1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }
}

class NSItemProvider extends NSObject {
  NSItemProvider._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSItemProvider] that points to the same underlying object as [other].
  static NSItemProvider castFrom<T extends _ObjCWrapper>(T other) {
    return NSItemProvider._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSItemProvider] that wraps the given raw object pointer.
  static NSItemProvider castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSItemProvider._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSItemProvider].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSItemProvider1);
  }

  @override
  NSItemProvider init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerDataRepresentationForTypeIdentifier_visibility_loadHandler_(
      NSString? typeIdentifier, int visibility, ObjCBlock15 loadHandler) {
    return _lib._objc_msgSend_311(
        _id,
        _lib._sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        visibility,
        loadHandler._id);
  }

  void
      registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_(
          NSString? typeIdentifier,
          int fileOptions,
          int visibility,
          ObjCBlock19 loadHandler) {
    return _lib._objc_msgSend_312(
        _id,
        _lib._sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        fileOptions,
        visibility,
        loadHandler._id);
  }

  NSArray? get registeredTypeIdentifiers {
    final _ret =
        _lib._objc_msgSend_115(_id, _lib._sel_registeredTypeIdentifiers1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray registeredTypeIdentifiersWithFileOptions_(int fileOptions) {
    final _ret = _lib._objc_msgSend_313(
        _id, _lib._sel_registeredTypeIdentifiersWithFileOptions_1, fileOptions);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  bool hasItemConformingToTypeIdentifier_(NSString? typeIdentifier) {
    return _lib._objc_msgSend_37(
        _id,
        _lib._sel_hasItemConformingToTypeIdentifier_1,
        typeIdentifier?._id ?? ffi.nullptr);
  }

  bool hasRepresentationConformingToTypeIdentifier_fileOptions_(
      NSString? typeIdentifier, int fileOptions) {
    return _lib._objc_msgSend_314(
        _id,
        _lib._sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1,
        typeIdentifier?._id ?? ffi.nullptr,
        fileOptions);
  }

  NSProgress loadDataRepresentationForTypeIdentifier_completionHandler_(
      NSString? typeIdentifier, ObjCBlock18 completionHandler) {
    final _ret = _lib._objc_msgSend_315(
        _id,
        _lib._sel_loadDataRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress loadFileRepresentationForTypeIdentifier_completionHandler_(
      NSString? typeIdentifier, ObjCBlock21 completionHandler) {
    final _ret = _lib._objc_msgSend_316(
        _id,
        _lib._sel_loadFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_(
      NSString? typeIdentifier, ObjCBlock20 completionHandler) {
    final _ret = _lib._objc_msgSend_317(
        _id,
        _lib._sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSString? get suggestedName {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_suggestedName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set suggestedName(NSString? value) {
    _lib._objc_msgSend_302(
        _id, _lib._sel_setSuggestedName_1, value?._id ?? ffi.nullptr);
  }

  NSItemProvider initWithObject_(NSObject? object) {
    final _ret = _lib._objc_msgSend_103(
        _id, _lib._sel_initWithObject_1, object?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerObject_visibility_(NSObject? object, int visibility) {
    return _lib._objc_msgSend_318(_id, _lib._sel_registerObject_visibility_1,
        object?._id ?? ffi.nullptr, visibility);
  }

  void registerObjectOfClass_visibility_loadHandler_(
      NSObject? aClass, int visibility, ObjCBlock22 loadHandler) {
    return _lib._objc_msgSend_319(
        _id,
        _lib._sel_registerObjectOfClass_visibility_loadHandler_1,
        aClass?._id ?? ffi.nullptr,
        visibility,
        loadHandler._id);
  }

  bool canLoadObjectOfClass_(NSObject? aClass) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_canLoadObjectOfClass_1, aClass?._id ?? ffi.nullptr);
  }

  NSProgress loadObjectOfClass_completionHandler_(
      NSObject? aClass, ObjCBlock23 completionHandler) {
    final _ret = _lib._objc_msgSend_320(
        _id,
        _lib._sel_loadObjectOfClass_completionHandler_1,
        aClass?._id ?? ffi.nullptr,
        completionHandler._id);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider initWithItem_typeIdentifier_(
      NSObject? item, NSString? typeIdentifier) {
    final _ret = _lib._objc_msgSend_47(
        _id,
        _lib._sel_initWithItem_typeIdentifier_1,
        item?._id ?? ffi.nullptr,
        typeIdentifier?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider initWithContentsOfURL_(NSURL? fileURL) {
    final _ret = _lib._objc_msgSend_237(
        _id, _lib._sel_initWithContentsOfURL_1, fileURL?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerItemForTypeIdentifier_loadHandler_(
      NSString? typeIdentifier, ObjCBlock24 loadHandler) {
    return _lib._objc_msgSend_321(
        _id,
        _lib._sel_registerItemForTypeIdentifier_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        loadHandler._id);
  }

  void loadItemForTypeIdentifier_options_completionHandler_(
      NSString? typeIdentifier,
      NSDictionary? options,
      ObjCBlock23 completionHandler) {
    return _lib._objc_msgSend_322(
        _id,
        _lib._sel_loadItemForTypeIdentifier_options_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr,
        completionHandler._id);
  }

  ObjCBlock24 get previewImageHandler {
    final _ret = _lib._objc_msgSend_323(_id, _lib._sel_previewImageHandler1);
    return ObjCBlock24._(_ret, _lib);
  }

  set previewImageHandler(ObjCBlock24 value) {
    _lib._objc_msgSend_324(_id, _lib._sel_setPreviewImageHandler_1, value._id);
  }

  void loadPreviewImageWithOptions_completionHandler_(
      NSDictionary? options, ObjCBlock23 completionHandler) {
    return _lib._objc_msgSend_325(
        _id,
        _lib._sel_loadPreviewImageWithOptions_completionHandler_1,
        options?._id ?? ffi.nullptr,
        completionHandler._id);
  }

  static NSItemProvider new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSItemProvider1, _lib._sel_new1);
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static NSItemProvider alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSItemProvider1, _lib._sel_alloc1);
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSItemProviderRepresentationVisibility {
  static const int NSItemProviderRepresentationVisibilityAll = 0;
  static const int NSItemProviderRepresentationVisibilityTeam = 1;
  static const int NSItemProviderRepresentationVisibilityGroup = 2;
  static const int NSItemProviderRepresentationVisibilityOwnProcess = 3;
}

ffi.Pointer<ObjCObject> _ObjCBlock15_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<_ObjCBlock> arg0)>()(arg0);
}

final _ObjCBlock15_closureRegistry = <int, Function>{};
int _ObjCBlock15_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock15_registerClosure(Function fn) {
  final id = ++_ObjCBlock15_closureRegistryIndex;
  _ObjCBlock15_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject> _ObjCBlock15_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return _ObjCBlock15_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock15 extends _ObjCBlockBase {
  ObjCBlock15._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock15.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0)>(
                        _ObjCBlock15_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock15.fromFunction(NativeMacOsFramework lib,
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0)>(
                        _ObjCBlock15_closureTrampoline)
                    .cast(),
                _ObjCBlock15_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  ffi.Pointer<ObjCObject> call(ffi.Pointer<_ObjCBlock> arg0) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<_ObjCBlock> arg0)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<_ObjCBlock> arg0)>()(_id, arg0);
  }
}

class NSProgress extends NSObject {
  NSProgress._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSProgress] that points to the same underlying object as [other].
  static NSProgress castFrom<T extends _ObjCWrapper>(T other) {
    return NSProgress._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSProgress] that wraps the given raw object pointer.
  static NSProgress castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSProgress._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProgress].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSProgress1);
  }

  static NSProgress currentProgress(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_293(
        _lib._class_NSProgress1, _lib._sel_currentProgress1);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  static NSProgress progressWithTotalUnitCount_(
      NativeMacOsFramework _lib, int unitCount) {
    final _ret = _lib._objc_msgSend_294(_lib._class_NSProgress1,
        _lib._sel_progressWithTotalUnitCount_1, unitCount);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  static NSProgress discreteProgressWithTotalUnitCount_(
      NativeMacOsFramework _lib, int unitCount) {
    final _ret = _lib._objc_msgSend_294(_lib._class_NSProgress1,
        _lib._sel_discreteProgressWithTotalUnitCount_1, unitCount);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  static NSProgress progressWithTotalUnitCount_parent_pendingUnitCount_(
      NativeMacOsFramework _lib,
      int unitCount,
      NSProgress? parent,
      int portionOfParentTotalUnitCount) {
    final _ret = _lib._objc_msgSend_295(
        _lib._class_NSProgress1,
        _lib._sel_progressWithTotalUnitCount_parent_pendingUnitCount_1,
        unitCount,
        parent?._id ?? ffi.nullptr,
        portionOfParentTotalUnitCount);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  NSProgress initWithParent_userInfo_(
      NSProgress? parentProgressOrNil, NSObject? userInfoOrNil) {
    final _ret = _lib._objc_msgSend_296(
        _id,
        _lib._sel_initWithParent_userInfo_1,
        parentProgressOrNil?._id ?? ffi.nullptr,
        userInfoOrNil?._id ?? ffi.nullptr);
    return NSProgress._(_ret, _lib, retain: true, release: true);
  }

  void becomeCurrentWithPendingUnitCount_(int unitCount) {
    return _lib._objc_msgSend_297(
        _id, _lib._sel_becomeCurrentWithPendingUnitCount_1, unitCount);
  }

  void performAsCurrentWithPendingUnitCount_usingBlock_(
      int unitCount, ObjCBlock16 work) {
    return _lib._objc_msgSend_298(
        _id,
        _lib._sel_performAsCurrentWithPendingUnitCount_usingBlock_1,
        unitCount,
        work._id);
  }

  void resignCurrent() {
    return _lib._objc_msgSend_1(_id, _lib._sel_resignCurrent1);
  }

  void addChild_withPendingUnitCount_(NSProgress? child, int inUnitCount) {
    return _lib._objc_msgSend_299(
        _id,
        _lib._sel_addChild_withPendingUnitCount_1,
        child?._id ?? ffi.nullptr,
        inUnitCount);
  }

  int get totalUnitCount {
    return _lib._objc_msgSend_300(_id, _lib._sel_totalUnitCount1);
  }

  set totalUnitCount(int value) {
    _lib._objc_msgSend_301(_id, _lib._sel_setTotalUnitCount_1, value);
  }

  int get completedUnitCount {
    return _lib._objc_msgSend_300(_id, _lib._sel_completedUnitCount1);
  }

  set completedUnitCount(int value) {
    _lib._objc_msgSend_301(_id, _lib._sel_setCompletedUnitCount_1, value);
  }

  NSString? get localizedDescription {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_localizedDescription1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set localizedDescription(NSString? value) {
    _lib._objc_msgSend_302(
        _id, _lib._sel_setLocalizedDescription_1, value?._id ?? ffi.nullptr);
  }

  NSString? get localizedAdditionalDescription {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_localizedAdditionalDescription1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set localizedAdditionalDescription(NSString? value) {
    _lib._objc_msgSend_302(_id, _lib._sel_setLocalizedAdditionalDescription_1,
        value?._id ?? ffi.nullptr);
  }

  bool get cancellable {
    return _lib._objc_msgSend_11(_id, _lib._sel_isCancellable1);
  }

  set cancellable(bool value) {
    _lib._objc_msgSend_303(_id, _lib._sel_setCancellable_1, value);
  }

  bool get pausable {
    return _lib._objc_msgSend_11(_id, _lib._sel_isPausable1);
  }

  set pausable(bool value) {
    _lib._objc_msgSend_303(_id, _lib._sel_setPausable_1, value);
  }

  bool get cancelled {
    return _lib._objc_msgSend_11(_id, _lib._sel_isCancelled1);
  }

  bool get paused {
    return _lib._objc_msgSend_11(_id, _lib._sel_isPaused1);
  }

  ObjCBlock16 get cancellationHandler {
    final _ret = _lib._objc_msgSend_304(_id, _lib._sel_cancellationHandler1);
    return ObjCBlock16._(_ret, _lib);
  }

  set cancellationHandler(ObjCBlock16 value) {
    _lib._objc_msgSend_305(_id, _lib._sel_setCancellationHandler_1, value._id);
  }

  ObjCBlock16 get pausingHandler {
    final _ret = _lib._objc_msgSend_304(_id, _lib._sel_pausingHandler1);
    return ObjCBlock16._(_ret, _lib);
  }

  set pausingHandler(ObjCBlock16 value) {
    _lib._objc_msgSend_305(_id, _lib._sel_setPausingHandler_1, value._id);
  }

  ObjCBlock16 get resumingHandler {
    final _ret = _lib._objc_msgSend_304(_id, _lib._sel_resumingHandler1);
    return ObjCBlock16._(_ret, _lib);
  }

  set resumingHandler(ObjCBlock16 value) {
    _lib._objc_msgSend_305(_id, _lib._sel_setResumingHandler_1, value._id);
  }

  void setUserInfoObject_forKey_(NSObject objectOrNil, NSString key) {
    return _lib._objc_msgSend_29(
        _id, _lib._sel_setUserInfoObject_forKey_1, objectOrNil._id, key._id);
  }

  bool get indeterminate {
    return _lib._objc_msgSend_11(_id, _lib._sel_isIndeterminate1);
  }

  double get fractionCompleted {
    return _lib._objc_msgSend_187(_id, _lib._sel_fractionCompleted1);
  }

  bool get finished {
    return _lib._objc_msgSend_11(_id, _lib._sel_isFinished1);
  }

  void cancel() {
    return _lib._objc_msgSend_1(_id, _lib._sel_cancel1);
  }

  void pause() {
    return _lib._objc_msgSend_1(_id, _lib._sel_pause1);
  }

  void resume() {
    return _lib._objc_msgSend_1(_id, _lib._sel_resume1);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSString get kind {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_kind1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set kind(NSString value) {
    _lib._objc_msgSend_302(_id, _lib._sel_setKind_1, value._id);
  }

  NSNumber? get estimatedTimeRemaining {
    final _ret = _lib._objc_msgSend_306(_id, _lib._sel_estimatedTimeRemaining1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set estimatedTimeRemaining(NSNumber? value) {
    _lib._objc_msgSend_307(
        _id, _lib._sel_setEstimatedTimeRemaining_1, value?._id ?? ffi.nullptr);
  }

  NSNumber? get throughput {
    final _ret = _lib._objc_msgSend_306(_id, _lib._sel_throughput1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set throughput(NSNumber? value) {
    _lib._objc_msgSend_307(
        _id, _lib._sel_setThroughput_1, value?._id ?? ffi.nullptr);
  }

  NSString get fileOperationKind {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_fileOperationKind1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  set fileOperationKind(NSString value) {
    _lib._objc_msgSend_302(_id, _lib._sel_setFileOperationKind_1, value._id);
  }

  NSURL? get fileURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_fileURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  set fileURL(NSURL? value) {
    _lib._objc_msgSend_309(
        _id, _lib._sel_setFileURL_1, value?._id ?? ffi.nullptr);
  }

  NSNumber? get fileTotalCount {
    final _ret = _lib._objc_msgSend_306(_id, _lib._sel_fileTotalCount1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set fileTotalCount(NSNumber? value) {
    _lib._objc_msgSend_307(
        _id, _lib._sel_setFileTotalCount_1, value?._id ?? ffi.nullptr);
  }

  NSNumber? get fileCompletedCount {
    final _ret = _lib._objc_msgSend_306(_id, _lib._sel_fileCompletedCount1);
    return _ret.address == 0
        ? null
        : NSNumber._(_ret, _lib, retain: true, release: true);
  }

  set fileCompletedCount(NSNumber? value) {
    _lib._objc_msgSend_307(
        _id, _lib._sel_setFileCompletedCount_1, value?._id ?? ffi.nullptr);
  }

  void publish() {
    return _lib._objc_msgSend_1(_id, _lib._sel_publish1);
  }

  void unpublish() {
    return _lib._objc_msgSend_1(_id, _lib._sel_unpublish1);
  }

  static NSObject addSubscriberForFileURL_withPublishingHandler_(
      NativeMacOsFramework _lib, NSURL? url, ObjCBlock17 publishingHandler) {
    final _ret = _lib._objc_msgSend_310(
        _lib._class_NSProgress1,
        _lib._sel_addSubscriberForFileURL_withPublishingHandler_1,
        url?._id ?? ffi.nullptr,
        publishingHandler._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void removeSubscriber_(
      NativeMacOsFramework _lib, NSObject subscriber) {
    return _lib._objc_msgSend_20(
        _lib._class_NSProgress1, _lib._sel_removeSubscriber_1, subscriber._id);
  }

  bool get old {
    return _lib._objc_msgSend_11(_id, _lib._sel_isOld1);
  }

  static NSProgress new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSProgress1, _lib._sel_new1);
    return NSProgress._(_ret, _lib, retain: false, release: true);
  }

  static NSProgress alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSProgress1, _lib._sel_alloc1);
    return NSProgress._(_ret, _lib, retain: false, release: true);
  }
}

void _ObjCBlock16_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function()>>()
      .asFunction<void Function()>()();
}

final _ObjCBlock16_closureRegistry = <int, Function>{};
int _ObjCBlock16_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock16_registerClosure(Function fn) {
  final id = ++_ObjCBlock16_closureRegistryIndex;
  _ObjCBlock16_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock16_closureTrampoline(ffi.Pointer<_ObjCBlock> block) {
  return _ObjCBlock16_closureRegistry[block.ref.target.address]!();
}

class ObjCBlock16 extends _ObjCBlockBase {
  ObjCBlock16._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock16.fromFunctionPointer(NativeMacOsFramework lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>(
                        _ObjCBlock16_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock16.fromFunction(NativeMacOsFramework lib, void Function() fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>(
                        _ObjCBlock16_closureTrampoline)
                    .cast(),
                _ObjCBlock16_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call() {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>>()
        .asFunction<void Function(ffi.Pointer<_ObjCBlock> block)>()(_id);
  }
}

ffi.Pointer<_ObjCBlock> _ObjCBlock17_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<_ObjCBlock> Function(ffi.Pointer<ObjCObject> arg0)>>()
      .asFunction<
          ffi.Pointer<_ObjCBlock> Function(
              ffi.Pointer<ObjCObject> arg0)>()(arg0);
}

final _ObjCBlock17_closureRegistry = <int, Function>{};
int _ObjCBlock17_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock17_registerClosure(Function fn) {
  final id = ++_ObjCBlock17_closureRegistryIndex;
  _ObjCBlock17_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<_ObjCBlock> _ObjCBlock17_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) {
  return _ObjCBlock17_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock17 extends _ObjCBlockBase {
  ObjCBlock17._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock17.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<_ObjCBlock> Function(
                      ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<_ObjCBlock> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0)>(
                        _ObjCBlock17_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock17.fromFunction(NativeMacOsFramework lib,
      ffi.Pointer<_ObjCBlock> Function(ffi.Pointer<ObjCObject> arg0) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<_ObjCBlock> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0)>(
                        _ObjCBlock17_closureTrampoline)
                    .cast(),
                _ObjCBlock17_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  ffi.Pointer<_ObjCBlock> call(ffi.Pointer<ObjCObject> arg0) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<_ObjCBlock> Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0)>>()
        .asFunction<
            ffi.Pointer<_ObjCBlock> Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0)>()(_id, arg0);
  }
}

void _ObjCBlock18_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock18_closureRegistry = <int, Function>{};
int _ObjCBlock18_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock18_registerClosure(Function fn) {
  final id = ++_ObjCBlock18_closureRegistryIndex;
  _ObjCBlock18_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock18_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock18_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock18 extends _ObjCBlockBase {
  ObjCBlock18._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock18.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock18_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock18.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock18_closureTrampoline)
                    .cast(),
                _ObjCBlock18_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_id, arg0, arg1);
  }
}

abstract class NSItemProviderFileOptions {
  static const int NSItemProviderFileOptionOpenInPlace = 1;
}

ffi.Pointer<ObjCObject> _ObjCBlock19_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<_ObjCBlock> arg0)>()(arg0);
}

final _ObjCBlock19_closureRegistry = <int, Function>{};
int _ObjCBlock19_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock19_registerClosure(Function fn) {
  final id = ++_ObjCBlock19_closureRegistryIndex;
  _ObjCBlock19_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject> _ObjCBlock19_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return _ObjCBlock19_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock19 extends _ObjCBlockBase {
  ObjCBlock19._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock19.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0)>(
                        _ObjCBlock19_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock19.fromFunction(NativeMacOsFramework lib,
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0)>(
                        _ObjCBlock19_closureTrampoline)
                    .cast(),
                _ObjCBlock19_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  ffi.Pointer<ObjCObject> call(ffi.Pointer<_ObjCBlock> arg0) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<_ObjCBlock> arg0)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<_ObjCBlock> arg0)>()(_id, arg0);
  }
}

void _ObjCBlock20_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Bool arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, bool arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock20_closureRegistry = <int, Function>{};
int _ObjCBlock20_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock20_registerClosure(Function fn) {
  final id = ++_ObjCBlock20_closureRegistryIndex;
  _ObjCBlock20_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock20_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) {
  return _ObjCBlock20_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock20 extends _ObjCBlockBase {
  ObjCBlock20._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock20.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Bool arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Bool arg1,
                                ffi.Pointer<ObjCObject> arg2)>(
                        _ObjCBlock20_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock20.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, bool arg1,
              ffi.Pointer<ObjCObject> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Bool arg1,
                                ffi.Pointer<ObjCObject> arg2)>(
                        _ObjCBlock20_closureTrampoline)
                    .cast(),
                _ObjCBlock20_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(
      ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Bool arg1,
                    ffi.Pointer<ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                bool arg1,
                ffi.Pointer<ObjCObject> arg2)>()(_id, arg0, arg1, arg2);
  }
}

void _ObjCBlock21_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock21_closureRegistry = <int, Function>{};
int _ObjCBlock21_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock21_registerClosure(Function fn) {
  final id = ++_ObjCBlock21_closureRegistryIndex;
  _ObjCBlock21_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock21_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock21_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock21 extends _ObjCBlockBase {
  ObjCBlock21._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock21.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock21_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock21.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock21_closureTrampoline)
                    .cast(),
                _ObjCBlock21_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_id, arg0, arg1);
  }
}

ffi.Pointer<ObjCObject> _ObjCBlock22_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<_ObjCBlock> arg0)>()(arg0);
}

final _ObjCBlock22_closureRegistry = <int, Function>{};
int _ObjCBlock22_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock22_registerClosure(Function fn) {
  final id = ++_ObjCBlock22_closureRegistryIndex;
  _ObjCBlock22_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject> _ObjCBlock22_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return _ObjCBlock22_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock22 extends _ObjCBlockBase {
  ObjCBlock22._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock22.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0)>(
                        _ObjCBlock22_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock22.fromFunction(NativeMacOsFramework lib,
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Pointer<ObjCObject> Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0)>(
                        _ObjCBlock22_closureTrampoline)
                    .cast(),
                _ObjCBlock22_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  ffi.Pointer<ObjCObject> call(ffi.Pointer<_ObjCBlock> arg0) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<_ObjCBlock> arg0)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<_ObjCBlock> arg0)>()(_id, arg0);
  }
}

void _ObjCBlock23_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock23_closureRegistry = <int, Function>{};
int _ObjCBlock23_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock23_registerClosure(Function fn) {
  final id = ++_ObjCBlock23_closureRegistryIndex;
  _ObjCBlock23_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock23_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock23_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock23 extends _ObjCBlockBase {
  ObjCBlock23._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock23.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock23_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock23.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ObjCObject> arg1)>(
                        _ObjCBlock23_closureTrampoline)
                    .cast(),
                _ObjCBlock23_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_id, arg0, arg1);
  }
}

void _ObjCBlock24_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<_ObjCBlock> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<_ObjCBlock> arg0,
                  ffi.Pointer<ObjCObject> arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(
              ffi.Pointer<_ObjCBlock> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock24_closureRegistry = <int, Function>{};
int _ObjCBlock24_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock24_registerClosure(Function fn) {
  final id = ++_ObjCBlock24_closureRegistryIndex;
  _ObjCBlock24_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock24_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<_ObjCBlock> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return _ObjCBlock24_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock24 extends _ObjCBlockBase {
  ObjCBlock24._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock24.fromFunctionPointer(
      NativeMacOsFramework lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<_ObjCBlock> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ObjCObject> arg2)>(
                        _ObjCBlock24_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock24.fromFunction(
      NativeMacOsFramework lib,
      void Function(ffi.Pointer<_ObjCBlock> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ObjCObject> arg2)
          fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<_ObjCBlock> arg0,
                                ffi.Pointer<ObjCObject> arg1,
                                ffi.Pointer<ObjCObject> arg2)>(
                        _ObjCBlock24_closureTrampoline)
                    .cast(),
                _ObjCBlock24_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(ffi.Pointer<_ObjCBlock> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ObjCObject> arg2) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<_ObjCBlock> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<_ObjCBlock> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ObjCObject> arg2)>()(_id, arg0, arg1, arg2);
  }
}

class NSMutableString extends NSString {
  NSMutableString._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableString] that points to the same underlying object as [other].
  static NSMutableString castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableString] that wraps the given raw object pointer.
  static NSMutableString castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableString1);
  }

  void replaceCharactersInRange_withString_(_NSRange range, NSString? aString) {
    return _lib._objc_msgSend_326(
        _id,
        _lib._sel_replaceCharactersInRange_withString_1,
        range,
        aString?._id ?? ffi.nullptr);
  }

  void insertString_atIndex_(NSString? aString, int loc) {
    return _lib._objc_msgSend_327(_id, _lib._sel_insertString_atIndex_1,
        aString?._id ?? ffi.nullptr, loc);
  }

  void deleteCharactersInRange_(_NSRange range) {
    return _lib._objc_msgSend_282(
        _id, _lib._sel_deleteCharactersInRange_1, range);
  }

  void appendString_(NSString? aString) {
    return _lib._objc_msgSend_328(
        _id, _lib._sel_appendString_1, aString?._id ?? ffi.nullptr);
  }

  void appendFormat_(NSString? format) {
    return _lib._objc_msgSend_328(
        _id, _lib._sel_appendFormat_1, format?._id ?? ffi.nullptr);
  }

  void setString_(NSString? aString) {
    return _lib._objc_msgSend_328(
        _id, _lib._sel_setString_1, aString?._id ?? ffi.nullptr);
  }

  int replaceOccurrencesOfString_withString_options_range_(NSString? target,
      NSString? replacement, int options, _NSRange searchRange) {
    return _lib._objc_msgSend_329(
        _id,
        _lib._sel_replaceOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
  }

  bool applyTransform_reverse_range_updatedRange_(NSString transform,
      bool reverse, _NSRange range, ffi.Pointer<_NSRange> resultingRange) {
    return _lib._objc_msgSend_330(
        _id,
        _lib._sel_applyTransform_reverse_range_updatedRange_1,
        transform._id,
        reverse,
        range,
        resultingRange);
  }

  NSMutableString initWithCapacity_(int capacity) {
    final _ret =
        _lib._objc_msgSend_331(_id, _lib._sel_initWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCapacity_(
      NativeMacOsFramework _lib, int capacity) {
    final _ret = _lib._objc_msgSend_331(
        _lib._class_NSMutableString1, _lib._sel_stringWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static ffi.Pointer<ffi.UnsignedLong> getAvailableStringEncodings(
      NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_202(
        _lib._class_NSMutableString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding_(
      NativeMacOsFramework _lib, int encoding) {
    final _ret = _lib._objc_msgSend_163(_lib._class_NSMutableString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultCStringEncoding(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_12(
        _lib._class_NSMutableString1, _lib._sel_defaultCStringEncoding1);
  }

  static NSMutableString string(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_string1);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithString_(
      NativeMacOsFramework _lib, NSString? string) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSMutableString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCharacters_length_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.UnsignedShort> characters, int length) {
    final _ret = _lib._objc_msgSend_215(_lib._class_NSMutableString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithUTF8String_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_216(_lib._class_NSMutableString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithFormat_(
      NativeMacOsFramework _lib, NSString? format) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSMutableString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString localizedStringWithFormat_(
      NativeMacOsFramework _lib, NSString? format) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSMutableString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithValidatedFormat_validFormatSpecifiers_error_(
      NativeMacOsFramework _lib,
      NSString? format,
      NSString? validFormatSpecifiers,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_220(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithValidatedFormat_validFormatSpecifiers_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString
      localizedStringWithValidatedFormat_validFormatSpecifiers_error_(
          NativeMacOsFramework _lib,
          NSString? format,
          NSString? validFormatSpecifiers,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_220(
        _lib._class_NSMutableString1,
        _lib._sel_localizedStringWithValidatedFormat_validFormatSpecifiers_error_1,
        format?._id ?? ffi.nullptr,
        validFormatSpecifiers?._id ?? ffi.nullptr,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCString_encoding_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_228(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfURL_encoding_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_229(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfFile_encoding_error_(
      NativeMacOsFramework _lib,
      NSString? path,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_230(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfURL_usedEncoding_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_231(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfFile_usedEncoding_error_(
      NativeMacOsFramework _lib,
      NSString? path,
      ffi.Pointer<ffi.UnsignedLong> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_232(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          NativeMacOsFramework _lib,
          NSData? data,
          NSDictionary? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_233(
        _lib._class_NSMutableString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject stringWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_237(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_length_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_228(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_(
      NativeMacOsFramework _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_216(
        _lib._class_NSMutableString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_new1);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_alloc1);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }
}

class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableDictionary] that points to the same underlying object as [other].
  static NSMutableDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableDictionary._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableDictionary] that wraps the given raw object pointer.
  static NSMutableDictionary castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableDictionary1);
  }

  void removeObjectForKey_(NSObject aKey) {
    return _lib._objc_msgSend_20(_id, _lib._sel_removeObjectForKey_1, aKey._id);
  }

  void setObject_forKey_(NSObject anObject, NSObject? aKey) {
    return _lib._objc_msgSend_332(_id, _lib._sel_setObject_forKey_1,
        anObject._id, aKey?._id ?? ffi.nullptr);
  }

  @override
  NSMutableDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_49(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  void addEntriesFromDictionary_(NSDictionary? otherDictionary) {
    return _lib._objc_msgSend_333(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys_(NSArray? keyArray) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary_(NSDictionary? otherDictionary) {
    return _lib._objc_msgSend_333(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript_(NSObject obj, NSObject? key) {
    return _lib._objc_msgSend_332(_id, _lib._sel_setObject_forKeyedSubscript_1,
        obj._id, key?._id ?? ffi.nullptr);
  }

  static NSMutableDictionary dictionaryWithCapacity_(
      NativeMacOsFramework _lib, int numItems) {
    final _ret = _lib._objc_msgSend_49(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithContentsOfFile_(
      NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_334(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithContentsOfURL_(
      NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_335(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithContentsOfFile_(NSString? path) {
    final _ret = _lib._objc_msgSend_334(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithContentsOfURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_335(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithSharedKeySet_(
      NativeMacOsFramework _lib, NSObject keyset) {
    final _ret = _lib._objc_msgSend_336(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithSharedKeySet_1, keyset._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionary(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_dictionary1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObject_forKey_(
      NativeMacOsFramework _lib, NSObject object, NSObject? key) {
    final _ret = _lib._objc_msgSend_126(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1,
        object._id,
        key?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_count_(
      NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_114(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjectsAndKeys_(
      NativeMacOsFramework _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_103(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithDictionary_(
      NativeMacOsFramework _lib, NSDictionary? dict) {
    final _ret = _lib._objc_msgSend_127(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_(
      NativeMacOsFramework _lib, NSArray? objects, NSArray? keys) {
    final _ret = _lib._objc_msgSend_128(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithContentsOfURL_error_(
      NativeMacOsFramework _lib,
      NSURL? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_130(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(
      NativeMacOsFramework _lib, NSArray? keys) {
    final _ret = _lib._objc_msgSend_58(_lib._class_NSMutableDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableDictionary1, _lib._sel_new1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableDictionary alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_alloc1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }
}

class NSMutableSet extends NSSet {
  NSMutableSet._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableSet] that points to the same underlying object as [other].
  static NSMutableSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableSet] that wraps the given raw object pointer.
  static NSMutableSet castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSMutableSet1);
  }

  void addObject_(NSObject object) {
    return _lib._objc_msgSend_20(_id, _lib._sel_addObject_1, object._id);
  }

  void removeObject_(NSObject object) {
    return _lib._objc_msgSend_20(_id, _lib._sel_removeObject_1, object._id);
  }

  @override
  NSMutableSet initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableSet initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_49(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSArray? array) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_addObjectsFromArray_1, array?._id ?? ffi.nullptr);
  }

  void intersectSet_(NSSet? otherSet) {
    return _lib._objc_msgSend_337(
        _id, _lib._sel_intersectSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void minusSet_(NSSet? otherSet) {
    return _lib._objc_msgSend_337(
        _id, _lib._sel_minusSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void unionSet_(NSSet? otherSet) {
    return _lib._objc_msgSend_337(
        _id, _lib._sel_unionSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void setSet_(NSSet? otherSet) {
    return _lib._objc_msgSend_337(
        _id, _lib._sel_setSet_1, otherSet?._id ?? ffi.nullptr);
  }

  static NSMutableSet setWithCapacity_(
      NativeMacOsFramework _lib, int numItems) {
    final _ret = _lib._objc_msgSend_49(
        _lib._class_NSMutableSet1, _lib._sel_setWithCapacity_1, numItems);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet set1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_set1);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObject_(
      NativeMacOsFramework _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSMutableSet1, _lib._sel_setWithObject_1, object._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_count_(NativeMacOsFramework _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_50(_lib._class_NSMutableSet1,
        _lib._sel_setWithObjects_count_1, objects, cnt);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_(
      NativeMacOsFramework _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSMutableSet1, _lib._sel_setWithObjects_1, firstObj._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithSet_(NativeMacOsFramework _lib, NSSet? set) {
    final _ret = _lib._objc_msgSend_141(_lib._class_NSMutableSet1,
        _lib._sel_setWithSet_1, set?._id ?? ffi.nullptr);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithArray_(NativeMacOsFramework _lib, NSArray? array) {
    final _ret = _lib._objc_msgSend_58(_lib._class_NSMutableSet1,
        _lib._sel_setWithArray_1, array?._id ?? ffi.nullptr);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_new1);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableSet alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_alloc1);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }
}

class NSNotification extends NSObject {
  NSNotification._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNotification] that points to the same underlying object as [other].
  static NSNotification castFrom<T extends _ObjCWrapper>(T other) {
    return NSNotification._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNotification] that wraps the given raw object pointer.
  static NSNotification castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNotification._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNotification].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSNotification1);
  }

  NSString get name {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_name1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject get object {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_object1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get userInfo {
    final _ret = _lib._objc_msgSend_234(_id, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSNotification initWithName_object_userInfo_(
      NSString name, NSObject object, NSDictionary? userInfo) {
    final _ret = _lib._objc_msgSend_338(
        _id,
        _lib._sel_initWithName_object_userInfo_1,
        name._id,
        object._id,
        userInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  NSNotification initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_(
      NativeMacOsFramework _lib, NSString aName, NSObject anObject) {
    final _ret = _lib._objc_msgSend_218(_lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_1, aName._id, anObject._id);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_userInfo_(
      NativeMacOsFramework _lib,
      NSString aName,
      NSObject anObject,
      NSDictionary? aUserInfo) {
    final _ret = _lib._objc_msgSend_338(
        _lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_userInfo_1,
        aName._id,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNotification init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNotification1, _lib._sel_new1);
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }

  static NSNotification alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNotification1, _lib._sel_alloc1);
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }
}

/// Because NSBundle caches allocated instances, subclasses should be prepared
/// to receive an already initialized object back from [super initWithPath:]
class NSBundle extends NSObject {
  NSBundle._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSBundle] that points to the same underlying object as [other].
  static NSBundle castFrom<T extends _ObjCWrapper>(T other) {
    return NSBundle._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSBundle] that wraps the given raw object pointer.
  static NSBundle castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSBundle._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSBundle].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSBundle1);
  }

  /// Methods for creating or retrieving bundle instances.
  static NSBundle? getMainBundle(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_339(_lib._class_NSBundle1, _lib._sel_mainBundle1);
    return _ret.address == 0
        ? null
        : NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleWithPath_(NativeMacOsFramework _lib, NSString? path) {
    final _ret = _lib._objc_msgSend_38(_lib._class_NSBundle1,
        _lib._sel_bundleWithPath_1, path?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle initWithPath_(NSString? path) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_initWithPath_1, path?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleWithURL_(NativeMacOsFramework _lib, NSURL? url) {
    final _ret = _lib._objc_msgSend_237(_lib._class_NSBundle1,
        _lib._sel_bundleWithURL_1, url?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle initWithURL_(NSURL? url) {
    final _ret = _lib._objc_msgSend_237(
        _id, _lib._sel_initWithURL_1, url?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleForClass_(NativeMacOsFramework _lib, NSObject aClass) {
    final _ret = _lib._objc_msgSend_340(
        _lib._class_NSBundle1, _lib._sel_bundleForClass_1, aClass._id);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleWithIdentifier_(
      NativeMacOsFramework _lib, NSString? identifier) {
    final _ret = _lib._objc_msgSend_341(_lib._class_NSBundle1,
        _lib._sel_bundleWithIdentifier_1, identifier?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? getAllBundles(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_115(_lib._class_NSBundle1, _lib._sel_allBundles1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray? getAllFrameworks(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_115(_lib._class_NSBundle1, _lib._sel_allFrameworks1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  /// Methods for loading and unloading bundles.
  bool load() {
    return _lib._objc_msgSend_11(_id, _lib._sel_load1);
  }

  bool get loaded {
    return _lib._objc_msgSend_11(_id, _lib._sel_isLoaded1);
  }

  bool unload() {
    return _lib._objc_msgSend_11(_id, _lib._sel_unload1);
  }

  bool preflightAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_342(
        _id, _lib._sel_preflightAndReturnError_1, error);
  }

  bool loadAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_342(_id, _lib._sel_loadAndReturnError_1, error);
  }

  /// Methods for locating various components of a bundle.
  NSURL? get bundleURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_bundleURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get resourceURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_resourceURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get executableURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_executableURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL URLForAuxiliaryExecutable_(NSString? executableName) {
    final _ret = _lib._objc_msgSend_343(
        _id,
        _lib._sel_URLForAuxiliaryExecutable_1,
        executableName?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get privateFrameworksURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_privateFrameworksURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get sharedFrameworksURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_sharedFrameworksURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get sharedSupportURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_sharedSupportURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get builtInPlugInsURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_builtInPlugInsURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL? get appStoreReceiptURL {
    final _ret = _lib._objc_msgSend_308(_id, _lib._sel_appStoreReceiptURL1);
    return _ret.address == 0
        ? null
        : NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSString? get bundlePath {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_bundlePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get resourcePath {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_resourcePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get executablePath {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_executablePath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString pathForAuxiliaryExecutable_(NSString? executableName) {
    final _ret = _lib._objc_msgSend_54(
        _id,
        _lib._sel_pathForAuxiliaryExecutable_1,
        executableName?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get privateFrameworksPath {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_privateFrameworksPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sharedFrameworksPath {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_sharedFrameworksPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get sharedSupportPath {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_sharedSupportPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get builtInPlugInsPath {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_builtInPlugInsPath1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  /// Methods for locating bundle resources.  Instance methods locate resources in the bundle indicated by the receiver; class methods take an argument pointing to a bundle on disk.  In the class methods, bundleURL is a URL pointing to the location of a bundle on disk, and may not be nil; bundlePath is the path equivalent of bundleURL, an absolute path pointing to the location of a bundle on disk.  By contrast, subpath is a relative path to a subdirectory inside the relevant global or localized resource directory, and should be nil if the resource file in question is not in a subdirectory.  Where appropriate, localizationName is the name of a .lproj directory in the bundle, minus the .lproj extension; passing nil for localizationName retrieves only global resources, whereas using a method without this argument retrieves both global and localized resources (using the standard localization search algorithm).
  static NSURL URLForResource_withExtension_subdirectory_inBundleWithURL_(
      NativeMacOsFramework _lib,
      NSString? name,
      NSString? ext,
      NSString? subpath,
      NSURL? bundleURL) {
    final _ret = _lib._objc_msgSend_344(
        _lib._class_NSBundle1,
        _lib._sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        bundleURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSArray URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
      NativeMacOsFramework _lib,
      NSString? ext,
      NSString? subpath,
      NSURL? bundleURL) {
    final _ret = _lib._objc_msgSend_345(
        _lib._class_NSBundle1,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        bundleURL?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSURL URLForResource_withExtension_(NSString? name, NSString? ext) {
    final _ret = _lib._objc_msgSend_346(
        _id,
        _lib._sel_URLForResource_withExtension_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL URLForResource_withExtension_subdirectory_(
      NSString? name, NSString? ext, NSString? subpath) {
    final _ret = _lib._objc_msgSend_347(
        _id,
        _lib._sel_URLForResource_withExtension_subdirectory_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL URLForResource_withExtension_subdirectory_localization_(NSString? name,
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_348(
        _id,
        _lib._sel_URLForResource_withExtension_subdirectory_localization_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSArray URLsForResourcesWithExtension_subdirectory_(
      NSString? ext, NSString? subpath) {
    final _ret = _lib._objc_msgSend_349(
        _id,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray URLsForResourcesWithExtension_subdirectory_localization_(
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_350(
        _id,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_localization_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSString pathForResource_ofType_inDirectory_(NativeMacOsFramework _lib,
      NSString? name, NSString? ext, NSString? bundlePath) {
    final _ret = _lib._objc_msgSend_351(
        _lib._class_NSBundle1,
        _lib._sel_pathForResource_ofType_inDirectory_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        bundlePath?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSArray pathsForResourcesOfType_inDirectory_(
      NativeMacOsFramework _lib, NSString? ext, NSString? bundlePath) {
    final _ret = _lib._objc_msgSend_349(
        _lib._class_NSBundle1,
        _lib._sel_pathsForResourcesOfType_inDirectory_1,
        ext?._id ?? ffi.nullptr,
        bundlePath?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString pathForResource_ofType_(NSString? name, NSString? ext) {
    final _ret = _lib._objc_msgSend_208(_id, _lib._sel_pathForResource_ofType_1,
        name?._id ?? ffi.nullptr, ext?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString pathForResource_ofType_inDirectory_forLocalization_(NSString? name,
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_352(
        _id,
        _lib._sel_pathForResource_ofType_inDirectory_forLocalization_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSArray pathsForResourcesOfType_inDirectory_forLocalization_(
      NSString? ext, NSString? subpath, NSString? localizationName) {
    final _ret = _lib._objc_msgSend_350(
        _id,
        _lib._sel_pathsForResourcesOfType_inDirectory_forLocalization_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  /// Methods for retrieving localized strings.
  NSString localizedStringForKey_value_table_(
      NSString? key, NSString? value, NSString? tableName) {
    final _ret = _lib._objc_msgSend_351(
        _id,
        _lib._sel_localizedStringForKey_value_table_1,
        key?._id ?? ffi.nullptr,
        value?._id ?? ffi.nullptr,
        tableName?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString localizedAttributedStringForKey_value_table_(
      NSString? key, NSString? value, NSString? tableName) {
    final _ret = _lib._objc_msgSend_353(
        _id,
        _lib._sel_localizedAttributedStringForKey_value_table_1,
        key?._id ?? ffi.nullptr,
        value?._id ?? ffi.nullptr,
        tableName?._id ?? ffi.nullptr);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  /// Methods for obtaining various information about a bundle.
  NSString? get bundleIdentifier {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_bundleIdentifier1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get infoDictionary {
    final _ret = _lib._objc_msgSend_234(_id, _lib._sel_infoDictionary1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get localizedInfoDictionary {
    final _ret =
        _lib._objc_msgSend_234(_id, _lib._sel_localizedInfoDictionary1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectForInfoDictionaryKey_(NSString? key) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_objectForInfoDictionaryKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject classNamed_(NSString? className) {
    final _ret = _lib._objc_msgSend_38(
        _id, _lib._sel_classNamed_1, className?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get principalClass {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_principalClass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// a subset of this bundle's localizations, re-ordered into the preferred order for this process's current execution environment; the main bundle's preferred localizations indicate the language (of text) the user is most likely seeing in the UI
  NSArray? get preferredLocalizations {
    final _ret = _lib._objc_msgSend_115(_id, _lib._sel_preferredLocalizations1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  /// list of language names this bundle appears to be localized to
  NSArray? get localizations {
    final _ret = _lib._objc_msgSend_115(_id, _lib._sel_localizations1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get developmentLocalization {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_developmentLocalization1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSArray preferredLocalizationsFromArray_(
      NativeMacOsFramework _lib, NSArray? localizationsArray) {
    final _ret = _lib._objc_msgSend_53(
        _lib._class_NSBundle1,
        _lib._sel_preferredLocalizationsFromArray_1,
        localizationsArray?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray preferredLocalizationsFromArray_forPreferences_(
      NativeMacOsFramework _lib,
      NSArray? localizationsArray,
      NSArray? preferencesArray) {
    final _ret = _lib._objc_msgSend_354(
        _lib._class_NSBundle1,
        _lib._sel_preferredLocalizationsFromArray_forPreferences_1,
        localizationsArray?._id ?? ffi.nullptr,
        preferencesArray?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get executableArchitectures {
    final _ret =
        _lib._objc_msgSend_115(_id, _lib._sel_executableArchitectures1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  /// Set a preservation priority for tags that are included in this bundle for the On Demand Resources system. Preservation priorities may be between 0.0 and 1.0, with higher values being the last choice for purging by the system. The exact meaning of this value is up to your application as it only has meaning within the set of tags your application uses.
  ///
  /// The default value is 0.0.
  ///
  /// This method will throw an exception if the receiver bundle has no on demand resource tag information.
  void setPreservationPriority_forTags_(double priority, NSSet? tags) {
    return _lib._objc_msgSend_355(
        _id,
        _lib._sel_setPreservationPriority_forTags_1,
        priority,
        tags?._id ?? ffi.nullptr);
  }

  double preservationPriorityForTag_(NSString? tag) {
    return _lib._objc_msgSend_44(
        _id, _lib._sel_preservationPriorityForTag_1, tag?._id ?? ffi.nullptr);
  }

  static NSBundle new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_new1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static NSBundle alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_alloc1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }
}

class NSAttributedString extends _ObjCWrapper {
  NSAttributedString._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSAttributedString] that points to the same underlying object as [other].
  static NSAttributedString castFrom<T extends _ObjCWrapper>(T other) {
    return NSAttributedString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSAttributedString] that wraps the given raw object pointer.
  static NSAttributedString castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSAttributedString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSAttributedString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSAttributedString1);
  }
}

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDate] that points to the same underlying object as [other].
  static NSDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSDate._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDate] that wraps the given raw object pointer.
  static NSDate castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDate].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDate1);
  }

  double get timeIntervalSinceReferenceDate {
    return _lib._objc_msgSend_187(
        _id, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  @override
  NSDate init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _lib._objc_msgSend_356(
        _id, _lib._sel_initWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithCoder_(NSCoder? coder) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  double timeIntervalSinceDate_(NSDate? anotherDate) {
    return _lib._objc_msgSend_357(_id, _lib._sel_timeIntervalSinceDate_1,
        anotherDate?._id ?? ffi.nullptr);
  }

  double get timeIntervalSinceNow {
    return _lib._objc_msgSend_187(_id, _lib._sel_timeIntervalSinceNow1);
  }

  double get timeIntervalSince1970 {
    return _lib._objc_msgSend_187(_id, _lib._sel_timeIntervalSince19701);
  }

  NSObject addTimeInterval_(double seconds) {
    final _ret =
        _lib._objc_msgSend_356(_id, _lib._sel_addTimeInterval_1, seconds);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDate dateByAddingTimeInterval_(double ti) {
    final _ret =
        _lib._objc_msgSend_356(_id, _lib._sel_dateByAddingTimeInterval_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate earlierDate_(NSDate? anotherDate) {
    final _ret = _lib._objc_msgSend_358(
        _id, _lib._sel_earlierDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate laterDate_(NSDate? anotherDate) {
    final _ret = _lib._objc_msgSend_358(
        _id, _lib._sel_laterDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSDate? other) {
    return _lib._objc_msgSend_359(
        _id, _lib._sel_compare_1, other?._id ?? ffi.nullptr);
  }

  bool isEqualToDate_(NSDate? otherDate) {
    return _lib._objc_msgSend_360(
        _id, _lib._sel_isEqualToDate_1, otherDate?._id ?? ffi.nullptr);
  }

  NSString? get description {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_56(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSDate date(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_date1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceNow_(
      NativeMacOsFramework _lib, double secs) {
    final _ret = _lib._objc_msgSend_356(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate_(
      NativeMacOsFramework _lib, double ti) {
    final _ret = _lib._objc_msgSend_356(_lib._class_NSDate1,
        _lib._sel_dateWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSince1970_(
      NativeMacOsFramework _lib, double secs) {
    final _ret = _lib._objc_msgSend_356(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeInterval_sinceDate_(
      NativeMacOsFramework _lib, double secsToBeAdded, NSDate? date) {
    final _ret = _lib._objc_msgSend_361(
        _lib._class_NSDate1,
        _lib._sel_dateWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate? getDistantFuture(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_362(_lib._class_NSDate1, _lib._sel_distantFuture1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate? getDistantPast(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_362(_lib._class_NSDate1, _lib._sel_distantPast1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate? getNow(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_362(_lib._class_NSDate1, _lib._sel_now1);
    return _ret.address == 0
        ? null
        : NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceNow_(double secs) {
    final _ret = _lib._objc_msgSend_356(
        _id, _lib._sel_initWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSince1970_(double secs) {
    final _ret = _lib._objc_msgSend_356(
        _id, _lib._sel_initWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeInterval_sinceDate_(double secsToBeAdded, NSDate? date) {
    final _ret = _lib._objc_msgSend_361(
        _id,
        _lib._sel_initWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_new1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_alloc1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }
}

class NSProcessInfo extends NSObject {
  NSProcessInfo._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSProcessInfo] that points to the same underlying object as [other].
  static NSProcessInfo castFrom<T extends _ObjCWrapper>(T other) {
    return NSProcessInfo._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSProcessInfo] that wraps the given raw object pointer.
  static NSProcessInfo castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSProcessInfo._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProcessInfo].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSProcessInfo1);
  }

  static NSProcessInfo? getProcessInfo(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_363(
        _lib._class_NSProcessInfo1, _lib._sel_processInfo1);
    return _ret.address == 0
        ? null
        : NSProcessInfo._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary? get environment {
    final _ret = _lib._objc_msgSend_234(_id, _lib._sel_environment1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSArray? get arguments {
    final _ret = _lib._objc_msgSend_115(_id, _lib._sel_arguments1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSString? get hostName {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_hostName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get processName {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_processName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  set processName(NSString? value) {
    _lib._objc_msgSend_302(
        _id, _lib._sel_setProcessName_1, value?._id ?? ffi.nullptr);
  }

  int get processIdentifier {
    return _lib._objc_msgSend_189(_id, _lib._sel_processIdentifier1);
  }

  NSString? get globallyUniqueString {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_globallyUniqueString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  int operatingSystem() {
    return _lib._objc_msgSend_12(_id, _lib._sel_operatingSystem1);
  }

  NSString operatingSystemName() {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_operatingSystemName1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  /// Human readable, localized; appropriate for displaying to user or using in bug emails and such; NOT appropriate for parsing
  NSString? get operatingSystemVersionString {
    final _ret =
        _lib._objc_msgSend_55(_id, _lib._sel_operatingSystemVersionString1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSOperatingSystemVersion get operatingSystemVersion {
    return _lib._objc_msgSend_364(_id, _lib._sel_operatingSystemVersion1);
  }

  int get processorCount {
    return _lib._objc_msgSend_12(_id, _lib._sel_processorCount1);
  }

  int get activeProcessorCount {
    return _lib._objc_msgSend_12(_id, _lib._sel_activeProcessorCount1);
  }

  int get physicalMemory {
    return _lib._objc_msgSend_272(_id, _lib._sel_physicalMemory1);
  }

  bool isOperatingSystemAtLeastVersion_(NSOperatingSystemVersion version) {
    return _lib._objc_msgSend_365(
        _id, _lib._sel_isOperatingSystemAtLeastVersion_1, version);
  }

  double get systemUptime {
    return _lib._objc_msgSend_187(_id, _lib._sel_systemUptime1);
  }

  /// Disable or reenable the ability to be quickly killed. The default implementations of these methods increment or decrement, respectively, a counter whose value is 1 when the process is first created. When the counter's value is 0 the application is considered to be safely killable and may be killed by the operating system without any notification or event being sent to the process first. If an application's Info.plist has an NSSupportsSuddenTermination entry whose value is true then NSApplication invokes -enableSuddenTermination automatically during application launch, which typically renders the process killable right away. You can also manually invoke -enableSuddenTermination right away in, for example, agents or daemons that don't depend on AppKit. After that, you can invoke these methods whenever the process has work it must do before it terminates. For example:
  /// - NSUserDefaults uses these to prevent process killing between the time at which a default has been set and the time at which the preferences file including that default has been written to disk.
  /// - NSDocument uses these to prevent process killing between the time at which the user has made a change to a document and the time at which the user's change has been written to disk.
  /// - You can use these whenever your application defers work that must be done before the application terminates. If for example your application ever defers writing something to disk, and it has an NSSupportsSuddenTermination entry in its Info.plist so as not to contribute to user-visible delays at logout or shutdown time, it must invoke -disableSuddenTermination when the writing is first deferred and -enableSuddenTermination after the writing is actually done.
  void disableSuddenTermination() {
    return _lib._objc_msgSend_1(_id, _lib._sel_disableSuddenTermination1);
  }

  void enableSuddenTermination() {
    return _lib._objc_msgSend_1(_id, _lib._sel_enableSuddenTermination1);
  }

  /// Increment or decrement the counter tracking the number of automatic quit opt-out requests. When this counter is greater than zero, the app will be considered 'active' and ineligible for automatic termination.
  /// An example of using this would be disabling autoquitting when the user of an instant messaging application signs on, due to it requiring a background connection to be maintained even if the app is otherwise inactive.
  /// Each pair of calls should have a matching "reason" argument, which can be used to easily track why an application is or is not automatically terminable.
  /// A given reason can be used more than once at the same time (for example: two files are transferring over the network, each one disables automatic termination with the reason @"file transfer in progress")
  void disableAutomaticTermination_(NSString? reason) {
    return _lib._objc_msgSend_328(_id, _lib._sel_disableAutomaticTermination_1,
        reason?._id ?? ffi.nullptr);
  }

  void enableAutomaticTermination_(NSString? reason) {
    return _lib._objc_msgSend_328(_id, _lib._sel_enableAutomaticTermination_1,
        reason?._id ?? ffi.nullptr);
  }

  /// Marks the calling app as supporting automatic termination. Without calling this or setting the equivalent Info.plist key (NSSupportsAutomaticTermination), the above methods (disableAutomaticTermination:/enableAutomaticTermination:) have no effect,
  /// although the counter tracking automatic termination opt-outs is still kept up to date to ensure correctness if this is called later. Currently, passing NO has no effect.
  /// This should be called during -applicationDidFinishLaunching or earlier.
  bool get automaticTerminationSupportEnabled {
    return _lib._objc_msgSend_11(
        _id, _lib._sel_automaticTerminationSupportEnabled1);
  }

  /// Marks the calling app as supporting automatic termination. Without calling this or setting the equivalent Info.plist key (NSSupportsAutomaticTermination), the above methods (disableAutomaticTermination:/enableAutomaticTermination:) have no effect,
  /// although the counter tracking automatic termination opt-outs is still kept up to date to ensure correctness if this is called later. Currently, passing NO has no effect.
  /// This should be called during -applicationDidFinishLaunching or earlier.
  set automaticTerminationSupportEnabled(bool value) {
    _lib._objc_msgSend_303(
        _id, _lib._sel_setAutomaticTerminationSupportEnabled_1, value);
  }

  /// Pass in an activity to this API, and a non-NULL, non-empty reason string. Indicate completion of the activity by calling the corresponding endActivity: method with the result of the beginActivityWithOptions:reason: method. The reason string is used for debugging.
  NSObject beginActivityWithOptions_reason_(int options, NSString? reason) {
    final _ret = _lib._objc_msgSend_366(
        _id,
        _lib._sel_beginActivityWithOptions_reason_1,
        options,
        reason?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  /// The argument to this method is the result of beginActivityWithOptions:reason:.
  void endActivity_(NSObject? activity) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_endActivity_1, activity?._id ?? ffi.nullptr);
  }

  /// Synchronously perform an activity. The activity will be automatically ended after your block argument returns. The reason string is used for debugging.
  void performActivityWithOptions_reason_usingBlock_(
      int options, NSString? reason, ObjCBlock16 block) {
    return _lib._objc_msgSend_367(
        _id,
        _lib._sel_performActivityWithOptions_reason_usingBlock_1,
        options,
        reason?._id ?? ffi.nullptr,
        block._id);
  }

  /// Perform an expiring background task, which obtains an expiring task assertion on iOS. The block contains any work which needs to be completed as a background-priority task. The block will be scheduled on a system-provided concurrent queue. After a system-specified time, the block will be called with the `expired` parameter set to YES. The `expired` parameter will also be YES if the system decides to prematurely terminate a previous non-expiration invocation of the block.
  void performExpiringActivityWithReason_usingBlock_(
      NSString? reason, ObjCBlock25 block) {
    return _lib._objc_msgSend_368(
        _id,
        _lib._sel_performExpiringActivityWithReason_usingBlock_1,
        reason?._id ?? ffi.nullptr,
        block._id);
  }

  NSString? get userName {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_userName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString? get fullUserName {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_fullUserName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  /// Retrieve the current thermal state of the system. On systems where thermal state is unknown or unsupported, the value returned from the thermalState property is always NSProcessInfoThermalStateNominal.
  int get thermalState {
    return _lib._objc_msgSend_369(_id, _lib._sel_thermalState1);
  }

  /// Retrieve the current setting of the system for the low power mode setting. On systems where the low power mode is unknown or unsupported, the value returned from the lowPowerModeEnabled property is always NO
  bool get lowPowerModeEnabled {
    return _lib._objc_msgSend_11(_id, _lib._sel_isLowPowerModeEnabled1);
  }

  bool get macCatalystApp {
    return _lib._objc_msgSend_11(_id, _lib._sel_isMacCatalystApp1);
  }

  bool get iOSAppOnMac {
    return _lib._objc_msgSend_11(_id, _lib._sel_isiOSAppOnMac1);
  }

  static NSProcessInfo new1(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSProcessInfo1, _lib._sel_new1);
    return NSProcessInfo._(_ret, _lib, retain: false, release: true);
  }

  static NSProcessInfo alloc(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSProcessInfo1, _lib._sel_alloc1);
    return NSProcessInfo._(_ret, _lib, retain: false, release: true);
  }
}

final class NSOperatingSystemVersion extends ffi.Struct {
  @ffi.Long()
  external int majorVersion;

  @ffi.Long()
  external int minorVersion;

  @ffi.Long()
  external int patchVersion;
}

/// The system has heuristics to improve battery life, performance, and responsiveness of applications for the benefit of the user. This API can be used to give hints to the system that your application has special requirements. In response to creating one of these activities, the system will disable some or all of the heuristics so your application can finish quickly while still providing responsive behavior if the user needs it.
///
/// These activities can be used when your application is performing a long-running operation. If the activity can take different amounts of time (for example, calculating the next move in a chess game), it should use this API. This will ensure correct behavior when the amount of data or the capabilities of the user's computer varies. You should put your activity into one of two major categories:
///
/// User initiated: These are finite length activities that the user has explicitly started. Examples include exporting or downloading a user specified file.
///
/// Background: These are finite length activities that are part of the normal operation of your application but are not explicitly started by the user. Examples include autosaving, indexing, and automatic downloading of files.
///
/// In addition, if your application requires high priority IO, you can include the 'NSActivityLatencyCritical' flag (using a bitwise or). This should be reserved for activities like audio or video recording.
///
/// If your activity takes place synchronously inside an event callback on the main thread, you do not need to use this API.
///
/// Be aware that failing to end these activities for an extended period of time can have significant negative impacts to the performance of your user's computer, so be sure to use only the minimum amount of time required. User preferences may override your application’s request.
///
/// This API can also be used to control auto termination or sudden termination.
///
/// id activity = [NSProcessInfo.processInfo beginActivityWithOptions:NSActivityAutomaticTerminationDisabled reason:@"Good Reason"];
/// // work
/// [NSProcessInfo.processInfo endActivity:activity];
///
/// is equivalent to:
///
/// [NSProcessInfo.processInfo disableAutomaticTermination:@"Good Reason"];
/// // work
/// [NSProcessInfo.processInfo enableAutomaticTermination:@"Good Reason"]
///
/// Since this API returns an object, it may be easier to pair begins and ends. If the object is deallocated before the -endActivity: call, the activity will be automatically ended.
///
/// This API also provides a mechanism to disable system-wide idle sleep and display idle sleep. These can have a large impact on the user experience, so be sure not to forget to end activities that disable sleep (including NSActivityUserInitiated).
abstract class NSActivityOptions {
  /// Used for activities that require the screen to stay powered on.
  static const int NSActivityIdleDisplaySleepDisabled = 1099511627776;

  /// Used for activities that require the computer to not idle sleep. This is included in NSActivityUserInitiated.
  static const int NSActivityIdleSystemSleepDisabled = 1048576;

  /// Prevents sudden termination. This is included in NSActivityUserInitiated.
  static const int NSActivitySuddenTerminationDisabled = 16384;

  /// Prevents automatic termination. This is included in NSActivityUserInitiated.
  static const int NSActivityAutomaticTerminationDisabled = 32768;

  /// Emits an os_signpost begin and end during the activity lifetime, intended to be used to track animation activity
  static const int NSActivityAnimationTrackingEnabled = 35184372088832;

  /// Emits an os_signpost begin and end during the activity lifetime, intended to be used to track general activity
  static const int NSActivityTrackingEnabled = 70368744177664;

  /// App is performing a user-requested action.
  static const int NSActivityUserInitiated = 16777215;
  static const int NSActivityUserInitiatedAllowingIdleSystemSleep = 15728639;

  /// App has initiated some kind of work, but not as the direct result of user request.
  static const int NSActivityBackground = 255;

  /// Used for activities that require the highest amount of timer and I/O precision available. Very few applications should need to use this constant.
  static const int NSActivityLatencyCritical = 1095216660480;
  static const int NSActivityUserInteractive = 1095233437695;
}

void _ObjCBlock25_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block, bool arg0) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>>()
      .asFunction<void Function(bool arg0)>()(arg0);
}

final _ObjCBlock25_closureRegistry = <int, Function>{};
int _ObjCBlock25_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock25_registerClosure(Function fn) {
  final id = ++_ObjCBlock25_closureRegistryIndex;
  _ObjCBlock25_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock25_closureTrampoline(ffi.Pointer<_ObjCBlock> block, bool arg0) {
  return _ObjCBlock25_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock25 extends _ObjCBlockBase {
  ObjCBlock25._(ffi.Pointer<_ObjCBlock> id, NativeMacOsFramework lib)
      : super._(id, lib, retain: false, release: true);

  /// Creates a block from a C function pointer.
  ObjCBlock25.fromFunctionPointer(NativeMacOsFramework lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>> ptr)
      : this._(
            lib._newBlock1(
                _cFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            ffi.Bool arg0)>(_ObjCBlock25_fnPtrTrampoline)
                    .cast(),
                ptr.cast()),
            lib);
  static ffi.Pointer<ffi.Void>? _cFuncTrampoline;

  /// Creates a block from a Dart function.
  ObjCBlock25.fromFunction(
      NativeMacOsFramework lib, void Function(bool arg0) fn)
      : this._(
            lib._newBlock1(
                _dartFuncTrampoline ??= ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            ffi.Bool arg0)>(_ObjCBlock25_closureTrampoline)
                    .cast(),
                _ObjCBlock25_registerClosure(fn)),
            lib);
  static ffi.Pointer<ffi.Void>? _dartFuncTrampoline;
  void call(bool arg0) {
    return _id.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block, ffi.Bool arg0)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block, bool arg0)>()(_id, arg0);
  }
}

/// Describes the current thermal state of the system.
abstract class NSProcessInfoThermalState {
  /// No corrective action is needed.
  static const int NSProcessInfoThermalStateNominal = 0;

  /// The system has reached a state where fans may become audible (on systems which have fans). Recommendation: Defer non-user-visible activity.
  static const int NSProcessInfoThermalStateFair = 1;

  /// Fans are running at maximum speed (on systems which have fans), system performance may be impacted. Recommendation: reduce application's usage of CPU, GPU and I/O, if possible. Switch to lower quality visual effects, reduce frame rates.
  static const int NSProcessInfoThermalStateSerious = 2;

  /// System performance is significantly impacted and the system needs to cool down. Recommendation: reduce application's usage of CPU, GPU, and I/O to the minimum level needed to respond to user actions. Consider stopping use of camera and other peripherals if your application is using them.
  static const int NSProcessInfoThermalStateCritical = 3;
}

class NSScreen extends NSObject {
  NSScreen._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSScreen] that points to the same underlying object as [other].
  static NSScreen castFrom<T extends _ObjCWrapper>(T other) {
    return NSScreen._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSScreen] that wraps the given raw object pointer.
  static NSScreen castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSScreen._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScreen].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSScreen1);
  }

  /// All screens; first one is "zero" screen
  static NSArray? getScreens(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_115(_lib._class_NSScreen1, _lib._sel_screens1);
    return _ret.address == 0
        ? null
        : NSArray._(_ret, _lib, retain: true, release: true);
  }

  /// Screen with key window
  static NSScreen? getMainScreen(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_370(_lib._class_NSScreen1, _lib._sel_mainScreen1);
    return _ret.address == 0
        ? null
        : NSScreen._(_ret, _lib, retain: true, release: true);
  }

  static NSScreen? getDeepestScreen(NativeMacOsFramework _lib) {
    final _ret =
        _lib._objc_msgSend_370(_lib._class_NSScreen1, _lib._sel_deepestScreen1);
    return _ret.address == 0
        ? null
        : NSScreen._(_ret, _lib, retain: true, release: true);
  }

  /// screensHaveSeparateSpaces returns YES if each screen has its own set of spaces.  This is a system setting and does not necessarily imply that there are multiple screens, nor that there are multiple spaces on any one screen
  static bool getScreensHaveSeparateSpaces(NativeMacOsFramework _lib) {
    return _lib._objc_msgSend_11(
        _lib._class_NSScreen1, _lib._sel_screensHaveSeparateSpaces1);
  }

  int get depth {
    return _lib._objc_msgSend_371(_id, _lib._sel_depth1);
  }

  CGRect get frame {
    return _lib._objc_msgSend_156(_id, _lib._sel_frame1);
  }

  CGRect get visibleFrame {
    return _lib._objc_msgSend_156(_id, _lib._sel_visibleFrame1);
  }

  NSDictionary? get deviceDescription {
    final _ret = _lib._objc_msgSend_234(_id, _lib._sel_deviceDescription1);
    return _ret.address == 0
        ? null
        : NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSColorSpace? get colorSpace {
    final _ret = _lib._objc_msgSend_372(_id, _lib._sel_colorSpace1);
    return _ret.address == 0
        ? null
        : NSColorSpace._(_ret, _lib, retain: true, release: true);
  }

  /// 0 terminated
  ffi.Pointer<ffi.Int32> get supportedWindowDepths {
    return _lib._objc_msgSend_373(_id, _lib._sel_supportedWindowDepths1);
  }

  /// canRepresentDisplayGamut: returns YES if the colorSpace of the receiving screen is capable of representing the given display gamut
  bool canRepresentDisplayGamut_(int displayGamut) {
    return _lib._objc_msgSend_374(
        _id, _lib._sel_canRepresentDisplayGamut_1, displayGamut);
  }

  /// Convert to/from the device pixel aligned coordinates system of a display
  CGRect convertRectToBacking_(CGRect rect) {
    return _lib._objc_msgSend_375(_id, _lib._sel_convertRectToBacking_1, rect);
  }

  CGRect convertRectFromBacking_(CGRect rect) {
    return _lib._objc_msgSend_375(
        _id, _lib._sel_convertRectFromBacking_1, rect);
  }

  /// Uses NSIntegralRectWithOptions() to produce a pixel aligned rectangle on the target screen from the given input rectangle in global screen coordinates.
  CGRect backingAlignedRect_options_(CGRect rect, int options) {
    return _lib._objc_msgSend_376(
        _id, _lib._sel_backingAlignedRect_options_1, rect, options);
  }

  /// Returns the scale factor representing the number of backing store pixels corresponding to each linear unit in screen space on this NSScreen. This method is provided for rare cases when the explicit scale factor is needed.  Please use -convert*ToBacking: methods whenever possible.
  double get backingScaleFactor {
    return _lib._objc_msgSend_187(_id, _lib._sel_backingScaleFactor1);
  }

  NSString? get localizedName {
    final _ret = _lib._objc_msgSend_55(_id, _lib._sel_localizedName1);
    return _ret.address == 0
        ? null
        : NSString._(_ret, _lib, retain: true, release: true);
  }

  /// Indicates the obscured distance from each edge of the screen
  NSEdgeInsets get safeAreaInsets {
    return _lib._objc_msgSend_254(_id, _lib._sel_safeAreaInsets1);
  }

  /// The following two rects are at the top of the screen, outside the rectangle defined by safeAreaInsets, but also unobscured.  These rects are empty if there are no additional unobscured areas
  CGRect get auxiliaryTopLeftArea {
    return _lib._objc_msgSend_156(_id, _lib._sel_auxiliaryTopLeftArea1);
  }

  CGRect get auxiliaryTopRightArea {
    return _lib._objc_msgSend_156(_id, _lib._sel_auxiliaryTopRightArea1);
  }

  /// Returns the current maximum color component value for the screen. Typically the maximum is 1.0, but if any rendering context on the screen has requested extended dynamic range, it may return a value greater than 1.0, depending on system capabilities and other conditions. Only rendering contexts that support extended dynamic range can use values greater than 1.0. When the value changes, NSApplicationDidChangeScreenParametersNotification will be posted.
  double get maximumExtendedDynamicRangeColorComponentValue {
    return _lib._objc_msgSend_187(
        _id, _lib._sel_maximumExtendedDynamicRangeColorComponentValue1);
  }

  /// Returns the maximum color component value that the screen is capable of when extended dynamic range is enabled, regardless of whether or not extended dynamic range is currently enabled.
  double get maximumPotentialExtendedDynamicRangeColorComponentValue {
    return _lib._objc_msgSend_187(_id,
        _lib._sel_maximumPotentialExtendedDynamicRangeColorComponentValue1);
  }

  /// Returns the current maximum color component value for reference rendering to the screen. If values beyond this are used, the display hardware may adjust content to fit into its dynamic range. For screens that do not support reference rendering, this will return 0.
  double get maximumReferenceExtendedDynamicRangeColorComponentValue {
    return _lib._objc_msgSend_187(_id,
        _lib._sel_maximumReferenceExtendedDynamicRangeColorComponentValue1);
  }

  /// The maximum frames per second this screen supports.
  int get maximumFramesPerSecond {
    return _lib._objc_msgSend_190(_id, _lib._sel_maximumFramesPerSecond1);
  }

  /// The minimum refresh interval this screen supports, in seconds.
  ///
  /// This is the shortest amount of time a frame will be present on screen.
  /// minimumRefreshInterval and maximumRefreshInterval will be the same for displays that do not support variable refresh rates.
  double get minimumRefreshInterval {
    return _lib._objc_msgSend_187(_id, _lib._sel_minimumRefreshInterval1);
  }

  /// The maximum refresh interval this screen supports, in seconds.
  ///
  /// minimumRefreshInterval and maximumRefreshInterval will be the same for displays that do not support variable refresh rates.
  double get maximumRefreshInterval {
    return _lib._objc_msgSend_187(_id, _lib._sel_maximumRefreshInterval1);
  }

  /// The update granularity of the screen's current mode, in seconds.
  ///
  /// The display will update at the next boundary defined by the granularity, after the minimum refresh interval has been reached. When 0, the display can update at any time between the minimum and maximum refresh rate intervals of the screen. Fixed refresh rate screen modes will return the refresh interval as the update granularity (e.g. 16.66ms for 60Hz refresh rates), meaning updates only occur at refresh rate boundaries.
  double get displayUpdateGranularity {
    return _lib._objc_msgSend_187(_id, _lib._sel_displayUpdateGranularity1);
  }

  /// The time at which the last framebuffer update occurred on the display, in seconds since startup that the system has been awake.
  double get lastDisplayUpdateTimestamp {
    return _lib._objc_msgSend_187(_id, _lib._sel_lastDisplayUpdateTimestamp1);
  }

  /// This method is deprecated and should not be used by applications targeting Mac OS X 10.7 or later.
  /// The implementation of this method will always return 1.0.  Please use -convertRectToBacking: or -backingScaleFactor instead.
  double userSpaceScaleFactor() {
    return _lib._objc_msgSend_187(_id, _lib._sel_userSpaceScaleFactor1);
  }

  static NSScreen new1(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScreen1, _lib._sel_new1);
    return NSScreen._(_ret, _lib, retain: false, release: true);
  }

  static NSScreen alloc(NativeMacOsFramework _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScreen1, _lib._sel_alloc1);
    return NSScreen._(_ret, _lib, retain: false, release: true);
  }
}

abstract class NSWindowDepth {
  static const int NSWindowDepthTwentyfourBitRGB = 520;
  static const int NSWindowDepthSixtyfourBitRGB = 528;
  static const int NSWindowDepthOnehundredtwentyeightBitRGB = 544;
}

class NSColorSpace extends _ObjCWrapper {
  NSColorSpace._(ffi.Pointer<ObjCObject> id, NativeMacOsFramework lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSColorSpace] that points to the same underlying object as [other].
  static NSColorSpace castFrom<T extends _ObjCWrapper>(T other) {
    return NSColorSpace._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSColorSpace] that wraps the given raw object pointer.
  static NSColorSpace castFromPointer(
      NativeMacOsFramework lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSColorSpace._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSColorSpace].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSColorSpace1);
  }
}

abstract class NSDisplayGamut {
  static const int NSDisplayGamutSRGB = 1;
  static const int NSDisplayGamutP3 = 2;
}

abstract class NSAlignmentOptions {
  static const int NSAlignMinXInward = 1;
  static const int NSAlignMinYInward = 2;
  static const int NSAlignMaxXInward = 4;
  static const int NSAlignMaxYInward = 8;
  static const int NSAlignWidthInward = 16;
  static const int NSAlignHeightInward = 32;
  static const int NSAlignMinXOutward = 256;
  static const int NSAlignMinYOutward = 512;
  static const int NSAlignMaxXOutward = 1024;
  static const int NSAlignMaxYOutward = 2048;
  static const int NSAlignWidthOutward = 4096;
  static const int NSAlignHeightOutward = 8192;
  static const int NSAlignMinXNearest = 65536;
  static const int NSAlignMinYNearest = 131072;
  static const int NSAlignMaxXNearest = 262144;
  static const int NSAlignMaxYNearest = 524288;
  static const int NSAlignWidthNearest = 1048576;
  static const int NSAlignHeightNearest = 2097152;
  static const int NSAlignRectFlipped = -9223372036854775808;
  static const int NSAlignAllEdgesInward = 15;
  static const int NSAlignAllEdgesOutward = 3840;
  static const int NSAlignAllEdgesNearest = 983040;
}

typedef CFTypeRef1 = ffi.Pointer<ffi.Void>;

const String kIOPlatformUUIDKey = 'IOPlatformUUID';
