// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v7.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.amazonaws.amplify.amplify_auth_cognito;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class NativeAuthPluginBindingsPigeon {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NativeAuthSession {
    private @NonNull Boolean isSignedIn;

    public @NonNull Boolean getIsSignedIn() {
      return isSignedIn;
    }

    public void setIsSignedIn(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isSignedIn\" is null.");
      }
      this.isSignedIn = setterArg;
    }

    private @Nullable String userSub;

    public @Nullable String getUserSub() {
      return userSub;
    }

    public void setUserSub(@Nullable String setterArg) {
      this.userSub = setterArg;
    }

    private @Nullable NativeUserPoolTokens userPoolTokens;

    public @Nullable NativeUserPoolTokens getUserPoolTokens() {
      return userPoolTokens;
    }

    public void setUserPoolTokens(@Nullable NativeUserPoolTokens setterArg) {
      this.userPoolTokens = setterArg;
    }

    private @Nullable String identityId;

    public @Nullable String getIdentityId() {
      return identityId;
    }

    public void setIdentityId(@Nullable String setterArg) {
      this.identityId = setterArg;
    }

    private @Nullable NativeAWSCredentials awsCredentials;

    public @Nullable NativeAWSCredentials getAwsCredentials() {
      return awsCredentials;
    }

    public void setAwsCredentials(@Nullable NativeAWSCredentials setterArg) {
      this.awsCredentials = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeAuthSession() {}

    public static final class Builder {

      private @Nullable Boolean isSignedIn;

      public @NonNull Builder setIsSignedIn(@NonNull Boolean setterArg) {
        this.isSignedIn = setterArg;
        return this;
      }

      private @Nullable String userSub;

      public @NonNull Builder setUserSub(@Nullable String setterArg) {
        this.userSub = setterArg;
        return this;
      }

      private @Nullable NativeUserPoolTokens userPoolTokens;

      public @NonNull Builder setUserPoolTokens(@Nullable NativeUserPoolTokens setterArg) {
        this.userPoolTokens = setterArg;
        return this;
      }

      private @Nullable String identityId;

      public @NonNull Builder setIdentityId(@Nullable String setterArg) {
        this.identityId = setterArg;
        return this;
      }

      private @Nullable NativeAWSCredentials awsCredentials;

      public @NonNull Builder setAwsCredentials(@Nullable NativeAWSCredentials setterArg) {
        this.awsCredentials = setterArg;
        return this;
      }

      public @NonNull NativeAuthSession build() {
        NativeAuthSession pigeonReturn = new NativeAuthSession();
        pigeonReturn.setIsSignedIn(isSignedIn);
        pigeonReturn.setUserSub(userSub);
        pigeonReturn.setUserPoolTokens(userPoolTokens);
        pigeonReturn.setIdentityId(identityId);
        pigeonReturn.setAwsCredentials(awsCredentials);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(isSignedIn);
      toListResult.add(userSub);
      toListResult.add((userPoolTokens == null) ? null : userPoolTokens.toList());
      toListResult.add(identityId);
      toListResult.add((awsCredentials == null) ? null : awsCredentials.toList());
      return toListResult;
    }

    static @NonNull NativeAuthSession fromList(@NonNull ArrayList<Object> list) {
      NativeAuthSession pigeonResult = new NativeAuthSession();
      Object isSignedIn = list.get(0);
      pigeonResult.setIsSignedIn((Boolean) isSignedIn);
      Object userSub = list.get(1);
      pigeonResult.setUserSub((String) userSub);
      Object userPoolTokens = list.get(2);
      pigeonResult.setUserPoolTokens((userPoolTokens == null) ? null : NativeUserPoolTokens.fromList((ArrayList<Object>) userPoolTokens));
      Object identityId = list.get(3);
      pigeonResult.setIdentityId((String) identityId);
      Object awsCredentials = list.get(4);
      pigeonResult.setAwsCredentials((awsCredentials == null) ? null : NativeAWSCredentials.fromList((ArrayList<Object>) awsCredentials));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NativeAuthUser {
    private @NonNull String userId;

    public @NonNull String getUserId() {
      return userId;
    }

    public void setUserId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userId\" is null.");
      }
      this.userId = setterArg;
    }

    private @NonNull String username;

    public @NonNull String getUsername() {
      return username;
    }

    public void setUsername(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"username\" is null.");
      }
      this.username = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeAuthUser() {}

    public static final class Builder {

      private @Nullable String userId;

      public @NonNull Builder setUserId(@NonNull String setterArg) {
        this.userId = setterArg;
        return this;
      }

      private @Nullable String username;

      public @NonNull Builder setUsername(@NonNull String setterArg) {
        this.username = setterArg;
        return this;
      }

      public @NonNull NativeAuthUser build() {
        NativeAuthUser pigeonReturn = new NativeAuthUser();
        pigeonReturn.setUserId(userId);
        pigeonReturn.setUsername(username);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(userId);
      toListResult.add(username);
      return toListResult;
    }

    static @NonNull NativeAuthUser fromList(@NonNull ArrayList<Object> list) {
      NativeAuthUser pigeonResult = new NativeAuthUser();
      Object userId = list.get(0);
      pigeonResult.setUserId((String) userId);
      Object username = list.get(1);
      pigeonResult.setUsername((String) username);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NativeUserPoolTokens {
    private @NonNull String accessToken;

    public @NonNull String getAccessToken() {
      return accessToken;
    }

    public void setAccessToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessToken\" is null.");
      }
      this.accessToken = setterArg;
    }

    private @NonNull String refreshToken;

    public @NonNull String getRefreshToken() {
      return refreshToken;
    }

    public void setRefreshToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"refreshToken\" is null.");
      }
      this.refreshToken = setterArg;
    }

    private @NonNull String idToken;

    public @NonNull String getIdToken() {
      return idToken;
    }

    public void setIdToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"idToken\" is null.");
      }
      this.idToken = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeUserPoolTokens() {}

    public static final class Builder {

      private @Nullable String accessToken;

      public @NonNull Builder setAccessToken(@NonNull String setterArg) {
        this.accessToken = setterArg;
        return this;
      }

      private @Nullable String refreshToken;

      public @NonNull Builder setRefreshToken(@NonNull String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }

      private @Nullable String idToken;

      public @NonNull Builder setIdToken(@NonNull String setterArg) {
        this.idToken = setterArg;
        return this;
      }

      public @NonNull NativeUserPoolTokens build() {
        NativeUserPoolTokens pigeonReturn = new NativeUserPoolTokens();
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setIdToken(idToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(accessToken);
      toListResult.add(refreshToken);
      toListResult.add(idToken);
      return toListResult;
    }

    static @NonNull NativeUserPoolTokens fromList(@NonNull ArrayList<Object> list) {
      NativeUserPoolTokens pigeonResult = new NativeUserPoolTokens();
      Object accessToken = list.get(0);
      pigeonResult.setAccessToken((String) accessToken);
      Object refreshToken = list.get(1);
      pigeonResult.setRefreshToken((String) refreshToken);
      Object idToken = list.get(2);
      pigeonResult.setIdToken((String) idToken);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NativeAWSCredentials {
    private @NonNull String accessKeyId;

    public @NonNull String getAccessKeyId() {
      return accessKeyId;
    }

    public void setAccessKeyId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessKeyId\" is null.");
      }
      this.accessKeyId = setterArg;
    }

    private @NonNull String secretAccessKey;

    public @NonNull String getSecretAccessKey() {
      return secretAccessKey;
    }

    public void setSecretAccessKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"secretAccessKey\" is null.");
      }
      this.secretAccessKey = setterArg;
    }

    private @Nullable String sessionToken;

    public @Nullable String getSessionToken() {
      return sessionToken;
    }

    public void setSessionToken(@Nullable String setterArg) {
      this.sessionToken = setterArg;
    }

    private @Nullable String expirationIso8601Utc;

    public @Nullable String getExpirationIso8601Utc() {
      return expirationIso8601Utc;
    }

    public void setExpirationIso8601Utc(@Nullable String setterArg) {
      this.expirationIso8601Utc = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeAWSCredentials() {}

    public static final class Builder {

      private @Nullable String accessKeyId;

      public @NonNull Builder setAccessKeyId(@NonNull String setterArg) {
        this.accessKeyId = setterArg;
        return this;
      }

      private @Nullable String secretAccessKey;

      public @NonNull Builder setSecretAccessKey(@NonNull String setterArg) {
        this.secretAccessKey = setterArg;
        return this;
      }

      private @Nullable String sessionToken;

      public @NonNull Builder setSessionToken(@Nullable String setterArg) {
        this.sessionToken = setterArg;
        return this;
      }

      private @Nullable String expirationIso8601Utc;

      public @NonNull Builder setExpirationIso8601Utc(@Nullable String setterArg) {
        this.expirationIso8601Utc = setterArg;
        return this;
      }

      public @NonNull NativeAWSCredentials build() {
        NativeAWSCredentials pigeonReturn = new NativeAWSCredentials();
        pigeonReturn.setAccessKeyId(accessKeyId);
        pigeonReturn.setSecretAccessKey(secretAccessKey);
        pigeonReturn.setSessionToken(sessionToken);
        pigeonReturn.setExpirationIso8601Utc(expirationIso8601Utc);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(accessKeyId);
      toListResult.add(secretAccessKey);
      toListResult.add(sessionToken);
      toListResult.add(expirationIso8601Utc);
      return toListResult;
    }

    static @NonNull NativeAWSCredentials fromList(@NonNull ArrayList<Object> list) {
      NativeAWSCredentials pigeonResult = new NativeAWSCredentials();
      Object accessKeyId = list.get(0);
      pigeonResult.setAccessKeyId((String) accessKeyId);
      Object secretAccessKey = list.get(1);
      pigeonResult.setSecretAccessKey((String) secretAccessKey);
      Object sessionToken = list.get(2);
      pigeonResult.setSessionToken((String) sessionToken);
      Object expirationIso8601Utc = list.get(3);
      pigeonResult.setExpirationIso8601Utc((String) expirationIso8601Utc);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LegacyCredentialStoreData {
    private @Nullable String identityId;

    public @Nullable String getIdentityId() {
      return identityId;
    }

    public void setIdentityId(@Nullable String setterArg) {
      this.identityId = setterArg;
    }

    private @Nullable String accessKeyId;

    public @Nullable String getAccessKeyId() {
      return accessKeyId;
    }

    public void setAccessKeyId(@Nullable String setterArg) {
      this.accessKeyId = setterArg;
    }

    private @Nullable String secretAccessKey;

    public @Nullable String getSecretAccessKey() {
      return secretAccessKey;
    }

    public void setSecretAccessKey(@Nullable String setterArg) {
      this.secretAccessKey = setterArg;
    }

    private @Nullable String sessionToken;

    public @Nullable String getSessionToken() {
      return sessionToken;
    }

    public void setSessionToken(@Nullable String setterArg) {
      this.sessionToken = setterArg;
    }

    private @Nullable Long expirationMsSinceEpoch;

    public @Nullable Long getExpirationMsSinceEpoch() {
      return expirationMsSinceEpoch;
    }

    public void setExpirationMsSinceEpoch(@Nullable Long setterArg) {
      this.expirationMsSinceEpoch = setterArg;
    }

    private @Nullable String accessToken;

    public @Nullable String getAccessToken() {
      return accessToken;
    }

    public void setAccessToken(@Nullable String setterArg) {
      this.accessToken = setterArg;
    }

    private @Nullable String refreshToken;

    public @Nullable String getRefreshToken() {
      return refreshToken;
    }

    public void setRefreshToken(@Nullable String setterArg) {
      this.refreshToken = setterArg;
    }

    private @Nullable String idToken;

    public @Nullable String getIdToken() {
      return idToken;
    }

    public void setIdToken(@Nullable String setterArg) {
      this.idToken = setterArg;
    }

    public static final class Builder {

      private @Nullable String identityId;

      public @NonNull Builder setIdentityId(@Nullable String setterArg) {
        this.identityId = setterArg;
        return this;
      }

      private @Nullable String accessKeyId;

      public @NonNull Builder setAccessKeyId(@Nullable String setterArg) {
        this.accessKeyId = setterArg;
        return this;
      }

      private @Nullable String secretAccessKey;

      public @NonNull Builder setSecretAccessKey(@Nullable String setterArg) {
        this.secretAccessKey = setterArg;
        return this;
      }

      private @Nullable String sessionToken;

      public @NonNull Builder setSessionToken(@Nullable String setterArg) {
        this.sessionToken = setterArg;
        return this;
      }

      private @Nullable Long expirationMsSinceEpoch;

      public @NonNull Builder setExpirationMsSinceEpoch(@Nullable Long setterArg) {
        this.expirationMsSinceEpoch = setterArg;
        return this;
      }

      private @Nullable String accessToken;

      public @NonNull Builder setAccessToken(@Nullable String setterArg) {
        this.accessToken = setterArg;
        return this;
      }

      private @Nullable String refreshToken;

      public @NonNull Builder setRefreshToken(@Nullable String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }

      private @Nullable String idToken;

      public @NonNull Builder setIdToken(@Nullable String setterArg) {
        this.idToken = setterArg;
        return this;
      }

      public @NonNull LegacyCredentialStoreData build() {
        LegacyCredentialStoreData pigeonReturn = new LegacyCredentialStoreData();
        pigeonReturn.setIdentityId(identityId);
        pigeonReturn.setAccessKeyId(accessKeyId);
        pigeonReturn.setSecretAccessKey(secretAccessKey);
        pigeonReturn.setSessionToken(sessionToken);
        pigeonReturn.setExpirationMsSinceEpoch(expirationMsSinceEpoch);
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setIdToken(idToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(identityId);
      toListResult.add(accessKeyId);
      toListResult.add(secretAccessKey);
      toListResult.add(sessionToken);
      toListResult.add(expirationMsSinceEpoch);
      toListResult.add(accessToken);
      toListResult.add(refreshToken);
      toListResult.add(idToken);
      return toListResult;
    }

    static @NonNull LegacyCredentialStoreData fromList(@NonNull ArrayList<Object> list) {
      LegacyCredentialStoreData pigeonResult = new LegacyCredentialStoreData();
      Object identityId = list.get(0);
      pigeonResult.setIdentityId((String) identityId);
      Object accessKeyId = list.get(1);
      pigeonResult.setAccessKeyId((String) accessKeyId);
      Object secretAccessKey = list.get(2);
      pigeonResult.setSecretAccessKey((String) secretAccessKey);
      Object sessionToken = list.get(3);
      pigeonResult.setSessionToken((String) sessionToken);
      Object expirationMsSinceEpoch = list.get(4);
      pigeonResult.setExpirationMsSinceEpoch((expirationMsSinceEpoch == null) ? null : ((expirationMsSinceEpoch instanceof Integer) ? (Integer) expirationMsSinceEpoch : (Long) expirationMsSinceEpoch));
      Object accessToken = list.get(5);
      pigeonResult.setAccessToken((String) accessToken);
      Object refreshToken = list.get(6);
      pigeonResult.setRefreshToken((String) refreshToken);
      Object idToken = list.get(7);
      pigeonResult.setIdToken((String) idToken);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);

    void error(Throwable error);
  }

  private static class NativeAuthPluginCodec extends StandardMessageCodec {
    public static final NativeAuthPluginCodec INSTANCE = new NativeAuthPluginCodec();

    private NativeAuthPluginCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return NativeAWSCredentials.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return NativeAuthSession.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return NativeUserPoolTokens.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof NativeAWSCredentials) {
        stream.write(128);
        writeValue(stream, ((NativeAWSCredentials) value).toList());
      } else if (value instanceof NativeAuthSession) {
        stream.write(129);
        writeValue(stream, ((NativeAuthSession) value).toList());
      } else if (value instanceof NativeUserPoolTokens) {
        stream.write(130);
        writeValue(stream, ((NativeUserPoolTokens) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static final class NativeAuthPlugin {
    private final BinaryMessenger binaryMessenger;

    public NativeAuthPlugin(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by NativeAuthPlugin. */
    static MessageCodec<Object> getCodec() {
      return NativeAuthPluginCodec.INSTANCE;
    }
    /**
     * Exchanges the route parameters used to launch the app, i.e. if the app
     * was closed and a redirect happened to the custom URI scheme (iOS) or an
     * intent was launched with the redirect parameters (Android).
     */
    public void exchange(@NonNull Map<String, String> paramsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NativeAuthPlugin.exchange", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(paramsArg)),
          channelReply -> callback.reply(null));
    }
    public void fetchAuthSession(Reply<NativeAuthSession> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NativeAuthPlugin.fetchAuthSession", getCodec());
      channel.send(
          null,
          channelReply -> {
            @SuppressWarnings("ConstantConditions")
            NativeAuthSession output = (NativeAuthSession) channelReply;
            callback.reply(output);
          });
    }
  }

  private static class NativeAuthBridgeCodec extends StandardMessageCodec {
    public static final NativeAuthBridgeCodec INSTANCE = new NativeAuthBridgeCodec();

    private NativeAuthBridgeCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return LegacyCredentialStoreData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return NativeAuthUser.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof LegacyCredentialStoreData) {
        stream.write(128);
        writeValue(stream, ((LegacyCredentialStoreData) value).toList());
      } else if (value instanceof NativeAuthUser) {
        stream.write(129);
        writeValue(stream, ((NativeAuthUser) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NativeAuthBridge {
    /**
     * Adds the native platform/plugin.
     *
     * On iOS/Android, this calls `Amplify.addPlugin` with the [NativeAuthPlugin]
     * implementation.
     */
    void addPlugin(Result<Void> result);
    /**
     * Sign in by presenting [url] and waiting for a response to a URL with
     * [callbackUrlScheme].
     *
     * If [preferPrivateSession] is `true`, do not persist session cookies.
     */
    void signInWithUrl(@NonNull String url, @NonNull String callbackUrlScheme, @NonNull Boolean preferPrivateSession, @Nullable String browserPackageName, Result<Map<String, String>> result);
    /**
     * Sign out by presenting [url] and waiting for a response to a URL with
     * [callbackUrlScheme].
     */
    void signOutWithUrl(@NonNull String url, @NonNull String callbackUrlScheme, @NonNull Boolean preferPrivateSession, @Nullable String browserPackageName, Result<Void> result);
    /** Retrieves the validation data for the current iOS/Android device. */
    @NonNull 
    Map<String, String> getValidationData();

    @NonNull 
    String getBundleId();
    /** Updates the native cache of the current user. */
    void updateCurrentUser(@Nullable NativeAuthUser user);
    /** Fetch legacy credentials stored by native SDKs. */
    void getLegacyCredentials(@Nullable String identityPoolId, @Nullable String appClientId, Result<LegacyCredentialStoreData> result);
    /** Clears the legacy credential store data. */
    void clearLegacyCredentials(Result<Void> result);

    /** The codec used by NativeAuthBridge. */
    static MessageCodec<Object> getCodec() {
      return NativeAuthBridgeCodec.INSTANCE;
    }
    /**Sets up an instance of `NativeAuthBridge` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NativeAuthBridge api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.addPlugin", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.addPlugin(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.signInWithUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String urlArg = (String) args.get(0);
                  if (urlArg == null) {
                    throw new NullPointerException("urlArg unexpectedly null.");
                  }
                  String callbackUrlSchemeArg = (String) args.get(1);
                  if (callbackUrlSchemeArg == null) {
                    throw new NullPointerException("callbackUrlSchemeArg unexpectedly null.");
                  }
                  Boolean preferPrivateSessionArg = (Boolean) args.get(2);
                  if (preferPrivateSessionArg == null) {
                    throw new NullPointerException("preferPrivateSessionArg unexpectedly null.");
                  }
                  String browserPackageNameArg = (String) args.get(3);
                  Result<Map<String, String>> resultCallback = 
                      new Result<Map<String, String>>() {
                        public void success(Map<String, String> result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.signInWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.signOutWithUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String urlArg = (String) args.get(0);
                  if (urlArg == null) {
                    throw new NullPointerException("urlArg unexpectedly null.");
                  }
                  String callbackUrlSchemeArg = (String) args.get(1);
                  if (callbackUrlSchemeArg == null) {
                    throw new NullPointerException("callbackUrlSchemeArg unexpectedly null.");
                  }
                  Boolean preferPrivateSessionArg = (Boolean) args.get(2);
                  if (preferPrivateSessionArg == null) {
                    throw new NullPointerException("preferPrivateSessionArg unexpectedly null.");
                  }
                  String browserPackageNameArg = (String) args.get(3);
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.signOutWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getValidationData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Map<String, String> output = api.getValidationData();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getBundleId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getBundleId();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.updateCurrentUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  NativeAuthUser userArg = (NativeAuthUser) args.get(0);
                  api.updateCurrentUser(userArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getLegacyCredentials", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String identityPoolIdArg = (String) args.get(0);
                  String appClientIdArg = (String) args.get(1);
                  Result<LegacyCredentialStoreData> resultCallback = 
                      new Result<LegacyCredentialStoreData>() {
                        public void success(LegacyCredentialStoreData result) {
                          wrapped.add(0, result);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.getLegacyCredentials(identityPoolIdArg, appClientIdArg, resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.clearLegacyCredentials", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Result<Void> resultCallback = 
                      new Result<Void>() {
                        public void success(Void result) {
                          wrapped.add(0, null);
                          reply.reply(wrapped);
                        }

                        public void error(Throwable error) {
                          ArrayList<Object> wrappedError = wrapError(error);
                          reply.reply(wrappedError);
                        }
                      };

                  api.clearLegacyCredentials(resultCallback);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  reply.reply(wrappedError);
                }
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
