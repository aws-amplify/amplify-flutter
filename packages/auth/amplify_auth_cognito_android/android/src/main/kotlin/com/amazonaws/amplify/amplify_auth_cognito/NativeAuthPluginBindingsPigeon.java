// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.amazonaws.amplify.amplify_auth_cognito;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class NativeAuthPluginBindingsPigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LegacyCredentialStoreData {
    private @Nullable String identityId;

    public @Nullable String getIdentityId() {
      return identityId;
    }

    public void setIdentityId(@Nullable String setterArg) {
      this.identityId = setterArg;
    }

    private @Nullable String accessKeyId;

    public @Nullable String getAccessKeyId() {
      return accessKeyId;
    }

    public void setAccessKeyId(@Nullable String setterArg) {
      this.accessKeyId = setterArg;
    }

    private @Nullable String secretAccessKey;

    public @Nullable String getSecretAccessKey() {
      return secretAccessKey;
    }

    public void setSecretAccessKey(@Nullable String setterArg) {
      this.secretAccessKey = setterArg;
    }

    private @Nullable String sessionToken;

    public @Nullable String getSessionToken() {
      return sessionToken;
    }

    public void setSessionToken(@Nullable String setterArg) {
      this.sessionToken = setterArg;
    }

    private @Nullable Long expirationMsSinceEpoch;

    public @Nullable Long getExpirationMsSinceEpoch() {
      return expirationMsSinceEpoch;
    }

    public void setExpirationMsSinceEpoch(@Nullable Long setterArg) {
      this.expirationMsSinceEpoch = setterArg;
    }

    private @Nullable String accessToken;

    public @Nullable String getAccessToken() {
      return accessToken;
    }

    public void setAccessToken(@Nullable String setterArg) {
      this.accessToken = setterArg;
    }

    private @Nullable String refreshToken;

    public @Nullable String getRefreshToken() {
      return refreshToken;
    }

    public void setRefreshToken(@Nullable String setterArg) {
      this.refreshToken = setterArg;
    }

    private @Nullable String idToken;

    public @Nullable String getIdToken() {
      return idToken;
    }

    public void setIdToken(@Nullable String setterArg) {
      this.idToken = setterArg;
    }

    public static final class Builder {

      private @Nullable String identityId;

      public @NonNull Builder setIdentityId(@Nullable String setterArg) {
        this.identityId = setterArg;
        return this;
      }

      private @Nullable String accessKeyId;

      public @NonNull Builder setAccessKeyId(@Nullable String setterArg) {
        this.accessKeyId = setterArg;
        return this;
      }

      private @Nullable String secretAccessKey;

      public @NonNull Builder setSecretAccessKey(@Nullable String setterArg) {
        this.secretAccessKey = setterArg;
        return this;
      }

      private @Nullable String sessionToken;

      public @NonNull Builder setSessionToken(@Nullable String setterArg) {
        this.sessionToken = setterArg;
        return this;
      }

      private @Nullable Long expirationMsSinceEpoch;

      public @NonNull Builder setExpirationMsSinceEpoch(@Nullable Long setterArg) {
        this.expirationMsSinceEpoch = setterArg;
        return this;
      }

      private @Nullable String accessToken;

      public @NonNull Builder setAccessToken(@Nullable String setterArg) {
        this.accessToken = setterArg;
        return this;
      }

      private @Nullable String refreshToken;

      public @NonNull Builder setRefreshToken(@Nullable String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }

      private @Nullable String idToken;

      public @NonNull Builder setIdToken(@Nullable String setterArg) {
        this.idToken = setterArg;
        return this;
      }

      public @NonNull LegacyCredentialStoreData build() {
        LegacyCredentialStoreData pigeonReturn = new LegacyCredentialStoreData();
        pigeonReturn.setIdentityId(identityId);
        pigeonReturn.setAccessKeyId(accessKeyId);
        pigeonReturn.setSecretAccessKey(secretAccessKey);
        pigeonReturn.setSessionToken(sessionToken);
        pigeonReturn.setExpirationMsSinceEpoch(expirationMsSinceEpoch);
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setIdToken(idToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(identityId);
      toListResult.add(accessKeyId);
      toListResult.add(secretAccessKey);
      toListResult.add(sessionToken);
      toListResult.add(expirationMsSinceEpoch);
      toListResult.add(accessToken);
      toListResult.add(refreshToken);
      toListResult.add(idToken);
      return toListResult;
    }

    static @NonNull LegacyCredentialStoreData fromList(@NonNull ArrayList<Object> list) {
      LegacyCredentialStoreData pigeonResult = new LegacyCredentialStoreData();
      Object identityId = list.get(0);
      pigeonResult.setIdentityId((String) identityId);
      Object accessKeyId = list.get(1);
      pigeonResult.setAccessKeyId((String) accessKeyId);
      Object secretAccessKey = list.get(2);
      pigeonResult.setSecretAccessKey((String) secretAccessKey);
      Object sessionToken = list.get(3);
      pigeonResult.setSessionToken((String) sessionToken);
      Object expirationMsSinceEpoch = list.get(4);
      pigeonResult.setExpirationMsSinceEpoch((expirationMsSinceEpoch == null) ? null : ((expirationMsSinceEpoch instanceof Integer) ? (Integer) expirationMsSinceEpoch : (Long) expirationMsSinceEpoch));
      Object accessToken = list.get(5);
      pigeonResult.setAccessToken((String) accessToken);
      Object refreshToken = list.get(6);
      pigeonResult.setRefreshToken((String) refreshToken);
      Object idToken = list.get(7);
      pigeonResult.setIdToken((String) idToken);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class NativeAuthPlugin {
    private final @NonNull BinaryMessenger binaryMessenger;

    public NativeAuthPlugin(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by NativeAuthPlugin. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**
     * Exchanges the route parameters used to launch the app, i.e. if the app
     * was closed and a redirect happened to the custom URI scheme (iOS) or an
     * intent was launched with the redirect parameters (Android).
     */
    public void exchange(@NonNull Map<String, String> paramsArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.NativeAuthPlugin.exchange", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(paramsArg)),
          channelReply -> callback.reply(null));
    }
  }

  private static class NativeAuthBridgeCodec extends StandardMessageCodec {
    public static final NativeAuthBridgeCodec INSTANCE = new NativeAuthBridgeCodec();

    private NativeAuthBridgeCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return LegacyCredentialStoreData.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof LegacyCredentialStoreData) {
        stream.write(128);
        writeValue(stream, ((LegacyCredentialStoreData) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NativeAuthBridge {
    /**
     * Sign in by presenting [url] and waiting for a response to a URL with
     * [callbackUrlScheme].
     *
     * If [preferPrivateSession] is `true`, do not persist session cookies.
     */
    void signInWithUrl(@NonNull String url, @NonNull String callbackUrlScheme, @NonNull Boolean preferPrivateSession, @Nullable String browserPackageName, @NonNull Result<Map<String, String>> result);
    /**
     * Sign out by presenting [url] and waiting for a response to a URL with
     * [callbackUrlScheme].
     */
    void signOutWithUrl(@NonNull String url, @NonNull String callbackUrlScheme, @NonNull Boolean preferPrivateSession, @Nullable String browserPackageName, @NonNull Result<Void> result);
    /** Retrieves the validation data for the current iOS/Android device. */
    @NonNull 
    Map<String, String> getValidationData();

    @NonNull 
    String getBundleId();
    /** Fetch legacy credentials stored by native SDKs. */
    void getLegacyCredentials(@Nullable String identityPoolId, @Nullable String appClientId, @NonNull Result<LegacyCredentialStoreData> result);
    /** Clears the legacy credential store data. */
    void clearLegacyCredentials(@NonNull Result<Void> result);

    /** The codec used by NativeAuthBridge. */
    static @NonNull MessageCodec<Object> getCodec() {
      return NativeAuthBridgeCodec.INSTANCE;
    }
    /**Sets up an instance of `NativeAuthBridge` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable NativeAuthBridge api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.signInWithUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String urlArg = (String) args.get(0);
                String callbackUrlSchemeArg = (String) args.get(1);
                Boolean preferPrivateSessionArg = (Boolean) args.get(2);
                String browserPackageNameArg = (String) args.get(3);
                Result<Map<String, String>> resultCallback =
                    new Result<Map<String, String>>() {
                      public void success(Map<String, String> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signInWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.signOutWithUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String urlArg = (String) args.get(0);
                String callbackUrlSchemeArg = (String) args.get(1);
                Boolean preferPrivateSessionArg = (Boolean) args.get(2);
                String browserPackageNameArg = (String) args.get(3);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signOutWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getValidationData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Map<String, String> output = api.getValidationData();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getBundleId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getBundleId();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getLegacyCredentials", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String identityPoolIdArg = (String) args.get(0);
                String appClientIdArg = (String) args.get(1);
                Result<LegacyCredentialStoreData> resultCallback =
                    new Result<LegacyCredentialStoreData>() {
                      public void success(LegacyCredentialStoreData result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getLegacyCredentials(identityPoolIdArg, appClientIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.clearLegacyCredentials", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.clearLegacyCredentials(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
