// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.amazonaws.amplify.amplify_auth_cognito;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class NativeAuthPluginBindingsPigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NativeAuthSession {
    private @NonNull Boolean isSignedIn;
    public @NonNull Boolean getIsSignedIn() { return isSignedIn; }
    public void setIsSignedIn(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isSignedIn\" is null.");
      }
      this.isSignedIn = setterArg;
    }

    private @Nullable String userSub;
    public @Nullable String getUserSub() { return userSub; }
    public void setUserSub(@Nullable String setterArg) {
      this.userSub = setterArg;
    }

    private @Nullable NativeUserPoolTokens userPoolTokens;
    public @Nullable NativeUserPoolTokens getUserPoolTokens() { return userPoolTokens; }
    public void setUserPoolTokens(@Nullable NativeUserPoolTokens setterArg) {
      this.userPoolTokens = setterArg;
    }

    private @Nullable String identityId;
    public @Nullable String getIdentityId() { return identityId; }
    public void setIdentityId(@Nullable String setterArg) {
      this.identityId = setterArg;
    }

    private @Nullable NativeAWSCredentials awsCredentials;
    public @Nullable NativeAWSCredentials getAwsCredentials() { return awsCredentials; }
    public void setAwsCredentials(@Nullable NativeAWSCredentials setterArg) {
      this.awsCredentials = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeAuthSession() {}
    public static final class Builder {
      private @Nullable Boolean isSignedIn;
      public @NonNull Builder setIsSignedIn(@NonNull Boolean setterArg) {
        this.isSignedIn = setterArg;
        return this;
      }
      private @Nullable String userSub;
      public @NonNull Builder setUserSub(@Nullable String setterArg) {
        this.userSub = setterArg;
        return this;
      }
      private @Nullable NativeUserPoolTokens userPoolTokens;
      public @NonNull Builder setUserPoolTokens(@Nullable NativeUserPoolTokens setterArg) {
        this.userPoolTokens = setterArg;
        return this;
      }
      private @Nullable String identityId;
      public @NonNull Builder setIdentityId(@Nullable String setterArg) {
        this.identityId = setterArg;
        return this;
      }
      private @Nullable NativeAWSCredentials awsCredentials;
      public @NonNull Builder setAwsCredentials(@Nullable NativeAWSCredentials setterArg) {
        this.awsCredentials = setterArg;
        return this;
      }
      public @NonNull NativeAuthSession build() {
        NativeAuthSession pigeonReturn = new NativeAuthSession();
        pigeonReturn.setIsSignedIn(isSignedIn);
        pigeonReturn.setUserSub(userSub);
        pigeonReturn.setUserPoolTokens(userPoolTokens);
        pigeonReturn.setIdentityId(identityId);
        pigeonReturn.setAwsCredentials(awsCredentials);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isSignedIn", isSignedIn);
      toMapResult.put("userSub", userSub);
      toMapResult.put("userPoolTokens", (userPoolTokens == null) ? null : userPoolTokens.toMap());
      toMapResult.put("identityId", identityId);
      toMapResult.put("awsCredentials", (awsCredentials == null) ? null : awsCredentials.toMap());
      return toMapResult;
    }
    static @NonNull NativeAuthSession fromMap(@NonNull Map<String, Object> map) {
      NativeAuthSession pigeonResult = new NativeAuthSession();
      Object isSignedIn = map.get("isSignedIn");
      pigeonResult.setIsSignedIn((Boolean)isSignedIn);
      Object userSub = map.get("userSub");
      pigeonResult.setUserSub((String)userSub);
      Object userPoolTokens = map.get("userPoolTokens");
      pigeonResult.setUserPoolTokens((userPoolTokens == null) ? null : NativeUserPoolTokens.fromMap((Map)userPoolTokens));
      Object identityId = map.get("identityId");
      pigeonResult.setIdentityId((String)identityId);
      Object awsCredentials = map.get("awsCredentials");
      pigeonResult.setAwsCredentials((awsCredentials == null) ? null : NativeAWSCredentials.fromMap((Map)awsCredentials));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NativeAuthUser {
    private @NonNull String userId;
    public @NonNull String getUserId() { return userId; }
    public void setUserId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userId\" is null.");
      }
      this.userId = setterArg;
    }

    private @NonNull String username;
    public @NonNull String getUsername() { return username; }
    public void setUsername(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"username\" is null.");
      }
      this.username = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeAuthUser() {}
    public static final class Builder {
      private @Nullable String userId;
      public @NonNull Builder setUserId(@NonNull String setterArg) {
        this.userId = setterArg;
        return this;
      }
      private @Nullable String username;
      public @NonNull Builder setUsername(@NonNull String setterArg) {
        this.username = setterArg;
        return this;
      }
      public @NonNull NativeAuthUser build() {
        NativeAuthUser pigeonReturn = new NativeAuthUser();
        pigeonReturn.setUserId(userId);
        pigeonReturn.setUsername(username);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("userId", userId);
      toMapResult.put("username", username);
      return toMapResult;
    }
    static @NonNull NativeAuthUser fromMap(@NonNull Map<String, Object> map) {
      NativeAuthUser pigeonResult = new NativeAuthUser();
      Object userId = map.get("userId");
      pigeonResult.setUserId((String)userId);
      Object username = map.get("username");
      pigeonResult.setUsername((String)username);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NativeUserPoolTokens {
    private @NonNull String accessToken;
    public @NonNull String getAccessToken() { return accessToken; }
    public void setAccessToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessToken\" is null.");
      }
      this.accessToken = setterArg;
    }

    private @NonNull String refreshToken;
    public @NonNull String getRefreshToken() { return refreshToken; }
    public void setRefreshToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"refreshToken\" is null.");
      }
      this.refreshToken = setterArg;
    }

    private @NonNull String idToken;
    public @NonNull String getIdToken() { return idToken; }
    public void setIdToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"idToken\" is null.");
      }
      this.idToken = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeUserPoolTokens() {}
    public static final class Builder {
      private @Nullable String accessToken;
      public @NonNull Builder setAccessToken(@NonNull String setterArg) {
        this.accessToken = setterArg;
        return this;
      }
      private @Nullable String refreshToken;
      public @NonNull Builder setRefreshToken(@NonNull String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }
      private @Nullable String idToken;
      public @NonNull Builder setIdToken(@NonNull String setterArg) {
        this.idToken = setterArg;
        return this;
      }
      public @NonNull NativeUserPoolTokens build() {
        NativeUserPoolTokens pigeonReturn = new NativeUserPoolTokens();
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setIdToken(idToken);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("accessToken", accessToken);
      toMapResult.put("refreshToken", refreshToken);
      toMapResult.put("idToken", idToken);
      return toMapResult;
    }
    static @NonNull NativeUserPoolTokens fromMap(@NonNull Map<String, Object> map) {
      NativeUserPoolTokens pigeonResult = new NativeUserPoolTokens();
      Object accessToken = map.get("accessToken");
      pigeonResult.setAccessToken((String)accessToken);
      Object refreshToken = map.get("refreshToken");
      pigeonResult.setRefreshToken((String)refreshToken);
      Object idToken = map.get("idToken");
      pigeonResult.setIdToken((String)idToken);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class NativeAWSCredentials {
    private @NonNull String accessKeyId;
    public @NonNull String getAccessKeyId() { return accessKeyId; }
    public void setAccessKeyId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessKeyId\" is null.");
      }
      this.accessKeyId = setterArg;
    }

    private @NonNull String secretAccessKey;
    public @NonNull String getSecretAccessKey() { return secretAccessKey; }
    public void setSecretAccessKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"secretAccessKey\" is null.");
      }
      this.secretAccessKey = setterArg;
    }

    private @Nullable String sessionToken;
    public @Nullable String getSessionToken() { return sessionToken; }
    public void setSessionToken(@Nullable String setterArg) {
      this.sessionToken = setterArg;
    }

    private @Nullable String expirationIso8601Utc;
    public @Nullable String getExpirationIso8601Utc() { return expirationIso8601Utc; }
    public void setExpirationIso8601Utc(@Nullable String setterArg) {
      this.expirationIso8601Utc = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private NativeAWSCredentials() {}
    public static final class Builder {
      private @Nullable String accessKeyId;
      public @NonNull Builder setAccessKeyId(@NonNull String setterArg) {
        this.accessKeyId = setterArg;
        return this;
      }
      private @Nullable String secretAccessKey;
      public @NonNull Builder setSecretAccessKey(@NonNull String setterArg) {
        this.secretAccessKey = setterArg;
        return this;
      }
      private @Nullable String sessionToken;
      public @NonNull Builder setSessionToken(@Nullable String setterArg) {
        this.sessionToken = setterArg;
        return this;
      }
      private @Nullable String expirationIso8601Utc;
      public @NonNull Builder setExpirationIso8601Utc(@Nullable String setterArg) {
        this.expirationIso8601Utc = setterArg;
        return this;
      }
      public @NonNull NativeAWSCredentials build() {
        NativeAWSCredentials pigeonReturn = new NativeAWSCredentials();
        pigeonReturn.setAccessKeyId(accessKeyId);
        pigeonReturn.setSecretAccessKey(secretAccessKey);
        pigeonReturn.setSessionToken(sessionToken);
        pigeonReturn.setExpirationIso8601Utc(expirationIso8601Utc);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("accessKeyId", accessKeyId);
      toMapResult.put("secretAccessKey", secretAccessKey);
      toMapResult.put("sessionToken", sessionToken);
      toMapResult.put("expirationIso8601Utc", expirationIso8601Utc);
      return toMapResult;
    }
    static @NonNull NativeAWSCredentials fromMap(@NonNull Map<String, Object> map) {
      NativeAWSCredentials pigeonResult = new NativeAWSCredentials();
      Object accessKeyId = map.get("accessKeyId");
      pigeonResult.setAccessKeyId((String)accessKeyId);
      Object secretAccessKey = map.get("secretAccessKey");
      pigeonResult.setSecretAccessKey((String)secretAccessKey);
      Object sessionToken = map.get("sessionToken");
      pigeonResult.setSessionToken((String)sessionToken);
      Object expirationIso8601Utc = map.get("expirationIso8601Utc");
      pigeonResult.setExpirationIso8601Utc((String)expirationIso8601Utc);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LegacyCredentialStoreData {
    private @Nullable String identityId;
    public @Nullable String getIdentityId() { return identityId; }
    public void setIdentityId(@Nullable String setterArg) {
      this.identityId = setterArg;
    }

    private @Nullable String accessKeyId;
    public @Nullable String getAccessKeyId() { return accessKeyId; }
    public void setAccessKeyId(@Nullable String setterArg) {
      this.accessKeyId = setterArg;
    }

    private @Nullable String secretAccessKey;
    public @Nullable String getSecretAccessKey() { return secretAccessKey; }
    public void setSecretAccessKey(@Nullable String setterArg) {
      this.secretAccessKey = setterArg;
    }

    private @Nullable String sessionToken;
    public @Nullable String getSessionToken() { return sessionToken; }
    public void setSessionToken(@Nullable String setterArg) {
      this.sessionToken = setterArg;
    }

    private @Nullable Long expirationMsSinceEpoch;
    public @Nullable Long getExpirationMsSinceEpoch() { return expirationMsSinceEpoch; }
    public void setExpirationMsSinceEpoch(@Nullable Long setterArg) {
      this.expirationMsSinceEpoch = setterArg;
    }

    private @Nullable String accessToken;
    public @Nullable String getAccessToken() { return accessToken; }
    public void setAccessToken(@Nullable String setterArg) {
      this.accessToken = setterArg;
    }

    private @Nullable String refreshToken;
    public @Nullable String getRefreshToken() { return refreshToken; }
    public void setRefreshToken(@Nullable String setterArg) {
      this.refreshToken = setterArg;
    }

    private @Nullable String idToken;
    public @Nullable String getIdToken() { return idToken; }
    public void setIdToken(@Nullable String setterArg) {
      this.idToken = setterArg;
    }

    public static final class Builder {
      private @Nullable String identityId;
      public @NonNull Builder setIdentityId(@Nullable String setterArg) {
        this.identityId = setterArg;
        return this;
      }
      private @Nullable String accessKeyId;
      public @NonNull Builder setAccessKeyId(@Nullable String setterArg) {
        this.accessKeyId = setterArg;
        return this;
      }
      private @Nullable String secretAccessKey;
      public @NonNull Builder setSecretAccessKey(@Nullable String setterArg) {
        this.secretAccessKey = setterArg;
        return this;
      }
      private @Nullable String sessionToken;
      public @NonNull Builder setSessionToken(@Nullable String setterArg) {
        this.sessionToken = setterArg;
        return this;
      }
      private @Nullable Long expirationMsSinceEpoch;
      public @NonNull Builder setExpirationMsSinceEpoch(@Nullable Long setterArg) {
        this.expirationMsSinceEpoch = setterArg;
        return this;
      }
      private @Nullable String accessToken;
      public @NonNull Builder setAccessToken(@Nullable String setterArg) {
        this.accessToken = setterArg;
        return this;
      }
      private @Nullable String refreshToken;
      public @NonNull Builder setRefreshToken(@Nullable String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }
      private @Nullable String idToken;
      public @NonNull Builder setIdToken(@Nullable String setterArg) {
        this.idToken = setterArg;
        return this;
      }
      public @NonNull LegacyCredentialStoreData build() {
        LegacyCredentialStoreData pigeonReturn = new LegacyCredentialStoreData();
        pigeonReturn.setIdentityId(identityId);
        pigeonReturn.setAccessKeyId(accessKeyId);
        pigeonReturn.setSecretAccessKey(secretAccessKey);
        pigeonReturn.setSessionToken(sessionToken);
        pigeonReturn.setExpirationMsSinceEpoch(expirationMsSinceEpoch);
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setIdToken(idToken);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("identityId", identityId);
      toMapResult.put("accessKeyId", accessKeyId);
      toMapResult.put("secretAccessKey", secretAccessKey);
      toMapResult.put("sessionToken", sessionToken);
      toMapResult.put("expirationMsSinceEpoch", expirationMsSinceEpoch);
      toMapResult.put("accessToken", accessToken);
      toMapResult.put("refreshToken", refreshToken);
      toMapResult.put("idToken", idToken);
      return toMapResult;
    }
    static @NonNull LegacyCredentialStoreData fromMap(@NonNull Map<String, Object> map) {
      LegacyCredentialStoreData pigeonResult = new LegacyCredentialStoreData();
      Object identityId = map.get("identityId");
      pigeonResult.setIdentityId((String)identityId);
      Object accessKeyId = map.get("accessKeyId");
      pigeonResult.setAccessKeyId((String)accessKeyId);
      Object secretAccessKey = map.get("secretAccessKey");
      pigeonResult.setSecretAccessKey((String)secretAccessKey);
      Object sessionToken = map.get("sessionToken");
      pigeonResult.setSessionToken((String)sessionToken);
      Object expirationMsSinceEpoch = map.get("expirationMsSinceEpoch");
      pigeonResult.setExpirationMsSinceEpoch((expirationMsSinceEpoch == null) ? null : ((expirationMsSinceEpoch instanceof Integer) ? (Integer)expirationMsSinceEpoch : (Long)expirationMsSinceEpoch));
      Object accessToken = map.get("accessToken");
      pigeonResult.setAccessToken((String)accessToken);
      Object refreshToken = map.get("refreshToken");
      pigeonResult.setRefreshToken((String)refreshToken);
      Object idToken = map.get("idToken");
      pigeonResult.setIdToken((String)idToken);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class NativeAuthPluginCodec extends StandardMessageCodec {
    public static final NativeAuthPluginCodec INSTANCE = new NativeAuthPluginCodec();
    private NativeAuthPluginCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return NativeAWSCredentials.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NativeAuthSession.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return NativeUserPoolTokens.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof NativeAWSCredentials) {
        stream.write(128);
        writeValue(stream, ((NativeAWSCredentials) value).toMap());
      } else 
      if (value instanceof NativeAuthSession) {
        stream.write(129);
        writeValue(stream, ((NativeAuthSession) value).toMap());
      } else 
      if (value instanceof NativeUserPoolTokens) {
        stream.write(130);
        writeValue(stream, ((NativeUserPoolTokens) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class NativeAuthPlugin {
    private final BinaryMessenger binaryMessenger;
    public NativeAuthPlugin(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return NativeAuthPluginCodec.INSTANCE;
    }

    public void exchange(@NonNull Map<String, String> paramsArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthPlugin.exchange", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(paramsArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void fetchAuthSession(Reply<NativeAuthSession> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthPlugin.fetchAuthSession", getCodec());
      channel.send(null, channelReply -> {
        @SuppressWarnings("ConstantConditions")
        NativeAuthSession output = (NativeAuthSession)channelReply;
        callback.reply(output);
      });
    }
  }
  private static class NativeAuthBridgeCodec extends StandardMessageCodec {
    public static final NativeAuthBridgeCodec INSTANCE = new NativeAuthBridgeCodec();
    private NativeAuthBridgeCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return LegacyCredentialStoreData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return NativeAuthUser.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof LegacyCredentialStoreData) {
        stream.write(128);
        writeValue(stream, ((LegacyCredentialStoreData) value).toMap());
      } else 
      if (value instanceof NativeAuthUser) {
        stream.write(129);
        writeValue(stream, ((NativeAuthUser) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NativeAuthBridge {
    void addPlugin(Result<Void> result);
    void signInWithUrl(@NonNull String url, @NonNull String callbackUrlScheme, @NonNull Boolean preferPrivateSession, @Nullable String browserPackageName, Result<Map<String, String>> result);
    void signOutWithUrl(@NonNull String url, @NonNull String callbackUrlScheme, @NonNull Boolean preferPrivateSession, @Nullable String browserPackageName, Result<Void> result);
    @NonNull Map<String, String> getValidationData();
    @NonNull String getBundleId();
    void updateCurrentUser(@Nullable NativeAuthUser user);
    void getLegacyCredentials(@Nullable String identityPoolId, @Nullable String appClientId, Result<LegacyCredentialStoreData> result);
    void clearLegacyCredentials(Result<Void> result);

    /** The codec used by NativeAuthBridge. */
    static MessageCodec<Object> getCodec() {
      return NativeAuthBridgeCodec.INSTANCE;
    }

    /** Sets up an instance of `NativeAuthBridge` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NativeAuthBridge api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.addPlugin", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.addPlugin(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.signInWithUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String urlArg = (String)args.get(0);
              if (urlArg == null) {
                throw new NullPointerException("urlArg unexpectedly null.");
              }
              String callbackUrlSchemeArg = (String)args.get(1);
              if (callbackUrlSchemeArg == null) {
                throw new NullPointerException("callbackUrlSchemeArg unexpectedly null.");
              }
              Boolean preferPrivateSessionArg = (Boolean)args.get(2);
              if (preferPrivateSessionArg == null) {
                throw new NullPointerException("preferPrivateSessionArg unexpectedly null.");
              }
              String browserPackageNameArg = (String)args.get(3);
              Result<Map<String, String>> resultCallback = new Result<Map<String, String>>() {
                public void success(Map<String, String> result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signInWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.signOutWithUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String urlArg = (String)args.get(0);
              if (urlArg == null) {
                throw new NullPointerException("urlArg unexpectedly null.");
              }
              String callbackUrlSchemeArg = (String)args.get(1);
              if (callbackUrlSchemeArg == null) {
                throw new NullPointerException("callbackUrlSchemeArg unexpectedly null.");
              }
              Boolean preferPrivateSessionArg = (Boolean)args.get(2);
              if (preferPrivateSessionArg == null) {
                throw new NullPointerException("preferPrivateSessionArg unexpectedly null.");
              }
              String browserPackageNameArg = (String)args.get(3);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signOutWithUrl(urlArg, callbackUrlSchemeArg, preferPrivateSessionArg, browserPackageNameArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getValidationData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<String, String> output = api.getValidationData();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getBundleId", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.getBundleId();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.updateCurrentUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              NativeAuthUser userArg = (NativeAuthUser)args.get(0);
              api.updateCurrentUser(userArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.getLegacyCredentials", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String identityPoolIdArg = (String)args.get(0);
              String appClientIdArg = (String)args.get(1);
              Result<LegacyCredentialStoreData> resultCallback = new Result<LegacyCredentialStoreData>() {
                public void success(LegacyCredentialStoreData result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getLegacyCredentials(identityPoolIdArg, appClientIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativeAuthBridge.clearLegacyCredentials", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.clearLegacyCredentials(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
