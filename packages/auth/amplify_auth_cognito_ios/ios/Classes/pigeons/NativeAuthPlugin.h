// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v7.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class NativeAuthSession;
@class NativeAuthUser;
@class NativeUserPoolTokens;
@class NativeAWSCredentials;
@class LegacyCredentialStoreData;

@interface NativeAuthSession : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIsSignedIn:(NSNumber *)isSignedIn
    userSub:(nullable NSString *)userSub
    userPoolTokens:(nullable NativeUserPoolTokens *)userPoolTokens
    identityId:(nullable NSString *)identityId
    awsCredentials:(nullable NativeAWSCredentials *)awsCredentials;
@property(nonatomic, strong) NSNumber * isSignedIn;
@property(nonatomic, copy, nullable) NSString * userSub;
@property(nonatomic, strong, nullable) NativeUserPoolTokens * userPoolTokens;
@property(nonatomic, copy, nullable) NSString * identityId;
@property(nonatomic, strong, nullable) NativeAWSCredentials * awsCredentials;
@end

@interface NativeAuthUser : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithUserId:(NSString *)userId
    username:(NSString *)username;
@property(nonatomic, copy) NSString * userId;
@property(nonatomic, copy) NSString * username;
@end

@interface NativeUserPoolTokens : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAccessToken:(NSString *)accessToken
    refreshToken:(NSString *)refreshToken
    idToken:(NSString *)idToken;
@property(nonatomic, copy) NSString * accessToken;
@property(nonatomic, copy) NSString * refreshToken;
@property(nonatomic, copy) NSString * idToken;
@end

@interface NativeAWSCredentials : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithAccessKeyId:(NSString *)accessKeyId
    secretAccessKey:(NSString *)secretAccessKey
    sessionToken:(nullable NSString *)sessionToken
    expirationIso8601Utc:(nullable NSString *)expirationIso8601Utc;
@property(nonatomic, copy) NSString * accessKeyId;
@property(nonatomic, copy) NSString * secretAccessKey;
@property(nonatomic, copy, nullable) NSString * sessionToken;
@property(nonatomic, copy, nullable) NSString * expirationIso8601Utc;
@end

@interface LegacyCredentialStoreData : NSObject
+ (instancetype)makeWithIdentityId:(nullable NSString *)identityId
    accessKeyId:(nullable NSString *)accessKeyId
    secretAccessKey:(nullable NSString *)secretAccessKey
    sessionToken:(nullable NSString *)sessionToken
    expirationMsSinceEpoch:(nullable NSNumber *)expirationMsSinceEpoch
    accessToken:(nullable NSString *)accessToken
    refreshToken:(nullable NSString *)refreshToken
    idToken:(nullable NSString *)idToken;
@property(nonatomic, copy, nullable) NSString * identityId;
@property(nonatomic, copy, nullable) NSString * accessKeyId;
@property(nonatomic, copy, nullable) NSString * secretAccessKey;
@property(nonatomic, copy, nullable) NSString * sessionToken;
@property(nonatomic, strong, nullable) NSNumber * expirationMsSinceEpoch;
@property(nonatomic, copy, nullable) NSString * accessToken;
@property(nonatomic, copy, nullable) NSString * refreshToken;
@property(nonatomic, copy, nullable) NSString * idToken;
@end

/// The codec used by NativeAuthPlugin.
NSObject<FlutterMessageCodec> *NativeAuthPluginGetCodec(void);

@interface NativeAuthPlugin : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
/// Exchanges the route parameters used to launch the app, i.e. if the app
/// was closed and a redirect happened to the custom URI scheme (iOS) or an
/// intent was launched with the redirect parameters (Android).
- (void)exchangeParams:(NSDictionary<NSString *, NSString *> *)params completion:(void (^)(NSError *_Nullable))completion;
- (void)fetchAuthSessionWithCompletion:(void (^)(NativeAuthSession *_Nullable, NSError *_Nullable))completion;
@end

/// The codec used by NativeAuthBridge.
NSObject<FlutterMessageCodec> *NativeAuthBridgeGetCodec(void);

@protocol NativeAuthBridge
/// Adds the native platform/plugin.
///
/// On iOS/Android, this calls `Amplify.addPlugin` with the [NativeAuthPlugin]
/// implementation.
- (void)addPluginWithCompletion:(void (^)(FlutterError *_Nullable))completion;
/// Sign in by presenting [url] and waiting for a response to a URL with
/// [callbackUrlScheme].
///
/// If [preferPrivateSession] is `true`, do not persist session cookies.
- (void)signInWithUrlUrl:(NSString *)url callbackUrlScheme:(NSString *)callbackUrlScheme preferPrivateSession:(NSNumber *)preferPrivateSession browserPackageName:(nullable NSString *)browserPackageName completion:(void (^)(NSDictionary<NSString *, NSString *> *_Nullable, FlutterError *_Nullable))completion;
/// Sign out by presenting [url] and waiting for a response to a URL with
/// [callbackUrlScheme].
- (void)signOutWithUrlUrl:(NSString *)url callbackUrlScheme:(NSString *)callbackUrlScheme preferPrivateSession:(NSNumber *)preferPrivateSession browserPackageName:(nullable NSString *)browserPackageName completion:(void (^)(FlutterError *_Nullable))completion;
/// Retrieves the validation data for the current iOS/Android device.
///
/// @return `nil` only when `error != nil`.
- (nullable NSDictionary<NSString *, NSString *> *)getValidationDataWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSString *)getBundleIdWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Updates the native cache of the current user.
- (void)updateCurrentUserUser:(nullable NativeAuthUser *)user error:(FlutterError *_Nullable *_Nonnull)error;
/// Fetch legacy credentials stored by native SDKs.
- (void)getLegacyCredentialsIdentityPoolId:(nullable NSString *)identityPoolId appClientId:(nullable NSString *)appClientId completion:(void (^)(LegacyCredentialStoreData *_Nullable, FlutterError *_Nullable))completion;
/// Clears the legacy credential store data.
- (void)clearLegacyCredentialsWithCompletion:(void (^)(FlutterError *_Nullable))completion;
@end

extern void NativeAuthBridgeSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativeAuthBridge> *_Nullable api);

NS_ASSUME_NONNULL_END
