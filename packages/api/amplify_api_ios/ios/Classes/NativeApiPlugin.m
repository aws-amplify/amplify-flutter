// 
// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// A copy of the License is located at
// 
//  http://aws.amazon.com/apache2.0
// 
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//  
// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "NativeApiPlugin.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}



@interface NativeApiPluginCodecReader : FlutterStandardReader
@end
@implementation NativeApiPluginCodecReader
@end

@interface NativeApiPluginCodecWriter : FlutterStandardWriter
@end
@implementation NativeApiPluginCodecWriter
@end

@interface NativeApiPluginCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativeApiPluginCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NativeApiPluginCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NativeApiPluginCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NativeApiPluginGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    NativeApiPluginCodecReaderWriter *readerWriter = [[NativeApiPluginCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface NativeApiPlugin ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation NativeApiPlugin

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)getLatestAuthTokenProviderName:(NSString *)arg_providerName completion:(void(^)(NSString *_Nullable, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.NativeApiPlugin.getLatestAuthToken"
      binaryMessenger:self.binaryMessenger
      codec:NativeApiPluginGetCodec()];
  [channel sendMessage:@[arg_providerName ?: [NSNull null]] reply:^(id reply) {
    NSString *output = reply;
    completion(output, nil);
  }];
}
@end
@interface NativeApiBridgeCodecReader : FlutterStandardReader
@end
@implementation NativeApiBridgeCodecReader
@end

@interface NativeApiBridgeCodecWriter : FlutterStandardWriter
@end
@implementation NativeApiBridgeCodecWriter
@end

@interface NativeApiBridgeCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativeApiBridgeCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NativeApiBridgeCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NativeApiBridgeCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NativeApiBridgeGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    NativeApiBridgeCodecReaderWriter *readerWriter = [[NativeApiBridgeCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void NativeApiBridgeSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativeApiBridge> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativeApiBridge.addPlugin"
        binaryMessenger:binaryMessenger
        codec:NativeApiBridgeGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addPluginAuthProvidersList:completion:)], @"NativeApiBridge api (%@) doesn't respond to @selector(addPluginAuthProvidersList:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_authProvidersList = GetNullableObjectAtIndex(args, 0);
        [api addPluginAuthProvidersList:arg_authProvidersList completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
