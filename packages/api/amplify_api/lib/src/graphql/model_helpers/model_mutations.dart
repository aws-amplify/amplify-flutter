// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import 'package:amplify_api/src/graphql/factories/model_mutations_factory.dart';
import 'package:amplify_core/amplify_core.dart';

/// Static helpers to generate mutation `GraphQLRequest` instances from models generated by Amplify codegen.

class ModelMutations {
  ModelMutations._(); // only static methods here, prevent calling constructor

  /// Generates a request to create a model.
  ///
  /// ```dart
  /// final todo = Todo(name: 'my first todo', description: 'todo description');
  /// final request = ModelMutations.create(todo);
  /// ```
  static GraphQLRequest<T> create<T extends Model>(
    T model, {
    String? apiName,
    APIAuthorizationType? authorizationMode,
    Map<String, String>? headers,
  }) {
    return ModelMutationsFactory.instance.create<T>(
      model,
      apiName: apiName,
      authorizationMode: authorizationMode,
      headers: headers,
    );
  }

  /// Generates a request to delete a model.
  ///
  ///
  /// ```dart
  /// final request = ModelMutations.delete(someTodoIDontWant);
  /// ```
  ///
  /// An optional `where` parameter can be supplied as a condition for the deletion to be evaluated on the server.
  static GraphQLRequest<T> delete<T extends Model>(
    T model, {
    QueryPredicate? where,
    String? apiName,
    Map<String, String>? headers,
    APIAuthorizationType? authorizationMode,
  }) {
    return ModelMutationsFactory.instance.delete<T>(
      model,
      where: where,
      apiName: apiName,
      authorizationMode: authorizationMode,
      headers: headers,
    );
  }

  /// Generates a request to delete a model by ID.
  ///
  /// ```dart
  /// final request = ModelMutations.deleteById(Todo.classType, 'some-todo-id-123');
  /// ```
  ///
  /// An optional `where` parameter can be supplied as a condition for the deletion to be evaluated on the server.
  static GraphQLRequest<T> deleteById<T extends Model>(
    ModelType<T> modelType,
    String id, {
    QueryPredicate? where,
    String? apiName,
    APIAuthorizationType? authorizationMode,
    Map<String, String>? headers,
  }) {
    return ModelMutationsFactory.instance.deleteById<T>(
      modelType,
      id,
      where: where,
      apiName: apiName,
      authorizationMode: authorizationMode,
      headers: headers,
    );
  }

  /// Generates a request to update a model instance.
  ///
  /// ```dart
  /// final todoWithNewName = someTodo.copyWith(name: 'new name');
  /// final request = ModelMutations.update(todoWithNewName);
  /// ```
  ///
  /// An optional `where` parameter can be supplied as a condition for the update to be evaluated on the server.
  static GraphQLRequest<T> update<T extends Model>(
    T model, {
    QueryPredicate? where,
    String? apiName,
    APIAuthorizationType? authorizationMode,
    Map<String, String>? headers,
  }) {
    return ModelMutationsFactory.instance.update<T>(
      model,
      where: where,
      apiName: apiName,
      authorizationMode: authorizationMode,
      headers: headers,
    );
  }
}
