opt_out_usage

before_all do
  # Perform a fetch before inferring the next version
  # to reduce race conditions with simultaneous pipelines attempting to create the same tag
  sh('git', 'fetch', '--tags')
  sh('git', 'fetch')
end

desc 'Create a pre-release version by pushing a tag to GitHub, and publishing plugins to Pub.dev'
lane :unstable do
  next_version = calculate_next_canary_version(prerelease_identifier: 'dev')
  UI.message("Releasing unstable version: #{next_version}")

  # Increment all pubspecs
  increment_versions(version: next_version)

  # Use the commits to build a change log since last release
  _, commits = calculate_next_release_version
  changelog = build_changelog(version: next_version, commits: commits)
  write_plugin_changelogs(changelog: changelog)

  prerelease_commit(version: next_version)

  # Create tag and push to origin
  add_tag(version: next_version)

  # Publish to Pub.dev
  publish_plugins
end

desc 'Create a release version by committing a changelog, pushing a tag to GitHub, and publishing plugins to Pub.dev'
lane :stable do
  next_version, commits = calculate_next_release_version
  UI.message("Releasing version: #{next_version}")

  # Increment all specs and plists
  increment_versions(version: next_version)

  changelog = build_changelog(version: next_version, commits: commits)
  write_plugin_changelogs(changelog: changelog)

  # Commit and push
  release_commit(version: next_version)

  # Create tag and push to origin
  add_tag(version: next_version)

  # Publish plugins
  publish_plugins

  post_release(version: next_version, changelog: changelog)
end

desc 'Increment versions'
private_lane :increment_versions do |options|
  version = options[:version].to_s
  puts version
  Dir.chdir('..') do
    Dir.foreach("./packages/") do |plugin|
      next if plugin == '.' or plugin == '..'

      plugin_path = File.join('packages', plugin)
      pubspec = File.expand_path('pubspec.yaml', plugin_path)
      UI.message("Incrementing version for #{pubspec}")
      set_key_value(file: pubspec, key: 'version', value: version)
    end
  end
end

desc 'Write changelog for each plugin package'
private_lane :write_plugin_changelogs do |options|
  changelog = options[:changelog]
  write_changelog(changelog: changelog, path: 'CHANGELOG.md')
  Dir.chdir('..') do
    Dir.foreach("./packages/") do |plugin|
      next if plugin == '.' or plugin == '..'
      FileUtils.cp('CHANGELOG.md', File.join('packages', plugin))
    end
  end
end

desc 'Commit and push updated pre-release version'
private_lane :prerelease_commit do |options|
  next_version = options[:version]

  sh('git', 'config', 'user.email', ENV['GITHUB_EMAIL'])
  sh('git', 'config', 'user.name', ENV['GITHUB_USER'])

  commit_message = "chore: pre-release #{next_version} [skip ci]"
  sh('git', 'commit', '-am', commit_message)

  # push to origin
  sh('git', 'push', 'origin', 'master')
end

desc 'Commit and push updated release version'
private_lane :release_commit do |options|
  next_version = options[:version]

  sh('git', 'config', 'user.email', ENV['GITHUB_EMAIL'])
  sh('git', 'config', 'user.name', ENV['GITHUB_USER'])

  commit_message = "chore: release #{next_version} [skip ci]"
  sh('git', 'commit', '-am', commit_message)

  sh('git', 'config', '--unset', 'user.email')
  sh('git', 'config', '--unset', 'user.name')

  # push to origin
  # sh('git', 'push', 'origin', 'release')
end

desc 'Tag in git and push to GitHub'
private_lane :add_tag do |options|
  next_version = options[:version]
  next_tag = "v#{next_version}"

  add_git_tag(tag: next_tag)
  # push_git_tags(tag: next_tag)
end

desc 'Publish plugins'
private_lane :publish_plugins do
  Dir.chdir('..') do
    Dir.foreach("./packages/") do |plugin|
      next if plugin == '.' or plugin == '..'

      Dir.chdir(File.join('packages', plugin)) do
        sh('flutter', 'pub', 'publish', '--dry-run')
        # sh('flutter', 'pub', 'publish', '--force')
      end
    end
  end
end

desc 'Post-release'
private_lane :post_release do |options|
  version = options[:version].to_s
  tag = "v#{version}"

  add_git_tag(tag: tag, force: true)
  push_git_tags(tag: tag, force: true)

  # push to origin
  sh('git', 'push', 'origin', 'release')
  sh('git', 'push', 'origin', 'release:master')
end

def with_retry(retries = 5, wait = 10)
  yield
rescue e
  retries -= 1
  raise e if retries.zero?
  UI.error("Error occurred: #{exception}; retrying...")
  sleep(wait)
  retry
end
